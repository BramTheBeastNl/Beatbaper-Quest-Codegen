// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.BipedReferences/RootMotion.AutoDetectParams
#include "RootMotion/BipedReferences_AutoDetectParams.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BipedReferences.get_isFilled
bool RootMotion::BipedReferences::get_isFilled() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::get_isFilled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFilled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BipedReferences.get_isEmpty
bool RootMotion::BipedReferences::get_isEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::get_isEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.BipedReferences.IsEmpty
bool RootMotion::BipedReferences::IsEmpty(bool includeRoot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::IsEmpty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeRoot)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, includeRoot);
}
// Autogenerated method: RootMotion.BipedReferences.Contains
bool RootMotion::BipedReferences::Contains(UnityEngine::Transform* t, bool ignoreRoot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::Contains");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(ignoreRoot)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t, ignoreRoot);
}
// Autogenerated method: RootMotion.BipedReferences.AutoDetectReferences
bool RootMotion::BipedReferences::AutoDetectReferences(RootMotion::BipedReferences*& references, UnityEngine::Transform* root, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(autoDetectParams)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, root, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.DetectReferencesByNaming
void RootMotion::BipedReferences::DetectReferencesByNaming(RootMotion::BipedReferences*& references, UnityEngine::Transform* root, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::DetectReferencesByNaming");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "DetectReferencesByNaming", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(autoDetectParams)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, root, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.AssignHumanoidReferences
void RootMotion::BipedReferences::AssignHumanoidReferences(RootMotion::BipedReferences*& references, UnityEngine::Animator* animator, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AssignHumanoidReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AssignHumanoidReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(animator), ::il2cpp_utils::ExtractType(autoDetectParams)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, animator, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.SetupError
bool RootMotion::BipedReferences::SetupError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::SetupError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SetupError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, errorMessage);
}
// Autogenerated method: RootMotion.BipedReferences.SetupWarning
bool RootMotion::BipedReferences::SetupWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::SetupWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SetupWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.IsNeckBone
bool RootMotion::BipedReferences::IsNeckBone(UnityEngine::Transform* bone, UnityEngine::Transform* leftUpperArm) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::IsNeckBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "IsNeckBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(leftUpperArm)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone, leftUpperArm);
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToEyes
bool RootMotion::BipedReferences::AddBoneToEyes(UnityEngine::Transform* bone, RootMotion::BipedReferences*& references, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AddBoneToEyes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AddBoneToEyes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(autoDetectParams)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone, references, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToSpine
bool RootMotion::BipedReferences::AddBoneToSpine(UnityEngine::Transform* bone, RootMotion::BipedReferences*& references, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AddBoneToSpine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AddBoneToSpine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(autoDetectParams)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone, references, autoDetectParams);
}
// Autogenerated method: RootMotion.BipedReferences.DetectLimb
void RootMotion::BipedReferences::DetectLimb(RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, UnityEngine::Transform*& firstBone, UnityEngine::Transform*& secondBone, UnityEngine::Transform*& lastBone, ::Array<UnityEngine::Transform*>* transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::DetectLimb");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "DetectLimb", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneType), ::il2cpp_utils::ExtractType(boneSide), ::il2cpp_utils::ExtractType(firstBone), ::il2cpp_utils::ExtractType(secondBone), ::il2cpp_utils::ExtractType(lastBone), ::il2cpp_utils::ExtractType(transforms)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boneType, boneSide, firstBone, secondBone, lastBone, transforms);
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToHierarchy
void RootMotion::BipedReferences::AddBoneToHierarchy(::Array<UnityEngine::Transform*>*& bones, UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AddBoneToHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "AddBoneToHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, transform);
}
// Autogenerated method: RootMotion.BipedReferences.LimbError
bool RootMotion::BipedReferences::LimbError(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, ::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::LimbError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "LimbError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone1, bone2, bone3, errorMessage);
}
// Autogenerated method: RootMotion.BipedReferences.LimbWarning
bool RootMotion::BipedReferences::LimbWarning(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::LimbWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "LimbWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone1, bone2, bone3, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.SpineError
bool RootMotion::BipedReferences::SpineError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::SpineError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SpineError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, errorMessage);
}
// Autogenerated method: RootMotion.BipedReferences.SpineWarning
bool RootMotion::BipedReferences::SpineWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::SpineWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "SpineWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.EyesError
bool RootMotion::BipedReferences::EyesError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::EyesError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "EyesError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, errorMessage);
}
// Autogenerated method: RootMotion.BipedReferences.EyesWarning
bool RootMotion::BipedReferences::EyesWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::EyesWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "EyesWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.RootHeightWarning
bool RootMotion::BipedReferences::RootHeightWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::RootHeightWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "RootHeightWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.FacingAxisWarning
bool RootMotion::BipedReferences::FacingAxisWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::FacingAxisWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "FacingAxisWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references, warningMessage);
}
// Autogenerated method: RootMotion.BipedReferences.GetVerticalOffset
float RootMotion::BipedReferences::GetVerticalOffset(UnityEngine::Vector3 p1, UnityEngine::Vector3 p2, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::GetVerticalOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences", "GetVerticalOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, p1, p2, rotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.BipedReferences/RootMotion.AutoDetectParams
#include "RootMotion/BipedReferences_AutoDetectParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BipedReferences/RootMotion.AutoDetectParams.get_Default
RootMotion::BipedReferences::AutoDetectParams RootMotion::BipedReferences::AutoDetectParams::get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::BipedReferences::AutoDetectParams::get_Default");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "BipedReferences/AutoDetectParams", "get_Default", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::BipedReferences::AutoDetectParams, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Comments
#include "RootMotion/Comments.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.DemoGUIMessage
#include "RootMotion/DemoGUIMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.DemoGUIMessage.OnGUI
void RootMotion::DemoGUIMessage::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::DemoGUIMessage::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Hierarchy
#include "RootMotion/Hierarchy.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Hierarchy.HierarchyIsValid
bool RootMotion::Hierarchy::HierarchyIsValid(::Array<UnityEngine::Transform*>* bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::HierarchyIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "HierarchyIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.Hierarchy.ContainsDuplicate
UnityEngine::Object* RootMotion::Hierarchy::ContainsDuplicate(::Array<UnityEngine::Object*>* objects) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::ContainsDuplicate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "ContainsDuplicate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objects)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, objects);
}
// Autogenerated method: RootMotion.Hierarchy.IsAncestor
bool RootMotion::Hierarchy::IsAncestor(UnityEngine::Transform* transform, UnityEngine::Transform* ancestor) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::IsAncestor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "IsAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(ancestor)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, ancestor);
}
// Autogenerated method: RootMotion.Hierarchy.ContainsChild
bool RootMotion::Hierarchy::ContainsChild(UnityEngine::Transform* transform, UnityEngine::Transform* child) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::ContainsChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "ContainsChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(child)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, child);
}
// Autogenerated method: RootMotion.Hierarchy.AddAncestors
void RootMotion::Hierarchy::AddAncestors(UnityEngine::Transform* transform, UnityEngine::Transform* blocker, ::Array<UnityEngine::Transform*>*& array) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::AddAncestors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "AddAncestors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(blocker), ::il2cpp_utils::ExtractType(array)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, blocker, array);
}
// Autogenerated method: RootMotion.Hierarchy.GetAncestor
UnityEngine::Transform* RootMotion::Hierarchy::GetAncestor(UnityEngine::Transform* transform, int minChildCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::GetAncestor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(minChildCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, minChildCount);
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestor
UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestor(UnityEngine::Transform* t1, UnityEngine::Transform* t2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::GetFirstCommonAncestor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetFirstCommonAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t1), ::il2cpp_utils::ExtractType(t2)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t1, t2);
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestor
UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestor(::Array<UnityEngine::Transform*>* transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::GetFirstCommonAncestor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetFirstCommonAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transforms)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transforms);
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestorRecursive
UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestorRecursive(UnityEngine::Transform* transform, ::Array<UnityEngine::Transform*>* transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::GetFirstCommonAncestorRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "GetFirstCommonAncestorRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(transforms)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, transforms);
}
// Autogenerated method: RootMotion.Hierarchy.IsCommonAncestor
bool RootMotion::Hierarchy::IsCommonAncestor(UnityEngine::Transform* transform, ::Array<UnityEngine::Transform*>* transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Hierarchy::IsCommonAncestor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Hierarchy", "IsCommonAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(transforms)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, transforms);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.InspectorComment
#include "RootMotion/InspectorComment.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.InterpolationMode
#include "RootMotion/InterpolationMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode None
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode None
void RootMotion::InterpolationMode::_set_None(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InOutCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InOutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InOutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InOutCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InOutCubic
void RootMotion::InterpolationMode::_set_InOutCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InOutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InOutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InOutQuintic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InOutQuintic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InOutQuintic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InOutQuintic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InOutQuintic
void RootMotion::InterpolationMode::_set_InOutQuintic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InOutQuintic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InOutQuintic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InOutSine
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InOutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InOutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InOutSine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InOutSine
void RootMotion::InterpolationMode::_set_InOutSine(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InOutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InOutSine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InQuintic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InQuintic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InQuintic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InQuintic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InQuintic
void RootMotion::InterpolationMode::_set_InQuintic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InQuintic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InQuintic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InQuartic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InQuartic
void RootMotion::InterpolationMode::_set_InQuartic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InCubic
void RootMotion::InterpolationMode::_set_InCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InQuadratic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InQuadratic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InQuadratic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InQuadratic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InQuadratic
void RootMotion::InterpolationMode::_set_InQuadratic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InQuadratic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InQuadratic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InElastic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InElastic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InElastic
void RootMotion::InterpolationMode::_set_InElastic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InElastic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InElasticSmall
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InElasticSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InElasticSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InElasticSmall"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InElasticSmall
void RootMotion::InterpolationMode::_set_InElasticSmall(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InElasticSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InElasticSmall", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InElasticBig
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InElasticBig() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InElasticBig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InElasticBig"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InElasticBig
void RootMotion::InterpolationMode::_set_InElasticBig(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InElasticBig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InElasticBig", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InSine
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InSine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InSine
void RootMotion::InterpolationMode::_set_InSine(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InSine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode InBack
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_InBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_InBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "InBack"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode InBack
void RootMotion::InterpolationMode::_set_InBack(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_InBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "InBack", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutQuintic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutQuintic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutQuintic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutQuintic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutQuintic
void RootMotion::InterpolationMode::_set_OutQuintic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutQuintic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutQuintic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutQuartic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutQuartic
void RootMotion::InterpolationMode::_set_OutQuartic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutCubic
void RootMotion::InterpolationMode::_set_OutCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutInCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutInCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutInCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutInCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutInCubic
void RootMotion::InterpolationMode::_set_OutInCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutInCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutInCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutInQuartic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutInQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutInQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutInQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutInQuartic
void RootMotion::InterpolationMode::_set_OutInQuartic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutInQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutInQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutElastic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutElastic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutElastic
void RootMotion::InterpolationMode::_set_OutElastic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutElasticSmall
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutElasticSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutElasticSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutElasticSmall"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutElasticSmall
void RootMotion::InterpolationMode::_set_OutElasticSmall(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutElasticSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutElasticSmall", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutElasticBig
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutElasticBig() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutElasticBig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutElasticBig"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutElasticBig
void RootMotion::InterpolationMode::_set_OutElasticBig(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutElasticBig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutElasticBig", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutSine
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutSine"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutSine
void RootMotion::InterpolationMode::_set_OutSine(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutSine", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutBack
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutBack"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutBack
void RootMotion::InterpolationMode::_set_OutBack(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutBack", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutBackCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutBackCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutBackCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutBackCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutBackCubic
void RootMotion::InterpolationMode::_set_OutBackCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutBackCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutBackCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode OutBackQuartic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_OutBackQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_OutBackQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "OutBackQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode OutBackQuartic
void RootMotion::InterpolationMode::_set_OutBackQuartic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_OutBackQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "OutBackQuartic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode BackInCubic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_BackInCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_BackInCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "BackInCubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode BackInCubic
void RootMotion::InterpolationMode::_set_BackInCubic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_BackInCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "BackInCubic", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.InterpolationMode BackInQuartic
RootMotion::InterpolationMode RootMotion::InterpolationMode::_get_BackInQuartic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_get_BackInQuartic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::InterpolationMode>("RootMotion", "InterpolationMode", "BackInQuartic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.InterpolationMode BackInQuartic
void RootMotion::InterpolationMode::_set_BackInQuartic(RootMotion::InterpolationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::InterpolationMode::_set_BackInQuartic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "InterpolationMode", "BackInQuartic", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Interp
#include "RootMotion/Interp.hpp"
// Including type: RootMotion.InterpolationMode
#include "RootMotion/InterpolationMode.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Interp.Float
float RootMotion::Interp::Float(float t, RootMotion::InterpolationMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::Float");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "Float", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, mode);
}
// Autogenerated method: RootMotion.Interp.V3
UnityEngine::Vector3 RootMotion::Interp::V3(UnityEngine::Vector3 v1, UnityEngine::Vector3 v2, float t, RootMotion::InterpolationMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::V3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "V3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v1), ::il2cpp_utils::ExtractType(v2), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v1, v2, t, mode);
}
// Autogenerated method: RootMotion.Interp.LerpValue
float RootMotion::Interp::LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::LerpValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "LerpValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(increaseSpeed), ::il2cpp_utils::ExtractType(decreaseSpeed)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value, target, increaseSpeed, decreaseSpeed);
}
// Autogenerated method: RootMotion.Interp.None
float RootMotion::Interp::None(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::None");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "None", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InOutCubic
float RootMotion::Interp::InOutCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InOutCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InOutCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InOutQuintic
float RootMotion::Interp::InOutQuintic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InOutQuintic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InOutQuintic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InQuintic
float RootMotion::Interp::InQuintic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InQuintic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InQuintic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InQuartic
float RootMotion::Interp::InQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InQuartic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InQuartic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InCubic
float RootMotion::Interp::InCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InQuadratic
float RootMotion::Interp::InQuadratic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InQuadratic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InQuadratic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutQuintic
float RootMotion::Interp::OutQuintic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutQuintic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutQuintic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutQuartic
float RootMotion::Interp::OutQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutQuartic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutQuartic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutCubic
float RootMotion::Interp::OutCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutInCubic
float RootMotion::Interp::OutInCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutInCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutInCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutInQuartic
float RootMotion::Interp::OutInQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutInQuartic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutInQuartic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.BackInCubic
float RootMotion::Interp::BackInCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::BackInCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "BackInCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.BackInQuartic
float RootMotion::Interp::BackInQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::BackInQuartic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "BackInQuartic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutBackCubic
float RootMotion::Interp::OutBackCubic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutBackCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutBackCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutBackQuartic
float RootMotion::Interp::OutBackQuartic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutBackQuartic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutBackQuartic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutElasticSmall
float RootMotion::Interp::OutElasticSmall(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutElasticSmall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutElasticSmall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutElasticBig
float RootMotion::Interp::OutElasticBig(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutElasticBig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutElasticBig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InElasticSmall
float RootMotion::Interp::InElasticSmall(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InElasticSmall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InElasticSmall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InElasticBig
float RootMotion::Interp::InElasticBig(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InElasticBig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InElasticBig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InSine
float RootMotion::Interp::InSine(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutSine
float RootMotion::Interp::OutSine(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InOutSine
float RootMotion::Interp::InOutSine(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InOutSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InOutSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InElastic
float RootMotion::Interp::InElastic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutElastic
float RootMotion::Interp::OutElastic(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.InBack
float RootMotion::Interp::InBack(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::InBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "InBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated method: RootMotion.Interp.OutBack
float RootMotion::Interp::OutBack(float t, float b, float c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Interp::OutBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Interp", "OutBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, b, c);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.LargeHeader
#include "RootMotion/LargeHeader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.LayerMaskExtensions
#include "RootMotion/LayerMaskExtensions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.LayerMaskExtensions.Contains
bool RootMotion::LayerMaskExtensions::Contains(UnityEngine::LayerMask mask, int layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(layer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask, layer);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.Create
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Create(::Array<::Il2CppString*>* layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerNames)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerNames);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask Create(params System.String[] layerNames)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Create(std::initializer_list<::Il2CppString*> layerNames) {
  return RootMotion::LayerMaskExtensions::Create(::Array<::Il2CppString*>::New(layerNames));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.Create
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Create(::Array<int>* layerNumbers) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerNumbers)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerNumbers);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask Create(params System.Int32[] layerNumbers)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Create(std::initializer_list<int> layerNumbers) {
  return RootMotion::LayerMaskExtensions::Create(::Array<int>::New(layerNumbers));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.NamesToMask
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::NamesToMask(::Array<::Il2CppString*>* layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::NamesToMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "NamesToMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerNames)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerNames);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask NamesToMask(params System.String[] layerNames)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::NamesToMask(std::initializer_list<::Il2CppString*> layerNames) {
  return RootMotion::LayerMaskExtensions::NamesToMask(::Array<::Il2CppString*>::New(layerNames));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.LayerNumbersToMask
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::LayerNumbersToMask(::Array<int>* layerNumbers) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::LayerNumbersToMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "LayerNumbersToMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerNumbers)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerNumbers);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask LayerNumbersToMask(params System.Int32[] layerNumbers)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::LayerNumbersToMask(std::initializer_list<int> layerNumbers) {
  return RootMotion::LayerMaskExtensions::LayerNumbersToMask(::Array<int>::New(layerNumbers));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.Inverse
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::Inverse(UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::Inverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "Inverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.AddToMask
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::AddToMask(UnityEngine::LayerMask original, ::Array<::Il2CppString*>* layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::AddToMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "AddToMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(layerNames)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original, layerNames);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask AddToMask(UnityEngine.LayerMask original, params System.String[] layerNames)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::AddToMask(UnityEngine::LayerMask original, std::initializer_list<::Il2CppString*> layerNames) {
  return RootMotion::LayerMaskExtensions::AddToMask(original, ::Array<::Il2CppString*>::New(layerNames));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.RemoveFromMask
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::RemoveFromMask(UnityEngine::LayerMask original, ::Array<::Il2CppString*>* layerNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::RemoveFromMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "RemoveFromMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(layerNames)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original, layerNames);
}
// Creating initializer_list -> params proxy for: UnityEngine.LayerMask RemoveFromMask(UnityEngine.LayerMask original, params System.String[] layerNames)
UnityEngine::LayerMask RootMotion::LayerMaskExtensions::RemoveFromMask(UnityEngine::LayerMask original, std::initializer_list<::Il2CppString*> layerNames) {
  return RootMotion::LayerMaskExtensions::RemoveFromMask(original, ::Array<::Il2CppString*>::New(layerNames));
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToNames
::Array<::Il2CppString*>* RootMotion::LayerMaskExtensions::MaskToNames(UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::MaskToNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToNumbers
::Array<int>* RootMotion::LayerMaskExtensions::MaskToNumbers(UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::MaskToNumbers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToNumbers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<int>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToString
::Il2CppString* RootMotion::LayerMaskExtensions::MaskToString(UnityEngine::LayerMask original) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::MaskToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original);
}
// Autogenerated method: RootMotion.LayerMaskExtensions.MaskToString
::Il2CppString* RootMotion::LayerMaskExtensions::MaskToString(UnityEngine::LayerMask original, ::Il2CppString* delimiter) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::LayerMaskExtensions::MaskToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "LayerMaskExtensions", "MaskToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(delimiter)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original, delimiter);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.QuaTools
#include "RootMotion/QuaTools.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.QuaTools.Lerp
UnityEngine::Quaternion RootMotion::QuaTools::Lerp(UnityEngine::Quaternion fromRotation, UnityEngine::Quaternion toRotation, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromRotation), ::il2cpp_utils::ExtractType(toRotation), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromRotation, toRotation, weight);
}
// Autogenerated method: RootMotion.QuaTools.Slerp
UnityEngine::Quaternion RootMotion::QuaTools::Slerp(UnityEngine::Quaternion fromRotation, UnityEngine::Quaternion toRotation, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::Slerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "Slerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromRotation), ::il2cpp_utils::ExtractType(toRotation), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromRotation, toRotation, weight);
}
// Autogenerated method: RootMotion.QuaTools.LinearBlend
UnityEngine::Quaternion RootMotion::QuaTools::LinearBlend(UnityEngine::Quaternion q, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::LinearBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "LinearBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, q, weight);
}
// Autogenerated method: RootMotion.QuaTools.SphericalBlend
UnityEngine::Quaternion RootMotion::QuaTools::SphericalBlend(UnityEngine::Quaternion q, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::SphericalBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "SphericalBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, q, weight);
}
// Autogenerated method: RootMotion.QuaTools.FromToAroundAxis
UnityEngine::Quaternion RootMotion::QuaTools::FromToAroundAxis(UnityEngine::Vector3 fromDirection, UnityEngine::Vector3 toDirection, UnityEngine::Vector3 axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::FromToAroundAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "FromToAroundAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromDirection), ::il2cpp_utils::ExtractType(toDirection), ::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromDirection, toDirection, axis);
}
// Autogenerated method: RootMotion.QuaTools.RotationToLocalSpace
UnityEngine::Quaternion RootMotion::QuaTools::RotationToLocalSpace(UnityEngine::Quaternion space, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::RotationToLocalSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "RotationToLocalSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(space), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, space, rotation);
}
// Autogenerated method: RootMotion.QuaTools.FromToRotation
UnityEngine::Quaternion RootMotion::QuaTools::FromToRotation(UnityEngine::Quaternion from, UnityEngine::Quaternion to) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::FromToRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "FromToRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, from, to);
}
// Autogenerated method: RootMotion.QuaTools.GetAxis
UnityEngine::Vector3 RootMotion::QuaTools::GetAxis(UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::GetAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "GetAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v);
}
// Autogenerated method: RootMotion.QuaTools.ClampRotation
UnityEngine::Quaternion RootMotion::QuaTools::ClampRotation(UnityEngine::Quaternion rotation, float clampWeight, int clampSmoothing) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::ClampRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ClampRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampSmoothing)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation, clampWeight, clampSmoothing);
}
// Autogenerated method: RootMotion.QuaTools.ClampAngle
float RootMotion::QuaTools::ClampAngle(float angle, float clampWeight, int clampSmoothing) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::ClampAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ClampAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampSmoothing)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, angle, clampWeight, clampSmoothing);
}
// Autogenerated method: RootMotion.QuaTools.MatchRotation
UnityEngine::Quaternion RootMotion::QuaTools::MatchRotation(UnityEngine::Quaternion targetRotation, UnityEngine::Vector3 targetforwardAxis, UnityEngine::Vector3 targetUpAxis, UnityEngine::Vector3 forwardAxis, UnityEngine::Vector3 upAxis) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::MatchRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "MatchRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetRotation), ::il2cpp_utils::ExtractType(targetforwardAxis), ::il2cpp_utils::ExtractType(targetUpAxis), ::il2cpp_utils::ExtractType(forwardAxis), ::il2cpp_utils::ExtractType(upAxis)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, targetRotation, targetforwardAxis, targetUpAxis, forwardAxis, upAxis);
}
// Autogenerated method: RootMotion.QuaTools.ToBiPolar
UnityEngine::Vector3 RootMotion::QuaTools::ToBiPolar(UnityEngine::Vector3 euler) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::ToBiPolar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ToBiPolar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(euler)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, euler);
}
// Autogenerated method: RootMotion.QuaTools.ToBiPolar
float RootMotion::QuaTools::ToBiPolar(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::QuaTools::ToBiPolar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "QuaTools", "ToBiPolar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, angle);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.SolverManager
#include "RootMotion/SolverManager.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.SolverManager.get_animatePhysics
bool RootMotion::SolverManager::get_animatePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::get_animatePhysics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animatePhysics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.get_isAnimated
bool RootMotion::SolverManager::get_isAnimated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::get_isAnimated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAnimated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Disable
void RootMotion::SolverManager::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::Disable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.InitiateSolver
void RootMotion::SolverManager::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.UpdateSolver
void RootMotion::SolverManager::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.FixTransforms
void RootMotion::SolverManager::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.OnDisable
void RootMotion::SolverManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Start
void RootMotion::SolverManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Initiate
void RootMotion::SolverManager::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.Update
void RootMotion::SolverManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.FindAnimatorRecursive
void RootMotion::SolverManager::FindAnimatorRecursive(UnityEngine::Transform* t, bool findInChildren) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::FindAnimatorRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindAnimatorRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(findInChildren)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, findInChildren);
}
// Autogenerated method: RootMotion.SolverManager.FixedUpdate
void RootMotion::SolverManager::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.LateUpdate
void RootMotion::SolverManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.SolverManager.UpdateSolverExternal
void RootMotion::SolverManager::UpdateSolverExternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::SolverManager::UpdateSolverExternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverExternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.TriggerEventBroadcaster
#include "RootMotion/TriggerEventBroadcaster.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.TriggerEventBroadcaster.OnTriggerEnter
void RootMotion::TriggerEventBroadcaster::OnTriggerEnter(UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::TriggerEventBroadcaster::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated method: RootMotion.TriggerEventBroadcaster.OnTriggerStay
void RootMotion::TriggerEventBroadcaster::OnTriggerStay(UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::TriggerEventBroadcaster::OnTriggerStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated method: RootMotion.TriggerEventBroadcaster.OnTriggerExit
void RootMotion::TriggerEventBroadcaster::OnTriggerExit(UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::TriggerEventBroadcaster::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.V3Tools
#include "RootMotion/V3Tools.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.V3Tools.Lerp
UnityEngine::Vector3 RootMotion::V3Tools::Lerp(UnityEngine::Vector3 fromVector, UnityEngine::Vector3 toVector, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromVector), ::il2cpp_utils::ExtractType(toVector), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromVector, toVector, weight);
}
// Autogenerated method: RootMotion.V3Tools.Slerp
UnityEngine::Vector3 RootMotion::V3Tools::Slerp(UnityEngine::Vector3 fromVector, UnityEngine::Vector3 toVector, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::Slerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "Slerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromVector), ::il2cpp_utils::ExtractType(toVector), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromVector, toVector, weight);
}
// Autogenerated method: RootMotion.V3Tools.ExtractVertical
UnityEngine::Vector3 RootMotion::V3Tools::ExtractVertical(UnityEngine::Vector3 v, UnityEngine::Vector3 verticalAxis, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::ExtractVertical");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ExtractVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v), ::il2cpp_utils::ExtractType(verticalAxis), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v, verticalAxis, weight);
}
// Autogenerated method: RootMotion.V3Tools.ExtractHorizontal
UnityEngine::Vector3 RootMotion::V3Tools::ExtractHorizontal(UnityEngine::Vector3 v, UnityEngine::Vector3 normal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::ExtractHorizontal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ExtractHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v), ::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v, normal, weight);
}
// Autogenerated method: RootMotion.V3Tools.ClampDirection
UnityEngine::Vector3 RootMotion::V3Tools::ClampDirection(UnityEngine::Vector3 direction, UnityEngine::Vector3 normalDirection, float clampWeight, int clampSmoothing) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::ClampDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ClampDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(normalDirection), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampSmoothing)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, direction, normalDirection, clampWeight, clampSmoothing);
}
// Autogenerated method: RootMotion.V3Tools.ClampDirection
UnityEngine::Vector3 RootMotion::V3Tools::ClampDirection(UnityEngine::Vector3 direction, UnityEngine::Vector3 normalDirection, float clampWeight, int clampSmoothing, bool& changed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::ClampDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ClampDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(normalDirection), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampSmoothing), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, direction, normalDirection, clampWeight, clampSmoothing, changed);
}
// Autogenerated method: RootMotion.V3Tools.ClampDirection
UnityEngine::Vector3 RootMotion::V3Tools::ClampDirection(UnityEngine::Vector3 direction, UnityEngine::Vector3 normalDirection, float clampWeight, int clampSmoothing, float& clampValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::ClampDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "ClampDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(normalDirection), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampSmoothing), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, direction, normalDirection, clampWeight, clampSmoothing, clampValue);
}
// Autogenerated method: RootMotion.V3Tools.LineToPlane
UnityEngine::Vector3 RootMotion::V3Tools::LineToPlane(UnityEngine::Vector3 origin, UnityEngine::Vector3 direction, UnityEngine::Vector3 planeNormal, UnityEngine::Vector3 planePoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::LineToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "LineToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(planeNormal), ::il2cpp_utils::ExtractType(planePoint)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, origin, direction, planeNormal, planePoint);
}
// Autogenerated method: RootMotion.V3Tools.PointToPlane
UnityEngine::Vector3 RootMotion::V3Tools::PointToPlane(UnityEngine::Vector3 point, UnityEngine::Vector3 planePosition, UnityEngine::Vector3 planeNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::PointToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "PointToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractType(planePosition), ::il2cpp_utils::ExtractType(planeNormal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, point, planePosition, planeNormal);
}
// Autogenerated method: RootMotion.V3Tools.TransformPointUnscaled
UnityEngine::Vector3 RootMotion::V3Tools::TransformPointUnscaled(UnityEngine::Transform* t, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::TransformPointUnscaled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "TransformPointUnscaled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, point);
}
// Autogenerated method: RootMotion.V3Tools.InverseTransformPointUnscaled
UnityEngine::Vector3 RootMotion::V3Tools::InverseTransformPointUnscaled(UnityEngine::Transform* t, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::V3Tools::InverseTransformPointUnscaled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "V3Tools", "InverseTransformPointUnscaled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, point);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Warning
#include "RootMotion/Warning.hpp"
// Including type: RootMotion.Warning/RootMotion.Logger
#include "RootMotion/Warning_Logger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Boolean logged
bool RootMotion::Warning::_get_logged() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::_get_logged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("RootMotion", "Warning", "logged"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean logged
void RootMotion::Warning::_set_logged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::_set_logged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion", "Warning", "logged", value));
}
// Autogenerated method: RootMotion.Warning.Log
void RootMotion::Warning::Log(::Il2CppString* message, RootMotion::Warning::Logger* logger, bool logInEditMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Warning", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(logger), ::il2cpp_utils::ExtractType(logInEditMode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, logger, logInEditMode);
}
// Autogenerated method: RootMotion.Warning.Log
void RootMotion::Warning::Log(::Il2CppString* message, UnityEngine::Transform* context, bool logInEditMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion", "Warning", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(logInEditMode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, context, logInEditMode);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Warning/RootMotion.Logger
#include "RootMotion/Warning_Logger.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Warning/RootMotion.Logger.Invoke
void RootMotion::Warning::Logger::Invoke(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::Logger::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.Warning/RootMotion.Logger.BeginInvoke
System::IAsyncResult* RootMotion::Warning::Logger::BeginInvoke(::Il2CppString* message, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::Logger::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, message, callback, object);
}
// Autogenerated method: RootMotion.Warning/RootMotion.Logger.EndInvoke
void RootMotion::Warning::Logger::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Warning::Logger::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Demos.Navigator
#include "RootMotion/Demos/Navigator.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AI.NavMeshPath
#include "UnityEngine/AI/NavMeshPath.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Demos.Navigator.get_normalizedDeltaPosition
UnityEngine::Vector3 RootMotion::Demos::Navigator::get_normalizedDeltaPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::get_normalizedDeltaPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalizedDeltaPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.Navigator.set_normalizedDeltaPosition
void RootMotion::Demos::Navigator::set_normalizedDeltaPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::set_normalizedDeltaPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizedDeltaPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Demos.Navigator.get_state
RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::get_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::Demos::Navigator::State, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.Navigator.set_state
void RootMotion::Demos::Navigator::set_state(RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::set_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.Demos.Navigator.Initiate
void RootMotion::Demos::Navigator::Initiate(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.Demos.Navigator.Update
void RootMotion::Demos::Navigator::Update(UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.Demos.Navigator.CalculatePath
void RootMotion::Demos::Navigator::CalculatePath(UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::CalculatePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculatePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.Demos.Navigator.Find
bool RootMotion::Demos::Navigator::Find(UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::Find");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.Demos.Navigator.Stop
void RootMotion::Demos::Navigator::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.Navigator.HorDistance
float RootMotion::Demos::Navigator::HorDistance(UnityEngine::Vector3 p1, UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::HorDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HorDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, p1, p2);
}
// Autogenerated method: RootMotion.Demos.Navigator.Visualize
void RootMotion::Demos::Navigator::Visualize() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::Visualize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Visualize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Demos.Navigator/RootMotion.Demos.State
#include "RootMotion/Demos/Navigator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State Idle
RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::State::_get_Idle() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_get_Idle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Demos::Navigator::State>("RootMotion.Demos", "Navigator/State", "Idle"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State Idle
void RootMotion::Demos::Navigator::State::_set_Idle(RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_set_Idle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.Demos", "Navigator/State", "Idle", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State Seeking
RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::State::_get_Seeking() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_get_Seeking");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Demos::Navigator::State>("RootMotion.Demos", "Navigator/State", "Seeking"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State Seeking
void RootMotion::Demos::Navigator::State::_set_Seeking(RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_set_Seeking");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.Demos", "Navigator/State", "Seeking", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State OnPath
RootMotion::Demos::Navigator::State RootMotion::Demos::Navigator::State::_get_OnPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_get_OnPath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::Demos::Navigator::State>("RootMotion.Demos", "Navigator/State", "OnPath"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.Demos.Navigator/RootMotion.Demos.State OnPath
void RootMotion::Demos::Navigator::State::_set_OnPath(RootMotion::Demos::Navigator::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Demos::Navigator::State::_set_OnPath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.Demos", "Navigator/State", "OnPath", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.BipedIK
#include "RootMotion/FinalIK/BipedIK.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.FinalIK.BipedIKSolvers
#include "RootMotion/FinalIK/BipedIKSolvers.hpp"
// Including type: UnityEngine.AvatarIKGoal
#include "UnityEngine/AvatarIKGoal.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.BipedIK.OpenUserManual
void RootMotion::FinalIK::BipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.OpenScriptReference
void RootMotion::FinalIK::BipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SupportGroup
void RootMotion::FinalIK::BipedIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.ASThread
void RootMotion::FinalIK::BipedIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKPositionWeight
float RootMotion::FinalIK::BipedIK::GetIKPositionWeight(UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::GetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPositionWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKRotationWeight
float RootMotion::FinalIK::BipedIK::GetIKRotationWeight(UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::GetIKRotationWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKRotationWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKPositionWeight
void RootMotion::FinalIK::BipedIK::SetIKPositionWeight(UnityEngine::AvatarIKGoal goal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPositionWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, goal, weight);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKRotationWeight
void RootMotion::FinalIK::BipedIK::SetIKRotationWeight(UnityEngine::AvatarIKGoal goal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetIKRotationWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKRotationWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, goal, weight);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKPosition
void RootMotion::FinalIK::BipedIK::SetIKPosition(UnityEngine::AvatarIKGoal goal, UnityEngine::Vector3 IKPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal), ::il2cpp_utils::ExtractType(IKPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, goal, IKPosition);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetIKRotation
void RootMotion::FinalIK::BipedIK::SetIKRotation(UnityEngine::AvatarIKGoal goal, UnityEngine::Quaternion IKRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetIKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal), ::il2cpp_utils::ExtractType(IKRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, goal, IKRotation);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKPosition
UnityEngine::Vector3 RootMotion::FinalIK::BipedIK::GetIKPosition(UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::GetIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetIKRotation
UnityEngine::Quaternion RootMotion::FinalIK::BipedIK::GetIKRotation(UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::GetIKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetLookAtWeight
void RootMotion::FinalIK::BipedIK::SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight), ::il2cpp_utils::ExtractType(headWeight), ::il2cpp_utils::ExtractType(eyesWeight), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampWeightHead), ::il2cpp_utils::ExtractType(clampWeightEyes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight, eyesWeight, clampWeight, clampWeightHead, clampWeightEyes);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetLookAtPosition
void RootMotion::FinalIK::BipedIK::SetLookAtPosition(UnityEngine::Vector3 lookAtPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetLookAtPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lookAtPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lookAtPosition);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetSpinePosition
void RootMotion::FinalIK::BipedIK::SetSpinePosition(UnityEngine::Vector3 spinePosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetSpinePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSpinePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spinePosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, spinePosition);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetSpineWeight
void RootMotion::FinalIK::BipedIK::SetSpineWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetSpineWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSpineWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.GetGoalIK
RootMotion::FinalIK::IKSolverLimb* RootMotion::FinalIK::BipedIK::GetGoalIK(UnityEngine::AvatarIKGoal goal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::GetGoalIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGoalIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goal)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverLimb*, false>(this, ___internal__method, goal);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.InitiateBipedIK
void RootMotion::FinalIK::BipedIK::InitiateBipedIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::InitiateBipedIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateBipedIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.UpdateBipedIK
void RootMotion::FinalIK::BipedIK::UpdateBipedIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::UpdateBipedIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBipedIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.SetToDefaults
void RootMotion::FinalIK::BipedIK::SetToDefaults() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::SetToDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.LogWarning
void RootMotion::FinalIK::BipedIK::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.FixTransforms
void RootMotion::FinalIK::BipedIK::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.InitiateSolver
void RootMotion::FinalIK::BipedIK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIK.UpdateSolver
void RootMotion::FinalIK::BipedIK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.BipedIKSolvers
#include "RootMotion/FinalIK/BipedIKSolvers.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIK
#include "RootMotion/FinalIK/IKSolverFABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLookAt
#include "RootMotion/FinalIK/IKSolverLookAt.hpp"
// Including type: RootMotion.FinalIK.IKSolverAim
#include "RootMotion/FinalIK/IKSolverAim.hpp"
// Including type: RootMotion.FinalIK.Constraints
#include "RootMotion/FinalIK/Constraints.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.BipedIKSolvers.get_limbs
::Array<RootMotion::FinalIK::IKSolverLimb*>* RootMotion::FinalIK::BipedIKSolvers::get_limbs() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIKSolvers::get_limbs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_limbs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolverLimb*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIKSolvers.get_ikSolvers
::Array<RootMotion::FinalIK::IKSolver*>* RootMotion::FinalIK::BipedIKSolvers::get_ikSolvers() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIKSolvers::get_ikSolvers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ikSolvers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BipedIKSolvers.AssignReferences
void RootMotion::FinalIK::BipedIKSolvers::AssignReferences(RootMotion::BipedReferences* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BipedIKSolvers::AssignReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Constraint
#include "RootMotion/FinalIK/Constraint.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Constraint.get_isValid
bool RootMotion::FinalIK::Constraint::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraint::get_isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Constraint.UpdateConstraint
void RootMotion::FinalIK::Constraint::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraint::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintPosition
#include "RootMotion/FinalIK/ConstraintPosition.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ConstraintPosition.UpdateConstraint
void RootMotion::FinalIK::ConstraintPosition::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintPosition::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintPositionOffset
#include "RootMotion/FinalIK/ConstraintPositionOffset.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ConstraintPositionOffset.get_positionChanged
bool RootMotion::FinalIK::ConstraintPositionOffset::get_positionChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintPositionOffset::get_positionChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_positionChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ConstraintPositionOffset.UpdateConstraint
void RootMotion::FinalIK::ConstraintPositionOffset::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintPositionOffset::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintRotation
#include "RootMotion/FinalIK/ConstraintRotation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ConstraintRotation.UpdateConstraint
void RootMotion::FinalIK::ConstraintRotation::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintRotation::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ConstraintRotationOffset
#include "RootMotion/FinalIK/ConstraintRotationOffset.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ConstraintRotationOffset.get_rotationChanged
bool RootMotion::FinalIK::ConstraintRotationOffset::get_rotationChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintRotationOffset::get_rotationChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ConstraintRotationOffset.UpdateConstraint
void RootMotion::FinalIK::ConstraintRotationOffset::UpdateConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ConstraintRotationOffset::UpdateConstraint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Constraints
#include "RootMotion/FinalIK/Constraints.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Constraints.IsValid
bool RootMotion::FinalIK::Constraints::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraints::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Constraints.Initiate
void RootMotion::FinalIK::Constraints::Initiate(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraints::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.Constraints.Update
void RootMotion::FinalIK::Constraints::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraints::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Finger
#include "RootMotion/FinalIK/Finger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Finger.get_initiated
bool RootMotion::FinalIK::Finger::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_initiated
void RootMotion::FinalIK::Finger::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.get_IKPosition
UnityEngine::Vector3 RootMotion::FinalIK::Finger::get_IKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::get_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_IKPosition
void RootMotion::FinalIK::Finger::set_IKPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::set_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.get_IKRotation
UnityEngine::Quaternion RootMotion::FinalIK::Finger::get_IKRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::get_IKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_IKRotation
void RootMotion::FinalIK::Finger::set_IKRotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::set_IKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.IsValid
bool RootMotion::FinalIK::Finger::IsValid(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.Finger.Initiate
void RootMotion::FinalIK::Finger::Initiate(UnityEngine::Transform* hand, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hand, index);
}
// Autogenerated method: RootMotion.FinalIK.Finger.FixTransforms
void RootMotion::FinalIK::Finger::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.StoreDefaultLocalState
void RootMotion::FinalIK::Finger::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.Update
void RootMotion::FinalIK::Finger::Update(float masterWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(masterWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, masterWeight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF
#include "RootMotion/FinalIK/Finger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF One
RootMotion::FinalIK::Finger::DOF RootMotion::FinalIK::Finger::DOF::_get_One() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_get_One");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Finger::DOF>("RootMotion.FinalIK", "Finger/DOF", "One"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF One
void RootMotion::FinalIK::Finger::DOF::_set_One(RootMotion::FinalIK::Finger::DOF value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_set_One");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Finger/DOF", "One", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF Three
RootMotion::FinalIK::Finger::DOF RootMotion::FinalIK::Finger::DOF::_get_Three() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_get_Three");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Finger::DOF>("RootMotion.FinalIK", "Finger/DOF", "Three"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Finger/RootMotion.FinalIK.DOF Three
void RootMotion::FinalIK::Finger::DOF::_set_Three(RootMotion::FinalIK::Finger::DOF value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_set_Three");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Finger/DOF", "Three", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FingerRig
#include "RootMotion/FinalIK/FingerRig.hpp"
// Including type: RootMotion.FinalIK.Finger
#include "RootMotion/FinalIK/Finger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FingerRig.get_initiated
bool RootMotion::FinalIK::FingerRig::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.set_initiated
void RootMotion::FinalIK::FingerRig::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.IsValid
bool RootMotion::FinalIK::FingerRig::IsValid(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AutoDetect
void RootMotion::FinalIK::FingerRig::AutoDetect() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::AutoDetect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoDetect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AddFinger
void RootMotion::FinalIK::FingerRig::AddFinger(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, UnityEngine::Transform* tip, UnityEngine::Transform* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::AddFinger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFinger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(tip), ::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2, bone3, tip, target);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.RemoveFinger
void RootMotion::FinalIK::FingerRig::RemoveFinger(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::RemoveFinger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveFinger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AddChildrenRecursive
void RootMotion::FinalIK::FingerRig::AddChildrenRecursive(UnityEngine::Transform* parent, ::Array<UnityEngine::Transform*>*& array) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::AddChildrenRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddChildrenRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(array)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parent, array);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.UpdateFingerSolvers
void RootMotion::FinalIK::FingerRig::UpdateFingerSolvers() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::UpdateFingerSolvers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFingerSolvers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.FixFingerTransforms
void RootMotion::FinalIK::FingerRig::FixFingerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::FixFingerTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixFingerTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.StoreDefaultLocalState
void RootMotion::FinalIK::FingerRig::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.InitiateSolver
void RootMotion::FinalIK::FingerRig::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.UpdateSolver
void RootMotion::FinalIK::FingerRig::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.FixTransforms
void RootMotion::FinalIK::FingerRig::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounder
#include "RootMotion/FinalIK/Grounder.hpp"
// Including type: RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate
#include "RootMotion/FinalIK/Grounder_GrounderDelegate.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounder.get_initiated
bool RootMotion::FinalIK::Grounder::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.set_initiated
void RootMotion::FinalIK::Grounder::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.ResetPosition
void RootMotion::FinalIK::Grounder::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetSpineOffsetTarget
UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetSpineOffsetTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GetSpineOffsetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpineOffsetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.LogWarning
void RootMotion::FinalIK::Grounder::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetLegSpineBendVector
UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetLegSpineBendVector(RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GetLegSpineBendVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLegSpineBendVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leg)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, leg);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetLegSpineTangent
UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetLegSpineTangent(RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GetLegSpineTangent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLegSpineTangent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leg)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, leg);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.OpenUserManual
void RootMotion::FinalIK::Grounder::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.OpenScriptReference
void RootMotion::FinalIK::Grounder::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate
#include "RootMotion/FinalIK/Grounder_GrounderDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate.Invoke
void RootMotion::FinalIK::Grounder::GrounderDelegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GrounderDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::Grounder::GrounderDelegate::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GrounderDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.Grounder/RootMotion.FinalIK.GrounderDelegate.EndInvoke
void RootMotion::FinalIK::Grounder::GrounderDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GrounderDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderBipedIK
#include "RootMotion/FinalIK/GrounderBipedIK.hpp"
// Including type: RootMotion.FinalIK.BipedIK
#include "RootMotion/FinalIK/BipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderBipedIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.Update
void RootMotion::FinalIK::GrounderBipedIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.Initiate
void RootMotion::FinalIK::GrounderBipedIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnDisable
void RootMotion::FinalIK::GrounderBipedIK::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderBipedIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.SetLegIK
void RootMotion::FinalIK::GrounderBipedIK::SetLegIK(RootMotion::FinalIK::IKSolverLimb* limb, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(limb), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, limb, index);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderBipedIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnDestroy
void RootMotion::FinalIK::GrounderBipedIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OpenUserManual
void RootMotion::FinalIK::GrounderBipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OpenScriptReference
void RootMotion::FinalIK::GrounderBipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.ResetPosition
void RootMotion::FinalIK::GrounderBipedIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderFBBIK
#include "RootMotion/FinalIK/GrounderFBBIK.hpp"
// Including type: RootMotion.FinalIK.GrounderFBBIK/RootMotion.FinalIK.SpineEffector
#include "RootMotion/FinalIK/GrounderFBBIK_SpineEffector.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenTutorial
void RootMotion::FinalIK::GrounderFBBIK::OpenTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OpenTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderFBBIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.Update
void RootMotion::FinalIK::GrounderFBBIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.FixedUpdate
void RootMotion::FinalIK::GrounderFBBIK::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.LateUpdate
void RootMotion::FinalIK::GrounderFBBIK::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.Initiate
void RootMotion::FinalIK::GrounderFBBIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderFBBIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.SetLegIK
void RootMotion::FinalIK::GrounderFBBIK::SetLegIK(RootMotion::FinalIK::IKEffector* effector, RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(leg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, leg);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnDrawGizmosSelected
void RootMotion::FinalIK::GrounderFBBIK::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnDestroy
void RootMotion::FinalIK::GrounderFBBIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenUserManual
void RootMotion::FinalIK::GrounderFBBIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenScriptReference
void RootMotion::FinalIK::GrounderFBBIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.ResetPosition
void RootMotion::FinalIK::GrounderFBBIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderFBBIK/RootMotion.FinalIK.SpineEffector
#include "RootMotion/FinalIK/GrounderFBBIK_SpineEffector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderIK
#include "RootMotion/FinalIK/GrounderIK.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnDisable
void RootMotion::FinalIK::GrounderIK::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.Update
void RootMotion::FinalIK::GrounderIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.Initiate
void RootMotion::FinalIK::GrounderIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.SetLegIK
void RootMotion::FinalIK::GrounderIK::SetLegIK(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnDestroy
void RootMotion::FinalIK::GrounderIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OpenUserManual
void RootMotion::FinalIK::GrounderIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OpenScriptReference
void RootMotion::FinalIK::GrounderIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.ResetPosition
void RootMotion::FinalIK::GrounderIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderQuadruped
#include "RootMotion/FinalIK/GrounderQuadruped.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.IsReadyToInitiateLegs
bool RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiateLegs(::Array<RootMotion::FinalIK::IK*>* ikComponents) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiateLegs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiateLegs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ikComponents)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ikComponents);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnDisable
void RootMotion::FinalIK::GrounderQuadruped::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.Update
void RootMotion::FinalIK::GrounderQuadruped::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.Initiate
void RootMotion::FinalIK::GrounderQuadruped::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.InitiateFeet
::Array<UnityEngine::Transform*>* RootMotion::FinalIK::GrounderQuadruped::InitiateFeet(::Array<RootMotion::FinalIK::IK*>* ikComponents, ::Array<RootMotion::FinalIK::GrounderQuadruped::Foot>*& f, int indexOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::InitiateFeet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateFeet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ikComponents), ::il2cpp_utils::ExtractType(f), ::il2cpp_utils::ExtractType(indexOffset)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Transform*>*, false>(this, ___internal__method, ikComponents, f, indexOffset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.LateUpdate
void RootMotion::FinalIK::GrounderQuadruped::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.RootRotation
void RootMotion::FinalIK::GrounderQuadruped::RootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::RootRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RootRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnSolverUpdate
void RootMotion::FinalIK::GrounderQuadruped::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.UpdateForefeetRoot
void RootMotion::FinalIK::GrounderQuadruped::UpdateForefeetRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::UpdateForefeetRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateForefeetRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.SetFootIK
void RootMotion::FinalIK::GrounderQuadruped::SetFootIK(RootMotion::FinalIK::GrounderQuadruped::Foot foot, float maxOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::SetFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(foot), ::il2cpp_utils::ExtractType(maxOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, foot, maxOffset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderQuadruped::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnDestroy
void RootMotion::FinalIK::GrounderQuadruped::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.DestroyLegs
void RootMotion::FinalIK::GrounderQuadruped::DestroyLegs(::Array<RootMotion::FinalIK::IK*>* ikComponents) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::DestroyLegs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyLegs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ikComponents)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ikComponents);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OpenUserManual
void RootMotion::FinalIK::GrounderQuadruped::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OpenScriptReference
void RootMotion::FinalIK::GrounderQuadruped::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.ResetPosition
void RootMotion::FinalIK::GrounderQuadruped::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderQuadruped/RootMotion.FinalIK.Foot
#include "RootMotion/FinalIK/GrounderQuadruped.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderVRIK
#include "RootMotion/FinalIK/GrounderVRIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset
#include "RootMotion/FinalIK/IKSolverVR_PositionOffset.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenTutorial
void RootMotion::FinalIK::GrounderVRIK::OpenTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OpenTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderVRIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.Update
void RootMotion::FinalIK::GrounderVRIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.Initiate
void RootMotion::FinalIK::GrounderVRIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderVRIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.SetLegIK
void RootMotion::FinalIK::GrounderVRIK::SetLegIK(RootMotion::FinalIK::IKSolverVR::PositionOffset positionOffset, UnityEngine::Transform* bone, RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionOffset), ::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(leg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positionOffset, bone, leg);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderVRIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnDrawGizmosSelected
void RootMotion::FinalIK::GrounderVRIK::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnDestroy
void RootMotion::FinalIK::GrounderVRIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenUserManual
void RootMotion::FinalIK::GrounderVRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenScriptReference
void RootMotion::FinalIK::GrounderVRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.ResetPosition
void RootMotion::FinalIK::GrounderVRIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounding
#include "RootMotion/FinalIK/Grounding.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis
#include "RootMotion/FinalIK/Grounding_Pelvis.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounding.get_legs
::Array<RootMotion::FinalIK::Grounding::Leg*>* RootMotion::FinalIK::Grounding::get_legs() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_legs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_legs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::Grounding::Leg*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_legs
void RootMotion::FinalIK::Grounding::set_legs(::Array<RootMotion::FinalIK::Grounding::Leg*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_legs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_legs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_pelvis
RootMotion::FinalIK::Grounding::Pelvis* RootMotion::FinalIK::Grounding::get_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_pelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::Grounding::Pelvis*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_pelvis
void RootMotion::FinalIK::Grounding::set_pelvis(RootMotion::FinalIK::Grounding::Pelvis* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_pelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_isGrounded
bool RootMotion::FinalIK::Grounding::get_isGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_isGrounded
void RootMotion::FinalIK::Grounding::set_isGrounded(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_root
UnityEngine::Transform* RootMotion::FinalIK::Grounding::get_root() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_root");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_root", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_root
void RootMotion::FinalIK::Grounding::set_root(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_root");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_root", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_rootHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::get_rootHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_rootHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_rootHit
void RootMotion::FinalIK::Grounding::set_rootHit(UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_rootHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rootHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_rootGrounded
bool RootMotion::FinalIK::Grounding::get_rootGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_rootGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_up
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::get_up() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_up");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_up", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_useRootRotation
bool RootMotion::FinalIK::Grounding::get_useRootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_useRootRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useRootRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetRootHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::GetRootHit(float maxDistanceMlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetRootHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxDistanceMlp)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method, maxDistanceMlp);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.IsValid
bool RootMotion::FinalIK::Grounding::IsValid(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Initiate
void RootMotion::FinalIK::Grounding::Initiate(UnityEngine::Transform* root, ::Array<UnityEngine::Transform*>* feet) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(feet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root, feet);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Update
void RootMotion::FinalIK::Grounding::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetLegsPlaneNormal
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::GetLegsPlaneNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetLegsPlaneNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLegsPlaneNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Reset
void RootMotion::FinalIK::Grounding::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.LogWarning
void RootMotion::FinalIK::Grounding::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetVerticalOffset
float RootMotion::FinalIK::Grounding::GetVerticalOffset(UnityEngine::Vector3 p1, UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetVerticalOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVerticalOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, p1, p2);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Flatten
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Flatten(UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Flatten");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flatten", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, v);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetFootCenterOffset
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::GetFootCenterOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetFootCenterOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFootCenterOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality
#include "RootMotion/FinalIK/Grounding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Fastest
RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Fastest() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_get_Fastest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Fastest"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Fastest
void RootMotion::FinalIK::Grounding::Quality::_set_Fastest(RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_set_Fastest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Fastest", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Simple
RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Simple() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_get_Simple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Simple"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Simple
void RootMotion::FinalIK::Grounding::Quality::_set_Simple(RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_set_Simple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Simple", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Best
RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Best() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_get_Best");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Best"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Quality Best
void RootMotion::FinalIK::Grounding::Quality::_set_Best(RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_set_Best");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Best", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_isGrounded
bool RootMotion::FinalIK::Grounding::Leg::get_isGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_isGrounded
void RootMotion::FinalIK::Grounding::Leg::set_isGrounded(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_IKPosition
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::get_IKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_IKPosition
void RootMotion::FinalIK::Grounding::Leg::set_IKPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_initiated
bool RootMotion::FinalIK::Grounding::Leg::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_initiated
void RootMotion::FinalIK::Grounding::Leg::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_heightFromGround
float RootMotion::FinalIK::Grounding::Leg::get_heightFromGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_heightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_heightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_heightFromGround
void RootMotion::FinalIK::Grounding::Leg::set_heightFromGround(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_heightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_heightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_velocity
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_velocity
void RootMotion::FinalIK::Grounding::Leg::set_velocity(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_transform
UnityEngine::Transform* RootMotion::FinalIK::Grounding::Leg::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_transform
void RootMotion::FinalIK::Grounding::Leg::set_transform(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_IKOffset
float RootMotion::FinalIK::Grounding::Leg::get_IKOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_IKOffset
void RootMotion::FinalIK::Grounding::Leg::set_IKOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_heelHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_heelHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_heelHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_heelHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_heelHit
void RootMotion::FinalIK::Grounding::Leg::set_heelHit(UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_heelHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_heelHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_capsuleHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_capsuleHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_capsuleHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_capsuleHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.set_capsuleHit
void RootMotion::FinalIK::Grounding::Leg::set_capsuleHit(UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_capsuleHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_capsuleHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_GetHitPoint
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_GetHitPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_GetHitPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GetHitPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_stepHeightFromGround
float RootMotion::FinalIK::Grounding::Leg::get_stepHeightFromGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_stepHeightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stepHeightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.get_rootYOffset
float RootMotion::FinalIK::Grounding::Leg::get_rootYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_rootYOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootYOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.SetFootPosition
void RootMotion::FinalIK::Grounding::Leg::SetFootPosition(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::SetFootPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.Initiate
void RootMotion::FinalIK::Grounding::Leg::Initiate(RootMotion::FinalIK::Grounding* grounding, UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grounding), ::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, grounding, transform);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.OnEnable
void RootMotion::FinalIK::Grounding::Leg::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.Reset
void RootMotion::FinalIK::Grounding::Leg::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.Process
void RootMotion::FinalIK::Grounding::Leg::Process() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.GetCapsuleHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::GetCapsuleHit(UnityEngine::Vector3 offsetFromHeel) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetCapsuleHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCapsuleHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetFromHeel)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method, offsetFromHeel);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.GetRaycastHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::GetRaycastHit(UnityEngine::Vector3 offsetFromHeel) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetRaycastHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRaycastHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetFromHeel)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method, offsetFromHeel);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.RotateNormal
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::RotateNormal(UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::RotateNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, normal);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.SetFootToPoint
void RootMotion::FinalIK::Grounding::Leg::SetFootToPoint(UnityEngine::Vector3 normal, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::SetFootToPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootToPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, normal, point);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.SetFootToPlane
void RootMotion::FinalIK::Grounding::Leg::SetFootToPlane(UnityEngine::Vector3 planeNormal, UnityEngine::Vector3 planePoint, UnityEngine::Vector3 heelHitPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::SetFootToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(planeNormal), ::il2cpp_utils::ExtractType(planePoint), ::il2cpp_utils::ExtractType(heelHitPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, planeNormal, planePoint, heelHitPoint);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.GetHeightFromGround
float RootMotion::FinalIK::Grounding::Leg::GetHeightFromGround(UnityEngine::Vector3 hitPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetHeightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHeightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hitPoint)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, hitPoint);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.RotateFoot
void RootMotion::FinalIK::Grounding::Leg::RotateFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::RotateFoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateFoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Leg.GetRotationOffsetTarget
UnityEngine::Quaternion RootMotion::FinalIK::Grounding::Leg::GetRotationOffsetTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetRotationOffsetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotationOffsetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis
#include "RootMotion/FinalIK/Grounding_Pelvis.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.get_IKOffset
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Pelvis::get_IKOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::get_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.set_IKOffset
void RootMotion::FinalIK::Grounding::Pelvis::set_IKOffset(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::set_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.get_heightOffset
float RootMotion::FinalIK::Grounding::Pelvis::get_heightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::get_heightOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_heightOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.set_heightOffset
void RootMotion::FinalIK::Grounding::Pelvis::set_heightOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::set_heightOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_heightOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.Initiate
void RootMotion::FinalIK::Grounding::Pelvis::Initiate(RootMotion::FinalIK::Grounding* grounding) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grounding)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, grounding);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.Reset
void RootMotion::FinalIK::Grounding::Pelvis::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.OnEnable
void RootMotion::FinalIK::Grounding::Pelvis::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis.Process
void RootMotion::FinalIK::Grounding::Pelvis::Process(float lowestOffset, float highestOffset, bool isGrounded) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowestOffset), ::il2cpp_utils::ExtractType(highestOffset), ::il2cpp_utils::ExtractType(isGrounded)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowestOffset, highestOffset, isGrounded);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.AimIK
#include "RootMotion/FinalIK/AimIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverAim
#include "RootMotion/FinalIK/IKSolverAim.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenSetupTutorial
void RootMotion::FinalIK::AimIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.SupportGroup
void RootMotion::FinalIK::AimIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.ASThread
void RootMotion::FinalIK::AimIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenUserManual
void RootMotion::FinalIK::AimIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenScriptReference
void RootMotion::FinalIK::AimIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::AimIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ArmIK
#include "RootMotion/FinalIK/ArmIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverArm
#include "RootMotion/FinalIK/IKSolverArm.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ArmIK.SupportGroup
void RootMotion::FinalIK::ArmIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.ASThread
void RootMotion::FinalIK::ArmIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.OpenUserManual
void RootMotion::FinalIK::ArmIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.OpenScriptReference
void RootMotion::FinalIK::ArmIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::ArmIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.CCDIK
#include "RootMotion/FinalIK/CCDIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverCCD
#include "RootMotion/FinalIK/IKSolverCCD.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.CCDIK.SupportGroup
void RootMotion::FinalIK::CCDIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.ASThread
void RootMotion::FinalIK::CCDIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.OpenUserManual
void RootMotion::FinalIK::CCDIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.OpenScriptReference
void RootMotion::FinalIK::CCDIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::CCDIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FABRIK
#include "RootMotion/FinalIK/FABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIK
#include "RootMotion/FinalIK/IKSolverFABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FABRIK.SupportGroup
void RootMotion::FinalIK::FABRIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.ASThread
void RootMotion::FinalIK::FABRIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.OpenUserManual
void RootMotion::FinalIK::FABRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.OpenScriptReference
void RootMotion::FinalIK::FABRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FABRIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FABRIKRoot
#include "RootMotion/FinalIK/FABRIKRoot.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIKRoot
#include "RootMotion/FinalIK/IKSolverFABRIKRoot.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.SupportGroup
void RootMotion::FinalIK::FABRIKRoot::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.ASThread
void RootMotion::FinalIK::FABRIKRoot::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.OpenUserManual
void RootMotion::FinalIK::FABRIKRoot::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.OpenScriptReference
void RootMotion::FinalIK::FABRIKRoot::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FABRIKRoot::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenSetupTutorial
void RootMotion::FinalIK::FullBodyBipedIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenInspectorTutorial
void RootMotion::FinalIK::FullBodyBipedIK::OpenInspectorTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenInspectorTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenInspectorTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.SupportGroup
void RootMotion::FinalIK::FullBodyBipedIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ASThread
void RootMotion::FinalIK::FullBodyBipedIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.SetReferences
void RootMotion::FinalIK::FullBodyBipedIK::SetReferences(RootMotion::BipedReferences* references, UnityEngine::Transform* rootNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::SetReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(rootNode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references, rootNode);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ReferencesError
bool RootMotion::FinalIK::FullBodyBipedIK::ReferencesError(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::ReferencesError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReferencesError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ReferencesWarning
bool RootMotion::FinalIK::FullBodyBipedIK::ReferencesWarning(::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::ReferencesWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReferencesWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, warningMessage);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.Reinitiate
void RootMotion::FinalIK::FullBodyBipedIK::Reinitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::Reinitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reinitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.AutoDetectReferences
void RootMotion::FinalIK::FullBodyBipedIK::AutoDetectReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenUserManual
void RootMotion::FinalIK::FullBodyBipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenScriptReference
void RootMotion::FinalIK::FullBodyBipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FullBodyBipedIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::IK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.OpenUserManual
void RootMotion::FinalIK::IK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.OpenScriptReference
void RootMotion::FinalIK::IK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.UpdateSolver
void RootMotion::FinalIK::IK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.InitiateSolver
void RootMotion::FinalIK::IK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.FixTransforms
void RootMotion::FinalIK::IK::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKExecutionOrder
#include "RootMotion/FinalIK/IKExecutionOrder.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.get_animatePhysics
bool RootMotion::FinalIK::IKExecutionOrder::get_animatePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::get_animatePhysics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animatePhysics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.Start
void RootMotion::FinalIK::IKExecutionOrder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.Update
void RootMotion::FinalIK::IKExecutionOrder::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.FixedUpdate
void RootMotion::FinalIK::IKExecutionOrder::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.LateUpdate
void RootMotion::FinalIK::IKExecutionOrder::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.FixTransforms
void RootMotion::FinalIK::IKExecutionOrder::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LegIK
#include "RootMotion/FinalIK/LegIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLeg
#include "RootMotion/FinalIK/IKSolverLeg.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.LegIK.SupportGroup
void RootMotion::FinalIK::LegIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.ASThread
void RootMotion::FinalIK::LegIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.OpenUserManual
void RootMotion::FinalIK::LegIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.OpenScriptReference
void RootMotion::FinalIK::LegIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LegIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LimbIK
#include "RootMotion/FinalIK/LimbIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.LimbIK.SupportGroup
void RootMotion::FinalIK::LimbIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.ASThread
void RootMotion::FinalIK::LimbIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.OpenUserManual
void RootMotion::FinalIK::LimbIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.OpenScriptReference
void RootMotion::FinalIK::LimbIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LimbIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LookAtIK
#include "RootMotion/FinalIK/LookAtIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLookAt
#include "RootMotion/FinalIK/IKSolverLookAt.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.LookAtIK.SupportGroup
void RootMotion::FinalIK::LookAtIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.ASThread
void RootMotion::FinalIK::LookAtIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.OpenUserManual
void RootMotion::FinalIK::LookAtIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.OpenScriptReference
void RootMotion::FinalIK::LookAtIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LookAtIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.TrigonometricIK
#include "RootMotion/FinalIK/TrigonometricIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverTrigonometric
#include "RootMotion/FinalIK/IKSolverTrigonometric.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.SupportGroup
void RootMotion::FinalIK::TrigonometricIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.ASThread
void RootMotion::FinalIK::TrigonometricIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.OpenUserManual
void RootMotion::FinalIK::TrigonometricIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.OpenScriptReference
void RootMotion::FinalIK::TrigonometricIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::TrigonometricIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
// Including type: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References
#include "RootMotion/FinalIK/VRIK_References.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenSetupTutorial
void RootMotion::FinalIK::VRIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.AutoDetectReferences
void RootMotion::FinalIK::VRIK::AutoDetectReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.GuessHandOrientations
void RootMotion::FinalIK::VRIK::GuessHandOrientations() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::GuessHandOrientations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuessHandOrientations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenUserManual
void RootMotion::FinalIK::VRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenScriptReference
void RootMotion::FinalIK::VRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::VRIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.InitiateSolver
void RootMotion::FinalIK::VRIK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.UpdateSolver
void RootMotion::FinalIK::VRIK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References
#include "RootMotion/FinalIK/VRIK_References.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References.get_isFilled
bool RootMotion::FinalIK::VRIK::References::get_isFilled() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::References::get_isFilled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFilled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References.get_isEmpty
bool RootMotion::FinalIK::VRIK::References::get_isEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::References::get_isEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References.GetTransforms
::Array<UnityEngine::Transform*>* RootMotion::FinalIK::VRIK::References::GetTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::References::GetTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References.AutoDetectReferences
bool RootMotion::FinalIK::VRIK::References::AutoDetectReferences(UnityEngine::Transform* root, RootMotion::FinalIK::VRIK::References*& references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::References::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIK/References", "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::VRIK::References*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, root, references);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FABRIKChain
#include "RootMotion/FinalIK/FABRIKChain.hpp"
// Including type: RootMotion.FinalIK.FABRIK
#include "RootMotion/FinalIK/FABRIK.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.IsValid
bool RootMotion::FinalIK::FABRIKChain::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKChain::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.Initiate
void RootMotion::FinalIK::FABRIKChain::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKChain::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.Stage1
void RootMotion::FinalIK::FABRIKChain::Stage1(::Array<RootMotion::FinalIK::FABRIKChain*>* chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKChain::Stage1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chain);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.Stage2
void RootMotion::FinalIK::FABRIKChain::Stage2(UnityEngine::Vector3 rootPosition, ::Array<RootMotion::FinalIK::FABRIKChain*>* chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKChain::Stage2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootPosition), ::il2cpp_utils::ExtractType(chain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootPosition, chain);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.GetCentroid
UnityEngine::Vector3 RootMotion::FinalIK::FABRIKChain::GetCentroid(::Array<RootMotion::FinalIK::FABRIKChain*>* chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKChain::GetCentroid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCentroid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, chain);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBBIKArmBending
#include "RootMotion/FinalIK/FBBIKArmBending.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FBBIKArmBending.LateUpdate
void RootMotion::FinalIK::FBBIKArmBending::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKArmBending::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKArmBending.OnPostFBBIK
void RootMotion::FinalIK::FBBIKArmBending::OnPostFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKArmBending::OnPostFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKArmBending.OnDestroy
void RootMotion::FinalIK::FBBIKArmBending::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKArmBending::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FBBIKHeadEffector
#include "RootMotion/FinalIK/FBBIKHeadEffector.hpp"
// Including type: RootMotion.FinalIK.FBBIKHeadEffector/RootMotion.FinalIK.BendBone
#include "RootMotion/FinalIK/FBBIKHeadEffector_BendBone.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate
#include "RootMotion/FinalIK/IKSolver_UpdateDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.Start
void RootMotion::FinalIK::FBBIKHeadEffector::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnStoreDefaultLocalState
void RootMotion::FinalIK::FBBIKHeadEffector::OnStoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::OnStoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnStoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnFixTransforms
void RootMotion::FinalIK::FBBIKHeadEffector::OnFixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::OnFixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnPreRead
void RootMotion::FinalIK::FBBIKHeadEffector::OnPreRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::OnPreRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.SpineBend
void RootMotion::FinalIK::FBBIKHeadEffector::SpineBend() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::SpineBend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpineBend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.CCDPass
void RootMotion::FinalIK::FBBIKHeadEffector::CCDPass() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::CCDPass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CCDPass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.Iterate
void RootMotion::FinalIK::FBBIKHeadEffector::Iterate(int iteration) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::Iterate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Iterate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(iteration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, iteration);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnPostUpdate
void RootMotion::FinalIK::FBBIKHeadEffector::OnPostUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::OnPostUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.ChestDirection
void RootMotion::FinalIK::FBBIKHeadEffector::ChestDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::ChestDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChestDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.PostStretching
void RootMotion::FinalIK::FBBIKHeadEffector::PostStretching() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::PostStretching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostStretching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.LerpSolverPosition
void RootMotion::FinalIK::FBBIKHeadEffector::LerpSolverPosition(RootMotion::FinalIK::IKEffector* effector, UnityEngine::Vector3 position, float weight, UnityEngine::Vector3 offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::LerpSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, position, weight, offset);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.Solve
void RootMotion::FinalIK::FBBIKHeadEffector::Solve(UnityEngine::Vector3& pos1, UnityEngine::Vector3& pos2, float nominalDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(nominalDistance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos1, pos2, nominalDistance);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnDestroy
void RootMotion::FinalIK::FBBIKHeadEffector::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBBIKHeadEffector/RootMotion.FinalIK.BendBone
#include "RootMotion/FinalIK/FBBIKHeadEffector_BendBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector/RootMotion.FinalIK.BendBone.StoreDefaultLocalState
void RootMotion::FinalIK::FBBIKHeadEffector::BendBone::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::BendBone::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector/RootMotion.FinalIK.BendBone.FixTransforms
void RootMotion::FinalIK::FBBIKHeadEffector::BendBone::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::BendBone::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FBIKChain
#include "RootMotion/FinalIK/FBIKChain.hpp"
// Including type: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint
#include "RootMotion/FinalIK/FBIKChain_ChildConstraint.hpp"
// Including type: RootMotion.FinalIK.IKConstraintBend
#include "RootMotion/FinalIK/IKConstraintBend.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single maxLimbLength
float RootMotion::FinalIK::FBIKChain::_get_maxLimbLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::_get_maxLimbLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("RootMotion.FinalIK", "FBIKChain", "maxLimbLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single maxLimbLength
void RootMotion::FinalIK::FBIKChain::_set_maxLimbLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::_set_maxLimbLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain", "maxLimbLength", value));
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SetNodes
void RootMotion::FinalIK::FBIKChain::SetNodes(::Array<UnityEngine::Transform*>* boneTransforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SetNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneTransforms)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, boneTransforms);
}
// Creating initializer_list -> params proxy for: System.Void SetNodes(params UnityEngine.Transform[] boneTransforms)
void RootMotion::FinalIK::FBIKChain::SetNodes(std::initializer_list<UnityEngine::Transform*> boneTransforms) {
  RootMotion::FinalIK::FBIKChain::SetNodes(::Array<UnityEngine::Transform*>::New(boneTransforms));
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.GetNodeIndex
int RootMotion::FinalIK::FBIKChain::GetNodeIndex(UnityEngine::Transform* boneTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::GetNodeIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodeIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneTransform)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, boneTransform);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.IsValid
bool RootMotion::FinalIK::FBIKChain::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Initiate
void RootMotion::FinalIK::FBIKChain::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.ReadPose
void RootMotion::FinalIK::FBIKChain::ReadPose(RootMotion::FinalIK::IKSolverFullBody* solver, bool fullBody) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(fullBody)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, fullBody);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.CalculateBoneLengths
void RootMotion::FinalIK::FBIKChain::CalculateBoneLengths(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::CalculateBoneLengths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateBoneLengths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Reach
void RootMotion::FinalIK::FBIKChain::Reach(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Reach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Push
UnityEngine::Vector3 RootMotion::FinalIK::FBIKChain::Push(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Push");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Push", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveTrigonometric
void RootMotion::FinalIK::FBIKChain::SolveTrigonometric(RootMotion::FinalIK::IKSolverFullBody* solver, bool calculateBendDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SolveTrigonometric");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveTrigonometric", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(calculateBendDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, calculateBendDirection);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Stage1
void RootMotion::FinalIK::FBIKChain::Stage1(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Stage1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Stage2
void RootMotion::FinalIK::FBIKChain::Stage2(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Stage2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, position);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveConstraintSystems
void RootMotion::FinalIK::FBIKChain::SolveConstraintSystems(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SolveConstraintSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveConstraintSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveFABRIKJoint
UnityEngine::Vector3 RootMotion::FinalIK::FBIKChain::SolveFABRIKJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SolveFABRIKJoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveFABRIKJoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, pos1, pos2, length);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.GetDirToBendPoint
UnityEngine::Vector3 RootMotion::FinalIK::FBIKChain::GetDirToBendPoint(UnityEngine::Vector3 direction, UnityEngine::Vector3 bendDirection, float directionMagnitude) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::GetDirToBendPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDirToBendPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(bendDirection), ::il2cpp_utils::ExtractType(directionMagnitude)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, direction, bendDirection, directionMagnitude);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveChildConstraints
void RootMotion::FinalIK::FBIKChain::SolveChildConstraints(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SolveChildConstraints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveChildConstraints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveLinearConstraint
void RootMotion::FinalIK::FBIKChain::SolveLinearConstraint(RootMotion::FinalIK::IKSolver::Node* node1, RootMotion::FinalIK::IKSolver::Node* node2, float crossFade, float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SolveLinearConstraint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveLinearConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node1), ::il2cpp_utils::ExtractType(node2), ::il2cpp_utils::ExtractType(crossFade), ::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node1, node2, crossFade, distance);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.ForwardReach
void RootMotion::FinalIK::FBIKChain::ForwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ForwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.BackwardReach
void RootMotion::FinalIK::FBIKChain::BackwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::BackwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint
#include "RootMotion/FinalIK/FBIKChain_ChildConstraint.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.get_nominalDistance
float RootMotion::FinalIK::FBIKChain::ChildConstraint::get_nominalDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::get_nominalDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_nominalDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.set_nominalDistance
void RootMotion::FinalIK::FBIKChain::ChildConstraint::set_nominalDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::set_nominalDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_nominalDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.get_isRigid
bool RootMotion::FinalIK::FBIKChain::ChildConstraint::get_isRigid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::get_isRigid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRigid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.set_isRigid
void RootMotion::FinalIK::FBIKChain::ChildConstraint::set_isRigid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::set_isRigid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isRigid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.Initiate
void RootMotion::FinalIK::FBIKChain::ChildConstraint::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.OnPreSolve
void RootMotion::FinalIK::FBIKChain::ChildConstraint::OnPreSolve(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::OnPreSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint.Solve
void RootMotion::FinalIK::FBIKChain::ChildConstraint::Solve(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing
#include "RootMotion/FinalIK/FBIKChain.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing None
RootMotion::FinalIK::FBIKChain::Smoothing RootMotion::FinalIK::FBIKChain::Smoothing::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FBIKChain::Smoothing>("RootMotion.FinalIK", "FBIKChain/Smoothing", "None"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing None
void RootMotion::FinalIK::FBIKChain::Smoothing::_set_None(RootMotion::FinalIK::FBIKChain::Smoothing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain/Smoothing", "None", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Exponential
RootMotion::FinalIK::FBIKChain::Smoothing RootMotion::FinalIK::FBIKChain::Smoothing::_get_Exponential() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_get_Exponential");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FBIKChain::Smoothing>("RootMotion.FinalIK", "FBIKChain/Smoothing", "Exponential"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Exponential
void RootMotion::FinalIK::FBIKChain::Smoothing::_set_Exponential(RootMotion::FinalIK::FBIKChain::Smoothing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_set_Exponential");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain/Smoothing", "Exponential", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Cubic
RootMotion::FinalIK::FBIKChain::Smoothing RootMotion::FinalIK::FBIKChain::Smoothing::_get_Cubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_get_Cubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FBIKChain::Smoothing>("RootMotion.FinalIK", "FBIKChain/Smoothing", "Cubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Cubic
void RootMotion::FinalIK::FBIKChain::Smoothing::_set_Cubic(RootMotion::FinalIK::FBIKChain::Smoothing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_set_Cubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain/Smoothing", "Cubic", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKConstraintBend
#include "RootMotion/FinalIK/IKConstraintBend.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.Warning/RootMotion.Logger
#include "RootMotion/Warning_Logger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.get_initiated
bool RootMotion::FinalIK::IKConstraintBend::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.set_initiated
void RootMotion::FinalIK::IKConstraintBend::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.IsValid
bool RootMotion::FinalIK::IKConstraintBend::IsValid(RootMotion::FinalIK::IKSolverFullBody* solver, RootMotion::Warning::Logger* logger) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(logger)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, logger);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.SetBones
void RootMotion::FinalIK::IKConstraintBend::SetBones(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2, bone3);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.Initiate
void RootMotion::FinalIK::IKConstraintBend::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.SetLimbOrientation
void RootMotion::FinalIK::IKConstraintBend::SetLimbOrientation(UnityEngine::Vector3 upper, UnityEngine::Vector3 lower, UnityEngine::Vector3 last) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::SetLimbOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimbOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(upper), ::il2cpp_utils::ExtractType(lower), ::il2cpp_utils::ExtractType(last)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, upper, lower, last);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.LimitBend
void RootMotion::FinalIK::IKConstraintBend::LimitBend(float solverWeight, float positionWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::LimitBend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitBend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solverWeight), ::il2cpp_utils::ExtractType(positionWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solverWeight, positionWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.GetDir
UnityEngine::Vector3 RootMotion::FinalIK::IKConstraintBend::GetDir(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::GetDir");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDir", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.OrthoToLimb
UnityEngine::Vector3 RootMotion::FinalIK::IKConstraintBend::OrthoToLimb(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Vector3 tangent) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::OrthoToLimb");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OrthoToLimb", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(tangent)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver, tangent);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.OrthoToBone1
UnityEngine::Vector3 RootMotion::FinalIK::IKConstraintBend::OrthoToBone1(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Vector3 tangent) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::OrthoToBone1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OrthoToBone1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(tangent)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver, tangent);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKEffector.get_isEndEffector
bool RootMotion::FinalIK::IKEffector::get_isEndEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::get_isEndEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEndEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.set_isEndEffector
void RootMotion::FinalIK::IKEffector::set_isEndEffector(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::set_isEndEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isEndEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.GetNode
RootMotion::FinalIK::IKSolver::Node* RootMotion::FinalIK::IKEffector::GetNode(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::GetNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Node*, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.PinToBone
void RootMotion::FinalIK::IKEffector::PinToBone(float positionWeight, float rotationWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::PinToBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PinToBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionWeight), ::il2cpp_utils::ExtractType(rotationWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positionWeight, rotationWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.IsValid
bool RootMotion::FinalIK::IKEffector::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.Initiate
void RootMotion::FinalIK::IKEffector::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.ResetOffset
void RootMotion::FinalIK::IKEffector::ResetOffset(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::ResetOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.SetToTarget
void RootMotion::FinalIK::IKEffector::SetToTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::SetToTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.OnPreSolve
void RootMotion::FinalIK::IKEffector::OnPreSolve(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::OnPreSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.OnPostWrite
void RootMotion::FinalIK::IKEffector::OnPostWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::OnPostWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.GetPlaneRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKEffector::GetPlaneRotation(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::GetPlaneRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlaneRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.Update
void RootMotion::FinalIK::IKEffector::Update(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.GetPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKEffector::GetPosition(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Quaternion& planeRotationOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::GetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver, planeRotationOffset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMapping
#include "RootMotion/FinalIK/IKMapping.hpp"
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.Warning/RootMotion.Logger
#include "RootMotion/Warning_Logger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMapping.IsValid
bool RootMotion::FinalIK::IKMapping::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping.Initiate
void RootMotion::FinalIK::IKMapping::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping.BoneIsValid
bool RootMotion::FinalIK::IKMapping::BoneIsValid(UnityEngine::Transform* bone, RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message, RootMotion::Warning::Logger* logger) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BoneIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(logger)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bone, solver, message, logger);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping.SolveFABRIKJoint
UnityEngine::Vector3 RootMotion::FinalIK::IKMapping::SolveFABRIKJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::SolveFABRIKJoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveFABRIKJoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, pos1, pos2, length);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.get_swingDirection
UnityEngine::Vector3 RootMotion::FinalIK::IKMapping::BoneMap::get_swingDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::get_swingDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_swingDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.get_isNodeBone
bool RootMotion::FinalIK::IKMapping::BoneMap::get_isNodeBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::get_isNodeBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isNodeBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.get_lastAnimatedTargetRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKMapping::BoneMap::get_lastAnimatedTargetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::get_lastAnimatedTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastAnimatedTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.Initiate
void RootMotion::FinalIK::IKMapping::BoneMap::Initiate(UnityEngine::Transform* transform, RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transform, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.StoreDefaultLocalState
void RootMotion::FinalIK::IKMapping::BoneMap::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.FixTransform
void RootMotion::FinalIK::IKMapping::BoneMap::FixTransform(bool position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::FixTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetLength
void RootMotion::FinalIK::IKMapping::BoneMap::SetLength(RootMotion::FinalIK::IKMapping::BoneMap* nextBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nextBone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nextBone);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetLocalSwingAxis
void RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis(RootMotion::FinalIK::IKMapping::BoneMap* swingTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalSwingAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingTarget);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetLocalSwingAxis
void RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis(RootMotion::FinalIK::IKMapping::BoneMap* bone1, RootMotion::FinalIK::IKMapping::BoneMap* bone2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalSwingAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetLocalTwistAxis
void RootMotion::FinalIK::IKMapping::BoneMap::SetLocalTwistAxis(UnityEngine::Vector3 twistDirection, UnityEngine::Vector3 normalDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetLocalTwistAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalTwistAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(twistDirection), ::il2cpp_utils::ExtractType(normalDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, twistDirection, normalDirection);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetPlane
void RootMotion::FinalIK::IKMapping::BoneMap::SetPlane(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Transform* planeBone1, UnityEngine::Transform* planeBone2, UnityEngine::Transform* planeBone3) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(planeBone1), ::il2cpp_utils::ExtractType(planeBone2), ::il2cpp_utils::ExtractType(planeBone3)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, planeBone1, planeBone2, planeBone3);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.UpdatePlane
void RootMotion::FinalIK::IKMapping::BoneMap::UpdatePlane(bool rotation, bool position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::UpdatePlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotation, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetIKPosition
void RootMotion::FinalIK::IKMapping::BoneMap::SetIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.MaintainRotation
void RootMotion::FinalIK::IKMapping::BoneMap::MaintainRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::MaintainRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaintainRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.SetToIKPosition
void RootMotion::FinalIK::IKMapping::BoneMap::SetToIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetToIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.FixToNode
void RootMotion::FinalIK::IKMapping::BoneMap::FixToNode(RootMotion::FinalIK::IKSolverFullBody* solver, float weight, RootMotion::FinalIK::IKSolver::Node* fixNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::FixToNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixToNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(fixNode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight, fixNode);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.GetPlanePosition
UnityEngine::Vector3 RootMotion::FinalIK::IKMapping::BoneMap::GetPlanePosition(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::GetPlanePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlanePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.PositionToPlane
void RootMotion::FinalIK::IKMapping::BoneMap::PositionToPlane(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::PositionToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PositionToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.RotateToPlane
void RootMotion::FinalIK::IKMapping::BoneMap::RotateToPlane(RootMotion::FinalIK::IKSolverFullBody* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::RotateToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.Swing
void RootMotion::FinalIK::IKMapping::BoneMap::Swing(UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::Swing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.Swing
void RootMotion::FinalIK::IKMapping::BoneMap::Swing(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::Swing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos1, pos2, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.Twist
void RootMotion::FinalIK::IKMapping::BoneMap::Twist(UnityEngine::Vector3 twistDirection, UnityEngine::Vector3 normalDirection, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::Twist");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Twist", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(twistDirection), ::il2cpp_utils::ExtractType(normalDirection), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, twistDirection, normalDirection, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.RotateToMaintain
void RootMotion::FinalIK::IKMapping::BoneMap::RotateToMaintain(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::RotateToMaintain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToMaintain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.RotateToEffector
void RootMotion::FinalIK::IKMapping::BoneMap::RotateToEffector(RootMotion::FinalIK::IKSolverFullBody* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::RotateToEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap.GetTargetRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKMapping::BoneMap::GetTargetRotation(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::GetTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, solver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMappingBone
#include "RootMotion/FinalIK/IKMappingBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.StoreDefaultLocalState
void RootMotion::FinalIK::IKMappingBone::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.FixTransforms
void RootMotion::FinalIK::IKMappingBone::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.ReadPose
void RootMotion::FinalIK::IKMappingBone::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.WritePose
void RootMotion::FinalIK::IKMappingBone::WritePose(float solverWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::WritePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solverWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solverWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.IsValid
bool RootMotion::FinalIK::IKMappingBone::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.Initiate
void RootMotion::FinalIK::IKMappingBone::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMappingLimb
#include "RootMotion/FinalIK/IKMappingLimb.hpp"
// Including type: RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType
#include "RootMotion/FinalIK/IKMappingLimb_BoneMapType.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.GetBoneMap
RootMotion::FinalIK::IKMapping::BoneMap* RootMotion::FinalIK::IKMappingLimb::GetBoneMap(RootMotion::FinalIK::IKMappingLimb::BoneMapType boneMap) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::GetBoneMap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoneMap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneMap)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMapping::BoneMap*, false>(this, ___internal__method, boneMap);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.SetLimbOrientation
void RootMotion::FinalIK::IKMappingLimb::SetLimbOrientation(UnityEngine::Vector3 upper, UnityEngine::Vector3 lower) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::SetLimbOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimbOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(upper), ::il2cpp_utils::ExtractType(lower)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, upper, lower);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.SetBones
void RootMotion::FinalIK::IKMappingLimb::SetBones(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, UnityEngine::Transform* parentBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(parentBone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2, bone3, parentBone);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.StoreDefaultLocalState
void RootMotion::FinalIK::IKMappingLimb::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.FixTransforms
void RootMotion::FinalIK::IKMappingLimb::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.ReadPose
void RootMotion::FinalIK::IKMappingLimb::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.WritePose
void RootMotion::FinalIK::IKMappingLimb::WritePose(RootMotion::FinalIK::IKSolverFullBody* solver, bool fullBody) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::WritePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(fullBody)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, fullBody);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.IsValid
bool RootMotion::FinalIK::IKMappingLimb::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.Initiate
void RootMotion::FinalIK::IKMappingLimb::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType
#include "RootMotion/FinalIK/IKMappingLimb_BoneMapType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Parent
RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Parent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Parent"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Parent
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Parent(RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Parent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Parent", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone1
RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone1"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone1
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone1(RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone1", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone2
RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone2"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone2
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone2(RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone2", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone3
RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone3() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone3"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/RootMotion.FinalIK.BoneMapType Bone3
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone3(RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone3", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMappingSpine
#include "RootMotion/FinalIK/IKMappingSpine.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.SetBones
void RootMotion::FinalIK::IKMappingSpine::SetBones(::Array<UnityEngine::Transform*>* spineBones, UnityEngine::Transform* leftUpperArmBone, UnityEngine::Transform* rightUpperArmBone, UnityEngine::Transform* leftThighBone, UnityEngine::Transform* rightThighBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spineBones), ::il2cpp_utils::ExtractType(leftUpperArmBone), ::il2cpp_utils::ExtractType(rightUpperArmBone), ::il2cpp_utils::ExtractType(leftThighBone), ::il2cpp_utils::ExtractType(rightThighBone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, spineBones, leftUpperArmBone, rightUpperArmBone, leftThighBone, rightThighBone);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.StoreDefaultLocalState
void RootMotion::FinalIK::IKMappingSpine::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.FixTransforms
void RootMotion::FinalIK::IKMappingSpine::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.UseFABRIK
bool RootMotion::FinalIK::IKMappingSpine::UseFABRIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::UseFABRIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UseFABRIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.ReadPose
void RootMotion::FinalIK::IKMappingSpine::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.WritePose
void RootMotion::FinalIK::IKMappingSpine::WritePose(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::WritePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.ForwardReach
void RootMotion::FinalIK::IKMappingSpine::ForwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::ForwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.BackwardReach
void RootMotion::FinalIK::IKMappingSpine::BackwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::BackwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.MapToSolverPositions
void RootMotion::FinalIK::IKMappingSpine::MapToSolverPositions(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::MapToSolverPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapToSolverPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.IsValid
bool RootMotion::FinalIK::IKMappingSpine::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.Initiate
void RootMotion::FinalIK::IKMappingSpine::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate
#include "RootMotion/FinalIK/IKSolver_UpdateDelegate.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver.get_initiated
bool RootMotion::FinalIK::IKSolver::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.set_initiated
void RootMotion::FinalIK::IKSolver::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.IsValid
bool RootMotion::FinalIK::IKSolver::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.IsValid
bool RootMotion::FinalIK::IKSolver::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.Initiate
void RootMotion::FinalIK::IKSolver::Initiate(UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.Update
void RootMotion::FinalIK::IKSolver::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetIKPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolver::GetIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::GetIKPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.SetIKPosition
void RootMotion::FinalIK::IKSolver::SetIKPosition(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::SetIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetIKPositionWeight
float RootMotion::FinalIK::IKSolver::GetIKPositionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::GetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPositionWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.SetIKPositionWeight
void RootMotion::FinalIK::IKSolver::SetIKPositionWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::SetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPositionWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetRoot
UnityEngine::Transform* RootMotion::FinalIK::IKSolver::GetRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::GetRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolver::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolver::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.FixTransforms
void RootMotion::FinalIK::IKSolver::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolver::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.OnInitiate
void RootMotion::FinalIK::IKSolver::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.OnUpdate
void RootMotion::FinalIK::IKSolver::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.LogWarning
void RootMotion::FinalIK::IKSolver::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.ContainsDuplicateBone
UnityEngine::Transform* RootMotion::FinalIK::IKSolver::ContainsDuplicateBone(::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::ContainsDuplicateBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver", "ContainsDuplicateBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.HierarchyIsValid
bool RootMotion::FinalIK::IKSolver::HierarchyIsValid(::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::HierarchyIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver", "HierarchyIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.PreSolveBones
float RootMotion::FinalIK::IKSolver::PreSolveBones(::Array<RootMotion::FinalIK::IKSolver::Bone*>*& bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::PreSolveBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver", "PreSolveBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolver::Point::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.FixTransform
void RootMotion::FinalIK::IKSolver::Point::FixTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::FixTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.UpdateSolverPosition
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::UpdateSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.UpdateSolverLocalPosition
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverLocalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.UpdateSolverState
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::UpdateSolverState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point.UpdateSolverLocalState
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.get_rotationLimit
RootMotion::FinalIK::RotationLimit* RootMotion::FinalIK::IKSolver::Bone::get_rotationLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::get_rotationLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::RotationLimit*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.set_rotationLimit
void RootMotion::FinalIK::IKSolver::Bone::set_rotationLimit(RootMotion::FinalIK::RotationLimit* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::set_rotationLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotationLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.Swing
void RootMotion::FinalIK::IKSolver::Bone::Swing(UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::Swing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.SolverSwing
void RootMotion::FinalIK::IKSolver::Bone::SolverSwing(::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones, int index, UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::SolverSwing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver/Bone", "SolverSwing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.Swing2D
void RootMotion::FinalIK::IKSolver::Bone::Swing2D(UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::Swing2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone.SetToSolverPosition
void RootMotion::FinalIK::IKSolver::Bone::SetToSolverPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::SetToSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate
#include "RootMotion/FinalIK/IKSolver_UpdateDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate.Invoke
void RootMotion::FinalIK::IKSolver::UpdateDelegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::UpdateDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::IKSolver::UpdateDelegate::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::UpdateDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate.EndInvoke
void RootMotion::FinalIK::IKSolver::UpdateDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::UpdateDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.IterationDelegate.Invoke
void RootMotion::FinalIK::IKSolver::IterationDelegate::Invoke(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::IterationDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.IterationDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::IKSolver::IterationDelegate::BeginInvoke(int i, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::IterationDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, i, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.IterationDelegate.EndInvoke
void RootMotion::FinalIK::IKSolver::IterationDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::IterationDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverAim
#include "RootMotion/FinalIK/IKSolverAim.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.get_transformAxis
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverAim::get_transformAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::get_transformAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transformAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.get_transformPoleAxis
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverAim::get_transformPoleAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::get_transformPoleAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transformPoleAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.GetAngle
float RootMotion::FinalIK::IKSolverAim::GetAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::GetAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.Solve
void RootMotion::FinalIK::IKSolverAim::Solve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.GetClampedIKPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverAim::GetClampedIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::GetClampedIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClampedIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.RotateToTarget
void RootMotion::FinalIK::IKSolverAim::RotateToTarget(UnityEngine::Vector3 targetPosition, RootMotion::FinalIK::IKSolver::Bone* bone, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::RotateToTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition), ::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetPosition, bone, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.get_minBones
int RootMotion::FinalIK::IKSolverAim::get_minBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::get_minBones");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.get_localDirection
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverAim::get_localDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::get_localDirection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.OnInitiate
void RootMotion::FinalIK::IKSolverAim::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.OnUpdate
void RootMotion::FinalIK::IKSolverAim::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverArm
#include "RootMotion/FinalIK/IKSolverArm.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.SetChain
bool RootMotion::FinalIK::IKSolverArm::SetChain(UnityEngine::Transform* chest, UnityEngine::Transform* shoulder, UnityEngine::Transform* upperArm, UnityEngine::Transform* forearm, UnityEngine::Transform* hand, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::SetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chest), ::il2cpp_utils::ExtractType(shoulder), ::il2cpp_utils::ExtractType(upperArm), ::il2cpp_utils::ExtractType(forearm), ::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, chest, shoulder, upperArm, forearm, hand, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.Solve
void RootMotion::FinalIK::IKSolverArm::Solve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.Read
void RootMotion::FinalIK::IKSolverArm::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.Write
void RootMotion::FinalIK::IKSolverArm::Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.IsValid
bool RootMotion::FinalIK::IKSolverArm::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverArm::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverArm::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverArm::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.FixTransforms
void RootMotion::FinalIK::IKSolverArm::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.OnInitiate
void RootMotion::FinalIK::IKSolverArm::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.OnUpdate
void RootMotion::FinalIK::IKSolverArm::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverCCD
#include "RootMotion/FinalIK/IKSolverCCD.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverCCD.FadeOutBoneWeights
void RootMotion::FinalIK::IKSolverCCD::FadeOutBoneWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverCCD::FadeOutBoneWeights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOutBoneWeights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverCCD.Solve
void RootMotion::FinalIK::IKSolverCCD::Solve(UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverCCD::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverCCD.OnInitiate
void RootMotion::FinalIK::IKSolverCCD::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverCCD::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverCCD.OnUpdate
void RootMotion::FinalIK::IKSolverCCD::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverCCD::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverFABRIK
#include "RootMotion/FinalIK/IKSolverFABRIK.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolveForward
void RootMotion::FinalIK::IKSolverFABRIK::SolveForward(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolveForward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveForward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolveBackward
void RootMotion::FinalIK::IKSolverFABRIK::SolveBackward(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolveBackward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveBackward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolveJoint
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFABRIK::SolveJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolveJoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveJoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, pos1, pos2, length);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.OnPreSolve
void RootMotion::FinalIK::IKSolverFABRIK::OnPreSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::OnPreSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.OnPostSolve
void RootMotion::FinalIK::IKSolverFABRIK::OnPostSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::OnPostSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.Solve
void RootMotion::FinalIK::IKSolverFABRIK::Solve(UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.ForwardReach
void RootMotion::FinalIK::IKSolverFABRIK::ForwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::ForwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolverMove
void RootMotion::FinalIK::IKSolverFABRIK::SolverMove(int index, UnityEngine::Vector3 offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolverMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolverMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, offset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolverRotate
void RootMotion::FinalIK::IKSolverFABRIK::SolverRotate(int index, UnityEngine::Quaternion rotation, bool recursive) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolverRotate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolverRotate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(recursive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, rotation, recursive);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolverRotateChildren
void RootMotion::FinalIK::IKSolverFABRIK::SolverRotateChildren(int index, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolverRotateChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolverRotateChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolverMoveChildrenAroundPoint
void RootMotion::FinalIK::IKSolverFABRIK::SolverMoveChildrenAroundPoint(int index, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolverMoveChildrenAroundPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolverMoveChildrenAroundPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.GetParentSolverRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverFABRIK::GetParentSolverRotation(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::GetParentSolverRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParentSolverRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.GetParentSolverPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFABRIK::GetParentSolverPosition(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::GetParentSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParentSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.GetLimitedRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverFABRIK::GetLimitedRotation(int index, UnityEngine::Quaternion q, bool& changed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::GetLimitedRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLimitedRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, index, q, changed);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.LimitForward
void RootMotion::FinalIK::IKSolverFABRIK::LimitForward(int rotateBone, int limitBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::LimitForward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitForward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotateBone), ::il2cpp_utils::ExtractType(limitBone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotateBone, limitBone);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.BackwardReach
void RootMotion::FinalIK::IKSolverFABRIK::BackwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::BackwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.BackwardReachUnlimited
void RootMotion::FinalIK::IKSolverFABRIK::BackwardReachUnlimited(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::BackwardReachUnlimited");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReachUnlimited", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.BackwardReachLimited
void RootMotion::FinalIK::IKSolverFABRIK::BackwardReachLimited(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::BackwardReachLimited");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReachLimited", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.MapToSolverPositions
void RootMotion::FinalIK::IKSolverFABRIK::MapToSolverPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::MapToSolverPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapToSolverPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.MapToSolverPositionsLimited
void RootMotion::FinalIK::IKSolverFABRIK::MapToSolverPositionsLimited() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::MapToSolverPositionsLimited");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapToSolverPositionsLimited", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.get_boneLengthCanBeZero
bool RootMotion::FinalIK::IKSolverFABRIK::get_boneLengthCanBeZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::get_boneLengthCanBeZero");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_boneLengthCanBeZero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.GetIKPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFABRIK::GetIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::GetIKPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.OnInitiate
void RootMotion::FinalIK::IKSolverFABRIK::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.OnUpdate
void RootMotion::FinalIK::IKSolverFABRIK::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverFABRIKRoot
#include "RootMotion/FinalIK/IKSolverFABRIKRoot.hpp"
// Including type: RootMotion.FinalIK.FABRIKChain
#include "RootMotion/FinalIK/FABRIKChain.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.IsRoot
bool RootMotion::FinalIK::IKSolverFABRIKRoot::IsRoot(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::IsRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.AddPointsToArray
void RootMotion::FinalIK::IKSolverFABRIKRoot::AddPointsToArray(::Array<RootMotion::FinalIK::IKSolver::Point*>*& array, RootMotion::FinalIK::FABRIKChain* chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::AddPointsToArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPointsToArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(chain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, chain);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.GetCentroid
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFABRIKRoot::GetCentroid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::GetCentroid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCentroid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.IsValid
bool RootMotion::FinalIK::IKSolverFABRIKRoot::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverFABRIKRoot::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.FixTransforms
void RootMotion::FinalIK::IKSolverFABRIKRoot::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.OnInitiate
void RootMotion::FinalIK::IKSolverFABRIKRoot::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.OnUpdate
void RootMotion::FinalIK::IKSolverFABRIKRoot::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverFABRIKRoot::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverFABRIKRoot::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.FBIKChain
#include "RootMotion/FinalIK/FBIKChain.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.IKMappingSpine
#include "RootMotion/FinalIK/IKMappingSpine.hpp"
// Including type: RootMotion.FinalIK.IKMappingBone
#include "RootMotion/FinalIK/IKMappingBone.hpp"
// Including type: RootMotion.FinalIK.IKMappingLimb
#include "RootMotion/FinalIK/IKMappingLimb.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.UpdateDelegate
#include "RootMotion/FinalIK/IKSolver_UpdateDelegate.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBody::GetEffector(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method, t);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBody::GetChain(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetChainIndex
int RootMotion::FinalIK::IKSolverFullBody::GetChainIndex(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetChainIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChainIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetNode
RootMotion::FinalIK::IKSolver::Node* RootMotion::FinalIK::IKSolverFullBody::GetNode(int chainIndex, int nodeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chainIndex), ::il2cpp_utils::ExtractType(nodeIndex)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Node*, false>(this, ___internal__method, chainIndex, nodeIndex);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetChainAndNodeIndexes
void RootMotion::FinalIK::IKSolverFullBody::GetChainAndNodeIndexes(UnityEngine::Transform* transform, int& chainIndex, int& nodeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetChainAndNodeIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChainAndNodeIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transform, chainIndex, nodeIndex);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.ReadPose
void RootMotion::FinalIK::IKSolverFullBody::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::ReadPose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.Solve
void RootMotion::FinalIK::IKSolverFullBody::Solve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::Solve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.ApplyBendConstraints
void RootMotion::FinalIK::IKSolverFullBody::ApplyBendConstraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::ApplyBendConstraints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyBendConstraints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.WritePose
void RootMotion::FinalIK::IKSolverFullBody::WritePose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::WritePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverFullBody::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverFullBody::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.IsValid
bool RootMotion::FinalIK::IKSolverFullBody::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverFullBody::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.FixTransforms
void RootMotion::FinalIK::IKSolverFullBody::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.OnInitiate
void RootMotion::FinalIK::IKSolverFullBody::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.OnUpdate
void RootMotion::FinalIK::IKSolverFullBody::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector Body
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_Body() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_Body");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "Body"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector Body
void RootMotion::FinalIK::FullBodyBipedEffector::_set_Body(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_Body");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "Body", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftShoulder
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftShoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftShoulder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftShoulder"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftShoulder
void RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftShoulder(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftShoulder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftShoulder", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightShoulder
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_RightShoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_RightShoulder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "RightShoulder"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightShoulder
void RootMotion::FinalIK::FullBodyBipedEffector::_set_RightShoulder(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_RightShoulder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "RightShoulder", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftThigh
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftThigh");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftThigh"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftThigh
void RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftThigh(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftThigh");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftThigh", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightThigh
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_RightThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_RightThigh");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "RightThigh"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightThigh
void RootMotion::FinalIK::FullBodyBipedEffector::_set_RightThigh(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_RightThigh");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "RightThigh", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftHand
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftHand"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftHand
void RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftHand(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightHand
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_RightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_RightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "RightHand"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightHand
void RootMotion::FinalIK::FullBodyBipedEffector::_set_RightHand(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_RightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "RightHand", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftFoot
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftFoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftFoot"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftFoot
void RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftFoot(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftFoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftFoot", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightFoot
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_RightFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_RightFoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "RightFoot"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightFoot
void RootMotion::FinalIK::FullBodyBipedEffector::_set_RightFoot(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_RightFoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "RightFoot", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FullBodyBipedChain
#include "RootMotion/FinalIK/FullBodyBipedChain.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedChain LeftArm
RootMotion::FinalIK::FullBodyBipedChain RootMotion::FinalIK::FullBodyBipedChain::_get_LeftArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_get_LeftArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedChain>("RootMotion.FinalIK", "FullBodyBipedChain", "LeftArm"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedChain LeftArm
void RootMotion::FinalIK::FullBodyBipedChain::_set_LeftArm(RootMotion::FinalIK::FullBodyBipedChain value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_set_LeftArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedChain", "LeftArm", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedChain RightArm
RootMotion::FinalIK::FullBodyBipedChain RootMotion::FinalIK::FullBodyBipedChain::_get_RightArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_get_RightArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedChain>("RootMotion.FinalIK", "FullBodyBipedChain", "RightArm"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedChain RightArm
void RootMotion::FinalIK::FullBodyBipedChain::_set_RightArm(RootMotion::FinalIK::FullBodyBipedChain value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_set_RightArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedChain", "RightArm", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedChain LeftLeg
RootMotion::FinalIK::FullBodyBipedChain RootMotion::FinalIK::FullBodyBipedChain::_get_LeftLeg() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_get_LeftLeg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedChain>("RootMotion.FinalIK", "FullBodyBipedChain", "LeftLeg"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedChain LeftLeg
void RootMotion::FinalIK::FullBodyBipedChain::_set_LeftLeg(RootMotion::FinalIK::FullBodyBipedChain value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_set_LeftLeg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedChain", "LeftLeg", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedChain RightLeg
RootMotion::FinalIK::FullBodyBipedChain RootMotion::FinalIK::FullBodyBipedChain::_get_RightLeg() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_get_RightLeg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedChain>("RootMotion.FinalIK", "FullBodyBipedChain", "RightLeg"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedChain RightLeg
void RootMotion::FinalIK::FullBodyBipedChain::_set_RightLeg(RootMotion::FinalIK::FullBodyBipedChain value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_set_RightLeg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedChain", "RightLeg", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.FBIKChain
#include "RootMotion/FinalIK/FBIKChain.hpp"
// Including type: RootMotion.FinalIK.IKMappingLimb
#include "RootMotion/FinalIK/IKMappingLimb.hpp"
// Including type: RootMotion.FinalIK.IKMappingBone
#include "RootMotion/FinalIK/IKMappingBone.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedChain
#include "RootMotion/FinalIK/FullBodyBipedChain.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
// Including type: RootMotion.FinalIK.IKMappingSpine
#include "RootMotion/FinalIK/IKMappingSpine.hpp"
// Including type: RootMotion.FinalIK.IKConstraintBend
#include "RootMotion/FinalIK/IKConstraintBend.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.BipedLimbOrientations/RootMotion.LimbOrientation
#include "RootMotion/BipedLimbOrientations_LimbOrientation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_bodyEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_bodyEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_bodyEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bodyEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftShoulderEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftShoulderEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftShoulderEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftShoulderEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightShoulderEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightShoulderEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightShoulderEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightShoulderEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftThighEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftThighEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftThighEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftThighEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightThighEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightThighEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightThighEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightThighEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftHandEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftHandEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftHandEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHandEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightHandEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightHandEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightHandEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightHandEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftFootEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftFootEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftFootEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftFootEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightFootEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightFootEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightFootEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightFootEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftArmChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftArmChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftArmChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftArmChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightArmChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightArmChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightArmChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightArmChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftLegChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftLegChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftLegChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftLegChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightLegChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightLegChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightLegChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightLegChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftArmMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftArmMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftArmMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftArmMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightArmMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightArmMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightArmMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightArmMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftLegMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftLegMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftLegMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftLegMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightLegMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightLegMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightLegMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightLegMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_headMapping
RootMotion::FinalIK::IKMappingBone* RootMotion::FinalIK::IKSolverFullBodyBiped::get_headMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_headMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_pullBodyOffset
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFullBodyBiped::get_pullBodyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_pullBodyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pullBodyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.set_pullBodyOffset
void RootMotion::FinalIK::IKSolverFullBodyBiped::set_pullBodyOffset(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::set_pullBodyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pullBodyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.SetChainWeights
void RootMotion::FinalIK::IKSolverFullBodyBiped::SetChainWeights(RootMotion::FinalIK::FullBodyBipedChain c, float pull, float reach) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::SetChainWeights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChainWeights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(pull), ::il2cpp_utils::ExtractType(reach)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, c, pull, reach);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.SetEffectorWeights
void RootMotion::FinalIK::IKSolverFullBodyBiped::SetEffectorWeights(RootMotion::FinalIK::FullBodyBipedEffector effector, float positionWeight, float rotationWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::SetEffectorWeights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEffectorWeights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(positionWeight), ::il2cpp_utils::ExtractType(rotationWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, positionWeight, rotationWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::GetChain(RootMotion::FinalIK::FullBodyBipedChain c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method, c);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::GetChain(RootMotion::FinalIK::FullBodyBipedEffector effector) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method, effector);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::GetEffector(RootMotion::FinalIK::FullBodyBipedEffector effector) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method, effector);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetEndEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::GetEndEffector(RootMotion::FinalIK::FullBodyBipedChain c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetEndEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEndEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method, c);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetLimbMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::GetLimbMapping(RootMotion::FinalIK::FullBodyBipedChain chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetLimbMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLimbMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method, chain);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetLimbMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::GetLimbMapping(RootMotion::FinalIK::FullBodyBipedEffector effector) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetLimbMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLimbMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method, effector);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetSpineMapping
RootMotion::FinalIK::IKMappingSpine* RootMotion::FinalIK::IKSolverFullBodyBiped::GetSpineMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetSpineMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpineMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingSpine*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetHeadMapping
RootMotion::FinalIK::IKMappingBone* RootMotion::FinalIK::IKSolverFullBodyBiped::GetHeadMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetHeadMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHeadMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetBendConstraint
RootMotion::FinalIK::IKConstraintBend* RootMotion::FinalIK::IKSolverFullBodyBiped::GetBendConstraint(RootMotion::FinalIK::FullBodyBipedChain limb) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetBendConstraint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBendConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(limb)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKConstraintBend*, false>(this, ___internal__method, limb);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.SetToReferences
void RootMotion::FinalIK::IKSolverFullBodyBiped::SetToReferences(RootMotion::BipedReferences* references, UnityEngine::Transform* rootNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::SetToReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(rootNode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references, rootNode);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.DetectRootNodeBone
UnityEngine::Transform* RootMotion::FinalIK::IKSolverFullBodyBiped::DetectRootNodeBone(RootMotion::BipedReferences* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::DetectRootNodeBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverFullBodyBiped", "DetectRootNodeBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.SetLimbOrientations
void RootMotion::FinalIK::IKSolverFullBodyBiped::SetLimbOrientations(RootMotion::BipedLimbOrientations* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::SetLimbOrientations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimbOrientations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, o);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.SetLimbOrientation
void RootMotion::FinalIK::IKSolverFullBodyBiped::SetLimbOrientation(RootMotion::FinalIK::FullBodyBipedChain chain, RootMotion::BipedLimbOrientations::LimbOrientation* limbOrientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::SetLimbOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimbOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(limbOrientation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chain, limbOrientation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetLeftClavicle
UnityEngine::Transform* RootMotion::FinalIK::IKSolverFullBodyBiped::GetLeftClavicle(RootMotion::BipedReferences* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetLeftClavicle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverFullBodyBiped", "GetLeftClavicle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetRightClavicle
UnityEngine::Transform* RootMotion::FinalIK::IKSolverFullBodyBiped::GetRightClavicle(RootMotion::BipedReferences* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetRightClavicle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverFullBodyBiped", "GetRightClavicle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.Contains
bool RootMotion::FinalIK::IKSolverFullBodyBiped::Contains(::Array<UnityEngine::Transform*>* array, UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverFullBodyBiped", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, array, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.PullBody
void RootMotion::FinalIK::IKSolverFullBodyBiped::PullBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::PullBody");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PullBody", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetBodyOffset
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFullBodyBiped::GetBodyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetBodyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBodyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetHandBodyPull
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFullBodyBiped::GetHandBodyPull(RootMotion::FinalIK::IKEffector* effector, RootMotion::FinalIK::FBIKChain* arm, UnityEngine::Vector3 offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetHandBodyPull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHandBodyPull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(arm), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, effector, arm, offset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.IsValid
bool RootMotion::FinalIK::IKSolverFullBodyBiped::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.ReadPose
void RootMotion::FinalIK::IKSolverFullBodyBiped::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::ReadPose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.ApplyBendConstraints
void RootMotion::FinalIK::IKSolverFullBodyBiped::ApplyBendConstraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::ApplyBendConstraints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyBendConstraints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.WritePose
void RootMotion::FinalIK::IKSolverFullBodyBiped::WritePose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::WritePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverHeuristic
#include "RootMotion/FinalIK/IKSolverHeuristic.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_minBones
int RootMotion::FinalIK::IKSolverHeuristic::get_minBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::get_minBones");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_boneLengthCanBeZero
bool RootMotion::FinalIK::IKSolverHeuristic::get_boneLengthCanBeZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::get_boneLengthCanBeZero");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_boneLengthCanBeZero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_allowCommonParent
bool RootMotion::FinalIK::IKSolverHeuristic::get_allowCommonParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::get_allowCommonParent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allowCommonParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_localDirection
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverHeuristic::get_localDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::get_localDirection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_positionOffset
float RootMotion::FinalIK::IKSolverHeuristic::get_positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::get_positionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_positionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.SetChain
bool RootMotion::FinalIK::IKSolverHeuristic::SetChain(::Array<UnityEngine::Transform*>* hierarchy, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::SetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hierarchy), ::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, hierarchy, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.AddBone
void RootMotion::FinalIK::IKSolverHeuristic::AddBone(UnityEngine::Transform* bone) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::AddBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.InitiateBones
void RootMotion::FinalIK::IKSolverHeuristic::InitiateBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::InitiateBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.GetSingularityOffset
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverHeuristic::GetSingularityOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::GetSingularityOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSingularityOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.SingularityDetected
bool RootMotion::FinalIK::IKSolverHeuristic::SingularityDetected() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::SingularityDetected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SingularityDetected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverHeuristic::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.FixTransforms
void RootMotion::FinalIK::IKSolverHeuristic::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.IsValid
bool RootMotion::FinalIK::IKSolverHeuristic::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverHeuristic::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverHeuristic::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.OnInitiate
void RootMotion::FinalIK::IKSolverHeuristic::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.OnUpdate
void RootMotion::FinalIK::IKSolverHeuristic::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverLeg
#include "RootMotion/FinalIK/IKSolverLeg.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.SetChain
bool RootMotion::FinalIK::IKSolverLeg::SetChain(UnityEngine::Transform* pelvis, UnityEngine::Transform* thigh, UnityEngine::Transform* calf, UnityEngine::Transform* foot, UnityEngine::Transform* toe, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::SetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pelvis), ::il2cpp_utils::ExtractType(thigh), ::il2cpp_utils::ExtractType(calf), ::il2cpp_utils::ExtractType(foot), ::il2cpp_utils::ExtractType(toe), ::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pelvis, thigh, calf, foot, toe, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.Solve
void RootMotion::FinalIK::IKSolverLeg::Solve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.Read
void RootMotion::FinalIK::IKSolverLeg::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.Write
void RootMotion::FinalIK::IKSolverLeg::Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.IsValid
bool RootMotion::FinalIK::IKSolverLeg::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverLeg::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverLeg::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverLeg::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.FixTransforms
void RootMotion::FinalIK::IKSolverLeg::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.OnInitiate
void RootMotion::FinalIK::IKSolverLeg::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.OnUpdate
void RootMotion::FinalIK::IKSolverLeg::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.get_axisDirections
::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>* RootMotion::FinalIK::IKSolverLimb::get_axisDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::get_axisDirections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_axisDirections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.MaintainRotation
void RootMotion::FinalIK::IKSolverLimb::MaintainRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::MaintainRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaintainRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.MaintainBend
void RootMotion::FinalIK::IKSolverLimb::MaintainBend() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::MaintainBend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaintainBend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.StoreAxisDirections
void RootMotion::FinalIK::IKSolverLimb::StoreAxisDirections(::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>*& axisDirections) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::StoreAxisDirections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreAxisDirections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axisDirections)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, axisDirections);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.GetModifiedBendNormal
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverLimb::GetModifiedBendNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::GetModifiedBendNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetModifiedBendNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.OnInitiateVirtual
void RootMotion::FinalIK::IKSolverLimb::OnInitiateVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::OnInitiateVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiateVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.OnUpdateVirtual
void RootMotion::FinalIK::IKSolverLimb::OnUpdateVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::OnUpdateVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdateVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.OnPostSolveVirtual
void RootMotion::FinalIK::IKSolverLimb::OnPostSolveVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::OnPostSolveVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolveVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier Animation
RootMotion::FinalIK::IKSolverLimb::BendModifier RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Animation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverLimb::BendModifier>("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Animation"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier Animation
void RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Animation(RootMotion::FinalIK::IKSolverLimb::BendModifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Animation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Animation", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier Target
RootMotion::FinalIK::IKSolverLimb::BendModifier RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Target() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Target");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverLimb::BendModifier>("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Target"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier Target
void RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Target(RootMotion::FinalIK::IKSolverLimb::BendModifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Target");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Target", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier Parent
RootMotion::FinalIK::IKSolverLimb::BendModifier RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Parent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverLimb::BendModifier>("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Parent"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier Parent
void RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Parent(RootMotion::FinalIK::IKSolverLimb::BendModifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Parent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Parent", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier Arm
RootMotion::FinalIK::IKSolverLimb::BendModifier RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Arm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Arm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverLimb::BendModifier>("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Arm"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier Arm
void RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Arm(RootMotion::FinalIK::IKSolverLimb::BendModifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Arm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Arm", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier Goal
RootMotion::FinalIK::IKSolverLimb::BendModifier RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Goal() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Goal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverLimb::BendModifier>("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Goal"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.BendModifier Goal
void RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Goal(RootMotion::FinalIK::IKSolverLimb::BendModifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Goal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Goal", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverLimb/RootMotion.FinalIK.AxisDirection
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverLookAt
#include "RootMotion/FinalIK/IKSolverLookAt.hpp"
// Including type: RootMotion.FinalIK.IKSolverLookAt/RootMotion.FinalIK.LookAtBone
#include "RootMotion/FinalIK/IKSolverLookAt_LookAtBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_spineIsValid
bool RootMotion::FinalIK::IKSolverLookAt::get_spineIsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_spineIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spineIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_spineIsEmpty
bool RootMotion::FinalIK::IKSolverLookAt::get_spineIsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_spineIsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spineIsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_headIsValid
bool RootMotion::FinalIK::IKSolverLookAt::get_headIsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_headIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_headIsEmpty
bool RootMotion::FinalIK::IKSolverLookAt::get_headIsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_headIsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headIsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_eyesIsValid
bool RootMotion::FinalIK::IKSolverLookAt::get_eyesIsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_eyesIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyesIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_eyesIsEmpty
bool RootMotion::FinalIK::IKSolverLookAt::get_eyesIsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_eyesIsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyesIsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight, float bodyWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight, float bodyWeight, float headWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight), ::il2cpp_utils::ExtractType(headWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight), ::il2cpp_utils::ExtractType(headWeight), ::il2cpp_utils::ExtractType(eyesWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight, eyesWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight), ::il2cpp_utils::ExtractType(headWeight), ::il2cpp_utils::ExtractType(eyesWeight), ::il2cpp_utils::ExtractType(clampWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight, eyesWeight, clampWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight), ::il2cpp_utils::ExtractType(headWeight), ::il2cpp_utils::ExtractType(eyesWeight), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampWeightHead), ::il2cpp_utils::ExtractType(clampWeightEyes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight, eyesWeight, clampWeight, clampWeightHead, clampWeightEyes);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetChain
bool RootMotion::FinalIK::IKSolverLookAt::SetChain(::Array<UnityEngine::Transform*>* spine, UnityEngine::Transform* head, ::Array<UnityEngine::Transform*>* eyes, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spine), ::il2cpp_utils::ExtractType(head), ::il2cpp_utils::ExtractType(eyes), ::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, spine, head, eyes, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SolveSpine
void RootMotion::FinalIK::IKSolverLookAt::SolveSpine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SolveSpine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveSpine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SolveHead
void RootMotion::FinalIK::IKSolverLookAt::SolveHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SolveHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SolveEyes
void RootMotion::FinalIK::IKSolverLookAt::SolveEyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SolveEyes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveEyes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.GetForwards
::Array<UnityEngine::Vector3>* RootMotion::FinalIK::IKSolverLookAt::GetForwards(::Array<UnityEngine::Vector3>*& forwards, UnityEngine::Vector3 baseForward, UnityEngine::Vector3 targetForward, int bones, float clamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::GetForwards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetForwards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forwards), ::il2cpp_utils::ExtractType(baseForward), ::il2cpp_utils::ExtractType(targetForward), ::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(clamp)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Vector3>*, false>(this, ___internal__method, forwards, baseForward, targetForward, bones, clamp);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetBones
void RootMotion::FinalIK::IKSolverLookAt::SetBones(::Array<UnityEngine::Transform*>* array, ::Array<RootMotion::FinalIK::IKSolverLookAt::LookAtBone*>*& bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(bones)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, bones);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverLookAt::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.FixTransforms
void RootMotion::FinalIK::IKSolverLookAt::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.IsValid
bool RootMotion::FinalIK::IKSolverLookAt::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverLookAt::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverLookAt::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.OnInitiate
void RootMotion::FinalIK::IKSolverLookAt::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.OnUpdate
void RootMotion::FinalIK::IKSolverLookAt::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverLookAt/RootMotion.FinalIK.LookAtBone
#include "RootMotion/FinalIK/IKSolverLookAt_LookAtBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt/RootMotion.FinalIK.LookAtBone.get_forward
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverLookAt::LookAtBone::get_forward() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::LookAtBone::get_forward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_forward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt/RootMotion.FinalIK.LookAtBone.Initiate
void RootMotion::FinalIK::IKSolverLookAt::LookAtBone::Initiate(UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::LookAtBone::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt/RootMotion.FinalIK.LookAtBone.LookAt
void RootMotion::FinalIK::IKSolverLookAt::LookAtBone::LookAt(UnityEngine::Vector3 direction, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::LookAtBone::LookAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, direction, weight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverTrigonometric
#include "RootMotion/FinalIK/IKSolverTrigonometric.hpp"
// Including type: RootMotion.FinalIK.IKSolverTrigonometric/RootMotion.FinalIK.TrigonometricBone
#include "RootMotion/FinalIK/IKSolverTrigonometric_TrigonometricBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.SetBendGoalPosition
void RootMotion::FinalIK::IKSolverTrigonometric::SetBendGoalPosition(UnityEngine::Vector3 goalPosition, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::SetBendGoalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBendGoalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goalPosition), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, goalPosition, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.SetBendPlaneToCurrent
void RootMotion::FinalIK::IKSolverTrigonometric::SetBendPlaneToCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::SetBendPlaneToCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBendPlaneToCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.SetIKRotation
void RootMotion::FinalIK::IKSolverTrigonometric::SetIKRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::SetIKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.SetIKRotationWeight
void RootMotion::FinalIK::IKSolverTrigonometric::SetIKRotationWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::SetIKRotationWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKRotationWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetIKRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverTrigonometric::GetIKRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetIKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetIKRotationWeight
float RootMotion::FinalIK::IKSolverTrigonometric::GetIKRotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetIKRotationWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKRotationWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.SetChain
bool RootMotion::FinalIK::IKSolverTrigonometric::SetChain(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::SetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bone1, bone2, bone3, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.Solve
void RootMotion::FinalIK::IKSolverTrigonometric::Solve(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, UnityEngine::Vector3 targetPosition, UnityEngine::Vector3 bendNormal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverTrigonometric", "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(targetPosition), ::il2cpp_utils::ExtractType(bendNormal), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone1, bone2, bone3, targetPosition, bendNormal, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetDirectionToBendPoint
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverTrigonometric::GetDirectionToBendPoint(UnityEngine::Vector3 direction, float directionMag, UnityEngine::Vector3 bendDirection, float sqrMag1, float sqrMag2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetDirectionToBendPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverTrigonometric", "GetDirectionToBendPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(directionMag), ::il2cpp_utils::ExtractType(bendDirection), ::il2cpp_utils::ExtractType(sqrMag1), ::il2cpp_utils::ExtractType(sqrMag2)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, direction, directionMag, bendDirection, sqrMag1, sqrMag2);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.IsDirectHierarchy
bool RootMotion::FinalIK::IKSolverTrigonometric::IsDirectHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::IsDirectHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDirectHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.InitiateBones
void RootMotion::FinalIK::IKSolverTrigonometric::InitiateBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::InitiateBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.OnInitiateVirtual
void RootMotion::FinalIK::IKSolverTrigonometric::OnInitiateVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::OnInitiateVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiateVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.OnUpdateVirtual
void RootMotion::FinalIK::IKSolverTrigonometric::OnUpdateVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::OnUpdateVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdateVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.OnPostSolveVirtual
void RootMotion::FinalIK::IKSolverTrigonometric::OnPostSolveVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::OnPostSolveVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolveVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetBendDirection
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverTrigonometric::GetBendDirection(UnityEngine::Vector3 IKPosition, UnityEngine::Vector3 bendNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetBendDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBendDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(IKPosition), ::il2cpp_utils::ExtractType(bendNormal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, IKPosition, bendNormal);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverTrigonometric::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverTrigonometric::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverTrigonometric::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.FixTransforms
void RootMotion::FinalIK::IKSolverTrigonometric::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.IsValid
bool RootMotion::FinalIK::IKSolverTrigonometric::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.OnInitiate
void RootMotion::FinalIK::IKSolverTrigonometric::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.OnUpdate
void RootMotion::FinalIK::IKSolverTrigonometric::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverTrigonometric/RootMotion.FinalIK.TrigonometricBone
#include "RootMotion/FinalIK/IKSolverTrigonometric_TrigonometricBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric/RootMotion.FinalIK.TrigonometricBone.Initiate
void RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::Initiate(UnityEngine::Vector3 childPosition, UnityEngine::Vector3 bendNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childPosition), ::il2cpp_utils::ExtractType(bendNormal)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, childPosition, bendNormal);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric/RootMotion.FinalIK.TrigonometricBone.GetRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::GetRotation(UnityEngine::Vector3 direction, UnityEngine::Vector3 bendNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(bendNormal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, direction, bendNormal);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric/RootMotion.FinalIK.TrigonometricBone.GetBendNormalFromCurrentRotation
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::GetBendNormalFromCurrentRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::GetBendNormalFromCurrentRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBendNormalFromCurrentRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart
#include "RootMotion/FinalIK/IKSolverVR_BodyPart.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep
#include "RootMotion/FinalIK/IKSolverVR_Footstep.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion
#include "RootMotion/FinalIK/IKSolverVR_Locomotion.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine
#include "RootMotion/FinalIK/IKSolverVR_Spine.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset
#include "RootMotion/FinalIK/IKSolverVR_PositionOffset.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.RotationOffset
#include "RootMotion/FinalIK/IKSolverVR_RotationOffset.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.VRIK/RootMotion.FinalIK.References
#include "RootMotion/FinalIK/VRIK_References.hpp"
// Including type: RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.get_rootBone
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::get_rootBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::get_rootBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.set_rootBone
void RootMotion::FinalIK::IKSolverVR::set_rootBone(RootMotion::FinalIK::IKSolverVR::VirtualBone* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::set_rootBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rootBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.SetToReferences
void RootMotion::FinalIK::IKSolverVR::SetToReferences(RootMotion::FinalIK::VRIK::References* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::SetToReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GuessHandOrientations
void RootMotion::FinalIK::IKSolverVR::GuessHandOrientations(RootMotion::FinalIK::VRIK::References* references, bool onlyIfZero) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GuessHandOrientations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuessHandOrientations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(onlyIfZero)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references, onlyIfZero);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.DefaultAnimationCurves
void RootMotion::FinalIK::IKSolverVR::DefaultAnimationCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::DefaultAnimationCurves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultAnimationCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.AddPositionOffset
void RootMotion::FinalIK::IKSolverVR::AddPositionOffset(RootMotion::FinalIK::IKSolverVR::PositionOffset positionOffset, UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::AddPositionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPositionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionOffset), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positionOffset, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.AddRotationOffset
void RootMotion::FinalIK::IKSolverVR::AddRotationOffset(RootMotion::FinalIK::IKSolverVR::RotationOffset rotationOffset, UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::AddRotationOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotationOffset), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotationOffset, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.AddRotationOffset
void RootMotion::FinalIK::IKSolverVR::AddRotationOffset(RootMotion::FinalIK::IKSolverVR::RotationOffset rotationOffset, UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::AddRotationOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotationOffset), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotationOffset, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.AddPlatformMotion
void RootMotion::FinalIK::IKSolverVR::AddPlatformMotion(UnityEngine::Vector3 deltaPosition, UnityEngine::Quaternion deltaRotation, UnityEngine::Vector3 platformPivot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::AddPlatformMotion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPlatformMotion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaPosition), ::il2cpp_utils::ExtractType(deltaRotation), ::il2cpp_utils::ExtractType(platformPivot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deltaPosition, deltaRotation, platformPivot);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.Reset
void RootMotion::FinalIK::IKSolverVR::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetNormal
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::GetNormal(::Array<UnityEngine::Transform*>* transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transforms)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, transforms);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GuessWristToPalmAxis
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::GuessWristToPalmAxis(UnityEngine::Transform* hand, UnityEngine::Transform* forearm) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GuessWristToPalmAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuessWristToPalmAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(forearm)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, hand, forearm);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GuessPalmToThumbAxis
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::GuessPalmToThumbAxis(UnityEngine::Transform* hand, UnityEngine::Transform* forearm) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GuessPalmToThumbAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuessPalmToThumbAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(forearm)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, hand, forearm);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetSineKeyframes
::Array<UnityEngine::Keyframe>* RootMotion::FinalIK::IKSolverVR::GetSineKeyframes(float mag) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetSineKeyframes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR", "GetSineKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mag)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Keyframe>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mag);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.UpdateSolverTransforms
void RootMotion::FinalIK::IKSolverVR::UpdateSolverTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::UpdateSolverTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.WriteTransforms
void RootMotion::FinalIK::IKSolverVR::WriteTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::WriteTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.Read
void RootMotion::FinalIK::IKSolverVR::Read(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.Solve
void RootMotion::FinalIK::IKSolverVR::Solve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::GetPosition(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::GetRotation(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.Write
void RootMotion::FinalIK::IKSolverVR::Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetPelvisOffset
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::GetPelvisOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetPelvisOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPelvisOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverVR::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.FixTransforms
void RootMotion::FinalIK::IKSolverVR::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverVR::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverVR::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.IsValid
bool RootMotion::FinalIK::IKSolverVR::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.OnInitiate
void RootMotion::FinalIK::IKSolverVR::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.OnUpdate
void RootMotion::FinalIK::IKSolverVR::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single yawOffsetAngle
float RootMotion::FinalIK::IKSolverVR::Arm::_get_yawOffsetAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::_get_yawOffsetAngle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("RootMotion.FinalIK", "IKSolverVR/Arm", "yawOffsetAngle"));
}
// Autogenerated static field setter
// Set static field: static private System.Single yawOffsetAngle
void RootMotion::FinalIK::IKSolverVR::Arm::_set_yawOffsetAngle(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::_set_yawOffsetAngle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/Arm", "yawOffsetAngle", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single pitchOffsetAngle
float RootMotion::FinalIK::IKSolverVR::Arm::_get_pitchOffsetAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::_get_pitchOffsetAngle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("RootMotion.FinalIK", "IKSolverVR/Arm", "pitchOffsetAngle"));
}
// Autogenerated static field setter
// Set static field: static private System.Single pitchOffsetAngle
void RootMotion::FinalIK::IKSolverVR::Arm::_set_pitchOffsetAngle(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::_set_pitchOffsetAngle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/Arm", "pitchOffsetAngle", value));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.get_position
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Arm::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.set_position
void RootMotion::FinalIK::IKSolverVR::Arm::set_position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::set_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.get_rotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Arm::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.set_rotation
void RootMotion::FinalIK::IKSolverVR::Arm::set_rotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::set_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.get_shoulder
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Arm::get_shoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_shoulder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shoulder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.get_upperArm
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Arm::get_upperArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_upperArm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_upperArm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.get_forearm
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Arm::get_forearm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_forearm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_forearm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.get_hand
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Arm::get_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_hand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.Stretching
void RootMotion::FinalIK::IKSolverVR::Arm::Stretching() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::Stretching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stretching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.Solve
void RootMotion::FinalIK::IKSolverVR::Arm::Solve(bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeft)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isLeft);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.DamperValue
float RootMotion::FinalIK::IKSolverVR::Arm::DamperValue(float value, float min, float max, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::DamperValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DamperValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, value, min, max, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.GetBendNormal
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Arm::GetBendNormal(UnityEngine::Vector3 dir) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::GetBendNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBendNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dir)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, dir);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.Visualize
void RootMotion::FinalIK::IKSolverVR::Arm::Visualize(RootMotion::FinalIK::IKSolverVR::VirtualBone* bone1, RootMotion::FinalIK::IKSolverVR::VirtualBone* bone2, RootMotion::FinalIK::IKSolverVR::VirtualBone* bone3, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::Visualize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Visualize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2, bone3, color);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.OnRead
void RootMotion::FinalIK::IKSolverVR::Arm::OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::OnRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs), ::il2cpp_utils::ExtractType(rootIndex), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs, rootIndex, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.PreSolve
void RootMotion::FinalIK::IKSolverVR::Arm::PreSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::PreSolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.ApplyOffsets
void RootMotion::FinalIK::IKSolverVR::Arm::ApplyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ApplyOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.ResetOffsets
void RootMotion::FinalIK::IKSolverVR::Arm::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ResetOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm.Write
void RootMotion::FinalIK::IKSolverVR::Arm::Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solvedPositions), ::il2cpp_utils::ExtractType(solvedRotations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solvedPositions, solvedRotations);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm/RootMotion.FinalIK.ShoulderRotationMode
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm/RootMotion.FinalIK.ShoulderRotationMode YawPitch
RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_get_YawPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_get_YawPitch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode>("RootMotion.FinalIK", "IKSolverVR/Arm/ShoulderRotationMode", "YawPitch"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm/RootMotion.FinalIK.ShoulderRotationMode YawPitch
void RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_set_YawPitch(RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_set_YawPitch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/Arm/ShoulderRotationMode", "YawPitch", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm/RootMotion.FinalIK.ShoulderRotationMode FromTo
RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_get_FromTo() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_get_FromTo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode>("RootMotion.FinalIK", "IKSolverVR/Arm/ShoulderRotationMode", "FromTo"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm/RootMotion.FinalIK.ShoulderRotationMode FromTo
void RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_set_FromTo(RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_set_FromTo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/Arm/ShoulderRotationMode", "FromTo", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart
#include "RootMotion/FinalIK/IKSolverVR_BodyPart.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.get_sqrMag
float RootMotion::FinalIK::IKSolverVR::BodyPart::get_sqrMag() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::get_sqrMag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sqrMag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.set_sqrMag
void RootMotion::FinalIK::IKSolverVR::BodyPart::set_sqrMag(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::set_sqrMag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sqrMag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.get_mag
float RootMotion::FinalIK::IKSolverVR::BodyPart::get_mag() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::get_mag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.set_mag
void RootMotion::FinalIK::IKSolverVR::BodyPart::set_mag(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::set_mag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.OnRead
void RootMotion::FinalIK::IKSolverVR::BodyPart::OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::OnRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs), ::il2cpp_utils::ExtractType(rootIndex), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs, rootIndex, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.PreSolve
void RootMotion::FinalIK::IKSolverVR::BodyPart::PreSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::PreSolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.Write
void RootMotion::FinalIK::IKSolverVR::BodyPart::Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solvedPositions), ::il2cpp_utils::ExtractType(solvedRotations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solvedPositions, solvedRotations);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.ApplyOffsets
void RootMotion::FinalIK::IKSolverVR::BodyPart::ApplyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::ApplyOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.ResetOffsets
void RootMotion::FinalIK::IKSolverVR::BodyPart::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::ResetOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.SetLOD
void RootMotion::FinalIK::IKSolverVR::BodyPart::SetLOD(int LOD) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::SetLOD");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLOD", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(LOD)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, LOD);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.Read
void RootMotion::FinalIK::IKSolverVR::BodyPart::Read(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs), ::il2cpp_utils::ExtractType(rootIndex), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs, rootIndex, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.MovePosition
void RootMotion::FinalIK::IKSolverVR::BodyPart::MovePosition(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::MovePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MovePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.MoveRotation
void RootMotion::FinalIK::IKSolverVR::BodyPart::MoveRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::MoveRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.Translate
void RootMotion::FinalIK::IKSolverVR::BodyPart::Translate(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::Translate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Translate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.TranslateRoot
void RootMotion::FinalIK::IKSolverVR::BodyPart::TranslateRoot(UnityEngine::Vector3 newRootPos, UnityEngine::Quaternion newRootRot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::TranslateRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TranslateRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newRootPos), ::il2cpp_utils::ExtractType(newRootRot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newRootPos, newRootRot);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.RotateTo
void RootMotion::FinalIK::IKSolverVR::BodyPart::RotateTo(RootMotion::FinalIK::IKSolverVR::VirtualBone* bone, UnityEngine::Quaternion rotation, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::RotateTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone, rotation, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.Visualize
void RootMotion::FinalIK::IKSolverVR::BodyPart::Visualize(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::Visualize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Visualize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.BodyPart.Visualize
void RootMotion::FinalIK::IKSolverVR::BodyPart::Visualize() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::Visualize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Visualize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
