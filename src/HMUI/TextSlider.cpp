// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TextSlider
#include "HMUI/TextSlider.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TextSlider.set_valueTextColor
void HMUI::TextSlider::set_valueTextColor(UnityEngine::Color value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_valueTextColor", value));
}
// Autogenerated method: HMUI.TextSlider.get_handleRect
UnityEngine::RectTransform* HMUI::TextSlider::get_handleRect() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::RectTransform*>(this, "get_handleRect"));
}
// Autogenerated method: HMUI.TextSlider.set_handleRect
void HMUI::TextSlider::set_handleRect(UnityEngine::RectTransform* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_handleRect", value));
}
// Autogenerated method: HMUI.TextSlider.set_handleColor
void HMUI::TextSlider::set_handleColor(UnityEngine::Color value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_handleColor", value));
}
// Autogenerated method: HMUI.TextSlider.get_handleSize
float HMUI::TextSlider::get_handleSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_handleSize"));
}
// Autogenerated method: HMUI.TextSlider.set_handleSize
void HMUI::TextSlider::set_handleSize(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_handleSize", value));
}
// Autogenerated method: HMUI.TextSlider.get_valueSize
float HMUI::TextSlider::get_valueSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_valueSize"));
}
// Autogenerated method: HMUI.TextSlider.set_valueSize
void HMUI::TextSlider::set_valueSize(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_valueSize", value));
}
// Autogenerated method: HMUI.TextSlider.get_separatorSize
float HMUI::TextSlider::get_separatorSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_separatorSize"));
}
// Autogenerated method: HMUI.TextSlider.set_separatorSize
void HMUI::TextSlider::set_separatorSize(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_separatorSize", value));
}
// Autogenerated method: HMUI.TextSlider.get_numberOfSteps
int HMUI::TextSlider::get_numberOfSteps() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_numberOfSteps"));
}
// Autogenerated method: HMUI.TextSlider.set_numberOfSteps
void HMUI::TextSlider::set_numberOfSteps(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_numberOfSteps", value));
}
// Autogenerated method: HMUI.TextSlider.get_normalizedValue
float HMUI::TextSlider::get_normalizedValue() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_normalizedValue"));
}
// Autogenerated method: HMUI.TextSlider.set_normalizedValue
void HMUI::TextSlider::set_normalizedValue(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_normalizedValue", value));
}
// Autogenerated method: HMUI.TextSlider.add_normalizedValueDidChangeEvent
void HMUI::TextSlider::add_normalizedValueDidChangeEvent(System::Action_2<HMUI::TextSlider*, float>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_normalizedValueDidChangeEvent", value));
}
// Autogenerated method: HMUI.TextSlider.remove_normalizedValueDidChangeEvent
void HMUI::TextSlider::remove_normalizedValueDidChangeEvent(System::Action_2<HMUI::TextSlider*, float>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_normalizedValueDidChangeEvent", value));
}
// Autogenerated method: HMUI.TextSlider.UpdateCachedReferences
void HMUI::TextSlider::UpdateCachedReferences() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateCachedReferences"));
}
// Autogenerated method: HMUI.TextSlider.SetNormalizedValue
void HMUI::TextSlider::SetNormalizedValue(float input) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetNormalizedValue", input));
}
// Autogenerated method: HMUI.TextSlider.SetNormalizedValue
void HMUI::TextSlider::SetNormalizedValue(float input, bool sendCallback) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetNormalizedValue", input, sendCallback));
}
// Autogenerated method: HMUI.TextSlider.UpdateVisuals
void HMUI::TextSlider::UpdateVisuals() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateVisuals"));
}
// Autogenerated method: HMUI.TextSlider.UpdateDrag
void HMUI::TextSlider::UpdateDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateDrag", eventData));
}
// Autogenerated method: HMUI.TextSlider.MayDrag
bool HMUI::TextSlider::MayDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "MayDrag", eventData));
}
// Autogenerated method: HMUI.TextSlider.TextForNormalizedValue
::CsString* HMUI::TextSlider::TextForNormalizedValue(float normalizedValue) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::CsString*>(this, "TextForNormalizedValue", normalizedValue));
}
// Autogenerated method: HMUI.TextSlider.Rebuild
void HMUI::TextSlider::Rebuild(UnityEngine::UI::CanvasUpdate executing) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Rebuild", executing));
}
// Autogenerated method: HMUI.TextSlider.LayoutComplete
void HMUI::TextSlider::LayoutComplete() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LayoutComplete"));
}
// Autogenerated method: HMUI.TextSlider.GraphicUpdateComplete
void HMUI::TextSlider::GraphicUpdateComplete() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GraphicUpdateComplete"));
}
// Autogenerated method: HMUI.TextSlider.OnEnable
void HMUI::TextSlider::OnEnable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnEnable"));
}
// Autogenerated method: HMUI.TextSlider.OnDisable
void HMUI::TextSlider::OnDisable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDisable"));
}
// Autogenerated method: HMUI.TextSlider.OnRectTransformDimensionsChange
void HMUI::TextSlider::OnRectTransformDimensionsChange() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnRectTransformDimensionsChange"));
}
// Autogenerated method: HMUI.TextSlider.OnBeginDrag
void HMUI::TextSlider::OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnBeginDrag", eventData));
}
// Autogenerated method: HMUI.TextSlider.OnDrag
void HMUI::TextSlider::OnDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDrag", eventData));
}
// Autogenerated method: HMUI.TextSlider.OnPointerDown
void HMUI::TextSlider::OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnPointerDown", eventData));
}
// Autogenerated method: HMUI.TextSlider.OnInitializePotentialDrag
void HMUI::TextSlider::OnInitializePotentialDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnInitializePotentialDrag", eventData));
}
// Autogenerated method: HMUI.TextSlider..ctor
HMUI::TextSlider* HMUI::TextSlider::New_ctor() {
  return (TextSlider*)THROW_UNLESS(il2cpp_utils::New("HMUI", "TextSlider"));
}
// Autogenerated method: HMUI.TextSlider.UnityEngine.UI.ICanvasElement.get_transform
UnityEngine::Transform* HMUI::TextSlider::UnityEngine_UI_ICanvasElement_get_transform() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Transform*>(this, "UnityEngine.UI.ICanvasElement.get_transform"));
}
