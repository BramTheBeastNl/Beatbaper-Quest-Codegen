// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: HMUI.FlowCoordinator/ActivationType
#include "HMUI/FlowCoordinator_ActivationType.hpp"
// Including type: HMUI.FlowCoordinator/DeactivationType
#include "HMUI/FlowCoordinator_DeactivationType.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass36_0
#include "HMUI/FlowCoordinator_--c__DisplayClass36_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass37_0
#include "HMUI/FlowCoordinator_--c__DisplayClass37_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass38_0
#include "HMUI/FlowCoordinator_--c__DisplayClass38_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass39_0
#include "HMUI/FlowCoordinator_--c__DisplayClass39_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass41_0
#include "HMUI/FlowCoordinator_--c__DisplayClass41_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass42_0
#include "HMUI/FlowCoordinator_--c__DisplayClass42_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass45_0
#include "HMUI/FlowCoordinator_--c__DisplayClass45_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass46_0
#include "HMUI/FlowCoordinator_--c__DisplayClass46_0.hpp"
// Including type: HMUI.BaseInputModule
#include "HMUI/BaseInputModule.hpp"
// Including type: HMUI.ScreenSystem
#include "HMUI/ScreenSystem.hpp"
// Including type: HMUI.ViewController/SlideAnimationDirection
#include "HMUI/ViewController_SlideAnimationDirection.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator.get_topViewController
HMUI::ViewController* HMUI::FlowCoordinator::get_topViewController() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::ViewController*>(this, "get_topViewController"));
}
// Autogenerated method: HMUI.FlowCoordinator.get_childFlowCoordinator
HMUI::FlowCoordinator* HMUI::FlowCoordinator::get_childFlowCoordinator() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::FlowCoordinator*>(this, "get_childFlowCoordinator"));
}
// Autogenerated method: HMUI.FlowCoordinator.get_isActivated
bool HMUI::FlowCoordinator::get_isActivated() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isActivated"));
}
// Autogenerated method: HMUI.FlowCoordinator.set_title
void HMUI::FlowCoordinator::set_title(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_title", value));
}
// Autogenerated method: HMUI.FlowCoordinator.get_title
::Il2CppString* HMUI::FlowCoordinator::get_title() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_title"));
}
// Autogenerated method: HMUI.FlowCoordinator.set_showBackButton
void HMUI::FlowCoordinator::set_showBackButton(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_showBackButton", value));
}
// Autogenerated method: HMUI.FlowCoordinator.get_showBackButton
bool HMUI::FlowCoordinator::get_showBackButton() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_showBackButton"));
}
// Autogenerated method: HMUI.FlowCoordinator.__StartOnScreenSystem
void HMUI::FlowCoordinator::__StartOnScreenSystem(HMUI::ScreenSystem* screenSystem) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "__StartOnScreenSystem", screenSystem));
}
// Autogenerated method: HMUI.FlowCoordinator.PresentFlowCoordinator
void HMUI::FlowCoordinator::PresentFlowCoordinator(HMUI::FlowCoordinator* flowCoordinator, System::Action* finishedCallback, bool immediately, bool replaceTopViewController) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PresentFlowCoordinator", flowCoordinator, finishedCallback, immediately, replaceTopViewController));
}
// Autogenerated method: HMUI.FlowCoordinator.DismissFlowCoordinator
void HMUI::FlowCoordinator::DismissFlowCoordinator(HMUI::FlowCoordinator* flowCoordinator, System::Action* finishedCallback, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DismissFlowCoordinator", flowCoordinator, finishedCallback, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.PresentViewController
void HMUI::FlowCoordinator::PresentViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PresentViewController", viewController, finishedCallback, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.DismissViewController
void HMUI::FlowCoordinator::DismissViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DismissViewController", viewController, finishedCallback, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.ReplaceTopViewController
void HMUI::FlowCoordinator::ReplaceTopViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately, HMUI::ViewController::SlideAnimationDirection slideAnimationDirection) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReplaceTopViewController", viewController, finishedCallback, immediately, slideAnimationDirection));
}
// Autogenerated method: HMUI.FlowCoordinator.ReplaceTopViewController
void HMUI::FlowCoordinator::ReplaceTopViewController(HMUI::ViewController* viewController, HMUI::FlowCoordinator* originalOwnerFlowCoordinator, HMUI::FlowCoordinator* newOwnerFlowCoordinator, System::Action* finishedCallback, bool immediately, HMUI::ViewController::SlideAnimationDirection slideAnimationDirection) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReplaceTopViewController", viewController, originalOwnerFlowCoordinator, newOwnerFlowCoordinator, finishedCallback, immediately, slideAnimationDirection));
}
// Autogenerated method: HMUI.FlowCoordinator.PushViewControllerToNavigationController
void HMUI::FlowCoordinator::PushViewControllerToNavigationController(HMUI::NavigationController* navigationController, HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PushViewControllerToNavigationController", navigationController, viewController, finishedCallback, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.SetViewControllersToNavigationController
void HMUI::FlowCoordinator::SetViewControllersToNavigationController(HMUI::NavigationController* navigationController, ::Array<HMUI::ViewController*>* viewControllers) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetViewControllersToNavigationController", navigationController, viewControllers));
}
// Autogenerated method: HMUI.FlowCoordinator.SetViewControllerToNavigationController
void HMUI::FlowCoordinator::SetViewControllerToNavigationController(HMUI::NavigationController* navigationController, HMUI::ViewController* viewController) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetViewControllerToNavigationController", navigationController, viewController));
}
// Autogenerated method: HMUI.FlowCoordinator.PopViewControllerFromNavigationController
void HMUI::FlowCoordinator::PopViewControllerFromNavigationController(HMUI::NavigationController* navigationController, System::Action* finishedCallback, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PopViewControllerFromNavigationController", navigationController, finishedCallback, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.PopViewControllersFromNavigationController
void HMUI::FlowCoordinator::PopViewControllersFromNavigationController(HMUI::NavigationController* navigationController, int numberOfControllers, System::Action* finishedCallback, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PopViewControllersFromNavigationController", navigationController, numberOfControllers, finishedCallback, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.SetLeftScreenViewController
void HMUI::FlowCoordinator::SetLeftScreenViewController(HMUI::ViewController* viewController, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetLeftScreenViewController", viewController, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.SetRightScreenViewController
void HMUI::FlowCoordinator::SetRightScreenViewController(HMUI::ViewController* viewController, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetRightScreenViewController", viewController, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.SetBottomScreenViewController
void HMUI::FlowCoordinator::SetBottomScreenViewController(HMUI::ViewController* viewController, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetBottomScreenViewController", viewController, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.SetTopScreenViewController
void HMUI::FlowCoordinator::SetTopScreenViewController(HMUI::ViewController* viewController, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetTopScreenViewController", viewController, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.PresentTitle
void HMUI::FlowCoordinator::PresentTitle(::Il2CppString* title, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PresentTitle", title, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.IsFlowCoordinatorInHierarchy
bool HMUI::FlowCoordinator::IsFlowCoordinatorInHierarchy(HMUI::FlowCoordinator* flowCoordinator) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsFlowCoordinatorInHierarchy", flowCoordinator));
}
// Autogenerated method: HMUI.FlowCoordinator.YoungestChildFlowCoordinatorOrSelf
HMUI::FlowCoordinator* HMUI::FlowCoordinator::YoungestChildFlowCoordinatorOrSelf() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::FlowCoordinator*>(this, "YoungestChildFlowCoordinatorOrSelf"));
}
// Autogenerated method: HMUI.FlowCoordinator.ProvideInitialViewControllers
void HMUI::FlowCoordinator::ProvideInitialViewControllers(HMUI::ViewController* mainViewController, HMUI::ViewController* leftScreenViewController, HMUI::ViewController* rightScreenViewController, HMUI::ViewController* bottomScreenViewController, HMUI::ViewController* topScreenViewController) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ProvideInitialViewControllers", mainViewController, leftScreenViewController, rightScreenViewController, bottomScreenViewController, topScreenViewController));
}
// Autogenerated method: HMUI.FlowCoordinator.Activate
void HMUI::FlowCoordinator::Activate(bool firstActivation, HMUI::FlowCoordinator::ActivationType activationType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Activate", firstActivation, activationType));
}
// Autogenerated method: HMUI.FlowCoordinator.Deactivate
void HMUI::FlowCoordinator::Deactivate(HMUI::FlowCoordinator::DeactivationType deactivationType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Deactivate", deactivationType));
}
// Autogenerated method: HMUI.FlowCoordinator.__ExternalActivate
void HMUI::FlowCoordinator::__ExternalActivate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "__ExternalActivate"));
}
// Autogenerated method: HMUI.FlowCoordinator.__ExternalDeactivate
void HMUI::FlowCoordinator::__ExternalDeactivate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "__ExternalDeactivate"));
}
// Autogenerated method: HMUI.FlowCoordinator.HandleScreenSystemBackButtonWasPressed
void HMUI::FlowCoordinator::HandleScreenSystemBackButtonWasPressed() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleScreenSystemBackButtonWasPressed"));
}
// Autogenerated method: HMUI.FlowCoordinator.SetGlobalUserInteraction
void HMUI::FlowCoordinator::SetGlobalUserInteraction(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetGlobalUserInteraction", value));
}
// Autogenerated method: HMUI.FlowCoordinator.DidActivate
void HMUI::FlowCoordinator::DidActivate(bool firstActivation, HMUI::FlowCoordinator::ActivationType activationType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DidActivate", firstActivation, activationType));
}
// Autogenerated method: HMUI.FlowCoordinator.DidDeactivate
void HMUI::FlowCoordinator::DidDeactivate(HMUI::FlowCoordinator::DeactivationType deactivationType) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DidDeactivate", deactivationType));
}
// Autogenerated method: HMUI.FlowCoordinator.TopViewControllerWillChange
void HMUI::FlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, bool immediately) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "TopViewControllerWillChange", oldViewController, newViewController, immediately));
}
// Autogenerated method: HMUI.FlowCoordinator.InitialViewControllerWasPresented
void HMUI::FlowCoordinator::InitialViewControllerWasPresented() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "InitialViewControllerWasPresented"));
}
// Autogenerated method: HMUI.FlowCoordinator.BackButtonWasPressed
void HMUI::FlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "BackButtonWasPressed", topViewController));
}
// Autogenerated method: HMUI.FlowCoordinator.Log
void HMUI::FlowCoordinator::Log(::Il2CppString* message) {
  THROW_UNLESS(il2cpp_utils::RunMethod("HMUI", "FlowCoordinator", "Log", message));
}
// Autogenerated method: HMUI.FlowCoordinator.<__StartOnScreenSystem>b__35_0
void HMUI::FlowCoordinator::$__StartOnScreenSystem$b__35_0() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "<__StartOnScreenSystem>b__35_0"));
}
// Autogenerated method: HMUI.FlowCoordinator..ctor
HMUI::FlowCoordinator* HMUI::FlowCoordinator::New_ctor() {
  return (FlowCoordinator*)THROW_UNLESS(il2cpp_utils::New("HMUI", "FlowCoordinator"));
}
