// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.CurvedCanvasSettings
#include "HMUI/CurvedCanvasSettings.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kMaxElementWidth
float HMUI::CurvedCanvasSettings::_get_kMaxElementWidth() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "CurvedCanvasSettings", "kMaxElementWidth"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kMaxElementWidth
void HMUI::CurvedCanvasSettings::_set_kMaxElementWidth(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "CurvedCanvasSettings", "kMaxElementWidth", value));
}
// Autogenerated method: HMUI.CurvedCanvasSettings.get_radius
float HMUI::CurvedCanvasSettings::get_radius() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_radius"));
}
// Autogenerated method: HMUI.CurvedCanvasSettings.SetRadius
void HMUI::CurvedCanvasSettings::SetRadius(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetRadius", value));
}
// Autogenerated method: HMUI.CurvedCanvasSettings.TransformPointFromCanvasTo3D
UnityEngine::Vector3 HMUI::CurvedCanvasSettings::TransformPointFromCanvasTo3D(UnityEngine::Vector2 point) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>(this, "TransformPointFromCanvasTo3D", point));
}
// Autogenerated method: HMUI.CurvedCanvasSettings.RebuildAndSetup
void HMUI::CurvedCanvasSettings::RebuildAndSetup(UnityEngine::Transform* t) {
  THROW_UNLESS(il2cpp_utils::RunMethod("HMUI", "CurvedCanvasSettings", "RebuildAndSetup", t));
}
// Autogenerated method: HMUI.CurvedCanvasSettings.Start
void HMUI::CurvedCanvasSettings::Start() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Start"));
}
// Autogenerated method: HMUI.CurvedCanvasSettings.OnPopulateMesh
void HMUI::CurvedCanvasSettings::OnPopulateMesh(UnityEngine::UI::VertexHelper* vh) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnPopulateMesh", vh));
}
// Autogenerated method: HMUI.CurvedCanvasSettings..ctor
HMUI::CurvedCanvasSettings* HMUI::CurvedCanvasSettings::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<CurvedCanvasSettings*>());
}
