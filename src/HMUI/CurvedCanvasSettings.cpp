// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.CurvedCanvasSettings
#include "HMUI/CurvedCanvasSettings.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kMaxElementWidth
float HMUI::CurvedCanvasSettings::_get_kMaxElementWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("HMUI").WithContext("CurvedCanvasSettings").WithContext("_get_kMaxElementWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "CurvedCanvasSettings", "kMaxElementWidth"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kMaxElementWidth
void HMUI::CurvedCanvasSettings::_set_kMaxElementWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("HMUI").WithContext("CurvedCanvasSettings").WithContext("_set_kMaxElementWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "CurvedCanvasSettings", "kMaxElementWidth", value));
}
// Autogenerated method: HMUI.CurvedCanvasSettings.get_radius
float HMUI::CurvedCanvasSettings::get_radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("HMUI").WithContext("CurvedCanvasSettings").WithContext("get_radius");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_radius", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.SetRadius
void HMUI::CurvedCanvasSettings::SetRadius(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("HMUI").WithContext("CurvedCanvasSettings").WithContext("SetRadius");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetRadius", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.TransformPointFromCanvasTo3D
UnityEngine::Vector3 HMUI::CurvedCanvasSettings::TransformPointFromCanvasTo3D(UnityEngine::Vector2 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("HMUI").WithContext("CurvedCanvasSettings").WithContext("TransformPointFromCanvasTo3D");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TransformPointFromCanvasTo3D", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(point)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, point);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.RebuildAndSetup
void HMUI::CurvedCanvasSettings::RebuildAndSetup(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("HMUI").WithContext("CurvedCanvasSettings").WithContext("RebuildAndSetup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "CurvedCanvasSettings", "RebuildAndSetup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.Start
void HMUI::CurvedCanvasSettings::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("HMUI").WithContext("CurvedCanvasSettings").WithContext("Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CurvedCanvasSettings.OnPopulateMesh
void HMUI::CurvedCanvasSettings::OnPopulateMesh(UnityEngine::UI::VertexHelper* vh) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("HMUI").WithContext("CurvedCanvasSettings").WithContext("OnPopulateMesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vh)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh);
}
