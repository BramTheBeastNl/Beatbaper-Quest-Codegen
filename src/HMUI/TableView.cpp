// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableView
#include "HMUI/TableView.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: HMUI.TableView/CellsGroup
#include "HMUI/TableView_CellsGroup.hpp"
// Including type: HMUI.TableView/IDataSource
#include "HMUI/TableView_IDataSource.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.VerticalScrollIndicator
#include "HMUI/VerticalScrollIndicator.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.TableViewScroller/ScrollPositionType
#include "HMUI/TableViewScroller_ScrollPositionType.hpp"
// Including type: UnityEngine.UI.ScrollRect
#include "UnityEngine/UI/ScrollRect.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.RectTransform/Axis
#include "UnityEngine/RectTransform_Axis.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TableView.set_selectionType
void HMUI::TableView::set_selectionType(HMUI::TableViewSelectionType value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_selectionType", value));
}
// Autogenerated method: HMUI.TableView.add_didSelectCellWithIdxEvent
void HMUI::TableView::add_didSelectCellWithIdxEvent(System::Action_2<HMUI::TableView*, int>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_didSelectCellWithIdxEvent", value));
}
// Autogenerated method: HMUI.TableView.remove_didSelectCellWithIdxEvent
void HMUI::TableView::remove_didSelectCellWithIdxEvent(System::Action_2<HMUI::TableView*, int>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_didSelectCellWithIdxEvent", value));
}
// Autogenerated method: HMUI.TableView.add_didReloadDataEvent
void HMUI::TableView::add_didReloadDataEvent(System::Action_1<HMUI::TableView*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_didReloadDataEvent", value));
}
// Autogenerated method: HMUI.TableView.remove_didReloadDataEvent
void HMUI::TableView::remove_didReloadDataEvent(System::Action_1<HMUI::TableView*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_didReloadDataEvent", value));
}
// Autogenerated method: HMUI.TableView.add_didInsertCellsEvent
void HMUI::TableView::add_didInsertCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_didInsertCellsEvent", value));
}
// Autogenerated method: HMUI.TableView.remove_didInsertCellsEvent
void HMUI::TableView::remove_didInsertCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_didInsertCellsEvent", value));
}
// Autogenerated method: HMUI.TableView.add_didDeleteCellsEvent
void HMUI::TableView::add_didDeleteCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_didDeleteCellsEvent", value));
}
// Autogenerated method: HMUI.TableView.remove_didDeleteCellsEvent
void HMUI::TableView::remove_didDeleteCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_didDeleteCellsEvent", value));
}
// Autogenerated method: HMUI.TableView.add_didChangeRectSize
void HMUI::TableView::add_didChangeRectSize(System::Action_1<HMUI::TableView*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_didChangeRectSize", value));
}
// Autogenerated method: HMUI.TableView.remove_didChangeRectSize
void HMUI::TableView::remove_didChangeRectSize(System::Action_1<HMUI::TableView*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_didChangeRectSize", value));
}
// Autogenerated method: HMUI.TableView.get_dataSource
HMUI::TableView::IDataSource* HMUI::TableView::get_dataSource() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::TableView::IDataSource*>(this, "get_dataSource"));
}
// Autogenerated method: HMUI.TableView.SetDataSource
void HMUI::TableView::SetDataSource(HMUI::TableView::IDataSource* newDataSource, bool reloadData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetDataSource", newDataSource, reloadData));
}
// Autogenerated method: HMUI.TableView.get_visibleCells
System::Collections::Generic::IEnumerable_1<HMUI::TableCell*>* HMUI::TableView::get_visibleCells() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerable_1<HMUI::TableCell*>*>(this, "get_visibleCells"));
}
// Autogenerated method: HMUI.TableView.get_viewportTransform
UnityEngine::RectTransform* HMUI::TableView::get_viewportTransform() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::RectTransform*>(this, "get_viewportTransform"));
}
// Autogenerated method: HMUI.TableView.get_contentTransform
UnityEngine::RectTransform* HMUI::TableView::get_contentTransform() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::RectTransform*>(this, "get_contentTransform"));
}
// Autogenerated method: HMUI.TableView.get_scrollRect
UnityEngine::UI::ScrollRect* HMUI::TableView::get_scrollRect() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::UI::ScrollRect*>(this, "get_scrollRect"));
}
// Autogenerated method: HMUI.TableView.get_cellSize
float HMUI::TableView::get_cellSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_cellSize"));
}
// Autogenerated method: HMUI.TableView.get_tableType
HMUI::TableView::TableType HMUI::TableView::get_tableType() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::TableView::TableType>(this, "get_tableType"));
}
// Autogenerated method: HMUI.TableView.Awake
void HMUI::TableView::Awake() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Awake"));
}
// Autogenerated method: HMUI.TableView.OnEnable
void HMUI::TableView::OnEnable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnEnable"));
}
// Autogenerated method: HMUI.TableView.LazyInit
void HMUI::TableView::LazyInit() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LazyInit"));
}
// Autogenerated method: HMUI.TableView.Hide
void HMUI::TableView::Hide() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Hide"));
}
// Autogenerated method: HMUI.TableView.Show
void HMUI::TableView::Show() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Show"));
}
// Autogenerated method: HMUI.TableView.RefreshContentSize
void HMUI::TableView::RefreshContentSize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RefreshContentSize"));
}
// Autogenerated method: HMUI.TableView.RefreshCellsContent
void HMUI::TableView::RefreshCellsContent() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RefreshCellsContent"));
}
// Autogenerated method: HMUI.TableView.GetVisibleCellsIdRange
System::Tuple_2<int, int>* HMUI::TableView::GetVisibleCellsIdRange() {
  return THROW_UNLESS((il2cpp_utils::RunMethod<System::Tuple_2<int, int>*>(this, "GetVisibleCellsIdRange")));
}
// Autogenerated method: HMUI.TableView.RefreshCells
void HMUI::TableView::RefreshCells(bool forcedVisualsRefresh, bool forcedContentRefresh) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RefreshCells", forcedVisualsRefresh, forcedContentRefresh));
}
// Autogenerated method: HMUI.TableView.LayoutCellForIdx
void HMUI::TableView::LayoutCellForIdx(HMUI::TableCell* cell, int idx, float offset) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LayoutCellForIdx", cell, idx, offset));
}
// Autogenerated method: HMUI.TableView.AddCellToReusableCells
void HMUI::TableView::AddCellToReusableCells(HMUI::TableCell* cell) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddCellToReusableCells", cell));
}
// Autogenerated method: HMUI.TableView.HandleScrollRectValueChanged
void HMUI::TableView::HandleScrollRectValueChanged(UnityEngine::Vector2 pos) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleScrollRectValueChanged", pos));
}
// Autogenerated method: HMUI.TableView.HandleCellSelectionDidChange
void HMUI::TableView::HandleCellSelectionDidChange(HMUI::SelectableCell* selectableCell, HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleCellSelectionDidChange", selectableCell, transitionType, changeOwner));
}
// Autogenerated method: HMUI.TableView.DidSelectCellWithIdx
void HMUI::TableView::DidSelectCellWithIdx(int idx) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DidSelectCellWithIdx", idx));
}
// Autogenerated method: HMUI.TableView.ReloadData
void HMUI::TableView::ReloadData() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReloadData"));
}
// Autogenerated method: HMUI.TableView.InsertCells
void HMUI::TableView::InsertCells(int idx, int count) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "InsertCells", idx, count));
}
// Autogenerated method: HMUI.TableView.DeleteCells
void HMUI::TableView::DeleteCells(int idx, int count) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DeleteCells", idx, count));
}
// Autogenerated method: HMUI.TableView.DequeueReusableCellForIdentifier
HMUI::TableCell* HMUI::TableView::DequeueReusableCellForIdentifier(::Il2CppString* identifier) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::TableCell*>(this, "DequeueReusableCellForIdentifier", identifier));
}
// Autogenerated method: HMUI.TableView.SelectCellWithIdx
void HMUI::TableView::SelectCellWithIdx(int idx, bool callbackTable) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SelectCellWithIdx", idx, callbackTable));
}
// Autogenerated method: HMUI.TableView.ClearSelection
void HMUI::TableView::ClearSelection() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearSelection"));
}
// Autogenerated method: HMUI.TableView.ClearHighlights
void HMUI::TableView::ClearHighlights() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearHighlights"));
}
// Autogenerated method: HMUI.TableView.ScrollToCellWithIdx
void HMUI::TableView::ScrollToCellWithIdx(int idx, HMUI::TableViewScroller::ScrollPositionType scrollPositionType, bool animated) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ScrollToCellWithIdx", idx, scrollPositionType, animated));
}
// Autogenerated method: HMUI.TableView.ChangeRectSize
void HMUI::TableView::ChangeRectSize(UnityEngine::RectTransform::Axis axis, float size) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ChangeRectSize", axis, size));
}
// Autogenerated method: HMUI.TableView.get_selectionType
HMUI::TableViewSelectionType HMUI::TableView::get_selectionType() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::TableViewSelectionType>(this, "get_selectionType"));
}
// Autogenerated method: HMUI.TableView.get_canSelectSelectedCell
bool HMUI::TableView::get_canSelectSelectedCell() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_canSelectSelectedCell"));
}
// Autogenerated method: HMUI.TableView.get_numberOfCells
int HMUI::TableView::get_numberOfCells() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_numberOfCells"));
}
// Autogenerated method: HMUI.TableView..ctor
HMUI::TableView* HMUI::TableView::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<TableView*>());
}
