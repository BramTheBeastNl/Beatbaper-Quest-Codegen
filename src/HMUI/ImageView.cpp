// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: HMUI.ImageView/OriginHorizontal
#include "HMUI/ImageView_OriginHorizontal.hpp"
// Including type: HMUI.ImageView/OriginVertical
#include "HMUI/ImageView_OriginVertical.hpp"
// Including type: HMUI.ImageView/Origin90
#include "HMUI/ImageView_Origin90.hpp"
// Including type: HMUI.ImageView/Origin180
#include "HMUI/ImageView_Origin180.hpp"
// Including type: HMUI.ImageView/Origin360
#include "HMUI/ImageView_Origin360.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_VertScratch() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_VertScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
void HMUI::ImageView::_set_s_VertScratch(::Array<UnityEngine::Vector2>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_VertScratch", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_UVScratch() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_UVScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
void HMUI::ImageView::_set_s_UVScratch(::Array<UnityEngine::Vector2>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_UVScratch", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UV2Scratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_UV2Scratch() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_UV2Scratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UV2Scratch
void HMUI::ImageView::_set_s_UV2Scratch(::Array<UnityEngine::Vector2>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_UV2Scratch", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Xy
::Array<UnityEngine::Vector3>* HMUI::ImageView::_get_s_Xy() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "ImageView", "s_Xy"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Xy
void HMUI::ImageView::_set_s_Xy(::Array<UnityEngine::Vector3>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_Xy", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Uv
::Array<UnityEngine::Vector3>* HMUI::ImageView::_get_s_Uv() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "ImageView", "s_Uv"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Uv
void HMUI::ImageView::_set_s_Uv(::Array<UnityEngine::Vector3>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_Uv", value));
}
// Autogenerated method: HMUI.ImageView.get_sprite
UnityEngine::Sprite* HMUI::ImageView::get_sprite() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Sprite*>(this, "get_sprite"));
}
// Autogenerated method: HMUI.ImageView.set_sprite
void HMUI::ImageView::set_sprite(UnityEngine::Sprite* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_sprite", value));
}
// Autogenerated method: HMUI.ImageView.get_overrideSprite
UnityEngine::Sprite* HMUI::ImageView::get_overrideSprite() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Sprite*>(this, "get_overrideSprite"));
}
// Autogenerated method: HMUI.ImageView.set_overrideSprite
void HMUI::ImageView::set_overrideSprite(UnityEngine::Sprite* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_overrideSprite", value));
}
// Autogenerated method: HMUI.ImageView.get_type
HMUI::ImageView::Type HMUI::ImageView::get_type() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::ImageView::Type>(this, "get_type"));
}
// Autogenerated method: HMUI.ImageView.set_type
void HMUI::ImageView::set_type(HMUI::ImageView::Type value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_type", value));
}
// Autogenerated method: HMUI.ImageView.get_preserveAspect
bool HMUI::ImageView::get_preserveAspect() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_preserveAspect"));
}
// Autogenerated method: HMUI.ImageView.set_preserveAspect
void HMUI::ImageView::set_preserveAspect(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_preserveAspect", value));
}
// Autogenerated method: HMUI.ImageView.get_fillCenter
bool HMUI::ImageView::get_fillCenter() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_fillCenter"));
}
// Autogenerated method: HMUI.ImageView.set_fillCenter
void HMUI::ImageView::set_fillCenter(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fillCenter", value));
}
// Autogenerated method: HMUI.ImageView.get_fillMethod
HMUI::ImageView::FillMethod HMUI::ImageView::get_fillMethod() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<HMUI::ImageView::FillMethod>(this, "get_fillMethod"));
}
// Autogenerated method: HMUI.ImageView.set_fillMethod
void HMUI::ImageView::set_fillMethod(HMUI::ImageView::FillMethod value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fillMethod", value));
}
// Autogenerated method: HMUI.ImageView.get_fillAmount
float HMUI::ImageView::get_fillAmount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_fillAmount"));
}
// Autogenerated method: HMUI.ImageView.set_fillAmount
void HMUI::ImageView::set_fillAmount(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fillAmount", value));
}
// Autogenerated method: HMUI.ImageView.get_fillClockwise
bool HMUI::ImageView::get_fillClockwise() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_fillClockwise"));
}
// Autogenerated method: HMUI.ImageView.set_fillClockwise
void HMUI::ImageView::set_fillClockwise(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fillClockwise", value));
}
// Autogenerated method: HMUI.ImageView.get_fillOrigin
int HMUI::ImageView::get_fillOrigin() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_fillOrigin"));
}
// Autogenerated method: HMUI.ImageView.set_fillOrigin
void HMUI::ImageView::set_fillOrigin(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fillOrigin", value));
}
// Autogenerated method: HMUI.ImageView.get_eventAlphaThreshold
float HMUI::ImageView::get_eventAlphaThreshold() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_eventAlphaThreshold"));
}
// Autogenerated method: HMUI.ImageView.set_eventAlphaThreshold
void HMUI::ImageView::set_eventAlphaThreshold(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_eventAlphaThreshold", value));
}
// Autogenerated method: HMUI.ImageView.get_hasBorder
bool HMUI::ImageView::get_hasBorder() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_hasBorder"));
}
// Autogenerated method: HMUI.ImageView.get_pixelsPerUnit
float HMUI::ImageView::get_pixelsPerUnit() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_pixelsPerUnit"));
}
// Autogenerated method: HMUI.ImageView.GetDrawingDimensions
UnityEngine::Vector4 HMUI::ImageView::GetDrawingDimensions(bool shouldPreserveAspect) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector4>(this, "GetDrawingDimensions", shouldPreserveAspect));
}
// Autogenerated method: HMUI.ImageView.GenerateSimpleSprite
void HMUI::ImageView::GenerateSimpleSprite(UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GenerateSimpleSprite", vh, lPreserveAspect));
}
// Autogenerated method: HMUI.ImageView.GenerateSlicedSprite
void HMUI::ImageView::GenerateSlicedSprite(UnityEngine::UI::VertexHelper* toFill) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GenerateSlicedSprite", toFill));
}
// Autogenerated method: HMUI.ImageView.GenerateTiledSprite
void HMUI::ImageView::GenerateTiledSprite(UnityEngine::UI::VertexHelper* toFill) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GenerateTiledSprite", toFill));
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, ::Array<UnityEngine::Vector3>* quadPositions, UnityEngine::Color32 color, ::Array<UnityEngine::Vector3>* quadUVs) {
  THROW_UNLESS(il2cpp_utils::RunMethod("HMUI", "ImageView", "AddQuad", vertexHelper, quadPositions, color, quadUVs));
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uvMin, UnityEngine::Vector2 uvMax) {
  THROW_UNLESS(il2cpp_utils::RunMethod("HMUI", "ImageView", "AddQuad", vertexHelper, posMin, posMax, color, uvMin, uvMax));
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uvMin, UnityEngine::Vector2 uvMax, UnityEngine::Vector2 uv2Min, UnityEngine::Vector2 uv2Max) {
  THROW_UNLESS(il2cpp_utils::RunMethod("HMUI", "ImageView", "AddQuad", vertexHelper, posMin, posMax, color, uvMin, uvMax, uv2Min, uv2Max));
}
// Autogenerated method: HMUI.ImageView.GetAdjustedBorders
UnityEngine::Vector4 HMUI::ImageView::GetAdjustedBorders(UnityEngine::Vector4 border, UnityEngine::Rect rect) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector4>(this, "GetAdjustedBorders", border, rect));
}
// Autogenerated method: HMUI.ImageView.GenerateFilledSprite
void HMUI::ImageView::GenerateFilledSprite(UnityEngine::UI::VertexHelper* toFill, bool preserveAspect) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GenerateFilledSprite", toFill, preserveAspect));
}
// Autogenerated method: HMUI.ImageView.RadialCut
bool HMUI::ImageView::RadialCut(::Array<UnityEngine::Vector3>* xy, ::Array<UnityEngine::Vector3>* uv, float fill, bool invert, int corner) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("HMUI", "ImageView", "RadialCut", xy, uv, fill, invert, corner));
}
// Autogenerated method: HMUI.ImageView.RadialCut
void HMUI::ImageView::RadialCut(::Array<UnityEngine::Vector3>* xy, float cos, float sin, bool invert, int corner) {
  THROW_UNLESS(il2cpp_utils::RunMethod("HMUI", "ImageView", "RadialCut", xy, cos, sin, invert, corner));
}
// Autogenerated method: HMUI.ImageView.MapCoordinate
UnityEngine::Vector2 HMUI::ImageView::MapCoordinate(UnityEngine::Vector2 local, UnityEngine::Rect rect) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>(this, "MapCoordinate", local, rect));
}
// Autogenerated method: HMUI.ImageView..ctor
HMUI::ImageView* HMUI::ImageView::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<ImageView*>());
}
// Autogenerated method: HMUI.ImageView.get_mainTexture
UnityEngine::Texture* HMUI::ImageView::get_mainTexture() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Texture*>(this, "get_mainTexture"));
}
// Autogenerated method: HMUI.ImageView.OnBeforeSerialize
void HMUI::ImageView::OnBeforeSerialize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnBeforeSerialize"));
}
void HMUI::ImageView::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  HMUI::ImageView::OnBeforeSerialize();
}
// Autogenerated method: HMUI.ImageView.OnAfterDeserialize
void HMUI::ImageView::OnAfterDeserialize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnAfterDeserialize"));
}
void HMUI::ImageView::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  HMUI::ImageView::OnAfterDeserialize();
}
// Autogenerated method: HMUI.ImageView.SetNativeSize
void HMUI::ImageView::SetNativeSize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetNativeSize"));
}
// Autogenerated method: HMUI.ImageView.OnPopulateMesh
void HMUI::ImageView::OnPopulateMesh(UnityEngine::UI::VertexHelper* toFill) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnPopulateMesh", toFill));
}
// Autogenerated method: HMUI.ImageView.CalculateLayoutInputHorizontal
void HMUI::ImageView::CalculateLayoutInputHorizontal() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CalculateLayoutInputHorizontal"));
}
// Autogenerated method: HMUI.ImageView.CalculateLayoutInputVertical
void HMUI::ImageView::CalculateLayoutInputVertical() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CalculateLayoutInputVertical"));
}
// Autogenerated method: HMUI.ImageView.get_minWidth
float HMUI::ImageView::get_minWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_minWidth"));
}
// Autogenerated method: HMUI.ImageView.get_preferredWidth
float HMUI::ImageView::get_preferredWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_preferredWidth"));
}
// Autogenerated method: HMUI.ImageView.get_flexibleWidth
float HMUI::ImageView::get_flexibleWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_flexibleWidth"));
}
// Autogenerated method: HMUI.ImageView.get_minHeight
float HMUI::ImageView::get_minHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_minHeight"));
}
// Autogenerated method: HMUI.ImageView.get_preferredHeight
float HMUI::ImageView::get_preferredHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_preferredHeight"));
}
// Autogenerated method: HMUI.ImageView.get_flexibleHeight
float HMUI::ImageView::get_flexibleHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_flexibleHeight"));
}
// Autogenerated method: HMUI.ImageView.get_layoutPriority
int HMUI::ImageView::get_layoutPriority() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_layoutPriority"));
}
// Autogenerated method: HMUI.ImageView.IsRaycastLocationValid
bool HMUI::ImageView::IsRaycastLocationValid(UnityEngine::Vector2 screenPoint, UnityEngine::Camera* eventCamera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsRaycastLocationValid", screenPoint, eventCamera));
}
// Autogenerated method: HMUI.ImageView..cctor
void HMUI::ImageView::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("HMUI", "ImageView", ".cctor"));
}
