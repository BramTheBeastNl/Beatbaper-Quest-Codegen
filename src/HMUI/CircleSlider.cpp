// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.CircleSlider
#include "HMUI/CircleSlider.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.CircleSlider.get_handleRect
UnityEngine::RectTransform* HMUI::CircleSlider::get_handleRect() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::RectTransform*>(this, "get_handleRect"));
}
// Autogenerated method: HMUI.CircleSlider.set_handleRect
void HMUI::CircleSlider::set_handleRect(UnityEngine::RectTransform* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_handleRect", value));
}
// Autogenerated method: HMUI.CircleSlider.set_handleColor
void HMUI::CircleSlider::set_handleColor(UnityEngine::Color value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_handleColor", value));
}
// Autogenerated method: HMUI.CircleSlider.get_normalizedValue
float HMUI::CircleSlider::get_normalizedValue() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_normalizedValue"));
}
// Autogenerated method: HMUI.CircleSlider.set_normalizedValue
void HMUI::CircleSlider::set_normalizedValue(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_normalizedValue", value));
}
// Autogenerated method: HMUI.CircleSlider.add_normalizedValueDidChangeEvent
void HMUI::CircleSlider::add_normalizedValueDidChangeEvent(System::Action_2<HMUI::CircleSlider*, float>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_normalizedValueDidChangeEvent", value));
}
// Autogenerated method: HMUI.CircleSlider.remove_normalizedValueDidChangeEvent
void HMUI::CircleSlider::remove_normalizedValueDidChangeEvent(System::Action_2<HMUI::CircleSlider*, float>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_normalizedValueDidChangeEvent", value));
}
// Autogenerated method: HMUI.CircleSlider.UpdateCachedReferences
void HMUI::CircleSlider::UpdateCachedReferences() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateCachedReferences"));
}
// Autogenerated method: HMUI.CircleSlider.SetNormalizedValue
void HMUI::CircleSlider::SetNormalizedValue(float input) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetNormalizedValue", input));
}
// Autogenerated method: HMUI.CircleSlider.SetNormalizedValue
void HMUI::CircleSlider::SetNormalizedValue(float input, bool sendCallback) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetNormalizedValue", input, sendCallback));
}
// Autogenerated method: HMUI.CircleSlider.UpdateVisuals
void HMUI::CircleSlider::UpdateVisuals() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateVisuals"));
}
// Autogenerated method: HMUI.CircleSlider.UpdateDrag
void HMUI::CircleSlider::UpdateDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateDrag", eventData));
}
// Autogenerated method: HMUI.CircleSlider.MayDrag
bool HMUI::CircleSlider::MayDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "MayDrag", eventData));
}
// Autogenerated method: HMUI.CircleSlider.Rebuild
void HMUI::CircleSlider::Rebuild(UnityEngine::UI::CanvasUpdate executing) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Rebuild", executing));
}
// Autogenerated method: HMUI.CircleSlider.LayoutComplete
void HMUI::CircleSlider::LayoutComplete() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LayoutComplete"));
}
// Autogenerated method: HMUI.CircleSlider.GraphicUpdateComplete
void HMUI::CircleSlider::GraphicUpdateComplete() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GraphicUpdateComplete"));
}
// Autogenerated method: HMUI.CircleSlider.OnEnable
void HMUI::CircleSlider::OnEnable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnEnable"));
}
// Autogenerated method: HMUI.CircleSlider.OnDisable
void HMUI::CircleSlider::OnDisable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDisable"));
}
// Autogenerated method: HMUI.CircleSlider.OnRectTransformDimensionsChange
void HMUI::CircleSlider::OnRectTransformDimensionsChange() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnRectTransformDimensionsChange"));
}
// Autogenerated method: HMUI.CircleSlider.OnBeginDrag
void HMUI::CircleSlider::OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnBeginDrag", eventData));
}
// Autogenerated method: HMUI.CircleSlider.OnDrag
void HMUI::CircleSlider::OnDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDrag", eventData));
}
// Autogenerated method: HMUI.CircleSlider.OnPointerDown
void HMUI::CircleSlider::OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnPointerDown", eventData));
}
// Autogenerated method: HMUI.CircleSlider.OnInitializePotentialDrag
void HMUI::CircleSlider::OnInitializePotentialDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnInitializePotentialDrag", eventData));
}
// Autogenerated method: HMUI.CircleSlider..ctor
HMUI::CircleSlider* HMUI::CircleSlider::New_ctor() {
  return (CircleSlider*)THROW_UNLESS(il2cpp_utils::New("HMUI", "CircleSlider"));
}
// Autogenerated method: HMUI.CircleSlider.UnityEngine.UI.ICanvasElement.get_transform
UnityEngine::Transform* HMUI::CircleSlider::UnityEngine_UI_ICanvasElement_get_transform() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Transform*>(this, "UnityEngine.UI.ICanvasElement.get_transform"));
}
