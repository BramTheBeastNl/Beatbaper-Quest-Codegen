// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRUIControls.VRPointer
#include "VRUIControls/VRPointer.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kScrollMultiplier
float VRUIControls::VRPointer::_get_kScrollMultiplier() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("VRUIControls", "VRPointer", "kScrollMultiplier"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kScrollMultiplier
void VRUIControls::VRPointer::_set_kScrollMultiplier(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "kScrollMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _lastControllerUsedWasRight
bool VRUIControls::VRPointer::_get__lastControllerUsedWasRight() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_lastControllerUsedWasRight"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _lastControllerUsedWasRight
void VRUIControls::VRPointer::_set__lastControllerUsedWasRight(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_lastControllerUsedWasRight", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _rightControllerWasReleased
bool VRUIControls::VRPointer::_get__rightControllerWasReleased() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_rightControllerWasReleased"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _rightControllerWasReleased
void VRUIControls::VRPointer::_set__rightControllerWasReleased(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_rightControllerWasReleased", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _leftControllerWasReleased
bool VRUIControls::VRPointer::_get__leftControllerWasReleased() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("VRUIControls", "VRPointer", "_leftControllerWasReleased"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _leftControllerWasReleased
void VRUIControls::VRPointer::_set__leftControllerWasReleased(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VRUIControls", "VRPointer", "_leftControllerWasReleased", value));
}
// Autogenerated method: VRUIControls.VRPointer.get_vrController
GlobalNamespace::VRController* VRUIControls::VRPointer::get_vrController() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::VRController*>(this, "get_vrController"));
}
// Autogenerated method: VRUIControls.VRPointer.get_cursorPosition
UnityEngine::Vector3 VRUIControls::VRPointer::get_cursorPosition() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>(this, "get_cursorPosition"));
}
// Autogenerated method: VRUIControls.VRPointer.get_eventSystem
UnityEngine::EventSystems::EventSystem* VRUIControls::VRPointer::get_eventSystem() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::EventSystems::EventSystem*>(this, "get_eventSystem"));
}
// Autogenerated method: VRUIControls.VRPointer.NoDomainReloadInit
void VRUIControls::VRPointer::NoDomainReloadInit() {
  THROW_UNLESS(il2cpp_utils::RunMethod("VRUIControls", "VRPointer", "NoDomainReloadInit"));
}
// Autogenerated method: VRUIControls.VRPointer.Awake
void VRUIControls::VRPointer::Awake() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Awake"));
}
// Autogenerated method: VRUIControls.VRPointer.OnEnable
void VRUIControls::VRPointer::OnEnable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnEnable"));
}
// Autogenerated method: VRUIControls.VRPointer.OnDisable
void VRUIControls::VRPointer::OnDisable() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDisable"));
}
// Autogenerated method: VRUIControls.VRPointer.LateUpdate
void VRUIControls::VRPointer::LateUpdate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LateUpdate"));
}
// Autogenerated method: VRUIControls.VRPointer.CreateLaserPointerAndLaserHit
void VRUIControls::VRPointer::CreateLaserPointerAndLaserHit() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CreateLaserPointerAndLaserHit"));
}
// Autogenerated method: VRUIControls.VRPointer.RefreshLaserPointerAndLaserHit
void VRUIControls::VRPointer::RefreshLaserPointerAndLaserHit(UnityEngine::EventSystems::PointerEventData* pointerData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RefreshLaserPointerAndLaserHit", pointerData));
}
// Autogenerated method: VRUIControls.VRPointer.OnApplicationFocus
void VRUIControls::VRPointer::OnApplicationFocus(bool hasFocus) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnApplicationFocus", hasFocus));
}
// Autogenerated method: VRUIControls.VRPointer.DestroyLaserAndHit
void VRUIControls::VRPointer::DestroyLaserAndHit() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DestroyLaserAndHit"));
}
// Autogenerated method: VRUIControls.VRPointer.get_state
::Il2CppString* VRUIControls::VRPointer::get_state() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_state"));
}
// Autogenerated method: VRUIControls.VRPointer.Process
void VRUIControls::VRPointer::Process(UnityEngine::EventSystems::PointerEventData* pointerEventData) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Process", pointerEventData));
}
// Autogenerated method: VRUIControls.VRPointer..ctor
VRUIControls::VRPointer* VRUIControls::VRPointer::New_ctor() {
  return (VRPointer*)THROW_UNLESS(il2cpp_utils::New("VRUIControls", "VRPointer"));
}
// Autogenerated method: VRUIControls.VRPointer..cctor
void VRUIControls::VRPointer::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("VRUIControls", "VRPointer", ".cctor"));
}
