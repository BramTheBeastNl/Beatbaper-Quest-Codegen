// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PrepareLevelCompletionResults
#include "GlobalNamespace/PrepareLevelCompletionResults.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: SaberActivityCounter
#include "GlobalNamespace/SaberActivityCounter.hpp"
// Including type: BeatmapObjectExecutionRatingsRecorder
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder.hpp"
// Including type: MultiplierValuesRecorder
#include "GlobalNamespace/MultiplierValuesRecorder.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: LevelCompletionResults/LevelEndStateType
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: LevelCompletionResults/LevelEndAction
// Already included the same include: GlobalNamespace/LevelCompletionResults.hpp
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PrepareLevelCompletionResults.FillLevelCompletionResults
GlobalNamespace::LevelCompletionResults* GlobalNamespace::PrepareLevelCompletionResults::FillLevelCompletionResults(GlobalNamespace::LevelCompletionResults::LevelEndStateType levelEndStateType, GlobalNamespace::LevelCompletionResults::LevelEndAction levelEndAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::FillLevelCompletionResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillLevelCompletionResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelEndStateType), ::il2cpp_utils::ExtractType(levelEndAction)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LevelCompletionResults*, false>(this, ___internal__method, levelEndStateType, levelEndAction);
}
// Writing MetadataGetter for method: PrepareLevelCompletionResults::FillLevelCompletionResults
// Il2CppName: FillLevelCompletionResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LevelCompletionResults* (PrepareLevelCompletionResults::*)(GlobalNamespace::LevelCompletionResults::LevelEndStateType, GlobalNamespace::LevelCompletionResults::LevelEndAction)>(&PrepareLevelCompletionResults::FillLevelCompletionResults)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrepareLevelCompletionResults*), "FillLevelCompletionResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults::LevelEndStateType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults::LevelEndAction>()});
  }
};
// Writing MetadataGetter for method: PrepareLevelCompletionResults::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrepareLevelCompletionResults::*)()>(&PrepareLevelCompletionResults::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrepareLevelCompletionResults*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrepareLevelCompletionResults::*)()>(&PrepareLevelCompletionResults::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrepareLevelCompletionResults*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShowTextOnGameEventController
#include "GlobalNamespace/ShowTextOnGameEventController.hpp"
// Including type: ShowTextOnGameEventController/EventTextBinding
#include "GlobalNamespace/ShowTextOnGameEventController_EventTextBinding.hpp"
// Including type: TextFadeTransitions
#include "GlobalNamespace/TextFadeTransitions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShowTextOnGameEventController.Awake
void GlobalNamespace::ShowTextOnGameEventController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowTextOnGameEventController.OnDestroy
void GlobalNamespace::ShowTextOnGameEventController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ShowTextOnGameEventController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowTextOnGameEventController::*)()>(&ShowTextOnGameEventController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowTextOnGameEventController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowTextOnGameEventController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowTextOnGameEventController::*)()>(&ShowTextOnGameEventController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowTextOnGameEventController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowTextOnGameEventController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowTextOnGameEventController::*)()>(&ShowTextOnGameEventController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowTextOnGameEventController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowTextOnGameEventController::*)()>(&ShowTextOnGameEventController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowTextOnGameEventController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShowTextOnGameEventController/EventTextBinding
#include "GlobalNamespace/ShowTextOnGameEventController_EventTextBinding.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: TextFadeTransitions
#include "GlobalNamespace/TextFadeTransitions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShowTextOnGameEventController/EventTextBinding.Init
void GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::Init(GlobalNamespace::TextFadeTransitions* textFadeTransitions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textFadeTransitions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, textFadeTransitions);
}
// Autogenerated method: ShowTextOnGameEventController/EventTextBinding.Deinit
void GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::Deinit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::Deinit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deinit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowTextOnGameEventController/EventTextBinding.HandleGameEvent
void GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::HandleGameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::HandleGameEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ShowTextOnGameEventController::EventTextBinding::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowTextOnGameEventController::EventTextBinding::*)(GlobalNamespace::TextFadeTransitions*)>(&ShowTextOnGameEventController::EventTextBinding::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowTextOnGameEventController::EventTextBinding*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::TextFadeTransitions*>()});
  }
};
// Writing MetadataGetter for method: ShowTextOnGameEventController::EventTextBinding::Deinit
// Il2CppName: Deinit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowTextOnGameEventController::EventTextBinding::*)()>(&ShowTextOnGameEventController::EventTextBinding::Deinit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowTextOnGameEventController::EventTextBinding*), "Deinit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowTextOnGameEventController::EventTextBinding::HandleGameEvent
// Il2CppName: HandleGameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowTextOnGameEventController::EventTextBinding::*)()>(&ShowTextOnGameEventController::EventTextBinding::HandleGameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowTextOnGameEventController::EventTextBinding*), "HandleGameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowTextOnGameEventController::EventTextBinding::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowTextOnGameEventController::EventTextBinding::*)()>(&ShowTextOnGameEventController::EventTextBinding::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowTextOnGameEventController::EventTextBinding*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowTextOnGameEventController::EventTextBinding::*)()>(&ShowTextOnGameEventController::EventTextBinding::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowTextOnGameEventController::EventTextBinding*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SpawnRotationProcessor
#include "GlobalNamespace/SpawnRotationProcessor.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SpawnRotationProcessor.get_rotation
float GlobalNamespace::SpawnRotationProcessor::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationProcessor::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SpawnRotationProcessor.ProcessBeatmapEventData
bool GlobalNamespace::SpawnRotationProcessor::ProcessBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationProcessor::ProcessBeatmapEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessBeatmapEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: SpawnRotationProcessor.RotationForEventValue
float GlobalNamespace::SpawnRotationProcessor::RotationForEventValue(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationProcessor::RotationForEventValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotationForEventValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, index);
}
// Writing MetadataGetter for method: SpawnRotationProcessor::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SpawnRotationProcessor::*)()>(&SpawnRotationProcessor::get_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationProcessor*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpawnRotationProcessor::ProcessBeatmapEventData
// Il2CppName: ProcessBeatmapEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SpawnRotationProcessor::*)(GlobalNamespace::BeatmapEventData*)>(&SpawnRotationProcessor::ProcessBeatmapEventData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationProcessor*), "ProcessBeatmapEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: SpawnRotationProcessor::RotationForEventValue
// Il2CppName: RotationForEventValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SpawnRotationProcessor::*)(int)>(&SpawnRotationProcessor::RotationForEventValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationProcessor*), "RotationForEventValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SpawnRotationProcessor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationProcessor::*)()>(&SpawnRotationProcessor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationProcessor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationProcessor::*)()>(&SpawnRotationProcessor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationProcessor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VariableBpmProcessor
#include "GlobalNamespace/VariableBpmProcessor.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VariableBpmProcessor.get_currentBpm
float GlobalNamespace::VariableBpmProcessor::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VariableBpmProcessor::get_currentBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VariableBpmProcessor.SetBpm
void GlobalNamespace::VariableBpmProcessor::SetBpm(float newBpm) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VariableBpmProcessor::SetBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBpm)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newBpm);
}
// Autogenerated method: VariableBpmProcessor.ProcessBeatmapEventData
bool GlobalNamespace::VariableBpmProcessor::ProcessBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VariableBpmProcessor::ProcessBeatmapEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessBeatmapEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, beatmapEventData);
}
// Writing MetadataGetter for method: VariableBpmProcessor::get_currentBpm
// Il2CppName: get_currentBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VariableBpmProcessor::*)()>(&VariableBpmProcessor::get_currentBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VariableBpmProcessor*), "get_currentBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VariableBpmProcessor::SetBpm
// Il2CppName: SetBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VariableBpmProcessor::*)(float)>(&VariableBpmProcessor::SetBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VariableBpmProcessor*), "SetBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: VariableBpmProcessor::ProcessBeatmapEventData
// Il2CppName: ProcessBeatmapEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VariableBpmProcessor::*)(GlobalNamespace::BeatmapEventData*)>(&VariableBpmProcessor::ProcessBeatmapEventData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VariableBpmProcessor*), "ProcessBeatmapEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: VariableBpmProcessor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VariableBpmProcessor::*)()>(&VariableBpmProcessor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VariableBpmProcessor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VariableBpmProcessor::*)()>(&VariableBpmProcessor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VariableBpmProcessor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerSpaceConvertor
#include "GlobalNamespace/PlayerSpaceConvertor.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayerSpaceConvertor.get_worldToPlayerSpaceRotation
UnityEngine::Quaternion GlobalNamespace::PlayerSpaceConvertor::get_worldToPlayerSpaceRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpaceConvertor::get_worldToPlayerSpaceRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldToPlayerSpaceRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpaceConvertor.Start
void GlobalNamespace::PlayerSpaceConvertor::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpaceConvertor::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PlayerSpaceConvertor::get_worldToPlayerSpaceRotation
// Il2CppName: get_worldToPlayerSpaceRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (PlayerSpaceConvertor::*)()>(&PlayerSpaceConvertor::get_worldToPlayerSpaceRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpaceConvertor*), "get_worldToPlayerSpaceRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpaceConvertor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpaceConvertor::*)()>(&PlayerSpaceConvertor::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpaceConvertor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpaceConvertor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpaceConvertor::*)()>(&PlayerSpaceConvertor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpaceConvertor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpaceConvertor::*)()>(&PlayerSpaceConvertor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpaceConvertor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayerTransforms.get_headWorldPos
UnityEngine::Vector3 GlobalNamespace::PlayerTransforms::get_headWorldPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_headWorldPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headWorldPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_headWorldRot
UnityEngine::Quaternion GlobalNamespace::PlayerTransforms::get_headWorldRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_headWorldRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headWorldRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_headPseudoLocalPos
UnityEngine::Vector3 GlobalNamespace::PlayerTransforms::get_headPseudoLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_headPseudoLocalPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headPseudoLocalPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_headPseudoLocalRot
UnityEngine::Quaternion GlobalNamespace::PlayerTransforms::get_headPseudoLocalRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_headPseudoLocalRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headPseudoLocalRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_leftHandPseudoLocalPos
UnityEngine::Vector3 GlobalNamespace::PlayerTransforms::get_leftHandPseudoLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_leftHandPseudoLocalPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHandPseudoLocalPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_leftHandPseudoLocalRot
UnityEngine::Quaternion GlobalNamespace::PlayerTransforms::get_leftHandPseudoLocalRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_leftHandPseudoLocalRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHandPseudoLocalRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_rightHandPseudoLocalPos
UnityEngine::Vector3 GlobalNamespace::PlayerTransforms::get_rightHandPseudoLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_rightHandPseudoLocalPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightHandPseudoLocalPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_rightHandPseudoLocalRot
UnityEngine::Quaternion GlobalNamespace::PlayerTransforms::get_rightHandPseudoLocalRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_rightHandPseudoLocalRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightHandPseudoLocalRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: PlayerTransforms.Awake
void GlobalNamespace::PlayerTransforms::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayerTransforms.OverrideHeadPos
void GlobalNamespace::PlayerTransforms::OverrideHeadPos(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::OverrideHeadPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OverrideHeadPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: PlayerTransforms.Update
void GlobalNamespace::PlayerTransforms::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayerTransforms.MoveTowardsHead
float GlobalNamespace::PlayerTransforms::MoveTowardsHead(float start, float end, UnityEngine::Quaternion noteInverseWorldRotation, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::MoveTowardsHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveTowardsHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(noteInverseWorldRotation), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, start, end, noteInverseWorldRotation, t);
}
// Autogenerated method: PlayerTransforms.GetZPosOffsetByHeadPosAtTime
float GlobalNamespace::PlayerTransforms::GetZPosOffsetByHeadPosAtTime(float start, float end, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::GetZPosOffsetByHeadPosAtTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetZPosOffsetByHeadPosAtTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, start, end, t);
}
// Autogenerated method: PlayerTransforms.GetZPos
float GlobalNamespace::PlayerTransforms::GetZPos(float start, float end, float headOffsetZ, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::GetZPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetZPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(headOffsetZ), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, start, end, headOffsetZ, t);
}
// Autogenerated method: PlayerTransforms.HeadOffsetZ
float GlobalNamespace::PlayerTransforms::HeadOffsetZ(UnityEngine::Quaternion noteInverseWorldRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::HeadOffsetZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HeadOffsetZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteInverseWorldRotation)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, noteInverseWorldRotation);
}
// Writing MetadataGetter for method: PlayerTransforms::get_headWorldPos
// Il2CppName: get_headWorldPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (PlayerTransforms::*)()>(&PlayerTransforms::get_headWorldPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "get_headWorldPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::get_headWorldRot
// Il2CppName: get_headWorldRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (PlayerTransforms::*)()>(&PlayerTransforms::get_headWorldRot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "get_headWorldRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::get_headPseudoLocalPos
// Il2CppName: get_headPseudoLocalPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (PlayerTransforms::*)()>(&PlayerTransforms::get_headPseudoLocalPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "get_headPseudoLocalPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::get_headPseudoLocalRot
// Il2CppName: get_headPseudoLocalRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (PlayerTransforms::*)()>(&PlayerTransforms::get_headPseudoLocalRot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "get_headPseudoLocalRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::get_leftHandPseudoLocalPos
// Il2CppName: get_leftHandPseudoLocalPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (PlayerTransforms::*)()>(&PlayerTransforms::get_leftHandPseudoLocalPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "get_leftHandPseudoLocalPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::get_leftHandPseudoLocalRot
// Il2CppName: get_leftHandPseudoLocalRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (PlayerTransforms::*)()>(&PlayerTransforms::get_leftHandPseudoLocalRot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "get_leftHandPseudoLocalRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::get_rightHandPseudoLocalPos
// Il2CppName: get_rightHandPseudoLocalPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (PlayerTransforms::*)()>(&PlayerTransforms::get_rightHandPseudoLocalPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "get_rightHandPseudoLocalPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::get_rightHandPseudoLocalRot
// Il2CppName: get_rightHandPseudoLocalRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (PlayerTransforms::*)()>(&PlayerTransforms::get_rightHandPseudoLocalRot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "get_rightHandPseudoLocalRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerTransforms::*)()>(&PlayerTransforms::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::OverrideHeadPos
// Il2CppName: OverrideHeadPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerTransforms::*)(UnityEngine::Vector3)>(&PlayerTransforms::OverrideHeadPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "OverrideHeadPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerTransforms::*)()>(&PlayerTransforms::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::MoveTowardsHead
// Il2CppName: MoveTowardsHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayerTransforms::*)(float, float, UnityEngine::Quaternion, float)>(&PlayerTransforms::MoveTowardsHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "MoveTowardsHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::GetZPosOffsetByHeadPosAtTime
// Il2CppName: GetZPosOffsetByHeadPosAtTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayerTransforms::*)(float, float, float)>(&PlayerTransforms::GetZPosOffsetByHeadPosAtTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "GetZPosOffsetByHeadPosAtTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::GetZPos
// Il2CppName: GetZPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayerTransforms::*)(float, float, float, float)>(&PlayerTransforms::GetZPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "GetZPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::HeadOffsetZ
// Il2CppName: HeadOffsetZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayerTransforms::*)(UnityEngine::Quaternion)>(&PlayerTransforms::HeadOffsetZ)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), "HeadOffsetZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: PlayerTransforms::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerTransforms::*)()>(&PlayerTransforms::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerTransforms::*)()>(&PlayerTransforms::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerTransforms*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerVRControllersManager
#include "GlobalNamespace/PlayerVRControllersManager.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayerVRControllersManager.DisableAllVRControllers
void GlobalNamespace::PlayerVRControllersManager::DisableAllVRControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerVRControllersManager::DisableAllVRControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableAllVRControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PlayerVRControllersManager::DisableAllVRControllers
// Il2CppName: DisableAllVRControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerVRControllersManager::*)()>(&PlayerVRControllersManager::DisableAllVRControllers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerVRControllersManager*), "DisableAllVRControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerVRControllersManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerVRControllersManager::*)()>(&PlayerVRControllersManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerVRControllersManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerVRControllersManager::*)()>(&PlayerVRControllersManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerVRControllersManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnControllerPlayerHeightSetter
#include "GlobalNamespace/BeatmapObjectSpawnControllerPlayerHeightSetter.hpp"
// Including type: BeatmapObjectSpawnController
#include "GlobalNamespace/BeatmapObjectSpawnController.hpp"
// Including type: PlayerHeightDetector
#include "GlobalNamespace/PlayerHeightDetector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectSpawnControllerPlayerHeightSetter.Start
void GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnControllerPlayerHeightSetter.OnDestroy
void GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnControllerPlayerHeightSetter.HandlePlayerHeightDidChange
void GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::HandlePlayerHeightDidChange(float playerHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::HandlePlayerHeightDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerHeightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playerHeight);
}
// Autogenerated method: BeatmapObjectSpawnControllerPlayerHeightSetter.JumpOffsetYForPlayerHeight
float GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::JumpOffsetYForPlayerHeight(float playerHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::JumpOffsetYForPlayerHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapObjectSpawnControllerPlayerHeightSetter", "JumpOffsetYForPlayerHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerHeight)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, playerHeight);
}
// Writing MetadataGetter for method: BeatmapObjectSpawnControllerPlayerHeightSetter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnControllerPlayerHeightSetter::*)()>(&BeatmapObjectSpawnControllerPlayerHeightSetter::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnControllerPlayerHeightSetter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnControllerPlayerHeightSetter::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnControllerPlayerHeightSetter::*)()>(&BeatmapObjectSpawnControllerPlayerHeightSetter::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnControllerPlayerHeightSetter*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnControllerPlayerHeightSetter::HandlePlayerHeightDidChange
// Il2CppName: HandlePlayerHeightDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnControllerPlayerHeightSetter::*)(float)>(&BeatmapObjectSpawnControllerPlayerHeightSetter::HandlePlayerHeightDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnControllerPlayerHeightSetter*), "HandlePlayerHeightDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnControllerPlayerHeightSetter::JumpOffsetYForPlayerHeight
// Il2CppName: JumpOffsetYForPlayerHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&BeatmapObjectSpawnControllerPlayerHeightSetter::JumpOffsetYForPlayerHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnControllerPlayerHeightSetter*), "JumpOffsetYForPlayerHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnControllerPlayerHeightSetter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnControllerPlayerHeightSetter::*)()>(&BeatmapObjectSpawnControllerPlayerHeightSetter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnControllerPlayerHeightSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnControllerPlayerHeightSetter::*)()>(&BeatmapObjectSpawnControllerPlayerHeightSetter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnControllerPlayerHeightSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerHeightDetector
#include "GlobalNamespace/PlayerHeightDetector.hpp"
// Including type: PlayerHeightDetector/InitData
#include "GlobalNamespace/PlayerHeightDetector_InitData.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayerHeightDetector.add_playerHeightDidChangeEvent
void GlobalNamespace::PlayerHeightDetector::add_playerHeightDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::add_playerHeightDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerHeightDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlayerHeightDetector.remove_playerHeightDidChangeEvent
void GlobalNamespace::PlayerHeightDetector::remove_playerHeightDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::remove_playerHeightDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerHeightDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlayerHeightDetector.get_playerHeight
float GlobalNamespace::PlayerHeightDetector::get_playerHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::get_playerHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playerHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PlayerHeightDetector.Start
void GlobalNamespace::PlayerHeightDetector::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayerHeightDetector.OnDestroy
void GlobalNamespace::PlayerHeightDetector::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayerHeightDetector.LateUpdate
void GlobalNamespace::PlayerHeightDetector::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayerHeightDetector.BeatmapObjectSpawnCallback
void GlobalNamespace::PlayerHeightDetector::BeatmapObjectSpawnCallback(GlobalNamespace::BeatmapObjectData* beatmapObjectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::BeatmapObjectSpawnCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeatmapObjectSpawnCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapObjectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapObjectData);
}
// Writing MetadataGetter for method: PlayerHeightDetector::add_playerHeightDidChangeEvent
// Il2CppName: add_playerHeightDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerHeightDetector::*)(System::Action_1<float>*)>(&PlayerHeightDetector::add_playerHeightDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector*), "add_playerHeightDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: PlayerHeightDetector::remove_playerHeightDidChangeEvent
// Il2CppName: remove_playerHeightDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerHeightDetector::*)(System::Action_1<float>*)>(&PlayerHeightDetector::remove_playerHeightDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector*), "remove_playerHeightDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: PlayerHeightDetector::get_playerHeight
// Il2CppName: get_playerHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayerHeightDetector::*)()>(&PlayerHeightDetector::get_playerHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector*), "get_playerHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerHeightDetector::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerHeightDetector::*)()>(&PlayerHeightDetector::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerHeightDetector::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerHeightDetector::*)()>(&PlayerHeightDetector::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerHeightDetector::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerHeightDetector::*)()>(&PlayerHeightDetector::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerHeightDetector::BeatmapObjectSpawnCallback
// Il2CppName: BeatmapObjectSpawnCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerHeightDetector::*)(GlobalNamespace::BeatmapObjectData*)>(&PlayerHeightDetector::BeatmapObjectSpawnCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector*), "BeatmapObjectSpawnCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>()});
  }
};
// Writing MetadataGetter for method: PlayerHeightDetector::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerHeightDetector::*)()>(&PlayerHeightDetector::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerHeightDetector::*)()>(&PlayerHeightDetector::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerHeightDetector/InitData
#include "GlobalNamespace/PlayerHeightDetector_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerHeightDetector::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerHeightDetector::InitData::*)(float)>(&PlayerHeightDetector::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerHeightDetector::InitData::*)(float)>(&PlayerHeightDetector::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerHeightDetector::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BlocksBlade
#include "GlobalNamespace/BlocksBlade.hpp"
// Including type: BlocksBlade/Element
#include "GlobalNamespace/BlocksBlade_Element.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1F3E8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _positionPropertyID
int GlobalNamespace::BlocksBlade::_get__positionPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_get__positionPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlocksBlade", "_positionPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _positionPropertyID
void GlobalNamespace::BlocksBlade::_set__positionPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_set__positionPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlocksBlade", "_positionPropertyID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1F3F8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sizePropertyID
int GlobalNamespace::BlocksBlade::_get__sizePropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_get__sizePropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlocksBlade", "_sizePropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sizePropertyID
void GlobalNamespace::BlocksBlade::_set__sizePropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_set__sizePropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlocksBlade", "_sizePropertyID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1F408
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorPropertyID
int GlobalNamespace::BlocksBlade::_get__colorPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_get__colorPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlocksBlade", "_colorPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorPropertyID
void GlobalNamespace::BlocksBlade::_set__colorPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_set__colorPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlocksBlade", "_colorPropertyID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1F418
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _zClipPropertyID
int GlobalNamespace::BlocksBlade::_get__zClipPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_get__zClipPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlocksBlade", "_zClipPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _zClipPropertyID
void GlobalNamespace::BlocksBlade::_set__zClipPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_set__zClipPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlocksBlade", "_zClipPropertyID", value));
}
// Autogenerated method: BlocksBlade.get_color
UnityEngine::Color GlobalNamespace::BlocksBlade::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: BlocksBlade.set_color
void GlobalNamespace::BlocksBlade::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BlocksBlade.Start
void GlobalNamespace::BlocksBlade::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BlocksBlade.Update
void GlobalNamespace::BlocksBlade::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BlocksBlade.SetUpElement
void GlobalNamespace::BlocksBlade::SetUpElement(GlobalNamespace::BlocksBlade::Element* element, float velocity, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::SetUpElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUpElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element), ::il2cpp_utils::ExtractType(velocity), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, element, velocity, color);
}
// Autogenerated method: BlocksBlade.RandomPointOnCircle
UnityEngine::Vector2 GlobalNamespace::BlocksBlade::RandomPointOnCircle(float radius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::RandomPointOnCircle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RandomPointOnCircle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(radius)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, radius);
}
// Autogenerated method: BlocksBlade..cctor
void GlobalNamespace::BlocksBlade::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BlocksBlade", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BlocksBlade::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (BlocksBlade::*)()>(&BlocksBlade::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BlocksBlade::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlocksBlade::*)(UnityEngine::Color)>(&BlocksBlade::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: BlocksBlade::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlocksBlade::*)()>(&BlocksBlade::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BlocksBlade::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlocksBlade::*)()>(&BlocksBlade::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BlocksBlade::SetUpElement
// Il2CppName: SetUpElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlocksBlade::*)(GlobalNamespace::BlocksBlade::Element*, float, UnityEngine::Color)>(&BlocksBlade::SetUpElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade*), "SetUpElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BlocksBlade::Element*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: BlocksBlade::RandomPointOnCircle
// Il2CppName: RandomPointOnCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (BlocksBlade::*)(float)>(&BlocksBlade::RandomPointOnCircle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade*), "RandomPointOnCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BlocksBlade::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlocksBlade::*)()>(&BlocksBlade::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlocksBlade::*)()>(&BlocksBlade::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BlocksBlade::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BlocksBlade::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BlocksBlade/Element
#include "GlobalNamespace/BlocksBlade_Element.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BlocksBlade::Element::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlocksBlade::Element::*)()>(&BlocksBlade::Element::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade::Element*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BlocksBlade::Element::*)()>(&BlocksBlade::Element::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BlocksBlade::Element*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoxCuttableBySaber
#include "GlobalNamespace/BoxCuttableBySaber.hpp"
// Including type: UnityEngine.BoxCollider
#include "UnityEngine/BoxCollider.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BoxCuttableBySaber.set_colliderSize
void GlobalNamespace::BoxCuttableBySaber::set_colliderSize(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::set_colliderSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_colliderSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BoxCuttableBySaber.get_colliderSize
UnityEngine::Vector3 GlobalNamespace::BoxCuttableBySaber::get_colliderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::get_colliderSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colliderSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: BoxCuttableBySaber.Awake
void GlobalNamespace::BoxCuttableBySaber::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BoxCuttableBySaber.SetColliderCenterAndSize
void GlobalNamespace::BoxCuttableBySaber::SetColliderCenterAndSize(UnityEngine::Vector3 center, UnityEngine::Vector3 size) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::SetColliderCenterAndSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColliderCenterAndSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(center), ::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, center, size);
}
// Autogenerated method: BoxCuttableBySaber.RefreshRadius
void GlobalNamespace::BoxCuttableBySaber::RefreshRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::RefreshRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BoxCuttableBySaber.get_radius
float GlobalNamespace::BoxCuttableBySaber::get_radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::get_radius");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_radius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BoxCuttableBySaber.set_canBeCut
void GlobalNamespace::BoxCuttableBySaber::set_canBeCut(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::set_canBeCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canBeCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BoxCuttableBySaber.get_canBeCut
bool GlobalNamespace::BoxCuttableBySaber::get_canBeCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::get_canBeCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBeCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BoxCuttableBySaber.Cut
void GlobalNamespace::BoxCuttableBySaber::Cut(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::Cut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Writing MetadataGetter for method: BoxCuttableBySaber::set_colliderSize
// Il2CppName: set_colliderSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoxCuttableBySaber::*)(UnityEngine::Vector3)>(&BoxCuttableBySaber::set_colliderSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), "set_colliderSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: BoxCuttableBySaber::get_colliderSize
// Il2CppName: get_colliderSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (BoxCuttableBySaber::*)()>(&BoxCuttableBySaber::get_colliderSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), "get_colliderSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoxCuttableBySaber::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoxCuttableBySaber::*)()>(&BoxCuttableBySaber::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoxCuttableBySaber::SetColliderCenterAndSize
// Il2CppName: SetColliderCenterAndSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoxCuttableBySaber::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&BoxCuttableBySaber::SetColliderCenterAndSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), "SetColliderCenterAndSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: BoxCuttableBySaber::RefreshRadius
// Il2CppName: RefreshRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoxCuttableBySaber::*)()>(&BoxCuttableBySaber::RefreshRadius)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), "RefreshRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoxCuttableBySaber::get_radius
// Il2CppName: get_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BoxCuttableBySaber::*)()>(&BoxCuttableBySaber::get_radius)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), "get_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoxCuttableBySaber::set_canBeCut
// Il2CppName: set_canBeCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoxCuttableBySaber::*)(bool)>(&BoxCuttableBySaber::set_canBeCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), "set_canBeCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BoxCuttableBySaber::get_canBeCut
// Il2CppName: get_canBeCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoxCuttableBySaber::*)()>(&BoxCuttableBySaber::get_canBeCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), "get_canBeCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoxCuttableBySaber::Cut
// Il2CppName: Cut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoxCuttableBySaber::*)(GlobalNamespace::Saber*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3)>(&BoxCuttableBySaber::Cut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), "Cut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: BoxCuttableBySaber::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoxCuttableBySaber::*)()>(&BoxCuttableBySaber::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoxCuttableBySaber::*)()>(&BoxCuttableBySaber::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoxCuttableBySaber*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CuttableBySaber
#include "GlobalNamespace/CuttableBySaber.hpp"
// Including type: CuttableBySaber/WasCutBySaberDelegate
#include "GlobalNamespace/CuttableBySaber_WasCutBySaberDelegate.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CuttableBySaber.add_wasCutBySaberEvent
void GlobalNamespace::CuttableBySaber::add_wasCutBySaberEvent(GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::add_wasCutBySaberEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_wasCutBySaberEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CuttableBySaber.remove_wasCutBySaberEvent
void GlobalNamespace::CuttableBySaber::remove_wasCutBySaberEvent(GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::remove_wasCutBySaberEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_wasCutBySaberEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CuttableBySaber.CallWasCutBySaberEvent
void GlobalNamespace::CuttableBySaber::CallWasCutBySaberEvent(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::CallWasCutBySaberEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CallWasCutBySaberEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: CuttableBySaber.get_canBeCut
bool GlobalNamespace::CuttableBySaber::get_canBeCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::get_canBeCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBeCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CuttableBySaber.set_canBeCut
void GlobalNamespace::CuttableBySaber::set_canBeCut(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::set_canBeCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canBeCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CuttableBySaber.get_radius
float GlobalNamespace::CuttableBySaber::get_radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::get_radius");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_radius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CuttableBySaber.Cut
void GlobalNamespace::CuttableBySaber::Cut(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::Cut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Writing MetadataGetter for method: CuttableBySaber::add_wasCutBySaberEvent
// Il2CppName: add_wasCutBySaberEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::*)(GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate*)>(&CuttableBySaber::add_wasCutBySaberEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber*), "add_wasCutBySaberEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate*>()});
  }
};
// Writing MetadataGetter for method: CuttableBySaber::remove_wasCutBySaberEvent
// Il2CppName: remove_wasCutBySaberEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::*)(GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate*)>(&CuttableBySaber::remove_wasCutBySaberEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber*), "remove_wasCutBySaberEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate*>()});
  }
};
// Writing MetadataGetter for method: CuttableBySaber::CallWasCutBySaberEvent
// Il2CppName: CallWasCutBySaberEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::*)(GlobalNamespace::Saber*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3)>(&CuttableBySaber::CallWasCutBySaberEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber*), "CallWasCutBySaberEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: CuttableBySaber::get_canBeCut
// Il2CppName: get_canBeCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CuttableBySaber::*)()>(&CuttableBySaber::get_canBeCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber*), "get_canBeCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CuttableBySaber::set_canBeCut
// Il2CppName: set_canBeCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::*)(bool)>(&CuttableBySaber::set_canBeCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber*), "set_canBeCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CuttableBySaber::get_radius
// Il2CppName: get_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CuttableBySaber::*)()>(&CuttableBySaber::get_radius)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber*), "get_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CuttableBySaber::Cut
// Il2CppName: Cut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::*)(GlobalNamespace::Saber*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3)>(&CuttableBySaber::Cut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber*), "Cut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: CuttableBySaber::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::*)()>(&CuttableBySaber::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::*)()>(&CuttableBySaber::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CuttableBySaber/WasCutBySaberDelegate
#include "GlobalNamespace/CuttableBySaber_WasCutBySaberDelegate.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CuttableBySaber/WasCutBySaberDelegate.Invoke
void GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::Invoke(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: CuttableBySaber/WasCutBySaberDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::BeginInvoke(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec, callback, object);
}
// Autogenerated method: CuttableBySaber/WasCutBySaberDelegate.EndInvoke
void GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: CuttableBySaber::WasCutBySaberDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::WasCutBySaberDelegate::*)(::Il2CppObject*, System::IntPtr)>(&CuttableBySaber::WasCutBySaberDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber::WasCutBySaberDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::WasCutBySaberDelegate::*)(::Il2CppObject*, System::IntPtr)>(&CuttableBySaber::WasCutBySaberDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber::WasCutBySaberDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CuttableBySaber::WasCutBySaberDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::WasCutBySaberDelegate::*)(GlobalNamespace::Saber*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3)>(&CuttableBySaber::WasCutBySaberDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber::WasCutBySaberDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: CuttableBySaber::WasCutBySaberDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (CuttableBySaber::WasCutBySaberDelegate::*)(GlobalNamespace::Saber*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3, System::AsyncCallback*, ::Il2CppObject*)>(&CuttableBySaber::WasCutBySaberDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber::WasCutBySaberDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CuttableBySaber::WasCutBySaberDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttableBySaber::WasCutBySaberDelegate::*)(System::IAsyncResult*)>(&CuttableBySaber::WasCutBySaberDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttableBySaber::WasCutBySaberDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CuttingManager
#include "GlobalNamespace/CuttingManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: NoteCutter
#include "GlobalNamespace/NoteCutter.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CuttingManager.OnEnable
void GlobalNamespace::CuttingManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttingManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CuttingManager.OnDisable
void GlobalNamespace::CuttingManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttingManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CuttingManager.HandleSaberManagerDidUpdateSaberPositions
void GlobalNamespace::CuttingManager::HandleSaberManagerDidUpdateSaberPositions(GlobalNamespace::Saber* leftSaber, GlobalNamespace::Saber* rightSaber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttingManager::HandleSaberManagerDidUpdateSaberPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSaberManagerDidUpdateSaberPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftSaber), ::il2cpp_utils::ExtractType(rightSaber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, leftSaber, rightSaber);
}
// Writing MetadataGetter for method: CuttingManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttingManager::*)()>(&CuttingManager::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttingManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CuttingManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttingManager::*)()>(&CuttingManager::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttingManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CuttingManager::HandleSaberManagerDidUpdateSaberPositions
// Il2CppName: HandleSaberManagerDidUpdateSaberPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttingManager::*)(GlobalNamespace::Saber*, GlobalNamespace::Saber*)>(&CuttingManager::HandleSaberManagerDidUpdateSaberPositions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttingManager*), "HandleSaberManagerDidUpdateSaberPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>()});
  }
};
// Writing MetadataGetter for method: CuttingManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttingManager::*)()>(&CuttingManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttingManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CuttingManager::*)()>(&CuttingManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CuttingManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MovementHistoryRecorder
#include "GlobalNamespace/MovementHistoryRecorder.hpp"
// Including type: AveragingValueRecorder
#include "GlobalNamespace/AveragingValueRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MovementHistoryRecorder.get_averagingValueRecorer
GlobalNamespace::AveragingValueRecorder* GlobalNamespace::MovementHistoryRecorder::get_averagingValueRecorer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementHistoryRecorder::get_averagingValueRecorer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_averagingValueRecorer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AveragingValueRecorder*, false>(this, ___internal__method);
}
// Autogenerated method: MovementHistoryRecorder.AddMovement
void GlobalNamespace::MovementHistoryRecorder::AddMovement(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementHistoryRecorder::AddMovement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance);
}
// Autogenerated method: MovementHistoryRecorder.ManualUpdate
void GlobalNamespace::MovementHistoryRecorder::ManualUpdate(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementHistoryRecorder::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deltaTime);
}
// Writing MetadataGetter for method: MovementHistoryRecorder::get_averagingValueRecorer
// Il2CppName: get_averagingValueRecorer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AveragingValueRecorder* (MovementHistoryRecorder::*)()>(&MovementHistoryRecorder::get_averagingValueRecorer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementHistoryRecorder*), "get_averagingValueRecorer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MovementHistoryRecorder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementHistoryRecorder::*)(float, float, float, float)>(&MovementHistoryRecorder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementHistoryRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementHistoryRecorder::*)(float, float, float, float)>(&MovementHistoryRecorder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementHistoryRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MovementHistoryRecorder::AddMovement
// Il2CppName: AddMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementHistoryRecorder::*)(float)>(&MovementHistoryRecorder::AddMovement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementHistoryRecorder*), "AddMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MovementHistoryRecorder::ManualUpdate
// Il2CppName: ManualUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementHistoryRecorder::*)(float)>(&MovementHistoryRecorder::ManualUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementHistoryRecorder*), "ManualUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteCutter
#include "GlobalNamespace/NoteCutter.hpp"
// Including type: NoteCutter/CuttableBySaberSortParams
#include "GlobalNamespace/NoteCutter_CuttableBySaberSortParams.hpp"
// Including type: NoteCutter/CuttableBySaberSortParamsComparer
#include "GlobalNamespace/NoteCutter_CuttableBySaberSortParamsComparer.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxNumberOfColliders
int GlobalNamespace::NoteCutter::_get_kMaxNumberOfColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::_get_kMaxNumberOfColliders");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteCutter", "kMaxNumberOfColliders"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxNumberOfColliders
void GlobalNamespace::NoteCutter::_set_kMaxNumberOfColliders(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::_set_kMaxNumberOfColliders");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutter", "kMaxNumberOfColliders", value));
}
// Autogenerated method: NoteCutter.Cut
void GlobalNamespace::NoteCutter::Cut(GlobalNamespace::Saber* saber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::Cut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber);
}
// Writing MetadataGetter for method: NoteCutter::Cut
// Il2CppName: Cut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutter::*)(GlobalNamespace::Saber*)>(&NoteCutter::Cut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutter*), "Cut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>()});
  }
};
// Writing MetadataGetter for method: NoteCutter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutter::*)()>(&NoteCutter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutter::*)()>(&NoteCutter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutter/CuttableBySaberSortParams
#include "GlobalNamespace/NoteCutter_CuttableBySaberSortParams.hpp"
// Including type: CuttableBySaber
#include "GlobalNamespace/CuttableBySaber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NoteCutter::CuttableBySaberSortParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutter::CuttableBySaberSortParams::*)()>(&NoteCutter::CuttableBySaberSortParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutter::CuttableBySaberSortParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutter::CuttableBySaberSortParams::*)()>(&NoteCutter::CuttableBySaberSortParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutter::CuttableBySaberSortParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteCutter/CuttableBySaberSortParamsComparer
#include "GlobalNamespace/NoteCutter_CuttableBySaberSortParamsComparer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteCutter/CuttableBySaberSortParamsComparer.Compare
int GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer::Compare(::Il2CppObject* p0, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer::Compare");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, p0, p1);
}
// Writing MetadataGetter for method: NoteCutter::CuttableBySaberSortParamsComparer::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NoteCutter::CuttableBySaberSortParamsComparer::*)(::Il2CppObject*, ::Il2CppObject*)>(&NoteCutter::CuttableBySaberSortParamsComparer::Compare)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutter::CuttableBySaberSortParamsComparer*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: NoteCutter::CuttableBySaberSortParamsComparer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutter::CuttableBySaberSortParamsComparer::*)()>(&NoteCutter::CuttableBySaberSortParamsComparer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutter::CuttableBySaberSortParamsComparer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutter::CuttableBySaberSortParamsComparer::*)()>(&NoteCutter::CuttableBySaberSortParamsComparer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutter::CuttableBySaberSortParamsComparer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SaberTypeObject
#include "GlobalNamespace/SaberTypeObject.hpp"
// Including type: SaberMovementData
#include "GlobalNamespace/SaberMovementData.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Saber.get_saberType
GlobalNamespace::SaberType GlobalNamespace::Saber::get_saberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_saberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SaberType, false>(this, ___internal__method);
}
// Autogenerated method: Saber.get_saberBladeTopPos
UnityEngine::Vector3 GlobalNamespace::Saber::get_saberBladeTopPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_saberBladeTopPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberBladeTopPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Saber.get_saberBladeBottomPos
UnityEngine::Vector3 GlobalNamespace::Saber::get_saberBladeBottomPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_saberBladeBottomPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberBladeBottomPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Saber.get_handlePos
UnityEngine::Vector3 GlobalNamespace::Saber::get_handlePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_handlePos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handlePos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Saber.get_handleRot
UnityEngine::Quaternion GlobalNamespace::Saber::get_handleRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_handleRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: Saber.get_bladeSpeed
float GlobalNamespace::Saber::get_bladeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_bladeSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bladeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Saber.get_movementData
GlobalNamespace::SaberMovementData* GlobalNamespace::Saber::get_movementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_movementData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_movementData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SaberMovementData*, false>(this, ___internal__method);
}
// Autogenerated method: Saber.get_disableCutting
bool GlobalNamespace::Saber::get_disableCutting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_disableCutting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disableCutting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Saber.set_disableCutting
void GlobalNamespace::Saber::set_disableCutting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::set_disableCutting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disableCutting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Saber.ManualUpdate
void GlobalNamespace::Saber::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Saber.OverridePositionAndRotation
void GlobalNamespace::Saber::OverridePositionAndRotation(UnityEngine::Vector3 pos, UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::OverridePositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OverridePositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos, rot);
}
// Writing MetadataGetter for method: Saber::get_saberType
// Il2CppName: get_saberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SaberType (Saber::*)()>(&Saber::get_saberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "get_saberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Saber::get_saberBladeTopPos
// Il2CppName: get_saberBladeTopPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Saber::*)()>(&Saber::get_saberBladeTopPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "get_saberBladeTopPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Saber::get_saberBladeBottomPos
// Il2CppName: get_saberBladeBottomPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Saber::*)()>(&Saber::get_saberBladeBottomPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "get_saberBladeBottomPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Saber::get_handlePos
// Il2CppName: get_handlePos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Saber::*)()>(&Saber::get_handlePos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "get_handlePos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Saber::get_handleRot
// Il2CppName: get_handleRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (Saber::*)()>(&Saber::get_handleRot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "get_handleRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Saber::get_bladeSpeed
// Il2CppName: get_bladeSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Saber::*)()>(&Saber::get_bladeSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "get_bladeSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Saber::get_movementData
// Il2CppName: get_movementData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SaberMovementData* (Saber::*)()>(&Saber::get_movementData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "get_movementData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Saber::get_disableCutting
// Il2CppName: get_disableCutting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Saber::*)()>(&Saber::get_disableCutting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "get_disableCutting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Saber::set_disableCutting
// Il2CppName: set_disableCutting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Saber::*)(bool)>(&Saber::set_disableCutting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "set_disableCutting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Saber::ManualUpdate
// Il2CppName: ManualUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Saber::*)()>(&Saber::ManualUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "ManualUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Saber::OverridePositionAndRotation
// Il2CppName: OverridePositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Saber::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&Saber::OverridePositionAndRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), "OverridePositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Saber::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Saber::*)()>(&Saber::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Saber::*)()>(&Saber::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Saber*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberActivityCounter
#include "GlobalNamespace/SaberActivityCounter.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: MovementHistoryRecorder
#include "GlobalNamespace/MovementHistoryRecorder.hpp"
// Including type: AveragingValueRecorder
#include "GlobalNamespace/AveragingValueRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberActivityCounter.add_totalDistanceDidChangeEvent
void GlobalNamespace::SaberActivityCounter::add_totalDistanceDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::add_totalDistanceDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_totalDistanceDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SaberActivityCounter.remove_totalDistanceDidChangeEvent
void GlobalNamespace::SaberActivityCounter::remove_totalDistanceDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::remove_totalDistanceDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_totalDistanceDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SaberActivityCounter.get_leftSaberMovementDistance
float GlobalNamespace::SaberActivityCounter::get_leftSaberMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_leftSaberMovementDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftSaberMovementDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.get_rightSaberMovementDistance
float GlobalNamespace::SaberActivityCounter::get_rightSaberMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_rightSaberMovementDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightSaberMovementDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.get_leftHandMovementDistance
float GlobalNamespace::SaberActivityCounter::get_leftHandMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_leftHandMovementDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHandMovementDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.get_rightHandMovementDistance
float GlobalNamespace::SaberActivityCounter::get_rightHandMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_rightHandMovementDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightHandMovementDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.get_saberMovementAveragingValueRecorder
GlobalNamespace::AveragingValueRecorder* GlobalNamespace::SaberActivityCounter::get_saberMovementAveragingValueRecorder() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_saberMovementAveragingValueRecorder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberMovementAveragingValueRecorder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AveragingValueRecorder*, false>(this, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.get_handMovementAveragingValueRecorder
GlobalNamespace::AveragingValueRecorder* GlobalNamespace::SaberActivityCounter::get_handMovementAveragingValueRecorder() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_handMovementAveragingValueRecorder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handMovementAveragingValueRecorder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AveragingValueRecorder*, false>(this, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.Awake
void GlobalNamespace::SaberActivityCounter::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.Start
void GlobalNamespace::SaberActivityCounter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.Update
void GlobalNamespace::SaberActivityCounter::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SaberActivityCounter::add_totalDistanceDidChangeEvent
// Il2CppName: add_totalDistanceDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberActivityCounter::*)(System::Action_1<float>*)>(&SaberActivityCounter::add_totalDistanceDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "add_totalDistanceDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::remove_totalDistanceDidChangeEvent
// Il2CppName: remove_totalDistanceDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberActivityCounter::*)(System::Action_1<float>*)>(&SaberActivityCounter::remove_totalDistanceDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "remove_totalDistanceDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::get_leftSaberMovementDistance
// Il2CppName: get_leftSaberMovementDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SaberActivityCounter::*)()>(&SaberActivityCounter::get_leftSaberMovementDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "get_leftSaberMovementDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::get_rightSaberMovementDistance
// Il2CppName: get_rightSaberMovementDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SaberActivityCounter::*)()>(&SaberActivityCounter::get_rightSaberMovementDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "get_rightSaberMovementDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::get_leftHandMovementDistance
// Il2CppName: get_leftHandMovementDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SaberActivityCounter::*)()>(&SaberActivityCounter::get_leftHandMovementDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "get_leftHandMovementDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::get_rightHandMovementDistance
// Il2CppName: get_rightHandMovementDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SaberActivityCounter::*)()>(&SaberActivityCounter::get_rightHandMovementDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "get_rightHandMovementDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::get_saberMovementAveragingValueRecorder
// Il2CppName: get_saberMovementAveragingValueRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AveragingValueRecorder* (SaberActivityCounter::*)()>(&SaberActivityCounter::get_saberMovementAveragingValueRecorder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "get_saberMovementAveragingValueRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::get_handMovementAveragingValueRecorder
// Il2CppName: get_handMovementAveragingValueRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AveragingValueRecorder* (SaberActivityCounter::*)()>(&SaberActivityCounter::get_handMovementAveragingValueRecorder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "get_handMovementAveragingValueRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberActivityCounter::*)()>(&SaberActivityCounter::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberActivityCounter::*)()>(&SaberActivityCounter::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberActivityCounter::*)()>(&SaberActivityCounter::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberActivityCounter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberActivityCounter::*)()>(&SaberActivityCounter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberActivityCounter::*)()>(&SaberActivityCounter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberActivityCounter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberClashChecker
#include "GlobalNamespace/SaberClashChecker.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMinDistanceToClash
float GlobalNamespace::SaberClashChecker::_get_kMinDistanceToClash() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::_get_kMinDistanceToClash");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SaberClashChecker", "kMinDistanceToClash"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinDistanceToClash
void GlobalNamespace::SaberClashChecker::_set_kMinDistanceToClash(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::_set_kMinDistanceToClash");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberClashChecker", "kMinDistanceToClash", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kIgnoredTime
float GlobalNamespace::SaberClashChecker::_get_kIgnoredTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::_get_kIgnoredTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SaberClashChecker", "kIgnoredTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kIgnoredTime
void GlobalNamespace::SaberClashChecker::_set_kIgnoredTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::_set_kIgnoredTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberClashChecker", "kIgnoredTime", value));
}
// Autogenerated method: SaberClashChecker.Init
void GlobalNamespace::SaberClashChecker::Init(GlobalNamespace::SaberManager* saberManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberManager)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saberManager);
}
// Autogenerated method: SaberClashChecker.AreSabersClashing
bool GlobalNamespace::SaberClashChecker::AreSabersClashing(UnityEngine::Vector3& clashingPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::AreSabersClashing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AreSabersClashing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, clashingPoint);
}
// Autogenerated method: SaberClashChecker.SegmentToSegmentDist
float GlobalNamespace::SaberClashChecker::SegmentToSegmentDist(UnityEngine::Vector3 fromA, UnityEngine::Vector3 toA, UnityEngine::Vector3 fromB, UnityEngine::Vector3 toB, UnityEngine::Vector3& inbetweenPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::SegmentToSegmentDist");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SegmentToSegmentDist", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromA), ::il2cpp_utils::ExtractType(toA), ::il2cpp_utils::ExtractType(fromB), ::il2cpp_utils::ExtractType(toB), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, fromA, toA, fromB, toB, inbetweenPoint);
}
// Writing MetadataGetter for method: SaberClashChecker::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberClashChecker::*)(GlobalNamespace::SaberManager*)>(&SaberClashChecker::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberClashChecker*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberManager*>()});
  }
};
// Writing MetadataGetter for method: SaberClashChecker::AreSabersClashing
// Il2CppName: AreSabersClashing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SaberClashChecker::*)(UnityEngine::Vector3&)>(&SaberClashChecker::AreSabersClashing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberClashChecker*), "AreSabersClashing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: SaberClashChecker::SegmentToSegmentDist
// Il2CppName: SegmentToSegmentDist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SaberClashChecker::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&)>(&SaberClashChecker::SegmentToSegmentDist)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberClashChecker*), "SegmentToSegmentDist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: SaberClashChecker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberClashChecker::*)()>(&SaberClashChecker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberClashChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberClashChecker::*)()>(&SaberClashChecker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberClashChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: SaberManager/InitData
#include "GlobalNamespace/SaberManager_InitData.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberManager.get_leftSaber
GlobalNamespace::Saber* GlobalNamespace::SaberManager::get_leftSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::get_leftSaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftSaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Saber*, false>(this, ___internal__method);
}
// Autogenerated method: SaberManager.get_rightSaber
GlobalNamespace::Saber* GlobalNamespace::SaberManager::get_rightSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::get_rightSaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightSaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Saber*, false>(this, ___internal__method);
}
// Autogenerated method: SaberManager.add_didUpdateSaberPositionsEvent
void GlobalNamespace::SaberManager::add_didUpdateSaberPositionsEvent(System::Action_2<GlobalNamespace::Saber*, GlobalNamespace::Saber*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::add_didUpdateSaberPositionsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didUpdateSaberPositionsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SaberManager.remove_didUpdateSaberPositionsEvent
void GlobalNamespace::SaberManager::remove_didUpdateSaberPositionsEvent(System::Action_2<GlobalNamespace::Saber*, GlobalNamespace::Saber*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::remove_didUpdateSaberPositionsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didUpdateSaberPositionsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SaberManager.set_disableSabers
void GlobalNamespace::SaberManager::set_disableSabers(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::set_disableSabers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disableSabers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SaberManager.Start
void GlobalNamespace::SaberManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberManager.OnDisable
void GlobalNamespace::SaberManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberManager.OnEnable
void GlobalNamespace::SaberManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberManager.Update
void GlobalNamespace::SaberManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberManager.SaberForType
GlobalNamespace::Saber* GlobalNamespace::SaberManager::SaberForType(GlobalNamespace::SaberType saberType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::SaberForType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaberForType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Saber*, false>(this, ___internal__method, saberType);
}
// Autogenerated method: SaberManager.RefreshSabers
void GlobalNamespace::SaberManager::RefreshSabers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::RefreshSabers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshSabers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SaberManager::get_leftSaber
// Il2CppName: get_leftSaber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::Saber* (SaberManager::*)()>(&SaberManager::get_leftSaber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "get_leftSaber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberManager::get_rightSaber
// Il2CppName: get_rightSaber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::Saber* (SaberManager::*)()>(&SaberManager::get_rightSaber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "get_rightSaber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberManager::add_didUpdateSaberPositionsEvent
// Il2CppName: add_didUpdateSaberPositionsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::*)(System::Action_2<GlobalNamespace::Saber*, GlobalNamespace::Saber*>*)>(&SaberManager::add_didUpdateSaberPositionsEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "add_didUpdateSaberPositionsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::Saber*, GlobalNamespace::Saber*>*>()});
  }
};
// Writing MetadataGetter for method: SaberManager::remove_didUpdateSaberPositionsEvent
// Il2CppName: remove_didUpdateSaberPositionsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::*)(System::Action_2<GlobalNamespace::Saber*, GlobalNamespace::Saber*>*)>(&SaberManager::remove_didUpdateSaberPositionsEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "remove_didUpdateSaberPositionsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::Saber*, GlobalNamespace::Saber*>*>()});
  }
};
// Writing MetadataGetter for method: SaberManager::set_disableSabers
// Il2CppName: set_disableSabers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::*)(bool)>(&SaberManager::set_disableSabers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "set_disableSabers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SaberManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::*)()>(&SaberManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::*)()>(&SaberManager::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::*)()>(&SaberManager::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::*)()>(&SaberManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberManager::SaberForType
// Il2CppName: SaberForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::Saber* (SaberManager::*)(GlobalNamespace::SaberType)>(&SaberManager::SaberForType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "SaberForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberType>()});
  }
};
// Writing MetadataGetter for method: SaberManager::RefreshSabers
// Il2CppName: RefreshSabers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::*)()>(&SaberManager::RefreshSabers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), "RefreshSabers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::*)()>(&SaberManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::*)()>(&SaberManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberManager/InitData
#include "GlobalNamespace/SaberManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SaberManager::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::InitData::*)(bool, GlobalNamespace::SaberType)>(&SaberManager::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberManager::InitData::*)(bool, GlobalNamespace::SaberType)>(&SaberManager::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberModelContainer
#include "GlobalNamespace/SaberModelContainer.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: SaberModelController
#include "GlobalNamespace/SaberModelController.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberModelContainer.Start
void GlobalNamespace::SaberModelContainer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberModelContainer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SaberModelContainer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberModelContainer::*)()>(&SaberModelContainer::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberModelContainer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberModelContainer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberModelContainer::*)()>(&SaberModelContainer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberModelContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberModelContainer::*)()>(&SaberModelContainer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberModelContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SaberModelController
#include "GlobalNamespace/SaberModelController.hpp"
// Including type: SaberModelController/InitData
#include "GlobalNamespace/SaberModelController_InitData.hpp"
// Including type: SaberTrail
#include "GlobalNamespace/SaberTrail.hpp"
// Including type: SetSaberGlowColor
#include "GlobalNamespace/SetSaberGlowColor.hpp"
// Including type: SetSaberFakeGlowColor
#include "GlobalNamespace/SetSaberFakeGlowColor.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberModelController.Init
void GlobalNamespace::SaberModelController::Init(UnityEngine::Transform* parent, GlobalNamespace::Saber* saber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberModelController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(saber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parent, saber);
}
// Writing MetadataGetter for method: SaberModelController::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberModelController::*)(UnityEngine::Transform*, GlobalNamespace::Saber*)>(&SaberModelController::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberModelController*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>()});
  }
};
// Writing MetadataGetter for method: SaberModelController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberModelController::*)()>(&SaberModelController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberModelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberModelController::*)()>(&SaberModelController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberModelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberModelController/InitData
#include "GlobalNamespace/SaberModelController_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SaberModelController::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberModelController::InitData::*)(UnityEngine::Color)>(&SaberModelController::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberModelController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberModelController::InitData::*)(UnityEngine::Color)>(&SaberModelController::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberModelController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: SaberModelController::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberModelController::InitData::*)()>(&SaberModelController::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberModelController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberModelController::InitData::*)()>(&SaberModelController::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberModelController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberSound
#include "GlobalNamespace/SaberSound.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberSound.Start
void GlobalNamespace::SaberSound::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberSound::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberSound.Update
void GlobalNamespace::SaberSound::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberSound::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SaberSound::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberSound::*)()>(&SaberSound::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberSound*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberSound::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberSound::*)()>(&SaberSound::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberSound*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberSound::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberSound::*)()>(&SaberSound::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberSound*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberSound::*)()>(&SaberSound::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberSound*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberTypeObject
#include "GlobalNamespace/SaberTypeObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberTypeObject.get_saberType
GlobalNamespace::SaberType GlobalNamespace::SaberTypeObject::get_saberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTypeObject::get_saberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SaberType, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SaberTypeObject::get_saberType
// Il2CppName: get_saberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SaberType (SaberTypeObject::*)()>(&SaberTypeObject::get_saberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTypeObject*), "get_saberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTypeObject::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTypeObject::*)()>(&SaberTypeObject::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTypeObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTypeObject::*)()>(&SaberTypeObject::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTypeObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SetBlocksBladeSaberGlowColor
#include "GlobalNamespace/SetBlocksBladeSaberGlowColor.hpp"
// Including type: SaberTypeObject
#include "GlobalNamespace/SaberTypeObject.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: BlocksBlade
#include "GlobalNamespace/BlocksBlade.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SetBlocksBladeSaberGlowColor.Start
void GlobalNamespace::SetBlocksBladeSaberGlowColor::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetBlocksBladeSaberGlowColor::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SetBlocksBladeSaberGlowColor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetBlocksBladeSaberGlowColor::*)()>(&SetBlocksBladeSaberGlowColor::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetBlocksBladeSaberGlowColor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SetBlocksBladeSaberGlowColor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetBlocksBladeSaberGlowColor::*)()>(&SetBlocksBladeSaberGlowColor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetBlocksBladeSaberGlowColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetBlocksBladeSaberGlowColor::*)()>(&SetBlocksBladeSaberGlowColor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetBlocksBladeSaberGlowColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SetPSSaberGlowColor
#include "GlobalNamespace/SetPSSaberGlowColor.hpp"
// Including type: SaberTypeObject
#include "GlobalNamespace/SaberTypeObject.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SetPSSaberGlowColor.Start
void GlobalNamespace::SetPSSaberGlowColor::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetPSSaberGlowColor::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SetPSSaberGlowColor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetPSSaberGlowColor::*)()>(&SetPSSaberGlowColor::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetPSSaberGlowColor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SetPSSaberGlowColor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetPSSaberGlowColor::*)()>(&SetPSSaberGlowColor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetPSSaberGlowColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetPSSaberGlowColor::*)()>(&SetPSSaberGlowColor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetPSSaberGlowColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SetSaberBladeParams
#include "GlobalNamespace/SetSaberBladeParams.hpp"
// Including type: SetSaberBladeParams/PropertyTintColorPair
#include "GlobalNamespace/SetSaberBladeParams_PropertyTintColorPair.hpp"
// Including type: SaberTypeObject
#include "GlobalNamespace/SaberTypeObject.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SetSaberBladeParams.Start
void GlobalNamespace::SetSaberBladeParams::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetSaberBladeParams::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SetSaberBladeParams::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberBladeParams::*)()>(&SetSaberBladeParams::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberBladeParams*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SetSaberBladeParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberBladeParams::*)()>(&SetSaberBladeParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberBladeParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberBladeParams::*)()>(&SetSaberBladeParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberBladeParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SetSaberBladeParams/PropertyTintColorPair
#include "GlobalNamespace/SetSaberBladeParams_PropertyTintColorPair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SetSaberBladeParams::PropertyTintColorPair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberBladeParams::PropertyTintColorPair::*)()>(&SetSaberBladeParams::PropertyTintColorPair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberBladeParams::PropertyTintColorPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberBladeParams::PropertyTintColorPair::*)()>(&SetSaberBladeParams::PropertyTintColorPair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberBladeParams::PropertyTintColorPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SetSaberFakeGlowColor
#include "GlobalNamespace/SetSaberFakeGlowColor.hpp"
// Including type: SaberTypeObject
#include "GlobalNamespace/SaberTypeObject.hpp"
// Including type: Parametric3SliceSpriteController
#include "GlobalNamespace/Parametric3SliceSpriteController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SetSaberFakeGlowColor.set_saberType
void GlobalNamespace::SetSaberFakeGlowColor::set_saberType(GlobalNamespace::SaberType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetSaberFakeGlowColor::set_saberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_saberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SetSaberFakeGlowColor.Start
void GlobalNamespace::SetSaberFakeGlowColor::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetSaberFakeGlowColor::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SetSaberFakeGlowColor.SetColors
void GlobalNamespace::SetSaberFakeGlowColor::SetColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetSaberFakeGlowColor::SetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SetSaberFakeGlowColor::set_saberType
// Il2CppName: set_saberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberFakeGlowColor::*)(GlobalNamespace::SaberType)>(&SetSaberFakeGlowColor::set_saberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberFakeGlowColor*), "set_saberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberType>()});
  }
};
// Writing MetadataGetter for method: SetSaberFakeGlowColor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberFakeGlowColor::*)()>(&SetSaberFakeGlowColor::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberFakeGlowColor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SetSaberFakeGlowColor::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberFakeGlowColor::*)()>(&SetSaberFakeGlowColor::SetColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberFakeGlowColor*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SetSaberFakeGlowColor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberFakeGlowColor::*)()>(&SetSaberFakeGlowColor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberFakeGlowColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberFakeGlowColor::*)()>(&SetSaberFakeGlowColor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberFakeGlowColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SetSaberGlowColor
#include "GlobalNamespace/SetSaberGlowColor.hpp"
// Including type: SetSaberGlowColor/PropertyTintColorPair
#include "GlobalNamespace/SetSaberGlowColor_PropertyTintColorPair.hpp"
// Including type: SaberTypeObject
#include "GlobalNamespace/SaberTypeObject.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SetSaberGlowColor.set_saberType
void GlobalNamespace::SetSaberGlowColor::set_saberType(GlobalNamespace::SaberType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetSaberGlowColor::set_saberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_saberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SetSaberGlowColor.Start
void GlobalNamespace::SetSaberGlowColor::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetSaberGlowColor::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SetSaberGlowColor.SetColors
void GlobalNamespace::SetSaberGlowColor::SetColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetSaberGlowColor::SetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SetSaberGlowColor::set_saberType
// Il2CppName: set_saberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberGlowColor::*)(GlobalNamespace::SaberType)>(&SetSaberGlowColor::set_saberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberGlowColor*), "set_saberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberType>()});
  }
};
// Writing MetadataGetter for method: SetSaberGlowColor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberGlowColor::*)()>(&SetSaberGlowColor::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberGlowColor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SetSaberGlowColor::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberGlowColor::*)()>(&SetSaberGlowColor::SetColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberGlowColor*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SetSaberGlowColor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberGlowColor::*)()>(&SetSaberGlowColor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberGlowColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberGlowColor::*)()>(&SetSaberGlowColor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberGlowColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SetSaberGlowColor/PropertyTintColorPair
#include "GlobalNamespace/SetSaberGlowColor_PropertyTintColorPair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SetSaberGlowColor::PropertyTintColorPair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberGlowColor::PropertyTintColorPair::*)()>(&SetSaberGlowColor::PropertyTintColorPair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberGlowColor::PropertyTintColorPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetSaberGlowColor::PropertyTintColorPair::*)()>(&SetSaberGlowColor::PropertyTintColorPair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetSaberGlowColor::PropertyTintColorPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SetTubeBloomPrePassLightColor
#include "GlobalNamespace/SetTubeBloomPrePassLightColor.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SetTubeBloomPrePassLightColor.Start
void GlobalNamespace::SetTubeBloomPrePassLightColor::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetTubeBloomPrePassLightColor::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SetTubeBloomPrePassLightColor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetTubeBloomPrePassLightColor::*)()>(&SetTubeBloomPrePassLightColor::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetTubeBloomPrePassLightColor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SetTubeBloomPrePassLightColor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetTubeBloomPrePassLightColor::*)()>(&SetTubeBloomPrePassLightColor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetTubeBloomPrePassLightColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetTubeBloomPrePassLightColor::*)()>(&SetTubeBloomPrePassLightColor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetTubeBloomPrePassLightColor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SphereCuttableBySaber
#include "GlobalNamespace/SphereCuttableBySaber.hpp"
// Including type: UnityEngine.SphereCollider
#include "UnityEngine/SphereCollider.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SphereCuttableBySaber.Awake
void GlobalNamespace::SphereCuttableBySaber::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SphereCuttableBySaber::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SphereCuttableBySaber.get_radius
float GlobalNamespace::SphereCuttableBySaber::get_radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SphereCuttableBySaber::get_radius");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_radius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SphereCuttableBySaber.set_canBeCut
void GlobalNamespace::SphereCuttableBySaber::set_canBeCut(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SphereCuttableBySaber::set_canBeCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canBeCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SphereCuttableBySaber.get_canBeCut
bool GlobalNamespace::SphereCuttableBySaber::get_canBeCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SphereCuttableBySaber::get_canBeCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBeCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SphereCuttableBySaber.Cut
void GlobalNamespace::SphereCuttableBySaber::Cut(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SphereCuttableBySaber::Cut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Writing MetadataGetter for method: SphereCuttableBySaber::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SphereCuttableBySaber::*)()>(&SphereCuttableBySaber::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SphereCuttableBySaber*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SphereCuttableBySaber::get_radius
// Il2CppName: get_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SphereCuttableBySaber::*)()>(&SphereCuttableBySaber::get_radius)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SphereCuttableBySaber*), "get_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SphereCuttableBySaber::set_canBeCut
// Il2CppName: set_canBeCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SphereCuttableBySaber::*)(bool)>(&SphereCuttableBySaber::set_canBeCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SphereCuttableBySaber*), "set_canBeCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SphereCuttableBySaber::get_canBeCut
// Il2CppName: get_canBeCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SphereCuttableBySaber::*)()>(&SphereCuttableBySaber::get_canBeCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SphereCuttableBySaber*), "get_canBeCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SphereCuttableBySaber::Cut
// Il2CppName: Cut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SphereCuttableBySaber::*)(GlobalNamespace::Saber*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3)>(&SphereCuttableBySaber::Cut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SphereCuttableBySaber*), "Cut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: SphereCuttableBySaber::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SphereCuttableBySaber::*)()>(&SphereCuttableBySaber::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SphereCuttableBySaber*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SphereCuttableBySaber::*)()>(&SphereCuttableBySaber::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SphereCuttableBySaber*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ICutScoreBufferDidFinishEvent
#include "GlobalNamespace/ICutScoreBufferDidFinishEvent.hpp"
// Including type: CutScoreBuffer
#include "GlobalNamespace/CutScoreBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICutScoreBufferDidFinishEvent.HandleCutScoreBufferDidFinish
void GlobalNamespace::ICutScoreBufferDidFinishEvent::HandleCutScoreBufferDidFinish(GlobalNamespace::CutScoreBuffer* cutScoreBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICutScoreBufferDidFinishEvent::HandleCutScoreBufferDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCutScoreBufferDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutScoreBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutScoreBuffer);
}
// Writing MetadataGetter for method: ICutScoreBufferDidFinishEvent::HandleCutScoreBufferDidFinish
// Il2CppName: HandleCutScoreBufferDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ICutScoreBufferDidFinishEvent::*)(GlobalNamespace::CutScoreBuffer*)>(&ICutScoreBufferDidFinishEvent::HandleCutScoreBufferDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICutScoreBufferDidFinishEvent*), "HandleCutScoreBufferDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::CutScoreBuffer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CutScoreBuffer
#include "GlobalNamespace/CutScoreBuffer.hpp"
// Including type: CutScoreBuffer/Pool
#include "GlobalNamespace/CutScoreBuffer_Pool.hpp"
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: ICutScoreBufferDidFinishEvent
#include "GlobalNamespace/ICutScoreBufferDidFinishEvent.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CutScoreBuffer.get_scoreWithMultiplier
int GlobalNamespace::CutScoreBuffer::get_scoreWithMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutScoreBuffer::get_scoreWithMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scoreWithMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CutScoreBuffer.get_multiplier
int GlobalNamespace::CutScoreBuffer::get_multiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutScoreBuffer::get_multiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CutScoreBuffer.get_didFinishEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::ICutScoreBufferDidFinishEvent*>* GlobalNamespace::CutScoreBuffer::get_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutScoreBuffer::get_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::ICutScoreBufferDidFinishEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: CutScoreBuffer.Init
void GlobalNamespace::CutScoreBuffer::Init(GlobalNamespace::NoteCutInfo& noteCutInfo, int multiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutScoreBuffer::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(multiplier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutInfo, multiplier);
}
// Autogenerated method: CutScoreBuffer.RefreshScores
void GlobalNamespace::CutScoreBuffer::RefreshScores() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutScoreBuffer::RefreshScores");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshScores", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CutScoreBuffer.HandleSaberSwingRatingCounterDidChange
void GlobalNamespace::CutScoreBuffer::HandleSaberSwingRatingCounterDidChange(GlobalNamespace::ISaberSwingRatingCounter* swingRatingCounter, float rating) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutScoreBuffer::HandleSaberSwingRatingCounterDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSaberSwingRatingCounterDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingRatingCounter), ::il2cpp_utils::ExtractType(rating)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingRatingCounter, rating);
}
// Autogenerated method: CutScoreBuffer.HandleSaberSwingRatingCounterDidFinish
void GlobalNamespace::CutScoreBuffer::HandleSaberSwingRatingCounterDidFinish(GlobalNamespace::ISaberSwingRatingCounter* swingRatingCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutScoreBuffer::HandleSaberSwingRatingCounterDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSaberSwingRatingCounterDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingRatingCounter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingRatingCounter);
}
// Writing MetadataGetter for method: CutScoreBuffer::get_scoreWithMultiplier
// Il2CppName: get_scoreWithMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CutScoreBuffer::*)()>(&CutScoreBuffer::get_scoreWithMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer*), "get_scoreWithMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CutScoreBuffer::get_multiplier
// Il2CppName: get_multiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CutScoreBuffer::*)()>(&CutScoreBuffer::get_multiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer*), "get_multiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CutScoreBuffer::get_didFinishEvent
// Il2CppName: get_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::ICutScoreBufferDidFinishEvent*>* (CutScoreBuffer::*)()>(&CutScoreBuffer::get_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer*), "get_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CutScoreBuffer::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CutScoreBuffer::*)(GlobalNamespace::NoteCutInfo&, int)>(&CutScoreBuffer::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CutScoreBuffer::RefreshScores
// Il2CppName: RefreshScores
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CutScoreBuffer::*)()>(&CutScoreBuffer::RefreshScores)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer*), "RefreshScores", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CutScoreBuffer::HandleSaberSwingRatingCounterDidChange
// Il2CppName: HandleSaberSwingRatingCounterDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CutScoreBuffer::*)(GlobalNamespace::ISaberSwingRatingCounter*, float)>(&CutScoreBuffer::HandleSaberSwingRatingCounterDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer*), "HandleSaberSwingRatingCounterDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ISaberSwingRatingCounter*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CutScoreBuffer::HandleSaberSwingRatingCounterDidFinish
// Il2CppName: HandleSaberSwingRatingCounterDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CutScoreBuffer::*)(GlobalNamespace::ISaberSwingRatingCounter*)>(&CutScoreBuffer::HandleSaberSwingRatingCounterDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer*), "HandleSaberSwingRatingCounterDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ISaberSwingRatingCounter*>()});
  }
};
// Writing MetadataGetter for method: CutScoreBuffer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CutScoreBuffer::*)()>(&CutScoreBuffer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CutScoreBuffer::*)()>(&CutScoreBuffer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CutScoreBuffer/Pool
#include "GlobalNamespace/CutScoreBuffer_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: CutScoreBuffer::Pool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CutScoreBuffer::Pool::*)()>(&CutScoreBuffer::Pool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CutScoreBuffer::Pool::*)()>(&CutScoreBuffer::Pool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CutScoreBuffer::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteWasCutDelegate
#include "GlobalNamespace/NoteWasCutDelegate.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteWasCutDelegate.Invoke
void GlobalNamespace::NoteWasCutDelegate::Invoke(GlobalNamespace::NoteData* noteData, GlobalNamespace::NoteCutInfo& noteCutInfo, int multiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteWasCutDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(multiplier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, noteCutInfo, multiplier);
}
// Autogenerated method: NoteWasCutDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::NoteWasCutDelegate::BeginInvoke(GlobalNamespace::NoteData* noteData, GlobalNamespace::NoteCutInfo& noteCutInfo, int multiplier, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteWasCutDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(multiplier), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteData, noteCutInfo, multiplier, callback, object);
}
// Autogenerated method: NoteWasCutDelegate.EndInvoke
void GlobalNamespace::NoteWasCutDelegate::EndInvoke(GlobalNamespace::NoteCutInfo& noteCutInfo, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteWasCutDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutInfo, result);
}
// Writing MetadataGetter for method: NoteWasCutDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteWasCutDelegate::*)(::Il2CppObject*, System::IntPtr)>(&NoteWasCutDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteWasCutDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteWasCutDelegate::*)(::Il2CppObject*, System::IntPtr)>(&NoteWasCutDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteWasCutDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: NoteWasCutDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteWasCutDelegate::*)(GlobalNamespace::NoteData*, GlobalNamespace::NoteCutInfo&, int)>(&NoteWasCutDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteWasCutDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NoteWasCutDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (NoteWasCutDelegate::*)(GlobalNamespace::NoteData*, GlobalNamespace::NoteCutInfo&, int, System::AsyncCallback*, ::Il2CppObject*)>(&NoteWasCutDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteWasCutDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: NoteWasCutDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteWasCutDelegate::*)(GlobalNamespace::NoteCutInfo&, System::IAsyncResult*)>(&NoteWasCutDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteWasCutDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: NoteWasCutDelegate
#include "GlobalNamespace/NoteWasCutDelegate.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IScoreController.add_noteWasCutEvent
void GlobalNamespace::IScoreController::add_noteWasCutEvent(GlobalNamespace::NoteWasCutDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::add_noteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.remove_noteWasCutEvent
void GlobalNamespace::IScoreController::remove_noteWasCutEvent(GlobalNamespace::NoteWasCutDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::remove_noteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.add_noteWasMissedEvent
void GlobalNamespace::IScoreController::add_noteWasMissedEvent(System::Action_2<GlobalNamespace::NoteData*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::add_noteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.remove_noteWasMissedEvent
void GlobalNamespace::IScoreController::remove_noteWasMissedEvent(System::Action_2<GlobalNamespace::NoteData*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::remove_noteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.add_scoreDidChangeEvent
void GlobalNamespace::IScoreController::add_scoreDidChangeEvent(System::Action_2<int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::add_scoreDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_scoreDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.remove_scoreDidChangeEvent
void GlobalNamespace::IScoreController::remove_scoreDidChangeEvent(System::Action_2<int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::remove_scoreDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_scoreDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.add_immediateMaxPossibleScoreDidChangeEvent
void GlobalNamespace::IScoreController::add_immediateMaxPossibleScoreDidChangeEvent(System::Action_2<int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::add_immediateMaxPossibleScoreDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_immediateMaxPossibleScoreDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.remove_immediateMaxPossibleScoreDidChangeEvent
void GlobalNamespace::IScoreController::remove_immediateMaxPossibleScoreDidChangeEvent(System::Action_2<int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::remove_immediateMaxPossibleScoreDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_immediateMaxPossibleScoreDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.add_multiplierDidChangeEvent
void GlobalNamespace::IScoreController::add_multiplierDidChangeEvent(System::Action_2<int, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::add_multiplierDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_multiplierDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.remove_multiplierDidChangeEvent
void GlobalNamespace::IScoreController::remove_multiplierDidChangeEvent(System::Action_2<int, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::remove_multiplierDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_multiplierDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.add_comboDidChangeEvent
void GlobalNamespace::IScoreController::add_comboDidChangeEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::add_comboDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_comboDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.remove_comboDidChangeEvent
void GlobalNamespace::IScoreController::remove_comboDidChangeEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::remove_comboDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_comboDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.add_feverModeChargeProgressDidChangeEvent
void GlobalNamespace::IScoreController::add_feverModeChargeProgressDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::add_feverModeChargeProgressDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_feverModeChargeProgressDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.remove_feverModeChargeProgressDidChangeEvent
void GlobalNamespace::IScoreController::remove_feverModeChargeProgressDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::remove_feverModeChargeProgressDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_feverModeChargeProgressDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.add_feverDidStartEvent
void GlobalNamespace::IScoreController::add_feverDidStartEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::add_feverDidStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_feverDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.remove_feverDidStartEvent
void GlobalNamespace::IScoreController::remove_feverDidStartEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::remove_feverDidStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_feverDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.add_feverDidFinishEvent
void GlobalNamespace::IScoreController::add_feverDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::add_feverDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_feverDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.remove_feverDidFinishEvent
void GlobalNamespace::IScoreController::remove_feverDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::remove_feverDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_feverDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.add_comboBreakingEventHappenedEvent
void GlobalNamespace::IScoreController::add_comboBreakingEventHappenedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::add_comboBreakingEventHappenedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_comboBreakingEventHappenedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.remove_comboBreakingEventHappenedEvent
void GlobalNamespace::IScoreController::remove_comboBreakingEventHappenedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::remove_comboBreakingEventHappenedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_comboBreakingEventHappenedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IScoreController.get_prevFrameRawScore
int GlobalNamespace::IScoreController::get_prevFrameRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::get_prevFrameRawScore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prevFrameRawScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IScoreController.get_prevFrameModifiedScore
int GlobalNamespace::IScoreController::get_prevFrameModifiedScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::get_prevFrameModifiedScore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prevFrameModifiedScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IScoreController.get_maxCombo
int GlobalNamespace::IScoreController::get_maxCombo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::get_maxCombo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxCombo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IScoreController.get_multiplierWithFever
int GlobalNamespace::IScoreController::get_multiplierWithFever() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::get_multiplierWithFever");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplierWithFever", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IScoreController.get_feverModeActive
bool GlobalNamespace::IScoreController::get_feverModeActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::get_feverModeActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_feverModeActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IScoreController.get_feverModeDrainProgress
float GlobalNamespace::IScoreController::get_feverModeDrainProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::get_feverModeDrainProgress");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_feverModeDrainProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IScoreController.get_feverModeChargeProgress
float GlobalNamespace::IScoreController::get_feverModeChargeProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::get_feverModeChargeProgress");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_feverModeChargeProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IScoreController.get_immediateMaxPossibleRawScore
int GlobalNamespace::IScoreController::get_immediateMaxPossibleRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::get_immediateMaxPossibleRawScore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_immediateMaxPossibleRawScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IScoreController.get_gameplayModifiersScoreMultiplier
float GlobalNamespace::IScoreController::get_gameplayModifiersScoreMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::get_gameplayModifiersScoreMultiplier");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayModifiersScoreMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IScoreController.SetEnabled
void GlobalNamespace::IScoreController::SetEnabled(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IScoreController::SetEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, enabled);
}
// Writing MetadataGetter for method: IScoreController::add_noteWasCutEvent
// Il2CppName: add_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(GlobalNamespace::NoteWasCutDelegate*)>(&IScoreController::add_noteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "add_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteWasCutDelegate*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::remove_noteWasCutEvent
// Il2CppName: remove_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(GlobalNamespace::NoteWasCutDelegate*)>(&IScoreController::remove_noteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "remove_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteWasCutDelegate*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::add_noteWasMissedEvent
// Il2CppName: add_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_2<GlobalNamespace::NoteData*, int>*)>(&IScoreController::add_noteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "add_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::NoteData*, int>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::remove_noteWasMissedEvent
// Il2CppName: remove_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_2<GlobalNamespace::NoteData*, int>*)>(&IScoreController::remove_noteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "remove_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::NoteData*, int>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::add_scoreDidChangeEvent
// Il2CppName: add_scoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_2<int, int>*)>(&IScoreController::add_scoreDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "add_scoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, int>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::remove_scoreDidChangeEvent
// Il2CppName: remove_scoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_2<int, int>*)>(&IScoreController::remove_scoreDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "remove_scoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, int>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::add_immediateMaxPossibleScoreDidChangeEvent
// Il2CppName: add_immediateMaxPossibleScoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_2<int, int>*)>(&IScoreController::add_immediateMaxPossibleScoreDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "add_immediateMaxPossibleScoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, int>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::remove_immediateMaxPossibleScoreDidChangeEvent
// Il2CppName: remove_immediateMaxPossibleScoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_2<int, int>*)>(&IScoreController::remove_immediateMaxPossibleScoreDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "remove_immediateMaxPossibleScoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, int>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::add_multiplierDidChangeEvent
// Il2CppName: add_multiplierDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_2<int, float>*)>(&IScoreController::add_multiplierDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "add_multiplierDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, float>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::remove_multiplierDidChangeEvent
// Il2CppName: remove_multiplierDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_2<int, float>*)>(&IScoreController::remove_multiplierDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "remove_multiplierDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, float>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::add_comboDidChangeEvent
// Il2CppName: add_comboDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_1<int>*)>(&IScoreController::add_comboDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "add_comboDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::remove_comboDidChangeEvent
// Il2CppName: remove_comboDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_1<int>*)>(&IScoreController::remove_comboDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "remove_comboDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::add_feverModeChargeProgressDidChangeEvent
// Il2CppName: add_feverModeChargeProgressDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_1<float>*)>(&IScoreController::add_feverModeChargeProgressDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "add_feverModeChargeProgressDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::remove_feverModeChargeProgressDidChangeEvent
// Il2CppName: remove_feverModeChargeProgressDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action_1<float>*)>(&IScoreController::remove_feverModeChargeProgressDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "remove_feverModeChargeProgressDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::add_feverDidStartEvent
// Il2CppName: add_feverDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action*)>(&IScoreController::add_feverDidStartEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "add_feverDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::remove_feverDidStartEvent
// Il2CppName: remove_feverDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action*)>(&IScoreController::remove_feverDidStartEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "remove_feverDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::add_feverDidFinishEvent
// Il2CppName: add_feverDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action*)>(&IScoreController::add_feverDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "add_feverDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::remove_feverDidFinishEvent
// Il2CppName: remove_feverDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action*)>(&IScoreController::remove_feverDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "remove_feverDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::add_comboBreakingEventHappenedEvent
// Il2CppName: add_comboBreakingEventHappenedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action*)>(&IScoreController::add_comboBreakingEventHappenedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "add_comboBreakingEventHappenedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::remove_comboBreakingEventHappenedEvent
// Il2CppName: remove_comboBreakingEventHappenedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(System::Action*)>(&IScoreController::remove_comboBreakingEventHappenedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "remove_comboBreakingEventHappenedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IScoreController::get_prevFrameRawScore
// Il2CppName: get_prevFrameRawScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IScoreController::*)()>(&IScoreController::get_prevFrameRawScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "get_prevFrameRawScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IScoreController::get_prevFrameModifiedScore
// Il2CppName: get_prevFrameModifiedScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IScoreController::*)()>(&IScoreController::get_prevFrameModifiedScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "get_prevFrameModifiedScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IScoreController::get_maxCombo
// Il2CppName: get_maxCombo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IScoreController::*)()>(&IScoreController::get_maxCombo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "get_maxCombo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IScoreController::get_multiplierWithFever
// Il2CppName: get_multiplierWithFever
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IScoreController::*)()>(&IScoreController::get_multiplierWithFever)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "get_multiplierWithFever", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IScoreController::get_feverModeActive
// Il2CppName: get_feverModeActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IScoreController::*)()>(&IScoreController::get_feverModeActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "get_feverModeActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IScoreController::get_feverModeDrainProgress
// Il2CppName: get_feverModeDrainProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IScoreController::*)()>(&IScoreController::get_feverModeDrainProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "get_feverModeDrainProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IScoreController::get_feverModeChargeProgress
// Il2CppName: get_feverModeChargeProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IScoreController::*)()>(&IScoreController::get_feverModeChargeProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "get_feverModeChargeProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IScoreController::get_immediateMaxPossibleRawScore
// Il2CppName: get_immediateMaxPossibleRawScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IScoreController::*)()>(&IScoreController::get_immediateMaxPossibleRawScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "get_immediateMaxPossibleRawScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IScoreController::get_gameplayModifiersScoreMultiplier
// Il2CppName: get_gameplayModifiersScoreMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IScoreController::*)()>(&IScoreController::get_gameplayModifiersScoreMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "get_gameplayModifiersScoreMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IScoreController::SetEnabled
// Il2CppName: SetEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IScoreController::*)(bool)>(&IScoreController::SetEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IScoreController*), "SetEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreController
#include "GlobalNamespace/ScoreController.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: PlayerHeadAndObstacleInteraction
#include "GlobalNamespace/PlayerHeadAndObstacleInteraction.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: IGameEnergyCounter
#include "GlobalNamespace/IGameEnergyCounter.hpp"
// Including type: NoteWasCutDelegate
#include "GlobalNamespace/NoteWasCutDelegate.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: GameplayModifierParamsSO
#include "GlobalNamespace/GameplayModifierParamsSO.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: CutScoreBuffer/Pool
#include "GlobalNamespace/CutScoreBuffer_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScoreController.add_noteWasCutEvent
void GlobalNamespace::ScoreController::add_noteWasCutEvent(GlobalNamespace::NoteWasCutDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::add_noteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.remove_noteWasCutEvent
void GlobalNamespace::ScoreController::remove_noteWasCutEvent(GlobalNamespace::NoteWasCutDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::remove_noteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.add_noteWasMissedEvent
void GlobalNamespace::ScoreController::add_noteWasMissedEvent(System::Action_2<GlobalNamespace::NoteData*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::add_noteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.remove_noteWasMissedEvent
void GlobalNamespace::ScoreController::remove_noteWasMissedEvent(System::Action_2<GlobalNamespace::NoteData*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::remove_noteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.add_scoreDidChangeEvent
void GlobalNamespace::ScoreController::add_scoreDidChangeEvent(System::Action_2<int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::add_scoreDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_scoreDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.remove_scoreDidChangeEvent
void GlobalNamespace::ScoreController::remove_scoreDidChangeEvent(System::Action_2<int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::remove_scoreDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_scoreDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.add_immediateMaxPossibleScoreDidChangeEvent
void GlobalNamespace::ScoreController::add_immediateMaxPossibleScoreDidChangeEvent(System::Action_2<int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::add_immediateMaxPossibleScoreDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_immediateMaxPossibleScoreDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.remove_immediateMaxPossibleScoreDidChangeEvent
void GlobalNamespace::ScoreController::remove_immediateMaxPossibleScoreDidChangeEvent(System::Action_2<int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::remove_immediateMaxPossibleScoreDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_immediateMaxPossibleScoreDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.add_multiplierDidChangeEvent
void GlobalNamespace::ScoreController::add_multiplierDidChangeEvent(System::Action_2<int, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::add_multiplierDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_multiplierDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.remove_multiplierDidChangeEvent
void GlobalNamespace::ScoreController::remove_multiplierDidChangeEvent(System::Action_2<int, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::remove_multiplierDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_multiplierDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.add_comboDidChangeEvent
void GlobalNamespace::ScoreController::add_comboDidChangeEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::add_comboDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_comboDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.remove_comboDidChangeEvent
void GlobalNamespace::ScoreController::remove_comboDidChangeEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::remove_comboDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_comboDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.add_feverModeChargeProgressDidChangeEvent
void GlobalNamespace::ScoreController::add_feverModeChargeProgressDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::add_feverModeChargeProgressDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_feverModeChargeProgressDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.remove_feverModeChargeProgressDidChangeEvent
void GlobalNamespace::ScoreController::remove_feverModeChargeProgressDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::remove_feverModeChargeProgressDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_feverModeChargeProgressDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.add_feverDidStartEvent
void GlobalNamespace::ScoreController::add_feverDidStartEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::add_feverDidStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_feverDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.remove_feverDidStartEvent
void GlobalNamespace::ScoreController::remove_feverDidStartEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::remove_feverDidStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_feverDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.add_feverDidFinishEvent
void GlobalNamespace::ScoreController::add_feverDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::add_feverDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_feverDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.remove_feverDidFinishEvent
void GlobalNamespace::ScoreController::remove_feverDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::remove_feverDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_feverDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.add_comboBreakingEventHappenedEvent
void GlobalNamespace::ScoreController::add_comboBreakingEventHappenedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::add_comboBreakingEventHappenedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_comboBreakingEventHappenedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.remove_comboBreakingEventHappenedEvent
void GlobalNamespace::ScoreController::remove_comboBreakingEventHappenedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::remove_comboBreakingEventHappenedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_comboBreakingEventHappenedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScoreController.get_prevFrameRawScore
int GlobalNamespace::ScoreController::get_prevFrameRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::get_prevFrameRawScore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prevFrameRawScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.get_prevFrameModifiedScore
int GlobalNamespace::ScoreController::get_prevFrameModifiedScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::get_prevFrameModifiedScore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prevFrameModifiedScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.get_maxCombo
int GlobalNamespace::ScoreController::get_maxCombo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::get_maxCombo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxCombo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.get_multiplierWithFever
int GlobalNamespace::ScoreController::get_multiplierWithFever() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::get_multiplierWithFever");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplierWithFever", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.get_feverModeActive
bool GlobalNamespace::ScoreController::get_feverModeActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::get_feverModeActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_feverModeActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.get_feverModeDrainProgress
float GlobalNamespace::ScoreController::get_feverModeDrainProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::get_feverModeDrainProgress");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_feverModeDrainProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.get_feverModeChargeProgress
float GlobalNamespace::ScoreController::get_feverModeChargeProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::get_feverModeChargeProgress");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_feverModeChargeProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.get_immediateMaxPossibleRawScore
int GlobalNamespace::ScoreController::get_immediateMaxPossibleRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::get_immediateMaxPossibleRawScore");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_immediateMaxPossibleRawScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.get_gameplayModifiersScoreMultiplier
float GlobalNamespace::ScoreController::get_gameplayModifiersScoreMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::get_gameplayModifiersScoreMultiplier");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayModifiersScoreMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.SetEnabled
void GlobalNamespace::ScoreController::SetEnabled(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::SetEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated method: ScoreController.Start
void GlobalNamespace::ScoreController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.OnDestroy
void GlobalNamespace::ScoreController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.Update
void GlobalNamespace::ScoreController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.LateUpdate
void GlobalNamespace::ScoreController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreController.LoseMultiplier
void GlobalNamespace::ScoreController::LoseMultiplier(bool& comboChanged, bool& multiplierChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::LoseMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoseMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, comboChanged, multiplierChanged);
}
// Autogenerated method: ScoreController.NotifyForChange
void GlobalNamespace::ScoreController::NotifyForChange(bool comboChanged, bool multiplierChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::NotifyForChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyForChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(comboChanged), ::il2cpp_utils::ExtractType(multiplierChanged)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, comboChanged, multiplierChanged);
}
// Autogenerated method: ScoreController.HandleNoteWasCut
void GlobalNamespace::ScoreController::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: ScoreController.HandleNoteWasMissed
void GlobalNamespace::ScoreController::HandleNoteWasMissed(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: ScoreController.HandleCutScoreBufferDidFinish
void GlobalNamespace::ScoreController::HandleCutScoreBufferDidFinish(GlobalNamespace::CutScoreBuffer* cutScoreBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::HandleCutScoreBufferDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCutScoreBufferDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutScoreBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutScoreBuffer);
}
// Writing MetadataGetter for method: ScoreController::add_noteWasCutEvent
// Il2CppName: add_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(GlobalNamespace::NoteWasCutDelegate*)>(&ScoreController::add_noteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "add_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteWasCutDelegate*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::remove_noteWasCutEvent
// Il2CppName: remove_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(GlobalNamespace::NoteWasCutDelegate*)>(&ScoreController::remove_noteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "remove_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteWasCutDelegate*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::add_noteWasMissedEvent
// Il2CppName: add_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_2<GlobalNamespace::NoteData*, int>*)>(&ScoreController::add_noteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "add_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::NoteData*, int>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::remove_noteWasMissedEvent
// Il2CppName: remove_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_2<GlobalNamespace::NoteData*, int>*)>(&ScoreController::remove_noteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "remove_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::NoteData*, int>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::add_scoreDidChangeEvent
// Il2CppName: add_scoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_2<int, int>*)>(&ScoreController::add_scoreDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "add_scoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, int>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::remove_scoreDidChangeEvent
// Il2CppName: remove_scoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_2<int, int>*)>(&ScoreController::remove_scoreDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "remove_scoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, int>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::add_immediateMaxPossibleScoreDidChangeEvent
// Il2CppName: add_immediateMaxPossibleScoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_2<int, int>*)>(&ScoreController::add_immediateMaxPossibleScoreDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "add_immediateMaxPossibleScoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, int>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::remove_immediateMaxPossibleScoreDidChangeEvent
// Il2CppName: remove_immediateMaxPossibleScoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_2<int, int>*)>(&ScoreController::remove_immediateMaxPossibleScoreDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "remove_immediateMaxPossibleScoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, int>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::add_multiplierDidChangeEvent
// Il2CppName: add_multiplierDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_2<int, float>*)>(&ScoreController::add_multiplierDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "add_multiplierDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, float>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::remove_multiplierDidChangeEvent
// Il2CppName: remove_multiplierDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_2<int, float>*)>(&ScoreController::remove_multiplierDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "remove_multiplierDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<int, float>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::add_comboDidChangeEvent
// Il2CppName: add_comboDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_1<int>*)>(&ScoreController::add_comboDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "add_comboDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::remove_comboDidChangeEvent
// Il2CppName: remove_comboDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_1<int>*)>(&ScoreController::remove_comboDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "remove_comboDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::add_feverModeChargeProgressDidChangeEvent
// Il2CppName: add_feverModeChargeProgressDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_1<float>*)>(&ScoreController::add_feverModeChargeProgressDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "add_feverModeChargeProgressDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::remove_feverModeChargeProgressDidChangeEvent
// Il2CppName: remove_feverModeChargeProgressDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action_1<float>*)>(&ScoreController::remove_feverModeChargeProgressDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "remove_feverModeChargeProgressDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::add_feverDidStartEvent
// Il2CppName: add_feverDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action*)>(&ScoreController::add_feverDidStartEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "add_feverDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::remove_feverDidStartEvent
// Il2CppName: remove_feverDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action*)>(&ScoreController::remove_feverDidStartEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "remove_feverDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::add_feverDidFinishEvent
// Il2CppName: add_feverDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action*)>(&ScoreController::add_feverDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "add_feverDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::remove_feverDidFinishEvent
// Il2CppName: remove_feverDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action*)>(&ScoreController::remove_feverDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "remove_feverDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::add_comboBreakingEventHappenedEvent
// Il2CppName: add_comboBreakingEventHappenedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action*)>(&ScoreController::add_comboBreakingEventHappenedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "add_comboBreakingEventHappenedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::remove_comboBreakingEventHappenedEvent
// Il2CppName: remove_comboBreakingEventHappenedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(System::Action*)>(&ScoreController::remove_comboBreakingEventHappenedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "remove_comboBreakingEventHappenedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::get_prevFrameRawScore
// Il2CppName: get_prevFrameRawScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScoreController::*)()>(&ScoreController::get_prevFrameRawScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "get_prevFrameRawScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::get_prevFrameModifiedScore
// Il2CppName: get_prevFrameModifiedScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScoreController::*)()>(&ScoreController::get_prevFrameModifiedScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "get_prevFrameModifiedScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::get_maxCombo
// Il2CppName: get_maxCombo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScoreController::*)()>(&ScoreController::get_maxCombo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "get_maxCombo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::get_multiplierWithFever
// Il2CppName: get_multiplierWithFever
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScoreController::*)()>(&ScoreController::get_multiplierWithFever)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "get_multiplierWithFever", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::get_feverModeActive
// Il2CppName: get_feverModeActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ScoreController::*)()>(&ScoreController::get_feverModeActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "get_feverModeActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::get_feverModeDrainProgress
// Il2CppName: get_feverModeDrainProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ScoreController::*)()>(&ScoreController::get_feverModeDrainProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "get_feverModeDrainProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::get_feverModeChargeProgress
// Il2CppName: get_feverModeChargeProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ScoreController::*)()>(&ScoreController::get_feverModeChargeProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "get_feverModeChargeProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::get_immediateMaxPossibleRawScore
// Il2CppName: get_immediateMaxPossibleRawScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScoreController::*)()>(&ScoreController::get_immediateMaxPossibleRawScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "get_immediateMaxPossibleRawScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::get_gameplayModifiersScoreMultiplier
// Il2CppName: get_gameplayModifiersScoreMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ScoreController::*)()>(&ScoreController::get_gameplayModifiersScoreMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "get_gameplayModifiersScoreMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::SetEnabled
// Il2CppName: SetEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(bool)>(&ScoreController::SetEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "SetEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ScoreController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)()>(&ScoreController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)()>(&ScoreController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)()>(&ScoreController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)()>(&ScoreController::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreController::LoseMultiplier
// Il2CppName: LoseMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(bool&, bool&)>(&ScoreController::LoseMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "LoseMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: ScoreController::NotifyForChange
// Il2CppName: NotifyForChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(bool, bool)>(&ScoreController::NotifyForChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "NotifyForChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ScoreController::HandleNoteWasCut
// Il2CppName: HandleNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&)>(&ScoreController::HandleNoteWasCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "HandleNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>()});
  }
};
// Writing MetadataGetter for method: ScoreController::HandleNoteWasMissed
// Il2CppName: HandleNoteWasMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(GlobalNamespace::NoteController*)>(&ScoreController::HandleNoteWasMissed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "HandleNoteWasMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::HandleCutScoreBufferDidFinish
// Il2CppName: HandleCutScoreBufferDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)(GlobalNamespace::CutScoreBuffer*)>(&ScoreController::HandleCutScoreBufferDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), "HandleCutScoreBufferDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::CutScoreBuffer*>()});
  }
};
// Writing MetadataGetter for method: ScoreController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)()>(&ScoreController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreController::*)()>(&ScoreController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SmoothCamera
#include "GlobalNamespace/SmoothCamera.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: MainCamera
#include "GlobalNamespace/MainCamera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SmoothCamera.Init
void GlobalNamespace::SmoothCamera::Init(float fieldOfView, float positionSmooth, float rotationSmooth, bool thirdPersonEnabled, UnityEngine::Vector3 thirdPersonPosition, UnityEngine::Vector3 thirdPersonEulerAngles) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmoothCamera::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fieldOfView), ::il2cpp_utils::ExtractType(positionSmooth), ::il2cpp_utils::ExtractType(rotationSmooth), ::il2cpp_utils::ExtractType(thirdPersonEnabled), ::il2cpp_utils::ExtractType(thirdPersonPosition), ::il2cpp_utils::ExtractType(thirdPersonEulerAngles)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fieldOfView, positionSmooth, rotationSmooth, thirdPersonEnabled, thirdPersonPosition, thirdPersonEulerAngles);
}
// Autogenerated method: SmoothCamera.OnEnable
void GlobalNamespace::SmoothCamera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmoothCamera::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothCamera.OnDisable
void GlobalNamespace::SmoothCamera::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmoothCamera::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothCamera.LateUpdate
void GlobalNamespace::SmoothCamera::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmoothCamera::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SmoothCamera::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCamera::*)(float, float, float, bool, UnityEngine::Vector3, UnityEngine::Vector3)>(&SmoothCamera::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCamera*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: SmoothCamera::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCamera::*)()>(&SmoothCamera::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCamera*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SmoothCamera::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCamera::*)()>(&SmoothCamera::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCamera*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SmoothCamera::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCamera::*)()>(&SmoothCamera::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCamera*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SmoothCamera::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCamera::*)()>(&SmoothCamera::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCamera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCamera::*)()>(&SmoothCamera::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCamera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SmoothCameraController
#include "GlobalNamespace/SmoothCameraController.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: SmoothCamera
#include "GlobalNamespace/SmoothCamera.hpp"
// Including type: LIV.SDK.Unity.LIV
#include "LIV/SDK/Unity/LIV.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SmoothCameraController.Start
void GlobalNamespace::SmoothCameraController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmoothCameraController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothCameraController.OnDestroy
void GlobalNamespace::SmoothCameraController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmoothCameraController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothCameraController.HandleLIVDidActivate
void GlobalNamespace::SmoothCameraController::HandleLIVDidActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmoothCameraController::HandleLIVDidActivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLIVDidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothCameraController.HandleLIVDidDeactivate
void GlobalNamespace::SmoothCameraController::HandleLIVDidDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmoothCameraController::HandleLIVDidDeactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLIVDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothCameraController.ActivateSmoothCameraIfNeeded
void GlobalNamespace::SmoothCameraController::ActivateSmoothCameraIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmoothCameraController::ActivateSmoothCameraIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateSmoothCameraIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SmoothCameraController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCameraController::*)()>(&SmoothCameraController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCameraController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SmoothCameraController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCameraController::*)()>(&SmoothCameraController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCameraController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SmoothCameraController::HandleLIVDidActivate
// Il2CppName: HandleLIVDidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCameraController::*)()>(&SmoothCameraController::HandleLIVDidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCameraController*), "HandleLIVDidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SmoothCameraController::HandleLIVDidDeactivate
// Il2CppName: HandleLIVDidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCameraController::*)()>(&SmoothCameraController::HandleLIVDidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCameraController*), "HandleLIVDidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SmoothCameraController::ActivateSmoothCameraIfNeeded
// Il2CppName: ActivateSmoothCameraIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCameraController::*)()>(&SmoothCameraController::ActivateSmoothCameraIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCameraController*), "ActivateSmoothCameraIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SmoothCameraController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCameraController::*)()>(&SmoothCameraController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCameraController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmoothCameraController::*)()>(&SmoothCameraController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmoothCameraController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: AudioPitchGainEffect
#include "GlobalNamespace/AudioPitchGainEffect.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: UnityEngine.WaitUntil
#include "UnityEngine/WaitUntil.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameSongController.get_songLength
float GlobalNamespace::GameSongController::get_songLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameSongController::get_songLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameSongController.get_waitUntilIsReadyToStartTheSong
UnityEngine::WaitUntil* GlobalNamespace::GameSongController::get_waitUntilIsReadyToStartTheSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameSongController::get_waitUntilIsReadyToStartTheSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_waitUntilIsReadyToStartTheSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::WaitUntil*, false>(this, ___internal__method);
}
// Autogenerated method: GameSongController.LateUpdate
void GlobalNamespace::GameSongController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameSongController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameSongController.StartSong
void GlobalNamespace::GameSongController::StartSong(float songTimeOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameSongController::StartSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTimeOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTimeOffset);
}
// Autogenerated method: GameSongController.FailStopSong
void GlobalNamespace::GameSongController::FailStopSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameSongController::FailStopSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FailStopSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameSongController.SeekTo
void GlobalNamespace::GameSongController::SeekTo(float songTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameSongController::SeekTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SeekTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTime);
}
// Autogenerated method: GameSongController.<FailStopSong>b__13_0
void GlobalNamespace::GameSongController::$FailStopSong$b__13_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameSongController::<FailStopSong>b__13_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FailStopSong>b__13_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameSongController.StopSong
void GlobalNamespace::GameSongController::StopSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameSongController::StopSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameSongController.PauseSong
void GlobalNamespace::GameSongController::PauseSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameSongController::PauseSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameSongController.ResumeSong
void GlobalNamespace::GameSongController::ResumeSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameSongController::ResumeSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GameSongController::get_songLength
// Il2CppName: get_songLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GameSongController::*)()>(&GameSongController::get_songLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), "get_songLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameSongController::get_waitUntilIsReadyToStartTheSong
// Il2CppName: get_waitUntilIsReadyToStartTheSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::WaitUntil* (GameSongController::*)()>(&GameSongController::get_waitUntilIsReadyToStartTheSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), "get_waitUntilIsReadyToStartTheSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameSongController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameSongController::*)()>(&GameSongController::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameSongController::StartSong
// Il2CppName: StartSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameSongController::*)(float)>(&GameSongController::StartSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), "StartSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GameSongController::FailStopSong
// Il2CppName: FailStopSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameSongController::*)()>(&GameSongController::FailStopSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), "FailStopSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameSongController::SeekTo
// Il2CppName: SeekTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameSongController::*)(float)>(&GameSongController::SeekTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), "SeekTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GameSongController::$FailStopSong$b__13_0
// Il2CppName: <FailStopSong>b__13_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameSongController::*)()>(&GameSongController::$FailStopSong$b__13_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), "<FailStopSong>b__13_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameSongController::StopSong
// Il2CppName: StopSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameSongController::*)()>(&GameSongController::StopSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), "StopSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameSongController::PauseSong
// Il2CppName: PauseSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameSongController::*)()>(&GameSongController::PauseSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), "PauseSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameSongController::ResumeSong
// Il2CppName: ResumeSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameSongController::*)()>(&GameSongController::ResumeSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), "ResumeSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameSongController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameSongController::*)()>(&GameSongController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameSongController::*)()>(&GameSongController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameSongController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IStartSeekSongController
#include "GlobalNamespace/IStartSeekSongController.hpp"
// Including type: UnityEngine.WaitUntil
#include "UnityEngine/WaitUntil.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IStartSeekSongController.get_waitUntilIsReadyToStartTheSong
UnityEngine::WaitUntil* GlobalNamespace::IStartSeekSongController::get_waitUntilIsReadyToStartTheSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IStartSeekSongController::get_waitUntilIsReadyToStartTheSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_waitUntilIsReadyToStartTheSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::WaitUntil*, false>(this, ___internal__method);
}
// Autogenerated method: IStartSeekSongController.StartSong
void GlobalNamespace::IStartSeekSongController::StartSong(float offsetTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IStartSeekSongController::StartSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, offsetTime);
}
// Autogenerated method: IStartSeekSongController.SeekTo
void GlobalNamespace::IStartSeekSongController::SeekTo(float songTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IStartSeekSongController::SeekTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SeekTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTime);
}
// Writing MetadataGetter for method: IStartSeekSongController::get_waitUntilIsReadyToStartTheSong
// Il2CppName: get_waitUntilIsReadyToStartTheSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::WaitUntil* (IStartSeekSongController::*)()>(&IStartSeekSongController::get_waitUntilIsReadyToStartTheSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IStartSeekSongController*), "get_waitUntilIsReadyToStartTheSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IStartSeekSongController::StartSong
// Il2CppName: StartSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IStartSeekSongController::*)(float)>(&IStartSeekSongController::StartSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IStartSeekSongController*), "StartSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IStartSeekSongController::SeekTo
// Il2CppName: SeekTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IStartSeekSongController::*)(float)>(&IStartSeekSongController::SeekTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IStartSeekSongController*), "SeekTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PatternFightSongController
#include "GlobalNamespace/PatternFightSongController.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kBPM
float GlobalNamespace::PatternFightSongController::_get_kBPM() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::_get_kBPM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "PatternFightSongController", "kBPM"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kBPM
void GlobalNamespace::PatternFightSongController::_set_kBPM(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::_set_kBPM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PatternFightSongController", "kBPM", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kPhaseLengthInBeats
float GlobalNamespace::PatternFightSongController::_get_kPhaseLengthInBeats() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::_get_kPhaseLengthInBeats");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "PatternFightSongController", "kPhaseLengthInBeats"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kPhaseLengthInBeats
void GlobalNamespace::PatternFightSongController::_set_kPhaseLengthInBeats(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::_set_kPhaseLengthInBeats");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PatternFightSongController", "kPhaseLengthInBeats", value));
}
// Autogenerated method: PatternFightSongController.Start
void GlobalNamespace::PatternFightSongController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PatternFightSongController.OnDestroy
void GlobalNamespace::PatternFightSongController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PatternFightSongController.Update
void GlobalNamespace::PatternFightSongController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PatternFightSongController.HandleNoteWasCut
void GlobalNamespace::PatternFightSongController::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: PatternFightSongController.NoteWasMissed
void GlobalNamespace::PatternFightSongController::NoteWasMissed(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::NoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: PatternFightSongController.CreatePattern
void GlobalNamespace::PatternFightSongController::CreatePattern(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::CreatePattern");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePattern", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: PatternFightSongController.StartSong
void GlobalNamespace::PatternFightSongController::StartSong(float startTimeOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::StartSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTimeOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startTimeOffset);
}
// Autogenerated method: PatternFightSongController.StopSong
void GlobalNamespace::PatternFightSongController::StopSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::StopSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PatternFightSongController.PauseSong
void GlobalNamespace::PatternFightSongController::PauseSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::PauseSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PatternFightSongController.ResumeSong
void GlobalNamespace::PatternFightSongController::ResumeSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::ResumeSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PatternFightSongController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)()>(&PatternFightSongController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PatternFightSongController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)()>(&PatternFightSongController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PatternFightSongController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)()>(&PatternFightSongController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PatternFightSongController::HandleNoteWasCut
// Il2CppName: HandleNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&)>(&PatternFightSongController::HandleNoteWasCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), "HandleNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>()});
  }
};
// Writing MetadataGetter for method: PatternFightSongController::NoteWasMissed
// Il2CppName: NoteWasMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)(GlobalNamespace::NoteController*)>(&PatternFightSongController::NoteWasMissed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), "NoteWasMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: PatternFightSongController::CreatePattern
// Il2CppName: CreatePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)(float)>(&PatternFightSongController::CreatePattern)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), "CreatePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PatternFightSongController::StartSong
// Il2CppName: StartSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)(float)>(&PatternFightSongController::StartSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), "StartSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PatternFightSongController::StopSong
// Il2CppName: StopSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)()>(&PatternFightSongController::StopSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), "StopSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PatternFightSongController::PauseSong
// Il2CppName: PauseSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)()>(&PatternFightSongController::PauseSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), "PauseSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PatternFightSongController::ResumeSong
// Il2CppName: ResumeSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)()>(&PatternFightSongController::ResumeSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), "ResumeSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PatternFightSongController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)()>(&PatternFightSongController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PatternFightSongController::*)()>(&PatternFightSongController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PatternFightSongController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PatternFightSongController/GameplayPhase
#include "GlobalNamespace/PatternFightSongController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PatternFightSongController/GameplayPhase Undefined
GlobalNamespace::PatternFightSongController::GameplayPhase GlobalNamespace::PatternFightSongController::GameplayPhase::_get_Undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::GameplayPhase::_get_Undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PatternFightSongController::GameplayPhase>("", "PatternFightSongController/GameplayPhase", "Undefined"));
}
// Autogenerated static field setter
// Set static field: static public PatternFightSongController/GameplayPhase Undefined
void GlobalNamespace::PatternFightSongController::GameplayPhase::_set_Undefined(GlobalNamespace::PatternFightSongController::GameplayPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::GameplayPhase::_set_Undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PatternFightSongController/GameplayPhase", "Undefined", value));
}
// Autogenerated static field getter
// Get static field: static public PatternFightSongController/GameplayPhase Start
GlobalNamespace::PatternFightSongController::GameplayPhase GlobalNamespace::PatternFightSongController::GameplayPhase::_get_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::GameplayPhase::_get_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PatternFightSongController::GameplayPhase>("", "PatternFightSongController/GameplayPhase", "Start"));
}
// Autogenerated static field setter
// Set static field: static public PatternFightSongController/GameplayPhase Start
void GlobalNamespace::PatternFightSongController::GameplayPhase::_set_Start(GlobalNamespace::PatternFightSongController::GameplayPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::GameplayPhase::_set_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PatternFightSongController/GameplayPhase", "Start", value));
}
// Autogenerated static field getter
// Get static field: static public PatternFightSongController/GameplayPhase DefineThisPlayerPattern
GlobalNamespace::PatternFightSongController::GameplayPhase GlobalNamespace::PatternFightSongController::GameplayPhase::_get_DefineThisPlayerPattern() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::GameplayPhase::_get_DefineThisPlayerPattern");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PatternFightSongController::GameplayPhase>("", "PatternFightSongController/GameplayPhase", "DefineThisPlayerPattern"));
}
// Autogenerated static field setter
// Set static field: static public PatternFightSongController/GameplayPhase DefineThisPlayerPattern
void GlobalNamespace::PatternFightSongController::GameplayPhase::_set_DefineThisPlayerPattern(GlobalNamespace::PatternFightSongController::GameplayPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::GameplayPhase::_set_DefineThisPlayerPattern");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PatternFightSongController/GameplayPhase", "DefineThisPlayerPattern", value));
}
// Autogenerated static field getter
// Get static field: static public PatternFightSongController/GameplayPhase ReplayThisPlayerPattern
GlobalNamespace::PatternFightSongController::GameplayPhase GlobalNamespace::PatternFightSongController::GameplayPhase::_get_ReplayThisPlayerPattern() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::GameplayPhase::_get_ReplayThisPlayerPattern");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PatternFightSongController::GameplayPhase>("", "PatternFightSongController/GameplayPhase", "ReplayThisPlayerPattern"));
}
// Autogenerated static field setter
// Set static field: static public PatternFightSongController/GameplayPhase ReplayThisPlayerPattern
void GlobalNamespace::PatternFightSongController::GameplayPhase::_set_ReplayThisPlayerPattern(GlobalNamespace::PatternFightSongController::GameplayPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::GameplayPhase::_set_ReplayThisPlayerPattern");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PatternFightSongController/GameplayPhase", "ReplayThisPlayerPattern", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SongController
#include "GlobalNamespace/SongController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongController.add_songDidFinishEvent
void GlobalNamespace::SongController::add_songDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongController::add_songDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_songDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongController.remove_songDidFinishEvent
void GlobalNamespace::SongController::remove_songDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongController::remove_songDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_songDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongController.SendSongDidFinishEvent
void GlobalNamespace::SongController::SendSongDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongController::SendSongDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendSongDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongController.StopSong
void GlobalNamespace::SongController::StopSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongController::StopSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongController.PauseSong
void GlobalNamespace::SongController::PauseSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongController::PauseSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongController.ResumeSong
void GlobalNamespace::SongController::ResumeSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongController::ResumeSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SongController::add_songDidFinishEvent
// Il2CppName: add_songDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongController::*)(System::Action*)>(&SongController::add_songDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongController*), "add_songDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SongController::remove_songDidFinishEvent
// Il2CppName: remove_songDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongController::*)(System::Action*)>(&SongController::remove_songDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongController*), "remove_songDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SongController::SendSongDidFinishEvent
// Il2CppName: SendSongDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongController::*)()>(&SongController::SendSongDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongController*), "SendSongDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongController::StopSong
// Il2CppName: StopSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongController::*)()>(&SongController::StopSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongController*), "StopSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongController::PauseSong
// Il2CppName: PauseSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongController::*)()>(&SongController::PauseSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongController*), "PauseSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongController::ResumeSong
// Il2CppName: ResumeSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongController::*)()>(&SongController::ResumeSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongController*), "ResumeSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongController::*)()>(&SongController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongController::*)()>(&SongController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IntroTutorialController
#include "GlobalNamespace/IntroTutorialController.hpp"
// Including type: IntroTutorialController/<ShowFinishAnimationCoroutine>d__22
#include "GlobalNamespace/IntroTutorialController_-ShowFinishAnimationCoroutine-d__22.hpp"
// Including type: IntroTutorialRing
#include "GlobalNamespace/IntroTutorialRing.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: BloomFogEnvironmentParams
#include "GlobalNamespace/BloomFogEnvironmentParams.hpp"
// Including type: BloomFogParamsAnimator
#include "GlobalNamespace/BloomFogParamsAnimator.hpp"
// Including type: IGamePause
#include "GlobalNamespace/IGamePause.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IntroTutorialController.add_introTutorialDidFinishEvent
void GlobalNamespace::IntroTutorialController::add_introTutorialDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::add_introTutorialDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_introTutorialDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IntroTutorialController.remove_introTutorialDidFinishEvent
void GlobalNamespace::IntroTutorialController::remove_introTutorialDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::remove_introTutorialDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_introTutorialDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IntroTutorialController.Start
void GlobalNamespace::IntroTutorialController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController.OnDestroy
void GlobalNamespace::IntroTutorialController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController.Update
void GlobalNamespace::IntroTutorialController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController.CleanUp
void GlobalNamespace::IntroTutorialController::CleanUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::CleanUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CleanUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController.HandleGameDidPause
void GlobalNamespace::IntroTutorialController::HandleGameDidPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::HandleGameDidPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameDidPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController.HandlegameDidResume
void GlobalNamespace::IntroTutorialController::HandlegameDidResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::HandlegameDidResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlegameDidResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController.ShowFinishAnimation
void GlobalNamespace::IntroTutorialController::ShowFinishAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::ShowFinishAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowFinishAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController.ShowFinishAnimationCoroutine
System::Collections::IEnumerator* GlobalNamespace::IntroTutorialController::ShowFinishAnimationCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::ShowFinishAnimationCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowFinishAnimationCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController.SetFinishAnimationParams
void GlobalNamespace::IntroTutorialController::SetFinishAnimationParams(float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::SetFinishAnimationParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFinishAnimationParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, progress);
}
// Writing MetadataGetter for method: IntroTutorialController::add_introTutorialDidFinishEvent
// Il2CppName: add_introTutorialDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)(System::Action*)>(&IntroTutorialController::add_introTutorialDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "add_introTutorialDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::remove_introTutorialDidFinishEvent
// Il2CppName: remove_introTutorialDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)(System::Action*)>(&IntroTutorialController::remove_introTutorialDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "remove_introTutorialDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)()>(&IntroTutorialController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)()>(&IntroTutorialController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)()>(&IntroTutorialController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::CleanUp
// Il2CppName: CleanUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)()>(&IntroTutorialController::CleanUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "CleanUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::HandleGameDidPause
// Il2CppName: HandleGameDidPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)()>(&IntroTutorialController::HandleGameDidPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "HandleGameDidPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::HandlegameDidResume
// Il2CppName: HandlegameDidResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)()>(&IntroTutorialController::HandlegameDidResume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "HandlegameDidResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::ShowFinishAnimation
// Il2CppName: ShowFinishAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)()>(&IntroTutorialController::ShowFinishAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "ShowFinishAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::ShowFinishAnimationCoroutine
// Il2CppName: ShowFinishAnimationCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (IntroTutorialController::*)()>(&IntroTutorialController::ShowFinishAnimationCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "ShowFinishAnimationCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::SetFinishAnimationParams
// Il2CppName: SetFinishAnimationParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)(float)>(&IntroTutorialController::SetFinishAnimationParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), "SetFinishAnimationParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)()>(&IntroTutorialController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::*)()>(&IntroTutorialController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IntroTutorialController/<ShowFinishAnimationCoroutine>d__22
#include "GlobalNamespace/IntroTutorialController_-ShowFinishAnimationCoroutine-d__22.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IntroTutorialController/<ShowFinishAnimationCoroutine>d__22.System.IDisposable.Dispose
void GlobalNamespace::IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController/<ShowFinishAnimationCoroutine>d__22.MoveNext
bool GlobalNamespace::IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController/<ShowFinishAnimationCoroutine>d__22.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController/<ShowFinishAnimationCoroutine>d__22.System.Collections.IEnumerator.Reset
void GlobalNamespace::IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialController/<ShowFinishAnimationCoroutine>d__22.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::*)(int)>(&IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController::$ShowFinishAnimationCoroutine$d__22*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::*)(int)>(&IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController::$ShowFinishAnimationCoroutine$d__22*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::*)()>(&IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController::$ShowFinishAnimationCoroutine$d__22*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::*)()>(&IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController::$ShowFinishAnimationCoroutine$d__22*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::*)()>(&IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController::$ShowFinishAnimationCoroutine$d__22*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::*)()>(&IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController::$ShowFinishAnimationCoroutine$d__22*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::*)()>(&IntroTutorialController::$ShowFinishAnimationCoroutine$d__22::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialController::$ShowFinishAnimationCoroutine$d__22*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IntroTutorialRing
#include "GlobalNamespace/IntroTutorialRing.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IntroTutorialRing.set_alpha
void GlobalNamespace::IntroTutorialRing::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IntroTutorialRing.get_fullyActivated
bool GlobalNamespace::IntroTutorialRing::get_fullyActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::get_fullyActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fullyActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialRing.get_saberType
GlobalNamespace::SaberType GlobalNamespace::IntroTutorialRing::get_saberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::get_saberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SaberType, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialRing.set_saberType
void GlobalNamespace::IntroTutorialRing::set_saberType(GlobalNamespace::SaberType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::set_saberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_saberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IntroTutorialRing.Start
void GlobalNamespace::IntroTutorialRing::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialRing.OnEnable
void GlobalNamespace::IntroTutorialRing::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialRing.Update
void GlobalNamespace::IntroTutorialRing::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IntroTutorialRing.SetProgressImagesfillAmount
void GlobalNamespace::IntroTutorialRing::SetProgressImagesfillAmount(float fillAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::SetProgressImagesfillAmount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProgressImagesfillAmount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fillAmount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fillAmount);
}
// Autogenerated method: IntroTutorialRing.OnTriggerEnter
void GlobalNamespace::IntroTutorialRing::OnTriggerEnter(UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: IntroTutorialRing.OnTriggerExit
void GlobalNamespace::IntroTutorialRing::OnTriggerExit(UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: IntroTutorialRing.OnTriggerStay
void GlobalNamespace::IntroTutorialRing::OnTriggerStay(UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntroTutorialRing::OnTriggerStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, other);
}
// Writing MetadataGetter for method: IntroTutorialRing::set_alpha
// Il2CppName: set_alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)(float)>(&IntroTutorialRing::set_alpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "set_alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::get_fullyActivated
// Il2CppName: get_fullyActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IntroTutorialRing::*)()>(&IntroTutorialRing::get_fullyActivated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "get_fullyActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::get_saberType
// Il2CppName: get_saberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SaberType (IntroTutorialRing::*)()>(&IntroTutorialRing::get_saberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "get_saberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::set_saberType
// Il2CppName: set_saberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)(GlobalNamespace::SaberType)>(&IntroTutorialRing::set_saberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "set_saberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberType>()});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)()>(&IntroTutorialRing::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)()>(&IntroTutorialRing::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)()>(&IntroTutorialRing::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::SetProgressImagesfillAmount
// Il2CppName: SetProgressImagesfillAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)(float)>(&IntroTutorialRing::SetProgressImagesfillAmount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "SetProgressImagesfillAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)(UnityEngine::Collider*)>(&IntroTutorialRing::OnTriggerEnter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)(UnityEngine::Collider*)>(&IntroTutorialRing::OnTriggerExit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::OnTriggerStay
// Il2CppName: OnTriggerStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)(UnityEngine::Collider*)>(&IntroTutorialRing::OnTriggerStay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), "OnTriggerStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: IntroTutorialRing::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)()>(&IntroTutorialRing::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntroTutorialRing::*)()>(&IntroTutorialRing::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntroTutorialRing*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TextFadeTransitions
#include "GlobalNamespace/TextFadeTransitions.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TextFadeTransitions.Awake
void GlobalNamespace::TextFadeTransitions::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TextFadeTransitions.Update
void GlobalNamespace::TextFadeTransitions::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TextFadeTransitions.RefreshState
void GlobalNamespace::TextFadeTransitions::RefreshState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::RefreshState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TextFadeTransitions.RefreshTextAlpha
void GlobalNamespace::TextFadeTransitions::RefreshTextAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::RefreshTextAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshTextAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TextFadeTransitions.ShowText
void GlobalNamespace::TextFadeTransitions::ShowText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::ShowText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Writing MetadataGetter for method: TextFadeTransitions::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextFadeTransitions::*)()>(&TextFadeTransitions::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextFadeTransitions*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextFadeTransitions::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextFadeTransitions::*)()>(&TextFadeTransitions::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextFadeTransitions*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextFadeTransitions::RefreshState
// Il2CppName: RefreshState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextFadeTransitions::*)()>(&TextFadeTransitions::RefreshState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextFadeTransitions*), "RefreshState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextFadeTransitions::RefreshTextAlpha
// Il2CppName: RefreshTextAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextFadeTransitions::*)()>(&TextFadeTransitions::RefreshTextAlpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextFadeTransitions*), "RefreshTextAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextFadeTransitions::ShowText
// Il2CppName: ShowText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextFadeTransitions::*)(::Il2CppString*)>(&TextFadeTransitions::ShowText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextFadeTransitions*), "ShowText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextFadeTransitions::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextFadeTransitions::*)()>(&TextFadeTransitions::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextFadeTransitions*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextFadeTransitions::*)()>(&TextFadeTransitions::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextFadeTransitions*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TextFadeTransitions/State
#include "GlobalNamespace/TextFadeTransitions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TextFadeTransitions/State NotInTransition
GlobalNamespace::TextFadeTransitions::State GlobalNamespace::TextFadeTransitions::State::_get_NotInTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::State::_get_NotInTransition");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::TextFadeTransitions::State>("", "TextFadeTransitions/State", "NotInTransition"));
}
// Autogenerated static field setter
// Set static field: static public TextFadeTransitions/State NotInTransition
void GlobalNamespace::TextFadeTransitions::State::_set_NotInTransition(GlobalNamespace::TextFadeTransitions::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::State::_set_NotInTransition");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TextFadeTransitions/State", "NotInTransition", value));
}
// Autogenerated static field getter
// Get static field: static public TextFadeTransitions/State FadingOut
GlobalNamespace::TextFadeTransitions::State GlobalNamespace::TextFadeTransitions::State::_get_FadingOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::State::_get_FadingOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::TextFadeTransitions::State>("", "TextFadeTransitions/State", "FadingOut"));
}
// Autogenerated static field setter
// Set static field: static public TextFadeTransitions/State FadingOut
void GlobalNamespace::TextFadeTransitions::State::_set_FadingOut(GlobalNamespace::TextFadeTransitions::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::State::_set_FadingOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TextFadeTransitions/State", "FadingOut", value));
}
// Autogenerated static field getter
// Get static field: static public TextFadeTransitions/State FadingIn
GlobalNamespace::TextFadeTransitions::State GlobalNamespace::TextFadeTransitions::State::_get_FadingIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::State::_get_FadingIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::TextFadeTransitions::State>("", "TextFadeTransitions/State", "FadingIn"));
}
// Autogenerated static field setter
// Set static field: static public TextFadeTransitions/State FadingIn
void GlobalNamespace::TextFadeTransitions::State::_set_FadingIn(GlobalNamespace::TextFadeTransitions::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextFadeTransitions::State::_set_FadingIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TextFadeTransitions/State", "FadingIn", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialController
#include "GlobalNamespace/TutorialController.hpp"
// Including type: TutorialController/<OutroCoroutine>d__13
#include "GlobalNamespace/TutorialController_-OutroCoroutine-d__13.hpp"
// Including type: TutorialSongController
#include "GlobalNamespace/TutorialSongController.hpp"
// Including type: IntroTutorialController
#include "GlobalNamespace/IntroTutorialController.hpp"
// Including type: AudioFading
#include "GlobalNamespace/AudioFading.hpp"
// Including type: TutorialScenesTransitionSetupDataSO
#include "GlobalNamespace/TutorialScenesTransitionSetupDataSO.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: PauseController
#include "GlobalNamespace/PauseController.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TutorialController.Start
void GlobalNamespace::TutorialController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialController.OnDestroy
void GlobalNamespace::TutorialController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialController.HandleIntroTutorialDidFinishEvent
void GlobalNamespace::TutorialController::HandleIntroTutorialDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::HandleIntroTutorialDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleIntroTutorialDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialController.HandleTutorialSongControllerSongDidFinishEvent
void GlobalNamespace::TutorialController::HandleTutorialSongControllerSongDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::HandleTutorialSongControllerSongDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleTutorialSongControllerSongDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialController.OutroCoroutine
System::Collections::IEnumerator* GlobalNamespace::TutorialController::OutroCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::OutroCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OutroCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: TutorialController.HandlePauseControllerCanPause
void GlobalNamespace::TutorialController::HandlePauseControllerCanPause(System::Action_1<bool>* canPause) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::HandlePauseControllerCanPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerCanPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canPause)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, canPause);
}
// Autogenerated method: TutorialController.HandlePauseControllerDidPause
void GlobalNamespace::TutorialController::HandlePauseControllerDidPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::HandlePauseControllerDidPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialController.HandlePauseControllerDidResume
void GlobalNamespace::TutorialController::HandlePauseControllerDidResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::HandlePauseControllerDidResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TutorialController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::*)()>(&TutorialController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::*)()>(&TutorialController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::HandleIntroTutorialDidFinishEvent
// Il2CppName: HandleIntroTutorialDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::*)()>(&TutorialController::HandleIntroTutorialDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController*), "HandleIntroTutorialDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::HandleTutorialSongControllerSongDidFinishEvent
// Il2CppName: HandleTutorialSongControllerSongDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::*)()>(&TutorialController::HandleTutorialSongControllerSongDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController*), "HandleTutorialSongControllerSongDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::OutroCoroutine
// Il2CppName: OutroCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (TutorialController::*)()>(&TutorialController::OutroCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController*), "OutroCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::HandlePauseControllerCanPause
// Il2CppName: HandlePauseControllerCanPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::*)(System::Action_1<bool>*)>(&TutorialController::HandlePauseControllerCanPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController*), "HandlePauseControllerCanPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: TutorialController::HandlePauseControllerDidPause
// Il2CppName: HandlePauseControllerDidPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::*)()>(&TutorialController::HandlePauseControllerDidPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController*), "HandlePauseControllerDidPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::HandlePauseControllerDidResume
// Il2CppName: HandlePauseControllerDidResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::*)()>(&TutorialController::HandlePauseControllerDidResume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController*), "HandlePauseControllerDidResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::*)()>(&TutorialController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::*)()>(&TutorialController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TutorialController/<OutroCoroutine>d__13
#include "GlobalNamespace/TutorialController_-OutroCoroutine-d__13.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TutorialController/<OutroCoroutine>d__13.System.IDisposable.Dispose
void GlobalNamespace::TutorialController::$OutroCoroutine$d__13::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::$OutroCoroutine$d__13::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialController/<OutroCoroutine>d__13.MoveNext
bool GlobalNamespace::TutorialController::$OutroCoroutine$d__13::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::$OutroCoroutine$d__13::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TutorialController/<OutroCoroutine>d__13.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::TutorialController::$OutroCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::$OutroCoroutine$d__13::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TutorialController/<OutroCoroutine>d__13.System.Collections.IEnumerator.Reset
void GlobalNamespace::TutorialController::$OutroCoroutine$d__13::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::$OutroCoroutine$d__13::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialController/<OutroCoroutine>d__13.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::TutorialController::$OutroCoroutine$d__13::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialController::$OutroCoroutine$d__13::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TutorialController::$OutroCoroutine$d__13::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::$OutroCoroutine$d__13::*)(int)>(&TutorialController::$OutroCoroutine$d__13::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController::$OutroCoroutine$d__13*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::$OutroCoroutine$d__13::*)(int)>(&TutorialController::$OutroCoroutine$d__13::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController::$OutroCoroutine$d__13*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TutorialController::$OutroCoroutine$d__13::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::$OutroCoroutine$d__13::*)()>(&TutorialController::$OutroCoroutine$d__13::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController::$OutroCoroutine$d__13*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::$OutroCoroutine$d__13::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TutorialController::$OutroCoroutine$d__13::*)()>(&TutorialController::$OutroCoroutine$d__13::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController::$OutroCoroutine$d__13*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::$OutroCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TutorialController::$OutroCoroutine$d__13::*)()>(&TutorialController::$OutroCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController::$OutroCoroutine$d__13*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::$OutroCoroutine$d__13::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialController::$OutroCoroutine$d__13::*)()>(&TutorialController::$OutroCoroutine$d__13::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController::$OutroCoroutine$d__13*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialController::$OutroCoroutine$d__13::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TutorialController::$OutroCoroutine$d__13::*)()>(&TutorialController::$OutroCoroutine$d__13::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialController::$OutroCoroutine$d__13*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialNoteCutEffectSpawner
#include "GlobalNamespace/TutorialNoteCutEffectSpawner.hpp"
// Including type: FlyingTextSpawner
#include "GlobalNamespace/FlyingTextSpawner.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TutorialNoteCutEffectSpawner.Start
void GlobalNamespace::TutorialNoteCutEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteCutEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteCutEffectSpawner.OnDestroy
void GlobalNamespace::TutorialNoteCutEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteCutEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteCutEffectSpawner.HandleNoteWasCut
void GlobalNamespace::TutorialNoteCutEffectSpawner::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteCutEffectSpawner::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Writing MetadataGetter for method: TutorialNoteCutEffectSpawner::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialNoteCutEffectSpawner::*)()>(&TutorialNoteCutEffectSpawner::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialNoteCutEffectSpawner*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialNoteCutEffectSpawner::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialNoteCutEffectSpawner::*)()>(&TutorialNoteCutEffectSpawner::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialNoteCutEffectSpawner*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialNoteCutEffectSpawner::HandleNoteWasCut
// Il2CppName: HandleNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialNoteCutEffectSpawner::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&)>(&TutorialNoteCutEffectSpawner::HandleNoteWasCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialNoteCutEffectSpawner*), "HandleNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>()});
  }
};
// Writing MetadataGetter for method: TutorialNoteCutEffectSpawner::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialNoteCutEffectSpawner::*)()>(&TutorialNoteCutEffectSpawner::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialNoteCutEffectSpawner*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialNoteCutEffectSpawner::*)()>(&TutorialNoteCutEffectSpawner::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialNoteCutEffectSpawner*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialPause
#include "GlobalNamespace/TutorialPause.hpp"
// Including type: TutorialSongController
#include "GlobalNamespace/TutorialSongController.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: AudioListenerController
#include "GlobalNamespace/AudioListenerController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TutorialPause.add_didPauseEvent
void GlobalNamespace::TutorialPause::add_didPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialPause::add_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TutorialPause.remove_didPauseEvent
void GlobalNamespace::TutorialPause::remove_didPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialPause::remove_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TutorialPause.add_willResumeEvent
void GlobalNamespace::TutorialPause::add_willResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialPause::add_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TutorialPause.remove_willResumeEvent
void GlobalNamespace::TutorialPause::remove_willResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialPause::remove_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TutorialPause.add_didResumeEvent
void GlobalNamespace::TutorialPause::add_didResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialPause::add_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TutorialPause.remove_didResumeEvent
void GlobalNamespace::TutorialPause::remove_didResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialPause::remove_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TutorialPause.Pause
void GlobalNamespace::TutorialPause::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialPause::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialPause.WillResume
void GlobalNamespace::TutorialPause::WillResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialPause::WillResume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialPause.Resume
void GlobalNamespace::TutorialPause::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialPause::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TutorialPause::add_didPauseEvent
// Il2CppName: add_didPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)(System::Action*)>(&TutorialPause::add_didPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), "add_didPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: TutorialPause::remove_didPauseEvent
// Il2CppName: remove_didPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)(System::Action*)>(&TutorialPause::remove_didPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), "remove_didPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: TutorialPause::add_willResumeEvent
// Il2CppName: add_willResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)(System::Action*)>(&TutorialPause::add_willResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), "add_willResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: TutorialPause::remove_willResumeEvent
// Il2CppName: remove_willResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)(System::Action*)>(&TutorialPause::remove_willResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), "remove_willResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: TutorialPause::add_didResumeEvent
// Il2CppName: add_didResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)(System::Action*)>(&TutorialPause::add_didResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), "add_didResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: TutorialPause::remove_didResumeEvent
// Il2CppName: remove_didResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)(System::Action*)>(&TutorialPause::remove_didResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), "remove_didResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: TutorialPause::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)()>(&TutorialPause::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialPause::WillResume
// Il2CppName: WillResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)()>(&TutorialPause::WillResume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), "WillResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialPause::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)()>(&TutorialPause::Resume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialPause::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)()>(&TutorialPause::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialPause::*)()>(&TutorialPause::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialPause*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TutorialSongController
#include "GlobalNamespace/TutorialSongController.hpp"
// Including type: TutorialSongController/InitData
#include "GlobalNamespace/TutorialSongController_InitData.hpp"
// Including type: TutorialSongController/TutorialObjectSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialObjectSpawnData.hpp"
// Including type: TutorialSongController/TutorialJumpingNoteSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialJumpingNoteSpawnData.hpp"
// Including type: TutorialSongController/TutorialBasicNoteSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialBasicNoteSpawnData.hpp"
// Including type: TutorialSongController/TutorialBombNoteSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialBombNoteSpawnData.hpp"
// Including type: TutorialSongController/TutorialObstacleSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialObstacleSpawnData.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TutorialSongController.Awake
void GlobalNamespace::TutorialSongController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialSongController.Start
void GlobalNamespace::TutorialSongController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialSongController.OnDestroy
void GlobalNamespace::TutorialSongController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialSongController.StartSong
void GlobalNamespace::TutorialSongController::StartSong(float startTimeOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::StartSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTimeOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startTimeOffset);
}
// Autogenerated method: TutorialSongController.HandleNoteWasCut
void GlobalNamespace::TutorialSongController::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: TutorialSongController.HandleNoteWasMissed
void GlobalNamespace::TutorialSongController::HandleNoteWasMissed(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: TutorialSongController.HandleObstacleDidPassThreeQuartersOfMove2
void GlobalNamespace::TutorialSongController::HandleObstacleDidPassThreeQuartersOfMove2(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::HandleObstacleDidPassThreeQuartersOfMove2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleDidPassThreeQuartersOfMove2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: TutorialSongController.UpdateBeatmapData
void GlobalNamespace::TutorialSongController::UpdateBeatmapData(float noteTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::UpdateBeatmapData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteTime);
}
// Autogenerated method: TutorialSongController.GetNextBeatmapObjectTime
float GlobalNamespace::TutorialSongController::GetNextBeatmapObjectTime(int beatOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::GetNextBeatmapObjectTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextBeatmapObjectTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatOffset)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, beatOffset);
}
// Autogenerated method: TutorialSongController.CreateObstacleData
GlobalNamespace::ObstacleData* GlobalNamespace::TutorialSongController::CreateObstacleData(float time, GlobalNamespace::TutorialSongController::TutorialObstacleSpawnData* tutorialObstacleSpawnData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::CreateObstacleData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateObstacleData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(tutorialObstacleSpawnData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleData*, false>(this, ___internal__method, time, tutorialObstacleSpawnData);
}
// Autogenerated method: TutorialSongController.CreateBasicNoteData
GlobalNamespace::NoteData* GlobalNamespace::TutorialSongController::CreateBasicNoteData(float time, GlobalNamespace::TutorialSongController::TutorialBasicNoteSpawnData* tutorialBasicNoteSpawnData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::CreateBasicNoteData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBasicNoteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(tutorialBasicNoteSpawnData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteData*, false>(this, ___internal__method, time, tutorialBasicNoteSpawnData);
}
// Autogenerated method: TutorialSongController.CreateBombNoteData
GlobalNamespace::NoteData* GlobalNamespace::TutorialSongController::CreateBombNoteData(float time, GlobalNamespace::TutorialSongController::TutorialBombNoteSpawnData* tutorialBombNoteSpawnData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::CreateBombNoteData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBombNoteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(tutorialBombNoteSpawnData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteData*, false>(this, ___internal__method, time, tutorialBombNoteSpawnData);
}
// Autogenerated method: TutorialSongController.StopSong
void GlobalNamespace::TutorialSongController::StopSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::StopSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialSongController.PauseSong
void GlobalNamespace::TutorialSongController::PauseSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::PauseSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialSongController.ResumeSong
void GlobalNamespace::TutorialSongController::ResumeSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::ResumeSong");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TutorialSongController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)()>(&TutorialSongController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialSongController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)()>(&TutorialSongController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialSongController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)()>(&TutorialSongController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialSongController::StartSong
// Il2CppName: StartSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)(float)>(&TutorialSongController::StartSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "StartSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TutorialSongController::HandleNoteWasCut
// Il2CppName: HandleNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&)>(&TutorialSongController::HandleNoteWasCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "HandleNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>()});
  }
};
// Writing MetadataGetter for method: TutorialSongController::HandleNoteWasMissed
// Il2CppName: HandleNoteWasMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)(GlobalNamespace::NoteController*)>(&TutorialSongController::HandleNoteWasMissed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "HandleNoteWasMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: TutorialSongController::HandleObstacleDidPassThreeQuartersOfMove2
// Il2CppName: HandleObstacleDidPassThreeQuartersOfMove2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)(GlobalNamespace::ObstacleController*)>(&TutorialSongController::HandleObstacleDidPassThreeQuartersOfMove2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "HandleObstacleDidPassThreeQuartersOfMove2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: TutorialSongController::UpdateBeatmapData
// Il2CppName: UpdateBeatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)(float)>(&TutorialSongController::UpdateBeatmapData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "UpdateBeatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TutorialSongController::GetNextBeatmapObjectTime
// Il2CppName: GetNextBeatmapObjectTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TutorialSongController::*)(int)>(&TutorialSongController::GetNextBeatmapObjectTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "GetNextBeatmapObjectTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TutorialSongController::CreateObstacleData
// Il2CppName: CreateObstacleData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ObstacleData* (TutorialSongController::*)(float, GlobalNamespace::TutorialSongController::TutorialObstacleSpawnData*)>(&TutorialSongController::CreateObstacleData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "CreateObstacleData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::TutorialSongController::TutorialObstacleSpawnData*>()});
  }
};
// Writing MetadataGetter for method: TutorialSongController::CreateBasicNoteData
// Il2CppName: CreateBasicNoteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteData* (TutorialSongController::*)(float, GlobalNamespace::TutorialSongController::TutorialBasicNoteSpawnData*)>(&TutorialSongController::CreateBasicNoteData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "CreateBasicNoteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::TutorialSongController::TutorialBasicNoteSpawnData*>()});
  }
};
// Writing MetadataGetter for method: TutorialSongController::CreateBombNoteData
// Il2CppName: CreateBombNoteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteData* (TutorialSongController::*)(float, GlobalNamespace::TutorialSongController::TutorialBombNoteSpawnData*)>(&TutorialSongController::CreateBombNoteData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "CreateBombNoteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::TutorialSongController::TutorialBombNoteSpawnData*>()});
  }
};
// Writing MetadataGetter for method: TutorialSongController::StopSong
// Il2CppName: StopSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)()>(&TutorialSongController::StopSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "StopSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialSongController::PauseSong
// Il2CppName: PauseSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)()>(&TutorialSongController::PauseSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "PauseSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialSongController::ResumeSong
// Il2CppName: ResumeSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)()>(&TutorialSongController::ResumeSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), "ResumeSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialSongController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)()>(&TutorialSongController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::*)()>(&TutorialSongController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialSongController/InitData
#include "GlobalNamespace/TutorialSongController_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TutorialSongController::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::InitData::*)(float)>(&TutorialSongController::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::InitData::*)(float)>(&TutorialSongController::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialSongController/TutorialObjectSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialObjectSpawnData.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TutorialSongController::TutorialObjectSpawnData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::TutorialObjectSpawnData::*)(GlobalNamespace::Signal*, int, int, int)>(&TutorialSongController::TutorialObjectSpawnData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::TutorialObjectSpawnData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Signal*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::TutorialObjectSpawnData::*)(GlobalNamespace::Signal*, int, int, int)>(&TutorialSongController::TutorialObjectSpawnData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::TutorialObjectSpawnData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Signal*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialSongController/TutorialJumpingNoteSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialJumpingNoteSpawnData.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TutorialSongController::TutorialJumpingNoteSpawnData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::TutorialJumpingNoteSpawnData::*)(GlobalNamespace::Signal*, int, int, int, GlobalNamespace::NoteLineLayer)>(&TutorialSongController::TutorialJumpingNoteSpawnData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::TutorialJumpingNoteSpawnData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Signal*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::TutorialJumpingNoteSpawnData::*)(GlobalNamespace::Signal*, int, int, int, GlobalNamespace::NoteLineLayer)>(&TutorialSongController::TutorialJumpingNoteSpawnData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::TutorialJumpingNoteSpawnData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Signal*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialSongController/TutorialBasicNoteSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialBasicNoteSpawnData.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TutorialSongController::TutorialBasicNoteSpawnData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::TutorialBasicNoteSpawnData::*)(GlobalNamespace::Signal*, int, int, int, GlobalNamespace::NoteLineLayer, GlobalNamespace::NoteCutDirection, GlobalNamespace::ColorType)>(&TutorialSongController::TutorialBasicNoteSpawnData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::TutorialBasicNoteSpawnData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Signal*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::TutorialBasicNoteSpawnData::*)(GlobalNamespace::Signal*, int, int, int, GlobalNamespace::NoteLineLayer, GlobalNamespace::NoteCutDirection, GlobalNamespace::ColorType)>(&TutorialSongController::TutorialBasicNoteSpawnData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::TutorialBasicNoteSpawnData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Signal*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialSongController/TutorialBombNoteSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialBombNoteSpawnData.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TutorialSongController::TutorialBombNoteSpawnData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::TutorialBombNoteSpawnData::*)(GlobalNamespace::Signal*, int, int, int, GlobalNamespace::NoteLineLayer)>(&TutorialSongController::TutorialBombNoteSpawnData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::TutorialBombNoteSpawnData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Signal*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::TutorialBombNoteSpawnData::*)(GlobalNamespace::Signal*, int, int, int, GlobalNamespace::NoteLineLayer)>(&TutorialSongController::TutorialBombNoteSpawnData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::TutorialBombNoteSpawnData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Signal*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialSongController/TutorialObstacleSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialObstacleSpawnData.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TutorialSongController::TutorialObstacleSpawnData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::TutorialObstacleSpawnData::*)(GlobalNamespace::Signal*, int, int, int, int, GlobalNamespace::ObstacleType)>(&TutorialSongController::TutorialObstacleSpawnData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::TutorialObstacleSpawnData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Signal*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialSongController::TutorialObstacleSpawnData::*)(GlobalNamespace::Signal*, int, int, int, int, GlobalNamespace::ObstacleType)>(&TutorialSongController::TutorialObstacleSpawnData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialSongController::TutorialObstacleSpawnData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Signal*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AnchorIntoParent
#include "GlobalNamespace/AnchorIntoParent.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AnchorIntoParent.Start
void GlobalNamespace::AnchorIntoParent::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnchorIntoParent::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AnchorIntoParent::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnchorIntoParent::*)()>(&AnchorIntoParent::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnchorIntoParent*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnchorIntoParent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnchorIntoParent::*)()>(&AnchorIntoParent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnchorIntoParent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnchorIntoParent::*)()>(&AnchorIntoParent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnchorIntoParent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConditionalActivation
#include "GlobalNamespace/ConditionalActivation.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConditionalActivation.Awake
void GlobalNamespace::ConditionalActivation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConditionalActivation::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConditionalActivation::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalActivation::*)()>(&ConditionalActivation::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalActivation*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConditionalActivation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalActivation::*)()>(&ConditionalActivation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalActivation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalActivation::*)()>(&ConditionalActivation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalActivation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConditionalImageMaterialSwitcher
#include "GlobalNamespace/ConditionalImageMaterialSwitcher.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConditionalImageMaterialSwitcher.Awake
void GlobalNamespace::ConditionalImageMaterialSwitcher::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConditionalImageMaterialSwitcher::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConditionalImageMaterialSwitcher::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalImageMaterialSwitcher::*)()>(&ConditionalImageMaterialSwitcher::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalImageMaterialSwitcher*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConditionalImageMaterialSwitcher::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalImageMaterialSwitcher::*)()>(&ConditionalImageMaterialSwitcher::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalImageMaterialSwitcher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalImageMaterialSwitcher::*)()>(&ConditionalImageMaterialSwitcher::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalImageMaterialSwitcher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConditionalMaterialSwitcher
#include "GlobalNamespace/ConditionalMaterialSwitcher.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConditionalMaterialSwitcher.Awake
void GlobalNamespace::ConditionalMaterialSwitcher::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConditionalMaterialSwitcher::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConditionalMaterialSwitcher::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalMaterialSwitcher::*)()>(&ConditionalMaterialSwitcher::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalMaterialSwitcher*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConditionalMaterialSwitcher::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalMaterialSwitcher::*)()>(&ConditionalMaterialSwitcher::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalMaterialSwitcher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalMaterialSwitcher::*)()>(&ConditionalMaterialSwitcher::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalMaterialSwitcher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConditionalMove
#include "GlobalNamespace/ConditionalMove.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConditionalMove.Awake
void GlobalNamespace::ConditionalMove::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConditionalMove::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConditionalMove::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalMove::*)()>(&ConditionalMove::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalMove*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConditionalMove::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalMove::*)()>(&ConditionalMove::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalMove*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalMove::*)()>(&ConditionalMove::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalMove*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConditionalSpriteSwitcher
#include "GlobalNamespace/ConditionalSpriteSwitcher.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConditionalSpriteSwitcher.get_falseSprite
UnityEngine::Sprite* GlobalNamespace::ConditionalSpriteSwitcher::get_falseSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConditionalSpriteSwitcher::get_falseSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_falseSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: ConditionalSpriteSwitcher.set_falseSprite
void GlobalNamespace::ConditionalSpriteSwitcher::set_falseSprite(UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConditionalSpriteSwitcher::set_falseSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_falseSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConditionalSpriteSwitcher.get_trueSprite
UnityEngine::Sprite* GlobalNamespace::ConditionalSpriteSwitcher::get_trueSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConditionalSpriteSwitcher::get_trueSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_trueSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: ConditionalSpriteSwitcher.set_trueSprite
void GlobalNamespace::ConditionalSpriteSwitcher::set_trueSprite(UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConditionalSpriteSwitcher::set_trueSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_trueSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConditionalSpriteSwitcher.Awake
void GlobalNamespace::ConditionalSpriteSwitcher::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConditionalSpriteSwitcher::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConditionalSpriteSwitcher.Apply
void GlobalNamespace::ConditionalSpriteSwitcher::Apply() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConditionalSpriteSwitcher::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConditionalSpriteSwitcher::get_falseSprite
// Il2CppName: get_falseSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (ConditionalSpriteSwitcher::*)()>(&ConditionalSpriteSwitcher::get_falseSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalSpriteSwitcher*), "get_falseSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConditionalSpriteSwitcher::set_falseSprite
// Il2CppName: set_falseSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalSpriteSwitcher::*)(UnityEngine::Sprite*)>(&ConditionalSpriteSwitcher::set_falseSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalSpriteSwitcher*), "set_falseSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Sprite*>()});
  }
};
// Writing MetadataGetter for method: ConditionalSpriteSwitcher::get_trueSprite
// Il2CppName: get_trueSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (ConditionalSpriteSwitcher::*)()>(&ConditionalSpriteSwitcher::get_trueSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalSpriteSwitcher*), "get_trueSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConditionalSpriteSwitcher::set_trueSprite
// Il2CppName: set_trueSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalSpriteSwitcher::*)(UnityEngine::Sprite*)>(&ConditionalSpriteSwitcher::set_trueSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalSpriteSwitcher*), "set_trueSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Sprite*>()});
  }
};
// Writing MetadataGetter for method: ConditionalSpriteSwitcher::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalSpriteSwitcher::*)()>(&ConditionalSpriteSwitcher::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalSpriteSwitcher*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConditionalSpriteSwitcher::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalSpriteSwitcher::*)()>(&ConditionalSpriteSwitcher::Apply)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalSpriteSwitcher*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConditionalSpriteSwitcher::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalSpriteSwitcher::*)()>(&ConditionalSpriteSwitcher::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalSpriteSwitcher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionalSpriteSwitcher::*)()>(&ConditionalSpriteSwitcher::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionalSpriteSwitcher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DateConditionalSpriteSwitcher
#include "GlobalNamespace/DateConditionalSpriteSwitcher.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: ConditionalSpriteSwitcher
#include "GlobalNamespace/ConditionalSpriteSwitcher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DateConditionalSpriteSwitcher.Awake
void GlobalNamespace::DateConditionalSpriteSwitcher::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DateConditionalSpriteSwitcher::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DateConditionalSpriteSwitcher::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DateConditionalSpriteSwitcher::*)()>(&DateConditionalSpriteSwitcher::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DateConditionalSpriteSwitcher*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DateConditionalSpriteSwitcher::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DateConditionalSpriteSwitcher::*)()>(&DateConditionalSpriteSwitcher::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DateConditionalSpriteSwitcher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DateConditionalSpriteSwitcher::*)()>(&DateConditionalSpriteSwitcher::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DateConditionalSpriteSwitcher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DeactivateAfterFirstFrame
#include "GlobalNamespace/DeactivateAfterFirstFrame.hpp"
// Including type: DeactivateAfterFirstFrame/<Start>d__0
#include "GlobalNamespace/DeactivateAfterFirstFrame_-Start-d__0.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DeactivateAfterFirstFrame.Start
System::Collections::IEnumerator* GlobalNamespace::DeactivateAfterFirstFrame::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateAfterFirstFrame::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DeactivateAfterFirstFrame::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (DeactivateAfterFirstFrame::*)()>(&DeactivateAfterFirstFrame::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAfterFirstFrame*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateAfterFirstFrame::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAfterFirstFrame::*)()>(&DeactivateAfterFirstFrame::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAfterFirstFrame*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAfterFirstFrame::*)()>(&DeactivateAfterFirstFrame::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAfterFirstFrame*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DeactivateAfterFirstFrame/<Start>d__0
#include "GlobalNamespace/DeactivateAfterFirstFrame_-Start-d__0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DeactivateAfterFirstFrame/<Start>d__0.System.IDisposable.Dispose
void GlobalNamespace::DeactivateAfterFirstFrame::$Start$d__0::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateAfterFirstFrame::$Start$d__0::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateAfterFirstFrame/<Start>d__0.MoveNext
bool GlobalNamespace::DeactivateAfterFirstFrame::$Start$d__0::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateAfterFirstFrame::$Start$d__0::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateAfterFirstFrame/<Start>d__0.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::DeactivateAfterFirstFrame::$Start$d__0::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateAfterFirstFrame::$Start$d__0::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateAfterFirstFrame/<Start>d__0.System.Collections.IEnumerator.Reset
void GlobalNamespace::DeactivateAfterFirstFrame::$Start$d__0::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateAfterFirstFrame::$Start$d__0::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateAfterFirstFrame/<Start>d__0.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::DeactivateAfterFirstFrame::$Start$d__0::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateAfterFirstFrame::$Start$d__0::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DeactivateAfterFirstFrame::$Start$d__0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAfterFirstFrame::$Start$d__0::*)(int)>(&DeactivateAfterFirstFrame::$Start$d__0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAfterFirstFrame::$Start$d__0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAfterFirstFrame::$Start$d__0::*)(int)>(&DeactivateAfterFirstFrame::$Start$d__0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAfterFirstFrame::$Start$d__0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DeactivateAfterFirstFrame::$Start$d__0::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAfterFirstFrame::$Start$d__0::*)()>(&DeactivateAfterFirstFrame::$Start$d__0::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAfterFirstFrame::$Start$d__0*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateAfterFirstFrame::$Start$d__0::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DeactivateAfterFirstFrame::$Start$d__0::*)()>(&DeactivateAfterFirstFrame::$Start$d__0::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAfterFirstFrame::$Start$d__0*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateAfterFirstFrame::$Start$d__0::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DeactivateAfterFirstFrame::$Start$d__0::*)()>(&DeactivateAfterFirstFrame::$Start$d__0::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAfterFirstFrame::$Start$d__0*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateAfterFirstFrame::$Start$d__0::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAfterFirstFrame::$Start$d__0::*)()>(&DeactivateAfterFirstFrame::$Start$d__0::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAfterFirstFrame::$Start$d__0*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateAfterFirstFrame::$Start$d__0::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DeactivateAfterFirstFrame::$Start$d__0::*)()>(&DeactivateAfterFirstFrame::$Start$d__0::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAfterFirstFrame::$Start$d__0*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisableComponentOnNonSteam
#include "GlobalNamespace/DisableComponentOnNonSteam.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DisableComponentOnNonSteam.Awake
void GlobalNamespace::DisableComponentOnNonSteam::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisableComponentOnNonSteam::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DisableComponentOnNonSteam::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableComponentOnNonSteam::*)()>(&DisableComponentOnNonSteam::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableComponentOnNonSteam*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisableComponentOnNonSteam::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableComponentOnNonSteam::*)()>(&DisableComponentOnNonSteam::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableComponentOnNonSteam*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableComponentOnNonSteam::*)()>(&DisableComponentOnNonSteam::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableComponentOnNonSteam*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisableOnNonOculus
#include "GlobalNamespace/DisableOnNonOculus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DisableOnNonOculus::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableOnNonOculus::*)()>(&DisableOnNonOculus::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableOnNonOculus*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableOnNonOculus::*)()>(&DisableOnNonOculus::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableOnNonOculus*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisableOnNonQuest
#include "GlobalNamespace/DisableOnNonQuest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DisableOnNonQuest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableOnNonQuest::*)()>(&DisableOnNonQuest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableOnNonQuest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableOnNonQuest::*)()>(&DisableOnNonQuest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableOnNonQuest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisableOnNonSteam
#include "GlobalNamespace/DisableOnNonSteam.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DisableOnNonSteam.Awake
void GlobalNamespace::DisableOnNonSteam::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisableOnNonSteam::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DisableOnNonSteam::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableOnNonSteam::*)()>(&DisableOnNonSteam::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableOnNonSteam*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisableOnNonSteam::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableOnNonSteam::*)()>(&DisableOnNonSteam::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableOnNonSteam*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableOnNonSteam::*)()>(&DisableOnNonSteam::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableOnNonSteam*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FPSCounter
#include "GlobalNamespace/FPSCounter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FPSCounter.get_currentFPS
int GlobalNamespace::FPSCounter::get_currentFPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounter::get_currentFPS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentFPS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounter.set_currentFPS
void GlobalNamespace::FPSCounter::set_currentFPS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounter::set_currentFPS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_currentFPS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FPSCounter.get_lowestFPS
int GlobalNamespace::FPSCounter::get_lowestFPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounter::get_lowestFPS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lowestFPS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounter.set_lowestFPS
void GlobalNamespace::FPSCounter::set_lowestFPS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounter::set_lowestFPS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lowestFPS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FPSCounter.get_highestFPS
int GlobalNamespace::FPSCounter::get_highestFPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounter::get_highestFPS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_highestFPS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounter.set_highestFPS
void GlobalNamespace::FPSCounter::set_highestFPS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounter::set_highestFPS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_highestFPS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FPSCounter.get_droppedFrames
int GlobalNamespace::FPSCounter::get_droppedFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounter::get_droppedFrames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_droppedFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounter.set_droppedFrames
void GlobalNamespace::FPSCounter::set_droppedFrames(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounter::set_droppedFrames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_droppedFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FPSCounter.Awake
void GlobalNamespace::FPSCounter::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounter::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounter.Update
void GlobalNamespace::FPSCounter::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounter::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FPSCounter::get_currentFPS
// Il2CppName: get_currentFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FPSCounter::*)()>(&FPSCounter::get_currentFPS)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), "get_currentFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounter::set_currentFPS
// Il2CppName: set_currentFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounter::*)(int)>(&FPSCounter::set_currentFPS)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), "set_currentFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FPSCounter::get_lowestFPS
// Il2CppName: get_lowestFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FPSCounter::*)()>(&FPSCounter::get_lowestFPS)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), "get_lowestFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounter::set_lowestFPS
// Il2CppName: set_lowestFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounter::*)(int)>(&FPSCounter::set_lowestFPS)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), "set_lowestFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FPSCounter::get_highestFPS
// Il2CppName: get_highestFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FPSCounter::*)()>(&FPSCounter::get_highestFPS)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), "get_highestFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounter::set_highestFPS
// Il2CppName: set_highestFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounter::*)(int)>(&FPSCounter::set_highestFPS)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), "set_highestFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FPSCounter::get_droppedFrames
// Il2CppName: get_droppedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FPSCounter::*)()>(&FPSCounter::get_droppedFrames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), "get_droppedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounter::set_droppedFrames
// Il2CppName: set_droppedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounter::*)(int)>(&FPSCounter::set_droppedFrames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), "set_droppedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FPSCounter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounter::*)()>(&FPSCounter::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounter::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounter::*)()>(&FPSCounter::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounter::*)()>(&FPSCounter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounter::*)()>(&FPSCounter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FPSCounterUIController
#include "GlobalNamespace/FPSCounterUIController.hpp"
// Including type: FPSCounterUIController/<Start>d__9
#include "GlobalNamespace/FPSCounterUIController_-Start-d__9.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: FPSCounter
#include "GlobalNamespace/FPSCounter.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FPSCounterUIController.Awake
void GlobalNamespace::FPSCounterUIController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounterUIController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounterUIController.Start
System::Collections::IEnumerator* GlobalNamespace::FPSCounterUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounterUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounterUIController.LateUpdate
void GlobalNamespace::FPSCounterUIController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounterUIController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FPSCounterUIController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounterUIController::*)()>(&FPSCounterUIController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounterUIController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (FPSCounterUIController::*)()>(&FPSCounterUIController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounterUIController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounterUIController::*)()>(&FPSCounterUIController::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounterUIController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounterUIController::*)()>(&FPSCounterUIController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounterUIController::*)()>(&FPSCounterUIController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FPSCounterUIController/<Start>d__9
#include "GlobalNamespace/FPSCounterUIController_-Start-d__9.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FPSCounterUIController/<Start>d__9.System.IDisposable.Dispose
void GlobalNamespace::FPSCounterUIController::$Start$d__9::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounterUIController::$Start$d__9::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounterUIController/<Start>d__9.MoveNext
bool GlobalNamespace::FPSCounterUIController::$Start$d__9::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounterUIController::$Start$d__9::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounterUIController/<Start>d__9.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FPSCounterUIController::$Start$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounterUIController::$Start$d__9::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounterUIController/<Start>d__9.System.Collections.IEnumerator.Reset
void GlobalNamespace::FPSCounterUIController::$Start$d__9::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounterUIController::$Start$d__9::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FPSCounterUIController/<Start>d__9.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FPSCounterUIController::$Start$d__9::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounterUIController::$Start$d__9::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FPSCounterUIController::$Start$d__9::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounterUIController::$Start$d__9::*)(int)>(&FPSCounterUIController::$Start$d__9::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController::$Start$d__9*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounterUIController::$Start$d__9::*)(int)>(&FPSCounterUIController::$Start$d__9::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController::$Start$d__9*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FPSCounterUIController::$Start$d__9::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounterUIController::$Start$d__9::*)()>(&FPSCounterUIController::$Start$d__9::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController::$Start$d__9*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounterUIController::$Start$d__9::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FPSCounterUIController::$Start$d__9::*)()>(&FPSCounterUIController::$Start$d__9::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController::$Start$d__9*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounterUIController::$Start$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FPSCounterUIController::$Start$d__9::*)()>(&FPSCounterUIController::$Start$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController::$Start$d__9*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounterUIController::$Start$d__9::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FPSCounterUIController::$Start$d__9::*)()>(&FPSCounterUIController::$Start$d__9::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController::$Start$d__9*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FPSCounterUIController::$Start$d__9::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FPSCounterUIController::$Start$d__9::*)()>(&FPSCounterUIController::$Start$d__9::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FPSCounterUIController::$Start$d__9*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IPAPluginsDirDeleter
#include "GlobalNamespace/IPAPluginsDirDeleter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: IPAPluginsDirDeleter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPAPluginsDirDeleter::*)()>(&IPAPluginsDirDeleter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPAPluginsDirDeleter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPAPluginsDirDeleter::*)()>(&IPAPluginsDirDeleter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPAPluginsDirDeleter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SavWav
#include "GlobalNamespace/SavWav.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.UInt32 HeaderSize
uint GlobalNamespace::SavWav::_get_HeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SavWav::_get_HeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("", "SavWav", "HeaderSize"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 HeaderSize
void GlobalNamespace::SavWav::_set_HeaderSize(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SavWav::_set_HeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SavWav", "HeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single RescaleFactor
float GlobalNamespace::SavWav::_get_RescaleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SavWav::_get_RescaleFactor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SavWav", "RescaleFactor"));
}
// Autogenerated static field setter
// Set static field: static private System.Single RescaleFactor
void GlobalNamespace::SavWav::_set_RescaleFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SavWav::_set_RescaleFactor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SavWav", "RescaleFactor", value));
}
// Autogenerated method: SavWav.Save
void GlobalNamespace::SavWav::Save(::Il2CppString* filepath, UnityEngine::AudioClip* clip, float start, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SavWav::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SavWav", "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filepath), ::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, filepath, clip, start, duration);
}
// Autogenerated method: SavWav.GetWav
::Array<uint8_t>* GlobalNamespace::SavWav::GetWav(UnityEngine::AudioClip* clip, uint& length, float start, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SavWav::GetWav");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SavWav", "GetWav", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip, length, start, duration);
}
// Autogenerated method: SavWav.ConvertAndWrite
::Array<uint8_t>* GlobalNamespace::SavWav::ConvertAndWrite(UnityEngine::AudioClip* clip, uint& length, uint& samplesAfterTrimming, float start, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SavWav::ConvertAndWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SavWav", "ConvertAndWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip, length, samplesAfterTrimming, start, duration);
}
// Autogenerated method: SavWav.AddDataToBuffer
void GlobalNamespace::SavWav::AddDataToBuffer(::Array<uint8_t>* buffer, uint& offset, ::Array<uint8_t>* addBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SavWav::AddDataToBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SavWav", "AddDataToBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(addBytes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, buffer, offset, addBytes);
}
// Autogenerated method: SavWav.WriteHeader
void GlobalNamespace::SavWav::WriteHeader(::Array<uint8_t>* stream, UnityEngine::AudioClip* clip, uint length, uint samples) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SavWav::WriteHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SavWav", "WriteHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(samples)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stream, clip, length, samples);
}
// Writing MetadataGetter for method: SavWav::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, UnityEngine::AudioClip*, float, float)>(&SavWav::Save)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SavWav*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SavWav::GetWav
// Il2CppName: GetWav
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(UnityEngine::AudioClip*, uint&, float, float)>(&SavWav::GetWav)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SavWav*), "GetWav", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SavWav::ConvertAndWrite
// Il2CppName: ConvertAndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(UnityEngine::AudioClip*, uint&, uint&, float, float)>(&SavWav::ConvertAndWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SavWav*), "ConvertAndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SavWav::AddDataToBuffer
// Il2CppName: AddDataToBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, uint&, ::Array<uint8_t>*)>(&SavWav::AddDataToBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SavWav*), "AddDataToBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: SavWav::WriteHeader
// Il2CppName: WriteHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, UnityEngine::AudioClip*, uint, uint)>(&SavWav::WriteHeader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SavWav*), "WriteHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SimpleTextureLoader
#include "GlobalNamespace/SimpleTextureLoader.hpp"
// Including type: SimpleTextureLoader/<LoadTextureCoroutine>d__2
#include "GlobalNamespace/SimpleTextureLoader_-LoadTextureCoroutine-d__2.hpp"
// Including type: HMCache`2
#include "GlobalNamespace/HMCache_2.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private HMCache`2<System.String,UnityEngine.Texture2D> _cache
GlobalNamespace::HMCache_2<::Il2CppString*, UnityEngine::Texture2D*>* GlobalNamespace::SimpleTextureLoader::_get__cache() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::_get__cache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::HMCache_2<::Il2CppString*, UnityEngine::Texture2D*>*>("", "SimpleTextureLoader", "_cache")));
}
// Autogenerated static field setter
// Set static field: static private HMCache`2<System.String,UnityEngine.Texture2D> _cache
void GlobalNamespace::SimpleTextureLoader::_set__cache(GlobalNamespace::HMCache_2<::Il2CppString*, UnityEngine::Texture2D*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::_set__cache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SimpleTextureLoader", "_cache", value));
}
// Autogenerated method: SimpleTextureLoader.LoadTexture
void GlobalNamespace::SimpleTextureLoader::LoadTexture(::Il2CppString* filePath, bool useCache, System::Action_1<UnityEngine::Texture2D*>* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::LoadTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleTextureLoader", "LoadTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(useCache), ::il2cpp_utils::ExtractType(finishedCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, filePath, useCache, finishedCallback);
}
// Autogenerated method: SimpleTextureLoader.LoadTextureCoroutine
System::Collections::IEnumerator* GlobalNamespace::SimpleTextureLoader::LoadTextureCoroutine(::Il2CppString* filePath, bool useCache, System::Action_1<UnityEngine::Texture2D*>* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::LoadTextureCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleTextureLoader", "LoadTextureCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(useCache), ::il2cpp_utils::ExtractType(finishedCallback)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, filePath, useCache, finishedCallback);
}
// Autogenerated method: SimpleTextureLoader..cctor
void GlobalNamespace::SimpleTextureLoader::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleTextureLoader", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SimpleTextureLoader::LoadTexture
// Il2CppName: LoadTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, bool, System::Action_1<UnityEngine::Texture2D*>*)>(&SimpleTextureLoader::LoadTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader*), "LoadTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Texture2D*>*>()});
  }
};
// Writing MetadataGetter for method: SimpleTextureLoader::LoadTextureCoroutine
// Il2CppName: LoadTextureCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (*)(::Il2CppString*, bool, System::Action_1<UnityEngine::Texture2D*>*)>(&SimpleTextureLoader::LoadTextureCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader*), "LoadTextureCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Texture2D*>*>()});
  }
};
// Writing MetadataGetter for method: SimpleTextureLoader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SimpleTextureLoader::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SimpleTextureLoader/<LoadTextureCoroutine>d__2
#include "GlobalNamespace/SimpleTextureLoader_-LoadTextureCoroutine-d__2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleTextureLoader/<LoadTextureCoroutine>d__2.System.IDisposable.Dispose
void GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleTextureLoader/<LoadTextureCoroutine>d__2.MoveNext
bool GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SimpleTextureLoader/<LoadTextureCoroutine>d__2.<>m__Finally1
void GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleTextureLoader/<LoadTextureCoroutine>d__2.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SimpleTextureLoader/<LoadTextureCoroutine>d__2.System.Collections.IEnumerator.Reset
void GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleTextureLoader/<LoadTextureCoroutine>d__2.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleTextureLoader::$LoadTextureCoroutine$d__2::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SimpleTextureLoader::$LoadTextureCoroutine$d__2::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleTextureLoader::$LoadTextureCoroutine$d__2::*)(int)>(&SimpleTextureLoader::$LoadTextureCoroutine$d__2::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader::$LoadTextureCoroutine$d__2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleTextureLoader::$LoadTextureCoroutine$d__2::*)(int)>(&SimpleTextureLoader::$LoadTextureCoroutine$d__2::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader::$LoadTextureCoroutine$d__2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleTextureLoader::$LoadTextureCoroutine$d__2::*)()>(&SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader::$LoadTextureCoroutine$d__2*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleTextureLoader::$LoadTextureCoroutine$d__2::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SimpleTextureLoader::$LoadTextureCoroutine$d__2::*)()>(&SimpleTextureLoader::$LoadTextureCoroutine$d__2::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader::$LoadTextureCoroutine$d__2*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleTextureLoader::$LoadTextureCoroutine$d__2::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleTextureLoader::$LoadTextureCoroutine$d__2::*)()>(&SimpleTextureLoader::$LoadTextureCoroutine$d__2::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader::$LoadTextureCoroutine$d__2*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SimpleTextureLoader::$LoadTextureCoroutine$d__2::*)()>(&SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader::$LoadTextureCoroutine$d__2*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleTextureLoader::$LoadTextureCoroutine$d__2::*)()>(&SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader::$LoadTextureCoroutine$d__2*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SimpleTextureLoader::$LoadTextureCoroutine$d__2::*)()>(&SimpleTextureLoader::$LoadTextureCoroutine$d__2::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleTextureLoader::$LoadTextureCoroutine$d__2*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SongTimeAnimationPlayer
#include "GlobalNamespace/SongTimeAnimationPlayer.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongTimeAnimationPlayer.Update
void GlobalNamespace::SongTimeAnimationPlayer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongTimeAnimationPlayer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SongTimeAnimationPlayer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongTimeAnimationPlayer::*)()>(&SongTimeAnimationPlayer::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongTimeAnimationPlayer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongTimeAnimationPlayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongTimeAnimationPlayer::*)()>(&SongTimeAnimationPlayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongTimeAnimationPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongTimeAnimationPlayer::*)()>(&SongTimeAnimationPlayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongTimeAnimationPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ITimeProvider
#include "GlobalNamespace/ITimeProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ITimeProvider.get_time
float GlobalNamespace::ITimeProvider::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ITimeProvider::get_time");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ITimeProvider::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ITimeProvider::*)()>(&ITimeProvider::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITimeProvider*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SyncTimeProvider
#include "GlobalNamespace/SyncTimeProvider.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SyncTimeProvider.get_time
float GlobalNamespace::SyncTimeProvider::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncTimeProvider::get_time");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SyncTimeProvider::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SyncTimeProvider::*)()>(&SyncTimeProvider::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncTimeProvider*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SyncTimeProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SyncTimeProvider::*)()>(&SyncTimeProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncTimeProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SyncTimeProvider::*)()>(&SyncTimeProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncTimeProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BaseViewControllersInstaller
#include "GlobalNamespace/BaseViewControllersInstaller.hpp"
// Including type: SimpleDialogPromptViewController
#include "GlobalNamespace/SimpleDialogPromptViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseViewControllersInstaller.InstallBindings
void GlobalNamespace::BaseViewControllersInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseViewControllersInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BaseViewControllersInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseViewControllersInstaller::*)()>(&BaseViewControllersInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseViewControllersInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseViewControllersInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseViewControllersInstaller::*)()>(&BaseViewControllersInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseViewControllersInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseViewControllersInstaller::*)()>(&BaseViewControllersInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseViewControllersInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectsInstaller
#include "GlobalNamespace/BeatmapObjectsInstaller.hpp"
// Including type: GameNoteController
#include "GlobalNamespace/GameNoteController.hpp"
// Including type: BombNoteController
#include "GlobalNamespace/BombNoteController.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: NoteLineConnectionController
#include "GlobalNamespace/NoteLineConnectionController.hpp"
// Including type: BeatLine
#include "GlobalNamespace/BeatLine.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectsInstaller.InstallBindings
void GlobalNamespace::BeatmapObjectsInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BeatmapObjectsInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectsInstaller::*)()>(&BeatmapObjectsInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectsInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectsInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectsInstaller::*)()>(&BeatmapObjectsInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectsInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectsInstaller::*)()>(&BeatmapObjectsInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectsInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorManagerInstaller
#include "GlobalNamespace/ColorManagerInstaller.hpp"
// Including type: ColorSchemeSO
#include "GlobalNamespace/ColorSchemeSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorManagerInstaller.InstallBindings
void GlobalNamespace::ColorManagerInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorManagerInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ColorManagerInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorManagerInstaller::*)()>(&ColorManagerInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorManagerInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorManagerInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorManagerInstaller::*)()>(&ColorManagerInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorManagerInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorManagerInstaller::*)()>(&ColorManagerInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorManagerInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EffectPoolsManualInstaller
#include "GlobalNamespace/EffectPoolsManualInstaller.hpp"
// Including type: FlyingTextEffect
#include "GlobalNamespace/FlyingTextEffect.hpp"
// Including type: FlyingScoreEffect
#include "GlobalNamespace/FlyingScoreEffect.hpp"
// Including type: BeatEffect
#include "GlobalNamespace/BeatEffect.hpp"
// Including type: NoteCutSoundEffect
#include "GlobalNamespace/NoteCutSoundEffect.hpp"
// Including type: BombCutSoundEffect
#include "GlobalNamespace/BombCutSoundEffect.hpp"
// Including type: FlyingSpriteEffect
#include "GlobalNamespace/FlyingSpriteEffect.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: NoteDebris
#include "GlobalNamespace/NoteDebris.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EffectPoolsManualInstaller.ManualInstallBindings
void GlobalNamespace::EffectPoolsManualInstaller::ManualInstallBindings(Zenject::DiContainer* container, bool shortBeatEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EffectPoolsManualInstaller::ManualInstallBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualInstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(shortBeatEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, shortBeatEffect);
}
// Writing MetadataGetter for method: EffectPoolsManualInstaller::ManualInstallBindings
// Il2CppName: ManualInstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EffectPoolsManualInstaller::*)(Zenject::DiContainer*, bool)>(&EffectPoolsManualInstaller::ManualInstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EffectPoolsManualInstaller*), "ManualInstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EffectPoolsManualInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EffectPoolsManualInstaller::*)()>(&EffectPoolsManualInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EffectPoolsManualInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EffectPoolsManualInstaller::*)()>(&EffectPoolsManualInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EffectPoolsManualInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FakeMirrorObjectsInstaller
#include "GlobalNamespace/FakeMirrorObjectsInstaller.hpp"
// Including type: FakeMirrorObjectsInstaller/<>c
#include "GlobalNamespace/FakeMirrorObjectsInstaller_--c.hpp"
// Including type: MirroredCubeNoteController
#include "GlobalNamespace/MirroredCubeNoteController.hpp"
// Including type: MirroredBombNoteController
#include "GlobalNamespace/MirroredBombNoteController.hpp"
// Including type: MirroredObstacleController
#include "GlobalNamespace/MirroredObstacleController.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: MirrorRendererGraphicsSettingsPresets
#include "GlobalNamespace/MirrorRendererGraphicsSettingsPresets.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FakeMirrorObjectsInstaller.get_mirroredGameNoteControllerPrefab
GlobalNamespace::MirroredCubeNoteController* GlobalNamespace::FakeMirrorObjectsInstaller::get_mirroredGameNoteControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorObjectsInstaller::get_mirroredGameNoteControllerPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mirroredGameNoteControllerPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MirroredCubeNoteController*, false>(this, ___internal__method);
}
// Autogenerated method: FakeMirrorObjectsInstaller.InstallBindings
void GlobalNamespace::FakeMirrorObjectsInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorObjectsInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FakeMirrorObjectsInstaller::get_mirroredGameNoteControllerPrefab
// Il2CppName: get_mirroredGameNoteControllerPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MirroredCubeNoteController* (FakeMirrorObjectsInstaller::*)()>(&FakeMirrorObjectsInstaller::get_mirroredGameNoteControllerPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorObjectsInstaller*), "get_mirroredGameNoteControllerPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FakeMirrorObjectsInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorObjectsInstaller::*)()>(&FakeMirrorObjectsInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorObjectsInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FakeMirrorObjectsInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorObjectsInstaller::*)()>(&FakeMirrorObjectsInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorObjectsInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorObjectsInstaller::*)()>(&FakeMirrorObjectsInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorObjectsInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FakeMirrorObjectsInstaller/<>c
#include "GlobalNamespace/FakeMirrorObjectsInstaller_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly FakeMirrorObjectsInstaller/<>c <>9
GlobalNamespace::FakeMirrorObjectsInstaller::$$c* GlobalNamespace::FakeMirrorObjectsInstaller::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorObjectsInstaller::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::FakeMirrorObjectsInstaller::$$c*>("", "FakeMirrorObjectsInstaller/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly FakeMirrorObjectsInstaller/<>c <>9
void GlobalNamespace::FakeMirrorObjectsInstaller::$$c::_set_$$9(GlobalNamespace::FakeMirrorObjectsInstaller::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorObjectsInstaller::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "FakeMirrorObjectsInstaller/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.BindingId,System.Boolean> <>9__7_0
System::Func_2<Zenject::BindingId, bool>* GlobalNamespace::FakeMirrorObjectsInstaller::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorObjectsInstaller::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::BindingId, bool>*>("", "FakeMirrorObjectsInstaller/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.BindingId,System.Boolean> <>9__7_0
void GlobalNamespace::FakeMirrorObjectsInstaller::$$c::_set_$$9__7_0(System::Func_2<Zenject::BindingId, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorObjectsInstaller::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "FakeMirrorObjectsInstaller/<>c", "<>9__7_0", value)));
}
// Autogenerated method: FakeMirrorObjectsInstaller/<>c..cctor
void GlobalNamespace::FakeMirrorObjectsInstaller::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorObjectsInstaller::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FakeMirrorObjectsInstaller/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: FakeMirrorObjectsInstaller/<>c.<InstallBindings>b__7_0
bool GlobalNamespace::FakeMirrorObjectsInstaller::$$c::$InstallBindings$b__7_0(Zenject::BindingId t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorObjectsInstaller::$$c::<InstallBindings>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InstallBindings>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: FakeMirrorObjectsInstaller::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&FakeMirrorObjectsInstaller::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorObjectsInstaller::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FakeMirrorObjectsInstaller::$$c::$InstallBindings$b__7_0
// Il2CppName: <InstallBindings>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FakeMirrorObjectsInstaller::$$c::*)(Zenject::BindingId)>(&FakeMirrorObjectsInstaller::$$c::$InstallBindings$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorObjectsInstaller::$$c*), "<InstallBindings>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindingId>()});
  }
};
// Writing MetadataGetter for method: FakeMirrorObjectsInstaller::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorObjectsInstaller::$$c::*)()>(&FakeMirrorObjectsInstaller::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorObjectsInstaller::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FakeMirrorObjectsInstaller::$$c::*)()>(&FakeMirrorObjectsInstaller::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FakeMirrorObjectsInstaller::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayCoreInstaller
#include "GlobalNamespace/GameplayCoreInstaller.hpp"
// Including type: BeatLineManager
#include "GlobalNamespace/BeatLineManager.hpp"
// Including type: AudioManagerSO
#include "GlobalNamespace/AudioManagerSO.hpp"
// Including type: BeatmapObjectSpawnControllerPlayerHeightSetter
#include "GlobalNamespace/BeatmapObjectSpawnControllerPlayerHeightSetter.hpp"
// Including type: PlayerHeightDetector
#include "GlobalNamespace/PlayerHeightDetector.hpp"
// Including type: NoteCutScoreSpawner
#include "GlobalNamespace/NoteCutScoreSpawner.hpp"
// Including type: BadNoteCutEffectSpawner
#include "GlobalNamespace/BadNoteCutEffectSpawner.hpp"
// Including type: MissedNoteEffectSpawner
#include "GlobalNamespace/MissedNoteEffectSpawner.hpp"
// Including type: EffectPoolsManualInstaller
#include "GlobalNamespace/EffectPoolsManualInstaller.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
// Including type: DataModels.Levels.PerceivedLoudnessPerLevelModel
#include "DataModels/Levels/PerceivedLoudnessPerLevelModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayCoreInstaller.InstallBindings
void GlobalNamespace::GameplayCoreInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayCoreInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GameplayCoreInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayCoreInstaller::*)()>(&GameplayCoreInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayCoreInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayCoreInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayCoreInstaller::*)()>(&GameplayCoreInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayCoreInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayCoreInstaller::*)()>(&GameplayCoreInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayCoreInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayFacade
#include "GlobalNamespace/GameplayFacade.hpp"
// Including type: BeatmapObjectSpawnController
#include "GlobalNamespace/BeatmapObjectSpawnController.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: BasicSpectrogramData
#include "GlobalNamespace/BasicSpectrogramData.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapObjectCallback
#include "GlobalNamespace/BeatmapObjectCallback.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: BeatmapEventCallback
#include "GlobalNamespace/BeatmapEventCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayFacade.get_difficultyBeatmap
GlobalNamespace::IDifficultyBeatmap* GlobalNamespace::GameplayFacade::get_difficultyBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::get_difficultyBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDifficultyBeatmap*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayFacade.get_songTime
float GlobalNamespace::GameplayFacade::get_songTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::get_songTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameplayFacade.get_songEndTime
float GlobalNamespace::GameplayFacade::get_songEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::get_songEndTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameplayFacade.get_isReady
bool GlobalNamespace::GameplayFacade::get_isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::get_isReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayFacade.get_isInitialized
bool GlobalNamespace::GameplayFacade::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::get_isInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayFacade.get_moveDuration
float GlobalNamespace::GameplayFacade::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::get_moveDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameplayFacade.get_jumpDuration
float GlobalNamespace::GameplayFacade::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameplayFacade.add_didInitEvent
void GlobalNamespace::GameplayFacade::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::add_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayFacade.remove_didInitEvent
void GlobalNamespace::GameplayFacade::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::remove_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayFacade.get_ProcessedSamples
System::Collections::Generic::List_1<float>* GlobalNamespace::GameplayFacade::get_ProcessedSamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::get_ProcessedSamples");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProcessedSamples", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<float>*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayFacade.get_leftSaber
GlobalNamespace::Saber* GlobalNamespace::GameplayFacade::get_leftSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::get_leftSaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftSaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Saber*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayFacade.get_rightSaber
GlobalNamespace::Saber* GlobalNamespace::GameplayFacade::get_rightSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::get_rightSaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightSaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Saber*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayFacade.add_beatmapEventDidTriggerEvent
void GlobalNamespace::GameplayFacade::add_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::add_beatmapEventDidTriggerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayFacade.remove_beatmapEventDidTriggerEvent
void GlobalNamespace::GameplayFacade::remove_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::remove_beatmapEventDidTriggerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayFacade.AddBeatmapObjectCallback
GlobalNamespace::BeatmapObjectCallbackData* GlobalNamespace::GameplayFacade::AddBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallback* callback, float aheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::AddBeatmapObjectCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(aheadTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectCallbackData*, false>(this, ___internal__method, callback, aheadTime);
}
// Autogenerated method: GameplayFacade.RemoveBeatmapObjectCallback
void GlobalNamespace::GameplayFacade::RemoveBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallbackData* callbackData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::RemoveBeatmapObjectCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackData);
}
// Autogenerated method: GameplayFacade.AddBeatmapEventCallback
GlobalNamespace::BeatmapEventCallbackData* GlobalNamespace::GameplayFacade::AddBeatmapEventCallback(GlobalNamespace::BeatmapEventCallback* callback, float aheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::AddBeatmapEventCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(aheadTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapEventCallbackData*, false>(this, ___internal__method, callback, aheadTime);
}
// Autogenerated method: GameplayFacade.RemoveBeatmapEventCallback
void GlobalNamespace::GameplayFacade::RemoveBeatmapEventCallback(GlobalNamespace::BeatmapEventCallbackData* callbackData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayFacade::RemoveBeatmapEventCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackData);
}
// Writing MetadataGetter for method: GameplayFacade::get_difficultyBeatmap
// Il2CppName: get_difficultyBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmap* (GameplayFacade::*)()>(&GameplayFacade::get_difficultyBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "get_difficultyBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayFacade::get_songTime
// Il2CppName: get_songTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GameplayFacade::*)()>(&GameplayFacade::get_songTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "get_songTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayFacade::get_songEndTime
// Il2CppName: get_songEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GameplayFacade::*)()>(&GameplayFacade::get_songEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "get_songEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayFacade::get_isReady
// Il2CppName: get_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayFacade::*)()>(&GameplayFacade::get_isReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "get_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayFacade::get_isInitialized
// Il2CppName: get_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayFacade::*)()>(&GameplayFacade::get_isInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "get_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayFacade::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GameplayFacade::*)()>(&GameplayFacade::get_moveDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayFacade::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GameplayFacade::*)()>(&GameplayFacade::get_jumpDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayFacade::add_didInitEvent
// Il2CppName: add_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayFacade::*)(System::Action*)>(&GameplayFacade::add_didInitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "add_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameplayFacade::remove_didInitEvent
// Il2CppName: remove_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayFacade::*)(System::Action*)>(&GameplayFacade::remove_didInitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "remove_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameplayFacade::get_ProcessedSamples
// Il2CppName: get_ProcessedSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<float>* (GameplayFacade::*)()>(&GameplayFacade::get_ProcessedSamples)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "get_ProcessedSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayFacade::get_leftSaber
// Il2CppName: get_leftSaber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::Saber* (GameplayFacade::*)()>(&GameplayFacade::get_leftSaber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "get_leftSaber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayFacade::get_rightSaber
// Il2CppName: get_rightSaber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::Saber* (GameplayFacade::*)()>(&GameplayFacade::get_rightSaber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "get_rightSaber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayFacade::add_beatmapEventDidTriggerEvent
// Il2CppName: add_beatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayFacade::*)(System::Action_1<GlobalNamespace::BeatmapEventData*>*)>(&GameplayFacade::add_beatmapEventDidTriggerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "add_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::BeatmapEventData*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayFacade::remove_beatmapEventDidTriggerEvent
// Il2CppName: remove_beatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayFacade::*)(System::Action_1<GlobalNamespace::BeatmapEventData*>*)>(&GameplayFacade::remove_beatmapEventDidTriggerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "remove_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::BeatmapEventData*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayFacade::AddBeatmapObjectCallback
// Il2CppName: AddBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectCallbackData* (GameplayFacade::*)(GlobalNamespace::BeatmapObjectCallback*, float)>(&GameplayFacade::AddBeatmapObjectCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "AddBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectCallback*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GameplayFacade::RemoveBeatmapObjectCallback
// Il2CppName: RemoveBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayFacade::*)(GlobalNamespace::BeatmapObjectCallbackData*)>(&GameplayFacade::RemoveBeatmapObjectCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "RemoveBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectCallbackData*>()});
  }
};
// Writing MetadataGetter for method: GameplayFacade::AddBeatmapEventCallback
// Il2CppName: AddBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapEventCallbackData* (GameplayFacade::*)(GlobalNamespace::BeatmapEventCallback*, float)>(&GameplayFacade::AddBeatmapEventCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "AddBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventCallback*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GameplayFacade::RemoveBeatmapEventCallback
// Il2CppName: RemoveBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayFacade::*)(GlobalNamespace::BeatmapEventCallbackData*)>(&GameplayFacade::RemoveBeatmapEventCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), "RemoveBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventCallbackData*>()});
  }
};
// Writing MetadataGetter for method: GameplayFacade::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayFacade::*)()>(&GameplayFacade::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayFacade::*)()>(&GameplayFacade::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayFacade*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
