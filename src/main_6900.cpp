// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_RenderModel/RenderModel
#include "GlobalNamespace/SteamVR_RenderModel_RenderModel.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/RenderModel.get_mesh
UnityEngine::Mesh* GlobalNamespace::SteamVR_RenderModel::RenderModel::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.set_mesh
void GlobalNamespace::SteamVR_RenderModel::RenderModel::set_mesh(UnityEngine::Mesh* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::set_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.get_material
UnityEngine::Material* GlobalNamespace::SteamVR_RenderModel::RenderModel::get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::get_material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.set_material
void GlobalNamespace::SteamVR_RenderModel::RenderModel::set_material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::set_material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/RenderModelInterfaceHolder.get_instance
Valve::VR::CVRRenderModels* GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRRenderModels*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModelInterfaceHolder.Dispose
void GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel/<SetModelAsync>d__21
#include "GlobalNamespace/SteamVR_RenderModel_-SetModelAsync-d__21.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.MoveNext
bool GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.<>m__Finally1
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel/<FreeRenderModel>d__24
#include "GlobalNamespace/SteamVR_RenderModel_-FreeRenderModel-d__24.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.MoveNext
bool GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Skybox
#include "GlobalNamespace/SteamVR_Skybox.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Skybox.SetTextureByIndex
void GlobalNamespace::SteamVR_Skybox::SetTextureByIndex(int i, UnityEngine::Texture* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::SetTextureByIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextureByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, t);
}
// Autogenerated method: SteamVR_Skybox.GetTextureByIndex
UnityEngine::Texture* GlobalNamespace::SteamVR_Skybox::GetTextureByIndex(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::GetTextureByIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextureByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture*, false>(this, ___internal__method, i);
}
// Autogenerated method: SteamVR_Skybox.SetOverride
void GlobalNamespace::SteamVR_Skybox::SetOverride(UnityEngine::Texture* front, UnityEngine::Texture* back, UnityEngine::Texture* left, UnityEngine::Texture* right, UnityEngine::Texture* top, UnityEngine::Texture* bottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::SetOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Skybox", "SetOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(front), ::il2cpp_utils::ExtractType(back), ::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(top), ::il2cpp_utils::ExtractType(bottom)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, front, back, left, right, top, bottom);
}
// Autogenerated method: SteamVR_Skybox.ClearOverride
void GlobalNamespace::SteamVR_Skybox::ClearOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::ClearOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Skybox", "ClearOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Skybox.OnEnable
void GlobalNamespace::SteamVR_Skybox::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Skybox.OnDisable
void GlobalNamespace::SteamVR_Skybox::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Skybox/CellSize
#include "GlobalNamespace/SteamVR_Skybox.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x1024
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x1024() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x1024");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x1024"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x1024
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x1024(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x1024");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x1024", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x64
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x64() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x64"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x64
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x64(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x64", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x32
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x32() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x32"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x32
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x32(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x32", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x16
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x16() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x16"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x16
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x16(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x16", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x8
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x8() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x8"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x8
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x8(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x8", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_SphericalProjection
#include "GlobalNamespace/SteamVR_SphericalProjection.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material material
UnityEngine::Material* GlobalNamespace::SteamVR_SphericalProjection::_get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::_get_material");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Material*>("", "SteamVR_SphericalProjection", "material"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material material
void GlobalNamespace::SteamVR_SphericalProjection::_set_material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::_set_material");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_SphericalProjection", "material", value));
}
// Autogenerated method: SteamVR_SphericalProjection.Set
void GlobalNamespace::SteamVR_SphericalProjection::Set(UnityEngine::Vector3 N, float phi0, float phi1, float theta0, float theta1, UnityEngine::Vector3 uAxis, UnityEngine::Vector3 uOrigin, float uScale, UnityEngine::Vector3 vAxis, UnityEngine::Vector3 vOrigin, float vScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(N), ::il2cpp_utils::ExtractType(phi0), ::il2cpp_utils::ExtractType(phi1), ::il2cpp_utils::ExtractType(theta0), ::il2cpp_utils::ExtractType(theta1), ::il2cpp_utils::ExtractType(uAxis), ::il2cpp_utils::ExtractType(uOrigin), ::il2cpp_utils::ExtractType(uScale), ::il2cpp_utils::ExtractType(vAxis), ::il2cpp_utils::ExtractType(vOrigin), ::il2cpp_utils::ExtractType(vScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, N, phi0, phi1, theta0, theta1, uAxis, uOrigin, uScale, vAxis, vOrigin, vScale);
}
// Autogenerated method: SteamVR_SphericalProjection.OnRenderImage
void GlobalNamespace::SteamVR_SphericalProjection::OnRenderImage(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::OnRenderImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Stats
#include "GlobalNamespace/SteamVR_Stats.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Stats.Awake
void GlobalNamespace::SteamVR_Stats::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Stats::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_TestController
#include "GlobalNamespace/SteamVR_TestController.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TestController.OnDeviceConnected
void GlobalNamespace::SteamVR_TestController::OnDeviceConnected(int index, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, connected);
}
// Autogenerated method: SteamVR_TestController.OnEnable
void GlobalNamespace::SteamVR_TestController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestController.OnDisable
void GlobalNamespace::SteamVR_TestController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestController.PrintControllerStatus
void GlobalNamespace::SteamVR_TestController::PrintControllerStatus(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::PrintControllerStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrintControllerStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: SteamVR_TestController.Update
void GlobalNamespace::SteamVR_TestController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_TrackedCamera
#include "GlobalNamespace/SteamVR_TrackedCamera.hpp"
// Including type: SteamVR_TrackedCamera/VideoStreamTexture
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStreamTexture.hpp"
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] distorted
::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* GlobalNamespace::SteamVR_TrackedCamera::_get_distorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_get_distorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>*>("", "SteamVR_TrackedCamera", "distorted"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] distorted
void GlobalNamespace::SteamVR_TrackedCamera::_set_distorted(::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_set_distorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "distorted", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] undistorted
::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* GlobalNamespace::SteamVR_TrackedCamera::_get_undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_get_undistorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>*>("", "SteamVR_TrackedCamera", "undistorted"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] undistorted
void GlobalNamespace::SteamVR_TrackedCamera::_set_undistorted(::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_set_undistorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "undistorted", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStream[] videostreams
::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*>* GlobalNamespace::SteamVR_TrackedCamera::_get_videostreams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_get_videostreams");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*>*>("", "SteamVR_TrackedCamera", "videostreams"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStream[] videostreams
void GlobalNamespace::SteamVR_TrackedCamera::_set_videostreams(::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_set_videostreams");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "videostreams", value));
}
// Autogenerated method: SteamVR_TrackedCamera.Distorted
GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Distorted(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Distorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Distorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Undistorted
GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Undistorted(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Undistorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Undistorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Source
GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Source(bool undistorted, int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Source");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Source", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(undistorted), ::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, undistorted, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Stream
GlobalNamespace::SteamVR_TrackedCamera::VideoStream* GlobalNamespace::SteamVR_TrackedCamera::Stream(uint deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Stream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Stream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedCamera/VideoStreamTexture
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStreamTexture.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_undistorted
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_undistorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_undistorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.set_undistorted
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_undistorted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_undistorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_undistorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_deviceIndex
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_deviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_hasCamera
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_hasTracking
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasTracking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasTracking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameId
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frameId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameBounds
Valve::VR::VRTextureBounds_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frameBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRTextureBounds_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.set_frameBounds
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_frameBounds(Valve::VR::VRTextureBounds_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_frameBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_frameBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameType
Valve::VR::EVRTrackedCameraFrameType GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frameType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraFrameType, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_texture
UnityEngine::Texture2D* GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_texture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_texture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_transform
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_velocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_angularVelocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_angularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_angularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_angularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.GetPose
Valve::VR::TrackedDevicePose_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::GetPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::GetPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::TrackedDevicePose_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Acquire
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Acquire() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Release
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Update
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_deviceIndex
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_deviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.set_deviceIndex
void GlobalNamespace::SteamVR_TrackedCamera::VideoStream::set_deviceIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::set_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_deviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_handle
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_handle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_hasCamera
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_hasCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_hasCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.Acquire
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Acquire() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.Release
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_TrackedObject
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TrackedObject.get_isValid
bool GlobalNamespace::SteamVR_TrackedObject::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::get_isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.set_isValid
void GlobalNamespace::SteamVR_TrackedObject::set_isValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::set_isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedObject.OnNewPoses
void GlobalNamespace::SteamVR_TrackedObject::OnNewPoses(::Array<Valve::VR::TrackedDevicePose_t>* poses) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::OnNewPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNewPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poses)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, poses);
}
// Autogenerated method: SteamVR_TrackedObject.OnEnable
void GlobalNamespace::SteamVR_TrackedObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.OnDisable
void GlobalNamespace::SteamVR_TrackedObject::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.SetDeviceIndex
void GlobalNamespace::SteamVR_TrackedObject::SetDeviceIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::SetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedObject/EIndex
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex None
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "None"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex None
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_None(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "None", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Hmd
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Hmd() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Hmd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Hmd"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Hmd
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Hmd(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Hmd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Hmd", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device1
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device1"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device1
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device1(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device1", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device2
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device2"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device2
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device2(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device2", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device3
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device3"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device3
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device3(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device3", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device4
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device4"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device4
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device4(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device4", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device5
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device5"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device5
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device5(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device5", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device6
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device6() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device6"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device6
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device6(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device6", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device7
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device7() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device7"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device7
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device7(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device7", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device8
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device8() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device8"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device8
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device8(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device8", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device9
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device9");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device9"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device9
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device9(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device9");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device9", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device10
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device10() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device10");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device10"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device10
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device10(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device10");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device10", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device11
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device11() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device11");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device11"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device11
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device11(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device11");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device11", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device12
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device12() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device12"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device12
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device12(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device12", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device13
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device13() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device13");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device13"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device13
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device13(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device13");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device13", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device14
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device14() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device14");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device14"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device14
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device14(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device14");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device14", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device15
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device15() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device15");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device15"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device15
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device15(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device15");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device15", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_UpdatePoses
#include "GlobalNamespace/SteamVR_UpdatePoses.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_UpdatePoses.Awake
void GlobalNamespace::SteamVR_UpdatePoses::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_UpdatePoses::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils
#include "GlobalNamespace/SteamVR_Utils.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: SteamVR_Utils/SystemFn
#include "GlobalNamespace/SteamVR_Utils_SystemFn.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils.Slerp
UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::Slerp(UnityEngine::Quaternion A, UnityEngine::Quaternion B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Slerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Slerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::Lerp(UnityEngine::Vector3 A, UnityEngine::Vector3 B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
float GlobalNamespace::SteamVR_Utils::Lerp(float A, float B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
double GlobalNamespace::SteamVR_Utils::Lerp(double A, double B, double t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(UnityEngine::Vector3 A, UnityEngine::Vector3 B, UnityEngine::Vector3 result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(float A, float B, float result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
double GlobalNamespace::SteamVR_Utils::InverseLerp(double A, double B, double result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.Saturate
float GlobalNamespace::SteamVR_Utils::Saturate(float A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Saturate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Saturate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Saturate
UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Saturate(UnityEngine::Vector2 A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Saturate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Saturate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Abs
float GlobalNamespace::SteamVR_Utils::Abs(float A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Abs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Abs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Abs
UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Abs(UnityEngine::Vector2 A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Abs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Abs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils._copysign
float GlobalNamespace::SteamVR_Utils::_copysign(float sizeval, float signval) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::_copysign");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "_copysign", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sizeval), ::il2cpp_utils::ExtractType(signval)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sizeval, signval);
}
// Autogenerated method: SteamVR_Utils.GetRotation
UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::GetRotation(UnityEngine::Matrix4x4 matrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(matrix)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, matrix);
}
// Autogenerated method: SteamVR_Utils.GetPosition
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetPosition(UnityEngine::Matrix4x4 matrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::GetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(matrix)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, matrix);
}
// Autogenerated method: SteamVR_Utils.GetScale
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetScale(UnityEngine::Matrix4x4 m) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::GetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m);
}
// Autogenerated method: SteamVR_Utils.CallSystemFn
::Il2CppObject* GlobalNamespace::SteamVR_Utils::CallSystemFn(GlobalNamespace::SteamVR_Utils::SystemFn* fn, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::CallSystemFn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "CallSystemFn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fn), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fn, args);
}
// Creating initializer_list -> params proxy for: System.Object CallSystemFn(SteamVR_Utils/SystemFn fn, params System.Object[] args)
::Il2CppObject* GlobalNamespace::SteamVR_Utils::CallSystemFn(GlobalNamespace::SteamVR_Utils::SystemFn* fn, std::initializer_list<::Il2CppObject*> args) {
  return GlobalNamespace::SteamVR_Utils::CallSystemFn(fn, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: SteamVR_Utils.TakeStereoScreenshot
void GlobalNamespace::SteamVR_Utils::TakeStereoScreenshot(uint screenshotHandle, UnityEngine::GameObject* target, int cellSize, float ipd, ::Il2CppString*& previewFilename, ::Il2CppString*& VRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::TakeStereoScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "TakeStereoScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(cellSize), ::il2cpp_utils::ExtractType(ipd), ::il2cpp_utils::ExtractType(previewFilename), ::il2cpp_utils::ExtractType(VRFilename)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, screenshotHandle, target, cellSize, ipd, previewFilename, VRFilename);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils/RigidTransform.get_identity
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::get_identity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::get_identity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "get_identity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.FromLocal
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::FromLocal(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::FromLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "FromLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.ToHmdMatrix44
Valve::VR::HmdMatrix44_t GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix44() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix44");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToHmdMatrix44", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix44_t, false>(*this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.ToHmdMatrix34
Valve::VR::HmdMatrix34_t GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix34() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix34");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToHmdMatrix34", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(*this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Inverse
void GlobalNamespace::SteamVR_Utils::RigidTransform::Inverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::Inverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Inverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.GetInverse
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::GetInverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::GetInverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetInverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(*this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Multiply
void GlobalNamespace::SteamVR_Utils::RigidTransform::Multiply(GlobalNamespace::SteamVR_Utils::RigidTransform a, GlobalNamespace::SteamVR_Utils::RigidTransform b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.InverseTransformPoint
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::RigidTransform::InverseTransformPoint(UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::InverseTransformPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InverseTransformPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method, point);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.TransformPoint
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::RigidTransform::TransformPoint(UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::TransformPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TransformPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method, point);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Interpolate
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate(GlobalNamespace::SteamVR_Utils::RigidTransform a, GlobalNamespace::SteamVR_Utils::RigidTransform b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Interpolate
void GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate(GlobalNamespace::SteamVR_Utils::RigidTransform to, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, to, t);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Equals
bool GlobalNamespace::SteamVR_Utils::RigidTransform::Equals(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, o);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.GetHashCode
int GlobalNamespace::SteamVR_Utils::RigidTransform::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Multiply
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::operator*(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Multiply
UnityEngine::Vector3 GlobalNamespace::operator*(const GlobalNamespace::SteamVR_Utils::RigidTransform& t, const UnityEngine::Vector3& v) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, v);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils/SystemFn
#include "GlobalNamespace/SteamVR_Utils_SystemFn.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils/SystemFn.Invoke
::Il2CppObject* GlobalNamespace::SteamVR_Utils::SystemFn::Invoke(Valve::VR::CVRSystem* system, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::SystemFn::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, system, args);
}
// Creating initializer_list -> params proxy for: System.Object Invoke(Valve.VR.CVRSystem system, params System.Object[] args)
::Il2CppObject* GlobalNamespace::SteamVR_Utils::SystemFn::Invoke(Valve::VR::CVRSystem* system, std::initializer_list<::Il2CppObject*> args) {
  return GlobalNamespace::SteamVR_Utils::SystemFn::Invoke(system, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: SteamVR_Utils/SystemFn.BeginInvoke
System::IAsyncResult* GlobalNamespace::SteamVR_Utils::SystemFn::BeginInvoke(Valve::VR::CVRSystem* system, ::Array<::Il2CppObject*>* args, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::SystemFn::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, system, args, callback, object);
}
// Autogenerated method: SteamVR_Utils/SystemFn.EndInvoke
::Il2CppObject* GlobalNamespace::SteamVR_Utils::SystemFn::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::SystemFn::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetRecommendedRenderTargetSize
#include "Valve/VR/IVRSystem__GetRecommendedRenderTargetSize.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetRecommendedRenderTargetSize.Invoke
void Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::Invoke(uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetRecommendedRenderTargetSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::BeginInvoke(uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetRecommendedRenderTargetSize.EndInvoke
void Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::EndInvoke(uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetProjectionMatrix
#include "Valve/VR/IVRSystem__GetProjectionMatrix.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionMatrix.Invoke
Valve::VR::HmdMatrix44_t Valve::VR::IVRSystem::_GetProjectionMatrix::Invoke(Valve::VR::EVREye eEye, float fNearZ, float fFarZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionMatrix::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(fNearZ), ::il2cpp_utils::ExtractType(fFarZ)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix44_t, false>(this, ___internal__method, eEye, fNearZ, fFarZ);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionMatrix.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetProjectionMatrix::BeginInvoke(Valve::VR::EVREye eEye, float fNearZ, float fFarZ, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionMatrix::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(fNearZ), ::il2cpp_utils::ExtractType(fFarZ), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, fNearZ, fFarZ, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionMatrix.EndInvoke
Valve::VR::HmdMatrix44_t Valve::VR::IVRSystem::_GetProjectionMatrix::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionMatrix::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix44_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetProjectionRaw
#include "Valve/VR/IVRSystem__GetProjectionRaw.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionRaw.Invoke
void Valve::VR::IVRSystem::_GetProjectionRaw::Invoke(Valve::VR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionRaw::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pfLeft), ::il2cpp_utils::ExtractType(pfRight), ::il2cpp_utils::ExtractType(pfTop), ::il2cpp_utils::ExtractType(pfBottom)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pfLeft, pfRight, pfTop, pfBottom);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionRaw.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetProjectionRaw::BeginInvoke(Valve::VR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionRaw::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pfLeft), ::il2cpp_utils::ExtractType(pfRight), ::il2cpp_utils::ExtractType(pfTop), ::il2cpp_utils::ExtractType(pfBottom), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, pfLeft, pfRight, pfTop, pfBottom, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionRaw.EndInvoke
void Valve::VR::IVRSystem::_GetProjectionRaw::EndInvoke(float& pfLeft, float& pfRight, float& pfTop, float& pfBottom, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionRaw::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pfLeft), ::il2cpp_utils::ExtractType(pfRight), ::il2cpp_utils::ExtractType(pfTop), ::il2cpp_utils::ExtractType(pfBottom), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pfLeft, pfRight, pfTop, pfBottom, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_ComputeDistortion
#include "Valve/VR/IVRSystem__ComputeDistortion.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: Valve.VR.DistortionCoordinates_t
#include "Valve/VR/DistortionCoordinates_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_ComputeDistortion.Invoke
bool Valve::VR::IVRSystem::_ComputeDistortion::Invoke(Valve::VR::EVREye eEye, float fU, float fV, Valve::VR::DistortionCoordinates_t& pDistortionCoordinates) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ComputeDistortion::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(fU), ::il2cpp_utils::ExtractType(fV), ::il2cpp_utils::ExtractType(pDistortionCoordinates)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eEye, fU, fV, pDistortionCoordinates);
}
// Autogenerated method: Valve.VR.IVRSystem/_ComputeDistortion.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_ComputeDistortion::BeginInvoke(Valve::VR::EVREye eEye, float fU, float fV, Valve::VR::DistortionCoordinates_t& pDistortionCoordinates, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ComputeDistortion::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(fU), ::il2cpp_utils::ExtractType(fV), ::il2cpp_utils::ExtractType(pDistortionCoordinates), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, fU, fV, pDistortionCoordinates, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_ComputeDistortion.EndInvoke
bool Valve::VR::IVRSystem::_ComputeDistortion::EndInvoke(Valve::VR::DistortionCoordinates_t& pDistortionCoordinates, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ComputeDistortion::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDistortionCoordinates), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pDistortionCoordinates, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetEyeToHeadTransform
#include "Valve/VR/IVRSystem__GetEyeToHeadTransform.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetEyeToHeadTransform.Invoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetEyeToHeadTransform::Invoke(Valve::VR::EVREye eEye) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEyeToHeadTransform::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, eEye);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetEyeToHeadTransform.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetEyeToHeadTransform::BeginInvoke(Valve::VR::EVREye eEye, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEyeToHeadTransform::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetEyeToHeadTransform.EndInvoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetEyeToHeadTransform::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEyeToHeadTransform::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetTimeSinceLastVsync
#include "Valve/VR/IVRSystem__GetTimeSinceLastVsync.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetTimeSinceLastVsync.Invoke
bool Valve::VR::IVRSystem::_GetTimeSinceLastVsync::Invoke(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTimeSinceLastVsync::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pfSecondsSinceLastVsync), ::il2cpp_utils::ExtractType(pulFrameCounter)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTimeSinceLastVsync.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetTimeSinceLastVsync::BeginInvoke(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTimeSinceLastVsync::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pfSecondsSinceLastVsync), ::il2cpp_utils::ExtractType(pulFrameCounter), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTimeSinceLastVsync.EndInvoke
bool Valve::VR::IVRSystem::_GetTimeSinceLastVsync::EndInvoke(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTimeSinceLastVsync::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pfSecondsSinceLastVsync), ::il2cpp_utils::ExtractType(pulFrameCounter), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetD3D9AdapterIndex
#include "Valve/VR/IVRSystem__GetD3D9AdapterIndex.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetD3D9AdapterIndex.Invoke
int Valve::VR::IVRSystem::_GetD3D9AdapterIndex::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetD3D9AdapterIndex::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetD3D9AdapterIndex.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetD3D9AdapterIndex::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetD3D9AdapterIndex::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetD3D9AdapterIndex.EndInvoke
int Valve::VR::IVRSystem::_GetD3D9AdapterIndex::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetD3D9AdapterIndex::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetDXGIOutputInfo
#include "Valve/VR/IVRSystem__GetDXGIOutputInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetDXGIOutputInfo.Invoke
void Valve::VR::IVRSystem::_GetDXGIOutputInfo::Invoke(int& pnAdapterIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDXGIOutputInfo::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetDXGIOutputInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetDXGIOutputInfo::BeginInvoke(int& pnAdapterIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDXGIOutputInfo::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnAdapterIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetDXGIOutputInfo.EndInvoke
void Valve::VR::IVRSystem::_GetDXGIOutputInfo::EndInvoke(int& pnAdapterIndex, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDXGIOutputInfo::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetOutputDevice
#include "Valve/VR/IVRSystem__GetOutputDevice.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetOutputDevice.Invoke
void Valve::VR::IVRSystem::_GetOutputDevice::Invoke(uint64_t& pnDevice, Valve::VR::ETextureType textureType, System::IntPtr pInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetOutputDevice::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnDevice), ::il2cpp_utils::ExtractType(textureType), ::il2cpp_utils::ExtractType(pInstance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnDevice, textureType, pInstance);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetOutputDevice.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetOutputDevice::BeginInvoke(uint64_t& pnDevice, Valve::VR::ETextureType textureType, System::IntPtr pInstance, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetOutputDevice::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnDevice), ::il2cpp_utils::ExtractType(textureType), ::il2cpp_utils::ExtractType(pInstance), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnDevice, textureType, pInstance, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetOutputDevice.EndInvoke
void Valve::VR::IVRSystem::_GetOutputDevice::EndInvoke(uint64_t& pnDevice, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetOutputDevice::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnDevice), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnDevice, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_IsDisplayOnDesktop
#include "Valve/VR/IVRSystem__IsDisplayOnDesktop.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_IsDisplayOnDesktop.Invoke
bool Valve::VR::IVRSystem::_IsDisplayOnDesktop::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsDisplayOnDesktop::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsDisplayOnDesktop.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_IsDisplayOnDesktop::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsDisplayOnDesktop::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsDisplayOnDesktop.EndInvoke
bool Valve::VR::IVRSystem::_IsDisplayOnDesktop::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsDisplayOnDesktop::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_SetDisplayVisibility
#include "Valve/VR/IVRSystem__SetDisplayVisibility.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_SetDisplayVisibility.Invoke
bool Valve::VR::IVRSystem::_SetDisplayVisibility::Invoke(bool bIsVisibleOnDesktop) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_SetDisplayVisibility::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bIsVisibleOnDesktop)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bIsVisibleOnDesktop);
}
// Autogenerated method: Valve.VR.IVRSystem/_SetDisplayVisibility.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_SetDisplayVisibility::BeginInvoke(bool bIsVisibleOnDesktop, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_SetDisplayVisibility::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bIsVisibleOnDesktop), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bIsVisibleOnDesktop, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_SetDisplayVisibility.EndInvoke
bool Valve::VR::IVRSystem::_SetDisplayVisibility::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_SetDisplayVisibility::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetDeviceToAbsoluteTrackingPose
#include "Valve/VR/IVRSystem__GetDeviceToAbsoluteTrackingPose.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetDeviceToAbsoluteTrackingPose.Invoke
void Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::Invoke(Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<Valve::VR::TrackedDevicePose_t>*& pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsToPhotonsFromNow), ::il2cpp_utils::ExtractType(pTrackedDevicePoseArray), ::il2cpp_utils::ExtractType(unTrackedDevicePoseArrayCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray, unTrackedDevicePoseArrayCount);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetDeviceToAbsoluteTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::BeginInvoke(Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<Valve::VR::TrackedDevicePose_t>*& pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsToPhotonsFromNow), ::il2cpp_utils::ExtractType(pTrackedDevicePoseArray), ::il2cpp_utils::ExtractType(unTrackedDevicePoseArrayCount), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray, unTrackedDevicePoseArrayCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetDeviceToAbsoluteTrackingPose.EndInvoke
void Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_ResetSeatedZeroPose
#include "Valve/VR/IVRSystem__ResetSeatedZeroPose.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_ResetSeatedZeroPose.Invoke
void Valve::VR::IVRSystem::_ResetSeatedZeroPose::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ResetSeatedZeroPose::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_ResetSeatedZeroPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_ResetSeatedZeroPose::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ResetSeatedZeroPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_ResetSeatedZeroPose.EndInvoke
void Valve::VR::IVRSystem::_ResetSeatedZeroPose::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ResetSeatedZeroPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose
#include "Valve/VR/IVRSystem__GetSeatedZeroPoseToStandingAbsoluteTrackingPose.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose.Invoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose.EndInvoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose
#include "Valve/VR/IVRSystem__GetRawZeroPoseToStandingAbsoluteTrackingPose.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose.Invoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose.EndInvoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass
#include "Valve/VR/IVRSystem__GetSortedTrackedDeviceIndicesOfClass.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass.Invoke
uint Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::Invoke(Valve::VR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>*& punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTrackedDeviceClass), ::il2cpp_utils::ExtractType(punTrackedDeviceIndexArray), ::il2cpp_utils::ExtractType(unTrackedDeviceIndexArrayCount), ::il2cpp_utils::ExtractType(unRelativeToTrackedDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unTrackedDeviceIndexArrayCount, unRelativeToTrackedDeviceIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::BeginInvoke(Valve::VR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>*& punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTrackedDeviceClass), ::il2cpp_utils::ExtractType(punTrackedDeviceIndexArray), ::il2cpp_utils::ExtractType(unTrackedDeviceIndexArrayCount), ::il2cpp_utils::ExtractType(unRelativeToTrackedDeviceIndex), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unTrackedDeviceIndexArrayCount, unRelativeToTrackedDeviceIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass.EndInvoke
uint Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetTrackedDeviceActivityLevel
#include "Valve/VR/IVRSystem__GetTrackedDeviceActivityLevel.hpp"
// Including type: Valve.VR.EDeviceActivityLevel
#include "Valve/VR/EDeviceActivityLevel.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceActivityLevel.Invoke
Valve::VR::EDeviceActivityLevel Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::Invoke(uint unDeviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceId)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EDeviceActivityLevel, false>(this, ___internal__method, unDeviceId);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceActivityLevel.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::BeginInvoke(uint unDeviceId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceId), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceId, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceActivityLevel.EndInvoke
Valve::VR::EDeviceActivityLevel Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EDeviceActivityLevel, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_ApplyTransform
#include "Valve/VR/IVRSystem__ApplyTransform.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_ApplyTransform.Invoke
void Valve::VR::IVRSystem::_ApplyTransform::Invoke(Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, Valve::VR::HmdMatrix34_t& pTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ApplyTransform::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutputPose), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(pTransform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform);
}
// Autogenerated method: Valve.VR.IVRSystem/_ApplyTransform.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_ApplyTransform::BeginInvoke(Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, Valve::VR::HmdMatrix34_t& pTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ApplyTransform::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutputPose), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(pTransform), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_ApplyTransform.EndInvoke
void Valve::VR::IVRSystem::_ApplyTransform::EndInvoke(Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, Valve::VR::HmdMatrix34_t& pTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ApplyTransform::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutputPose), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(pTransform), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetTrackedDeviceIndexForControllerRole
#include "Valve/VR/IVRSystem__GetTrackedDeviceIndexForControllerRole.hpp"
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceIndexForControllerRole.Invoke
uint Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::Invoke(Valve::VR::ETrackedControllerRole unDeviceType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceType)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceType);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceIndexForControllerRole.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::BeginInvoke(Valve::VR::ETrackedControllerRole unDeviceType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceType), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceType, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceIndexForControllerRole.EndInvoke
uint Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex
#include "Valve/VR/IVRSystem__GetControllerRoleForTrackedDeviceIndex.hpp"
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex.Invoke
Valve::VR::ETrackedControllerRole Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::Invoke(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedControllerRole, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::BeginInvoke(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex.EndInvoke
Valve::VR::ETrackedControllerRole Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedControllerRole, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetTrackedDeviceClass
#include "Valve/VR/IVRSystem__GetTrackedDeviceClass.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceClass.Invoke
Valve::VR::ETrackedDeviceClass Valve::VR::IVRSystem::_GetTrackedDeviceClass::Invoke(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceClass::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedDeviceClass, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceClass.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetTrackedDeviceClass::BeginInvoke(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceClass::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceClass.EndInvoke
Valve::VR::ETrackedDeviceClass Valve::VR::IVRSystem::_GetTrackedDeviceClass::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceClass::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedDeviceClass, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_IsTrackedDeviceConnected
#include "Valve/VR/IVRSystem__IsTrackedDeviceConnected.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_IsTrackedDeviceConnected.Invoke
bool Valve::VR::IVRSystem::_IsTrackedDeviceConnected::Invoke(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsTrackedDeviceConnected::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsTrackedDeviceConnected.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_IsTrackedDeviceConnected::BeginInvoke(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsTrackedDeviceConnected::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsTrackedDeviceConnected.EndInvoke
bool Valve::VR::IVRSystem::_IsTrackedDeviceConnected::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsTrackedDeviceConnected::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetBoolTrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetBoolTrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetBoolTrackedDeviceProperty.Invoke
bool Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetBoolTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetBoolTrackedDeviceProperty.EndInvoke
bool Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetFloatTrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetFloatTrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetFloatTrackedDeviceProperty.Invoke
float Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetFloatTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetFloatTrackedDeviceProperty.EndInvoke
float Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetInt32TrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetInt32TrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetInt32TrackedDeviceProperty.Invoke
int Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetInt32TrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetInt32TrackedDeviceProperty.EndInvoke
int Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetUint64TrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetUint64TrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetUint64TrackedDeviceProperty.Invoke
uint64_t Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetUint64TrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetUint64TrackedDeviceProperty.EndInvoke
uint64_t Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetMatrix34TrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetMatrix34TrackedDeviceProperty.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetMatrix34TrackedDeviceProperty.Invoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetMatrix34TrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetMatrix34TrackedDeviceProperty.EndInvoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetArrayTrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetArrayTrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetArrayTrackedDeviceProperty.Invoke
uint Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(propType), ::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetArrayTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(propType), ::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetArrayTrackedDeviceProperty.EndInvoke
uint Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetStringTrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetStringTrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetStringTrackedDeviceProperty.Invoke
uint Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetStringTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetStringTrackedDeviceProperty.EndInvoke
uint Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetPropErrorNameFromEnum
#include "Valve/VR/IVRSystem__GetPropErrorNameFromEnum.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetPropErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::Invoke(Valve::VR::ETrackedPropertyError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetPropErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::BeginInvoke(Valve::VR::ETrackedPropertyError error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetPropErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_PollNextEvent
#include "Valve/VR/IVRSystem__PollNextEvent.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEvent.Invoke
bool Valve::VR::IVRSystem::_PollNextEvent::Invoke(Valve::VR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEvent.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_PollNextEvent::BeginInvoke(Valve::VR::VREvent_t& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEvent.EndInvoke
bool Valve::VR::IVRSystem::_PollNextEvent::EndInvoke(Valve::VR::VREvent_t& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_PollNextEventWithPose
#include "Valve/VR/IVRSystem__PollNextEventWithPose.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEventWithPose.Invoke
bool Valve::VR::IVRSystem::_PollNextEventWithPose::Invoke(Valve::VR::ETrackingUniverseOrigin eOrigin, Valve::VR::VREvent_t& pEvent, uint uncbVREvent, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEventWithPose::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(pTrackedDevicePose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, pEvent, uncbVREvent, pTrackedDevicePose);
}
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEventWithPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_PollNextEventWithPose::BeginInvoke(Valve::VR::ETrackingUniverseOrigin eOrigin, Valve::VR::VREvent_t& pEvent, uint uncbVREvent, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEventWithPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, pEvent, uncbVREvent, pTrackedDevicePose, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEventWithPose.EndInvoke
bool Valve::VR::IVRSystem::_PollNextEventWithPose::EndInvoke(Valve::VR::VREvent_t& pEvent, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEventWithPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, pTrackedDevicePose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetEventTypeNameFromEnum
#include "Valve/VR/IVRSystem__GetEventTypeNameFromEnum.hpp"
// Including type: Valve.VR.EVREventType
#include "Valve/VR/EVREventType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetEventTypeNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::Invoke(Valve::VR::EVREventType eType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eType)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eType);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetEventTypeNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::BeginInvoke(Valve::VR::EVREventType eType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eType), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eType, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetEventTypeNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetHiddenAreaMesh
#include "Valve/VR/IVRSystem__GetHiddenAreaMesh.hpp"
// Including type: Valve.VR.HiddenAreaMesh_t
#include "Valve/VR/HiddenAreaMesh_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: Valve.VR.EHiddenAreaMeshType
#include "Valve/VR/EHiddenAreaMeshType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetHiddenAreaMesh.Invoke
Valve::VR::HiddenAreaMesh_t Valve::VR::IVRSystem::_GetHiddenAreaMesh::Invoke(Valve::VR::EVREye eEye, Valve::VR::EHiddenAreaMeshType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetHiddenAreaMesh::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HiddenAreaMesh_t, false>(this, ___internal__method, eEye, type);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetHiddenAreaMesh.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetHiddenAreaMesh::BeginInvoke(Valve::VR::EVREye eEye, Valve::VR::EHiddenAreaMeshType type, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetHiddenAreaMesh::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, type, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetHiddenAreaMesh.EndInvoke
Valve::VR::HiddenAreaMesh_t Valve::VR::IVRSystem::_GetHiddenAreaMesh::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetHiddenAreaMesh::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HiddenAreaMesh_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetControllerState
#include "Valve/VR/IVRSystem__GetControllerState.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerState.Invoke
bool Valve::VR::IVRSystem::_GetControllerState::Invoke(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerState::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerState.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetControllerState::BeginInvoke(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerState::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerState.EndInvoke
bool Valve::VR::IVRSystem::_GetControllerState::EndInvoke(Valve::VR::VRControllerState_t& pControllerState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerState::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetControllerStateWithPose
#include "Valve/VR/IVRSystem__GetControllerStateWithPose.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerStateWithPose.Invoke
bool Valve::VR::IVRSystem::_GetControllerStateWithPose::Invoke(Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerStateWithPose::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(pTrackedDevicePose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerStateWithPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetControllerStateWithPose::BeginInvoke(Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerStateWithPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerStateWithPose.EndInvoke
bool Valve::VR::IVRSystem::_GetControllerStateWithPose::EndInvoke(Valve::VR::VRControllerState_t& pControllerState, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerStateWithPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pTrackedDevicePose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_TriggerHapticPulse
#include "Valve/VR/IVRSystem__TriggerHapticPulse.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_TriggerHapticPulse.Invoke
void Valve::VR::IVRSystem::_TriggerHapticPulse::Invoke(uint unControllerDeviceIndex, uint unAxisId, ::Il2CppChar usDurationMicroSec) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_TriggerHapticPulse::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(unAxisId), ::il2cpp_utils::ExtractType(usDurationMicroSec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec);
}
// Autogenerated method: Valve.VR.IVRSystem/_TriggerHapticPulse.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_TriggerHapticPulse::BeginInvoke(uint unControllerDeviceIndex, uint unAxisId, ::Il2CppChar usDurationMicroSec, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_TriggerHapticPulse::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(unAxisId), ::il2cpp_utils::ExtractType(usDurationMicroSec), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_TriggerHapticPulse.EndInvoke
void Valve::VR::IVRSystem::_TriggerHapticPulse::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_TriggerHapticPulse::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetButtonIdNameFromEnum
#include "Valve/VR/IVRSystem__GetButtonIdNameFromEnum.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetButtonIdNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::Invoke(Valve::VR::EVRButtonId eButtonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eButtonId)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eButtonId);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetButtonIdNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::BeginInvoke(Valve::VR::EVRButtonId eButtonId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eButtonId), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eButtonId, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetButtonIdNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetControllerAxisTypeNameFromEnum
#include "Valve/VR/IVRSystem__GetControllerAxisTypeNameFromEnum.hpp"
// Including type: Valve.VR.EVRControllerAxisType
#include "Valve/VR/EVRControllerAxisType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerAxisTypeNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::Invoke(Valve::VR::EVRControllerAxisType eAxisType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eAxisType)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eAxisType);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerAxisTypeNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::BeginInvoke(Valve::VR::EVRControllerAxisType eAxisType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eAxisType), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eAxisType, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerAxisTypeNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_IsInputAvailable
#include "Valve/VR/IVRSystem__IsInputAvailable.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_IsInputAvailable.Invoke
bool Valve::VR::IVRSystem::_IsInputAvailable::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsInputAvailable::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsInputAvailable.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_IsInputAvailable::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsInputAvailable::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsInputAvailable.EndInvoke
bool Valve::VR::IVRSystem::_IsInputAvailable::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsInputAvailable::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_IsSteamVRDrawingControllers
#include "Valve/VR/IVRSystem__IsSteamVRDrawingControllers.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_IsSteamVRDrawingControllers.Invoke
bool Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsSteamVRDrawingControllers.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsSteamVRDrawingControllers.EndInvoke
bool Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_ShouldApplicationPause
#include "Valve/VR/IVRSystem__ShouldApplicationPause.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationPause.Invoke
bool Valve::VR::IVRSystem::_ShouldApplicationPause::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationPause::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationPause.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_ShouldApplicationPause::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationPause::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationPause.EndInvoke
bool Valve::VR::IVRSystem::_ShouldApplicationPause::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationPause::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_ShouldApplicationReduceRenderingWork
#include "Valve/VR/IVRSystem__ShouldApplicationReduceRenderingWork.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationReduceRenderingWork.Invoke
bool Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationReduceRenderingWork.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationReduceRenderingWork.EndInvoke
bool Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_DriverDebugRequest
#include "Valve/VR/IVRSystem__DriverDebugRequest.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_DriverDebugRequest.Invoke
uint Valve::VR::IVRSystem::_DriverDebugRequest::Invoke(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_DriverDebugRequest::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pchRequest), ::il2cpp_utils::ExtractType(pchResponseBuffer), ::il2cpp_utils::ExtractType(unResponseBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize);
}
// Autogenerated method: Valve.VR.IVRSystem/_DriverDebugRequest.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_DriverDebugRequest::BeginInvoke(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_DriverDebugRequest::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pchRequest), ::il2cpp_utils::ExtractType(pchResponseBuffer), ::il2cpp_utils::ExtractType(unResponseBufferSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_DriverDebugRequest.EndInvoke
uint Valve::VR::IVRSystem::_DriverDebugRequest::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_DriverDebugRequest::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_PerformFirmwareUpdate
#include "Valve/VR/IVRSystem__PerformFirmwareUpdate.hpp"
// Including type: Valve.VR.EVRFirmwareError
#include "Valve/VR/EVRFirmwareError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_PerformFirmwareUpdate.Invoke
Valve::VR::EVRFirmwareError Valve::VR::IVRSystem::_PerformFirmwareUpdate::Invoke(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PerformFirmwareUpdate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRFirmwareError, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_PerformFirmwareUpdate.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_PerformFirmwareUpdate::BeginInvoke(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PerformFirmwareUpdate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_PerformFirmwareUpdate.EndInvoke
Valve::VR::EVRFirmwareError Valve::VR::IVRSystem::_PerformFirmwareUpdate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PerformFirmwareUpdate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRFirmwareError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_AcknowledgeQuit_Exiting
#include "Valve/VR/IVRSystem__AcknowledgeQuit_Exiting.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_Exiting.Invoke
void Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_Exiting.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_Exiting.EndInvoke
void Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_AcknowledgeQuit_UserPrompt
#include "Valve/VR/IVRSystem__AcknowledgeQuit_UserPrompt.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_UserPrompt.Invoke
void Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_UserPrompt.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_UserPrompt.EndInvoke
void Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRExtendedDisplay/_GetWindowBounds
#include "Valve/VR/IVRExtendedDisplay__GetWindowBounds.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetWindowBounds.Invoke
void Valve::VR::IVRExtendedDisplay::_GetWindowBounds::Invoke(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetWindowBounds::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetWindowBounds.BeginInvoke
System::IAsyncResult* Valve::VR::IVRExtendedDisplay::_GetWindowBounds::BeginInvoke(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetWindowBounds::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetWindowBounds.EndInvoke
void Valve::VR::IVRExtendedDisplay::_GetWindowBounds::EndInvoke(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetWindowBounds::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRExtendedDisplay/_GetEyeOutputViewport
#include "Valve/VR/IVRExtendedDisplay__GetEyeOutputViewport.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetEyeOutputViewport.Invoke
void Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::Invoke(Valve::VR::EVREye eEye, uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetEyeOutputViewport.BeginInvoke
System::IAsyncResult* Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::BeginInvoke(Valve::VR::EVREye eEye, uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, pnX, pnY, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetEyeOutputViewport.EndInvoke
void Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::EndInvoke(uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRExtendedDisplay/_GetDXGIOutputInfo
#include "Valve/VR/IVRExtendedDisplay__GetDXGIOutputInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetDXGIOutputInfo.Invoke
void Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::Invoke(int& pnAdapterIndex, int& pnAdapterOutputIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex), ::il2cpp_utils::ExtractType(pnAdapterOutputIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetDXGIOutputInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::BeginInvoke(int& pnAdapterIndex, int& pnAdapterOutputIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex), ::il2cpp_utils::ExtractType(pnAdapterOutputIndex), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetDXGIOutputInfo.EndInvoke
void Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::EndInvoke(int& pnAdapterIndex, int& pnAdapterOutputIndex, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex), ::il2cpp_utils::ExtractType(pnAdapterOutputIndex), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetCameraErrorNameFromEnum
#include "Valve/VR/IVRTrackedCamera__GetCameraErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::Invoke(Valve::VR::EVRTrackedCameraError eCameraError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eCameraError)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eCameraError);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::BeginInvoke(Valve::VR::EVRTrackedCameraError eCameraError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eCameraError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eCameraError, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_HasCamera
#include "Valve/VR/IVRTrackedCamera__HasCamera.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_HasCamera.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_HasCamera::Invoke(uint nDeviceIndex, bool& pHasCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_HasCamera::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(pHasCamera)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHasCamera);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_HasCamera.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_HasCamera::BeginInvoke(uint nDeviceIndex, bool& pHasCamera, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_HasCamera::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(pHasCamera), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, pHasCamera, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_HasCamera.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_HasCamera::EndInvoke(bool& pHasCamera, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_HasCamera::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pHasCamera), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pHasCamera, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetCameraFrameSize
#include "Valve/VR/IVRTrackedCamera__GetCameraFrameSize.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraFrameSize.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::Invoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(pnFrameBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraFrameSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::BeginInvoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(pnFrameBufferSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraFrameSize.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::EndInvoke(uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(pnFrameBufferSize), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pnWidth, pnHeight, pnFrameBufferSize, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetCameraIntrinsics
#include "Valve/VR/IVRTrackedCamera__GetCameraIntrinsics.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraIntrinsics.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::Invoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, Valve::VR::HmdVector2_t& pFocalLength, Valve::VR::HmdVector2_t& pCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pFocalLength), ::il2cpp_utils::ExtractType(pCenter)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pFocalLength, pCenter);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraIntrinsics.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::BeginInvoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, Valve::VR::HmdVector2_t& pFocalLength, Valve::VR::HmdVector2_t& pCenter, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pFocalLength), ::il2cpp_utils::ExtractType(pCenter), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, pFocalLength, pCenter, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraIntrinsics.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::EndInvoke(Valve::VR::HmdVector2_t& pFocalLength, Valve::VR::HmdVector2_t& pCenter, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pFocalLength), ::il2cpp_utils::ExtractType(pCenter), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pFocalLength, pCenter, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetCameraProjection
#include "Valve/VR/IVRTrackedCamera__GetCameraProjection.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraProjection.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraProjection::Invoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, Valve::VR::HmdMatrix44_t& pProjection) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraProjection::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(flZNear), ::il2cpp_utils::ExtractType(flZFar), ::il2cpp_utils::ExtractType(pProjection)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, flZNear, flZFar, pProjection);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraProjection.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetCameraProjection::BeginInvoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, Valve::VR::HmdMatrix44_t& pProjection, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraProjection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(flZNear), ::il2cpp_utils::ExtractType(flZFar), ::il2cpp_utils::ExtractType(pProjection), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, flZNear, flZFar, pProjection, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraProjection.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraProjection::EndInvoke(Valve::VR::HmdMatrix44_t& pProjection, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraProjection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pProjection), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pProjection, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_AcquireVideoStreamingService
#include "Valve/VR/IVRTrackedCamera__AcquireVideoStreamingService.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_AcquireVideoStreamingService.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::Invoke(uint nDeviceIndex, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHandle);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_AcquireVideoStreamingService.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::BeginInvoke(uint nDeviceIndex, uint64_t& pHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, pHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_AcquireVideoStreamingService.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::EndInvoke(uint64_t& pHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamingService
#include "Valve/VR/IVRTrackedCamera__ReleaseVideoStreamingService.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamingService.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::Invoke(uint64_t hTrackedCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamingService.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::BeginInvoke(uint64_t hTrackedCamera, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamingService.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetVideoStreamFrameBuffer
#include "Valve/VR/IVRTrackedCamera__GetVideoStreamFrameBuffer.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.CameraVideoStreamFrameHeader_t
#include "Valve/VR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamFrameBuffer.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::Invoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pFrameBuffer, uint nFrameBufferSize, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pFrameBuffer), ::il2cpp_utils::ExtractType(nFrameBufferSize), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamFrameBuffer.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::BeginInvoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pFrameBuffer, uint nFrameBufferSize, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pFrameBuffer), ::il2cpp_utils::ExtractType(nFrameBufferSize), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamFrameBuffer.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::EndInvoke(Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pFrameHeader, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureSize
#include "Valve/VR/IVRTrackedCamera__GetVideoStreamTextureSize.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureSize.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::Invoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, Valve::VR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pTextureBounds), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::BeginInvoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, Valve::VR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pTextureBounds), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureSize.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::EndInvoke(Valve::VR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTextureBounds), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pTextureBounds, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureD3D11
#include "Valve/VR/IVRTrackedCamera__GetVideoStreamTextureD3D11.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.CameraVideoStreamFrameHeader_t
#include "Valve/VR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureD3D11.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::Invoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pD3D11DeviceOrResource), ::il2cpp_utils::ExtractType(ppD3D11ShaderResourceView), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureD3D11.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::BeginInvoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pD3D11DeviceOrResource), ::il2cpp_utils::ExtractType(ppD3D11ShaderResourceView), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureD3D11.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::EndInvoke(System::IntPtr& ppD3D11ShaderResourceView, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ppD3D11ShaderResourceView), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, ppD3D11ShaderResourceView, pFrameHeader, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureGL
#include "Valve/VR/IVRTrackedCamera__GetVideoStreamTextureGL.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.CameraVideoStreamFrameHeader_t
#include "Valve/VR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureGL.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::Invoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, uint& pglTextureId, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pglTextureId), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureGL.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::BeginInvoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, uint& pglTextureId, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pglTextureId), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureGL.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::EndInvoke(uint& pglTextureId, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pglTextureId), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pglTextureId, pFrameHeader, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL
#include "Valve/VR/IVRTrackedCamera__ReleaseVideoStreamTextureGL.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::Invoke(uint64_t hTrackedCamera, uint glTextureId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(glTextureId)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, glTextureId);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::BeginInvoke(uint64_t hTrackedCamera, uint glTextureId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(glTextureId), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, glTextureId, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_AddApplicationManifest
#include "Valve/VR/IVRApplications__AddApplicationManifest.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_AddApplicationManifest.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_AddApplicationManifest::Invoke(::Il2CppString* pchApplicationManifestFullPath, bool bTemporary) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_AddApplicationManifest::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath), ::il2cpp_utils::ExtractType(bTemporary)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary);
}
// Autogenerated method: Valve.VR.IVRApplications/_AddApplicationManifest.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_AddApplicationManifest::BeginInvoke(::Il2CppString* pchApplicationManifestFullPath, bool bTemporary, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_AddApplicationManifest::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath), ::il2cpp_utils::ExtractType(bTemporary), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_AddApplicationManifest.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_AddApplicationManifest::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_AddApplicationManifest::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_RemoveApplicationManifest
#include "Valve/VR/IVRApplications__RemoveApplicationManifest.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_RemoveApplicationManifest.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_RemoveApplicationManifest::Invoke(::Il2CppString* pchApplicationManifestFullPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_RemoveApplicationManifest::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath);
}
// Autogenerated method: Valve.VR.IVRApplications/_RemoveApplicationManifest.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_RemoveApplicationManifest::BeginInvoke(::Il2CppString* pchApplicationManifestFullPath, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_RemoveApplicationManifest::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchApplicationManifestFullPath, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_RemoveApplicationManifest.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_RemoveApplicationManifest::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_RemoveApplicationManifest::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_IsApplicationInstalled
#include "Valve/VR/IVRApplications__IsApplicationInstalled.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_IsApplicationInstalled.Invoke
bool Valve::VR::IVRApplications::_IsApplicationInstalled::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IsApplicationInstalled::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_IsApplicationInstalled.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_IsApplicationInstalled::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IsApplicationInstalled::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_IsApplicationInstalled.EndInvoke
bool Valve::VR::IVRApplications::_IsApplicationInstalled::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IsApplicationInstalled::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationCount
#include "Valve/VR/IVRApplications__GetApplicationCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationCount.Invoke
uint Valve::VR::IVRApplications::_GetApplicationCount::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationCount::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationCount.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationCount::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationCount::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationCount.EndInvoke
uint Valve::VR::IVRApplications::_GetApplicationCount::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationCount::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationKeyByIndex
#include "Valve/VR/IVRApplications__GetApplicationKeyByIndex.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByIndex.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_GetApplicationKeyByIndex::Invoke(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByIndex::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unApplicationIndex), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByIndex.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationKeyByIndex::BeginInvoke(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByIndex::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unApplicationIndex), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByIndex.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_GetApplicationKeyByIndex::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByIndex::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationKeyByProcessId
#include "Valve/VR/IVRApplications__GetApplicationKeyByProcessId.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByProcessId.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::Invoke(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByProcessId.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::BeginInvoke(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByProcessId.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_LaunchApplication
#include "Valve/VR/IVRApplications__LaunchApplication.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplication.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchApplication::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplication::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplication.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_LaunchApplication::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplication::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplication.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchApplication::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplication::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_LaunchTemplateApplication
#include "Valve/VR/IVRApplications__LaunchTemplateApplication.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_LaunchTemplateApplication.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchTemplateApplication::Invoke(::Il2CppString* pchTemplateAppKey, ::Il2CppString* pchNewAppKey, ::Array<Valve::VR::AppOverrideKeys_t>*& pKeys, uint unKeys) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchTemplateApplication::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchTemplateAppKey), ::il2cpp_utils::ExtractType(pchNewAppKey), ::il2cpp_utils::ExtractType(pKeys), ::il2cpp_utils::ExtractType(unKeys)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys, unKeys);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchTemplateApplication.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_LaunchTemplateApplication::BeginInvoke(::Il2CppString* pchTemplateAppKey, ::Il2CppString* pchNewAppKey, ::Array<Valve::VR::AppOverrideKeys_t>*& pKeys, uint unKeys, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchTemplateApplication::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchTemplateAppKey), ::il2cpp_utils::ExtractType(pchNewAppKey), ::il2cpp_utils::ExtractType(pKeys), ::il2cpp_utils::ExtractType(unKeys), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys, unKeys, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchTemplateApplication.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchTemplateApplication::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchTemplateApplication::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_LaunchApplicationFromMimeType
#include "Valve/VR/IVRApplications__LaunchApplicationFromMimeType.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplicationFromMimeType.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::Invoke(::Il2CppString* pchMimeType, ::Il2CppString* pchArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchArgs)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchMimeType, pchArgs);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplicationFromMimeType.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::BeginInvoke(::Il2CppString* pchMimeType, ::Il2CppString* pchArgs, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchArgs), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchMimeType, pchArgs, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplicationFromMimeType.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_LaunchDashboardOverlay
#include "Valve/VR/IVRApplications__LaunchDashboardOverlay.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_LaunchDashboardOverlay.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchDashboardOverlay::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchDashboardOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchDashboardOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_LaunchDashboardOverlay::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchDashboardOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchDashboardOverlay.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchDashboardOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchDashboardOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_CancelApplicationLaunch
#include "Valve/VR/IVRApplications__CancelApplicationLaunch.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_CancelApplicationLaunch.Invoke
bool Valve::VR::IVRApplications::_CancelApplicationLaunch::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_CancelApplicationLaunch::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_CancelApplicationLaunch.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_CancelApplicationLaunch::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_CancelApplicationLaunch::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_CancelApplicationLaunch.EndInvoke
bool Valve::VR::IVRApplications::_CancelApplicationLaunch::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_CancelApplicationLaunch::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_IdentifyApplication
#include "Valve/VR/IVRApplications__IdentifyApplication.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_IdentifyApplication.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_IdentifyApplication::Invoke(uint unProcessId, ::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IdentifyApplication::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_IdentifyApplication.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_IdentifyApplication::BeginInvoke(uint unProcessId, ::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IdentifyApplication::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unProcessId, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_IdentifyApplication.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_IdentifyApplication::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IdentifyApplication::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationProcessId
#include "Valve/VR/IVRApplications__GetApplicationProcessId.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationProcessId.Invoke
uint Valve::VR::IVRApplications::_GetApplicationProcessId::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationProcessId::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationProcessId.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationProcessId::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationProcessId::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationProcessId.EndInvoke
uint Valve::VR::IVRApplications::_GetApplicationProcessId::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationProcessId::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationsErrorNameFromEnum
#include "Valve/VR/IVRApplications__GetApplicationsErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::Invoke(Valve::VR::EVRApplicationError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::BeginInvoke(Valve::VR::EVRApplicationError error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationPropertyString
#include "Valve/VR/IVRApplications__GetApplicationPropertyString.hpp"
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyString.Invoke
uint Valve::VR::IVRApplications::_GetApplicationPropertyString::Invoke(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, System::Text::StringBuilder* pchPropertyValueBuffer, uint unPropertyValueBufferLen, Valve::VR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyString::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(pchPropertyValueBuffer), ::il2cpp_utils::ExtractType(unPropertyValueBufferLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, peError);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyString.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationPropertyString::BeginInvoke(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, System::Text::StringBuilder* pchPropertyValueBuffer, uint unPropertyValueBufferLen, Valve::VR::EVRApplicationError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyString::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(pchPropertyValueBuffer), ::il2cpp_utils::ExtractType(unPropertyValueBufferLen), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyString.EndInvoke
uint Valve::VR::IVRApplications::_GetApplicationPropertyString::EndInvoke(Valve::VR::EVRApplicationError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyString::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationPropertyBool
#include "Valve/VR/IVRApplications__GetApplicationPropertyBool.hpp"
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyBool.Invoke
bool Valve::VR::IVRApplications::_GetApplicationPropertyBool::Invoke(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, Valve::VR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyBool::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, eProperty, peError);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyBool.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationPropertyBool::BeginInvoke(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, Valve::VR::EVRApplicationError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyBool::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, eProperty, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyBool.EndInvoke
bool Valve::VR::IVRApplications::_GetApplicationPropertyBool::EndInvoke(Valve::VR::EVRApplicationError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyBool::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, peError, result);
}
