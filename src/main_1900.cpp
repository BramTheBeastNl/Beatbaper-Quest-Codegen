// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass36_0
#include "HMUI/FlowCoordinator_--c__DisplayClass36_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass36_0.<DismissFlowCoordinator>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass36_0::$DismissFlowCoordinator$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass36_0::<DismissFlowCoordinator>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DismissFlowCoordinator>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass37_0
#include "HMUI/FlowCoordinator_--c__DisplayClass37_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass37_0.<ReplaceChildFlowCoordinator>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass37_0::$ReplaceChildFlowCoordinator$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass37_0::<ReplaceChildFlowCoordinator>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReplaceChildFlowCoordinator>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass38_0
#include "HMUI/FlowCoordinator_--c__DisplayClass38_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass38_1
#include "HMUI/FlowCoordinator_--c__DisplayClass38_1.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass38_0
#include "HMUI/FlowCoordinator_--c__DisplayClass38_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass38_1.<PresentViewController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass38_1::$PresentViewController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass38_1::<PresentViewController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentViewController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass39_0
#include "HMUI/FlowCoordinator_--c__DisplayClass39_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass39_0.<DismissViewController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass39_0::$DismissViewController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass39_0::<DismissViewController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DismissViewController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass41_0
#include "HMUI/FlowCoordinator_--c__DisplayClass41_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass41_0.<ReplaceTopViewController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass41_0::$ReplaceTopViewController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass41_0::<ReplaceTopViewController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReplaceTopViewController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass42_0
#include "HMUI/FlowCoordinator_--c__DisplayClass42_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass42_0.<PushViewControllerToNavigationController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass42_0::$PushViewControllerToNavigationController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass42_0::<PushViewControllerToNavigationController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushViewControllerToNavigationController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass45_0
#include "HMUI/FlowCoordinator_--c__DisplayClass45_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass45_0.<PopViewControllerFromNavigationController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass45_0::$PopViewControllerFromNavigationController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass45_0::<PopViewControllerFromNavigationController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopViewControllerFromNavigationController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass46_0
#include "HMUI/FlowCoordinator_--c__DisplayClass46_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/HMUI.<>c__DisplayClass46_0.<PopViewControllersFromNavigationController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass46_0::$PopViewControllersFromNavigationController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass46_0::<PopViewControllersFromNavigationController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopViewControllersFromNavigationController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.HierarchyManager
#include "HMUI/HierarchyManager.hpp"
// Including type: HMUI.ScreenSystem
#include "HMUI/ScreenSystem.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.HierarchyManager.Start
void HMUI::HierarchyManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::HierarchyManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HierarchyManager.OnDestroy
void HMUI::HierarchyManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::HierarchyManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HierarchyManager.HandleSceneTransitionDidFinish
void HMUI::HierarchyManager::HandleSceneTransitionDidFinish(GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::HierarchyManager::HandleSceneTransitionDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSceneTransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scenesTransitionSetupData, container);
}
// Autogenerated method: HMUI.HierarchyManager.HandleBeforeDismissingScenes
void HMUI::HierarchyManager::HandleBeforeDismissingScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::HierarchyManager::HandleBeforeDismissingScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeforeDismissingScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HierarchyManager.StartWithFlowCoordinator
void HMUI::HierarchyManager::StartWithFlowCoordinator(HMUI::FlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::HierarchyManager::StartWithFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartWithFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.NavigationController/HMUI.<>c__DisplayClass8_0
#include "HMUI/NavigationController_--c__DisplayClass8_0.hpp"
// Including type: HMUI.NavigationController/HMUI.<>c__DisplayClass10_0
#include "HMUI/NavigationController_--c__DisplayClass10_0.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NavigationController.PushViewController
void HMUI::NavigationController::PushViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::PushViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, immediately);
}
// Autogenerated method: HMUI.NavigationController.PopViewController
void HMUI::NavigationController::PopViewController(System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::PopViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, immediately);
}
// Autogenerated method: HMUI.NavigationController.PopViewControllers
void HMUI::NavigationController::PopViewControllers(int numberOfViewControllersToPop, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::PopViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numberOfViewControllersToPop), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, numberOfViewControllersToPop, finishedCallback, immediately);
}
// Autogenerated method: HMUI.NavigationController.PositionVector
UnityEngine::Vector3 HMUI::NavigationController::PositionVector(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::PositionVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PositionVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: HMUI.NavigationController.SetupViewControllerRect
void HMUI::NavigationController::SetupViewControllerRect(HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::SetupViewControllerRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupViewControllerRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: HMUI.NavigationController.GetNewPositionsForViewControllers
::Array<float>* HMUI::NavigationController::GetNewPositionsForViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers, System::Collections::Generic::HashSet_1<HMUI::ViewController*>* fixedViewControllers, float fixedEndPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::GetNewPositionsForViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNewPositionsForViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers), ::il2cpp_utils::ExtractType(fixedViewControllers), ::il2cpp_utils::ExtractType(fixedEndPos)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<float>*, false>(this, ___internal__method, viewControllers, fixedViewControllers, fixedEndPos);
}
// Autogenerated method: HMUI.NavigationController.LayoutViewControllers
void HMUI::NavigationController::LayoutViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::LayoutViewControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NavigationController/HMUI.Orientation
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/HMUI.Orientation Horizontal
HMUI::NavigationController::Orientation HMUI::NavigationController::Orientation::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Orientation>("HMUI", "NavigationController/Orientation", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/HMUI.Orientation Horizontal
void HMUI::NavigationController::Orientation::_set_Horizontal(HMUI::NavigationController::Orientation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Orientation", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/HMUI.Orientation Vertical
HMUI::NavigationController::Orientation HMUI::NavigationController::Orientation::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Orientation>("HMUI", "NavigationController/Orientation", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/HMUI.Orientation Vertical
void HMUI::NavigationController::Orientation::_set_Vertical(HMUI::NavigationController::Orientation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Orientation", "Vertical", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NavigationController/HMUI.Alignment
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/HMUI.Alignment Beginning
HMUI::NavigationController::Alignment HMUI::NavigationController::Alignment::_get_Beginning() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_get_Beginning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Alignment>("HMUI", "NavigationController/Alignment", "Beginning"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/HMUI.Alignment Beginning
void HMUI::NavigationController::Alignment::_set_Beginning(HMUI::NavigationController::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_set_Beginning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Alignment", "Beginning", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/HMUI.Alignment Middle
HMUI::NavigationController::Alignment HMUI::NavigationController::Alignment::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Alignment>("HMUI", "NavigationController/Alignment", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/HMUI.Alignment Middle
void HMUI::NavigationController::Alignment::_set_Middle(HMUI::NavigationController::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Alignment", "Middle", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/HMUI.Alignment End
HMUI::NavigationController::Alignment HMUI::NavigationController::Alignment::_get_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_get_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Alignment>("HMUI", "NavigationController/Alignment", "End"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/HMUI.Alignment End
void HMUI::NavigationController::Alignment::_set_End(HMUI::NavigationController::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_set_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Alignment", "End", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.NavigationController/HMUI.<>c__DisplayClass8_0
#include "HMUI/NavigationController_--c__DisplayClass8_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NavigationController/HMUI.<>c__DisplayClass8_0.<PushViewController>g__AnimationLayouter|0
void HMUI::NavigationController::$$c__DisplayClass8_0::$PushViewController$g__AnimationLayouter_0(float t, ::Array<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::$$c__DisplayClass8_0::<PushViewController>g__AnimationLayouter|0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushViewController>g__AnimationLayouter|0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.NavigationController/HMUI.<>c__DisplayClass10_0
#include "HMUI/NavigationController_--c__DisplayClass10_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NavigationController/HMUI.<>c__DisplayClass10_0.<PopViewControllers>g__AnimationLayouter|0
void HMUI::NavigationController::$$c__DisplayClass10_0::$PopViewControllers$g__AnimationLayouter_0(float t, ::Array<HMUI::ViewController*>* viewControllers, System::Collections::Generic::HashSet_1<HMUI::ViewController*>* removingViewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::$$c__DisplayClass10_0::<PopViewControllers>g__AnimationLayouter|0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopViewControllers>g__AnimationLayouter|0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(viewControllers), ::il2cpp_utils::ExtractType(removingViewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers, removingViewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
// Including type: HMUI.Screen/HMUI.<TransitionCoroutine>d__5
#include "HMUI/Screen_-TransitionCoroutine-d__5.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: HMUI.ViewController/HMUI.AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.Screen.get_isBeingDestroyed
bool HMUI::Screen::get_isBeingDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::get_isBeingDestroyed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isBeingDestroyed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen.SetRootViewController
void HMUI::Screen::SetRootViewController(HMUI::ViewController* newRootViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::SetRootViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRootViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newRootViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newRootViewController, animationType);
}
// Autogenerated method: HMUI.Screen.TransitionCoroutine
System::Collections::IEnumerator* HMUI::Screen::TransitionCoroutine(HMUI::ViewController* newRootViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::TransitionCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newRootViewController), ::il2cpp_utils::ExtractType(animationType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, newRootViewController, animationType);
}
// Autogenerated method: HMUI.Screen.OnDestroy
void HMUI::Screen::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.Screen/HMUI.<TransitionCoroutine>d__5
#include "HMUI/Screen_-TransitionCoroutine-d__5.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.Screen/HMUI.<TransitionCoroutine>d__5.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::Screen::$TransitionCoroutine$d__5::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/HMUI.<TransitionCoroutine>d__5.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::Screen::$TransitionCoroutine$d__5::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/HMUI.<TransitionCoroutine>d__5.System.IDisposable.Dispose
void HMUI::Screen::$TransitionCoroutine$d__5::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/HMUI.<TransitionCoroutine>d__5.MoveNext
bool HMUI::Screen::$TransitionCoroutine$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/HMUI.<TransitionCoroutine>d__5.System.Collections.IEnumerator.Reset
void HMUI::Screen::$TransitionCoroutine$d__5::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ScreenModeController
#include "HMUI/ScreenModeController.hpp"
// Including type: HMUI.CurvedCanvasSettings
#include "HMUI/CurvedCanvasSettings.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: HMUI.ScreenModeData
#include "HMUI/ScreenModeData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScreenModeController.Awake
void HMUI::ScreenModeController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenModeController.SetMode
void HMUI::ScreenModeController::SetMode(HMUI::ScreenModeData* screenModeData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeController::SetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenModeData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screenModeData);
}
// Autogenerated method: HMUI.ScreenModeController.SetDefaultMode
void HMUI::ScreenModeController::SetDefaultMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeController::SetDefaultMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScreenModeSO
#include "HMUI/ScreenModeSO.hpp"
// Including type: HMUI.ScreenModeData
#include "HMUI/ScreenModeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScreenModeSO.get_data
HMUI::ScreenModeData* HMUI::ScreenModeSO::get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeSO::get_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ScreenModeData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScreenModeData
#include "HMUI/ScreenModeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScreenSystem
#include "HMUI/ScreenSystem.hpp"
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.TitleViewController
#include "HMUI/TitleViewController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScreenSystem.get_titleViewController
HMUI::TitleViewController* HMUI::ScreenSystem::get_titleViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_titleViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_titleViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TitleViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_mainScreen
HMUI::Screen* HMUI::ScreenSystem::get_mainScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_mainScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mainScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_leftScreen
HMUI::Screen* HMUI::ScreenSystem::get_leftScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_leftScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_rightScreen
HMUI::Screen* HMUI::ScreenSystem::get_rightScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_rightScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_bottomScreen
HMUI::Screen* HMUI::ScreenSystem::get_bottomScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_bottomScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bottomScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_topScreen
HMUI::Screen* HMUI::ScreenSystem::get_topScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_topScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_topScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.add_backButtonWasPressedEvent
void HMUI::ScreenSystem::add_backButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::add_backButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_backButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScreenSystem.remove_backButtonWasPressedEvent
void HMUI::ScreenSystem::remove_backButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::remove_backButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_backButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScreenSystem.Awake
void HMUI::ScreenSystem::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.OnDestroy
void HMUI::ScreenSystem::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.SetBackButton
void HMUI::ScreenSystem::SetBackButton(bool visible, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::SetBackButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBackButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(visible), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, visible, animated);
}
// Autogenerated method: HMUI.ScreenSystem.<Awake>b__24_0
void HMUI::ScreenSystem::$Awake$b__24_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::<Awake>b__24_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__24_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.StackedController
#include "HMUI/StackedController.hpp"
// Including type: HMUI.StackedController/HMUI.<>c
#include "HMUI/StackedController_--c.hpp"
// Including type: HMUI.StackedController/HMUI.<>c__DisplayClass5_0
#include "HMUI/StackedController_--c__DisplayClass5_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.StackedController.get_topStackedViewController
HMUI::ViewController* HMUI::StackedController::get_topStackedViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::get_topStackedViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_topStackedViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackedController.PushViewController
void HMUI::StackedController::PushViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::PushViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, immediately);
}
// Autogenerated method: HMUI.StackedController.PopViewController
void HMUI::StackedController::PopViewController(System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::PopViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, immediately);
}
// Autogenerated method: HMUI.StackedController.PopViewControllers
void HMUI::StackedController::PopViewControllers(int numberOfViewControllersToPop, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::PopViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numberOfViewControllersToPop), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, numberOfViewControllersToPop, finishedCallback, immediately);
}
// Autogenerated method: HMUI.StackedController.SetupViewControllerRect
void HMUI::StackedController::SetupViewControllerRect(HMUI::ViewController* viewController, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::SetupViewControllerRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "StackedController", "SetupViewControllerRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, viewController, index);
}
// Autogenerated method: HMUI.StackedController.LayoutViewControllers
void HMUI::StackedController::LayoutViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::LayoutViewControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.StackedController/HMUI.<>c
#include "HMUI/StackedController_--c.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.StackedController/HMUI.<>c <>9
HMUI::StackedController::$$c* HMUI::StackedController::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::StackedController::$$c*>("HMUI", "StackedController/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.StackedController/HMUI.<>c <>9
void HMUI::StackedController::$$c::_set_$$9(HMUI::StackedController::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "StackedController/<>c", "<>9", value)));
}
// Autogenerated method: HMUI.StackedController/HMUI.<>c..cctor
void HMUI::StackedController::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "StackedController/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.StackedController/HMUI.<>c.<PushViewController>g__AnimationLayouter|3_0
void HMUI::StackedController::$$c::$PushViewController$g__AnimationLayouter_3_0(float t, ::Array<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::<PushViewController>g__AnimationLayouter|3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushViewController>g__AnimationLayouter|3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.StackedController/HMUI.<>c__DisplayClass5_0
#include "HMUI/StackedController_--c__DisplayClass5_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.StackedController/HMUI.<>c__DisplayClass5_0.<PopViewControllers>g__AnimationLayouter|0
void HMUI::StackedController::$$c__DisplayClass5_0::$PopViewControllers$g__AnimationLayouter_0(float t, ::Array<HMUI::ViewController*>* viewControllers, System::Collections::Generic::HashSet_1<HMUI::ViewController*>* removingViewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c__DisplayClass5_0::<PopViewControllers>g__AnimationLayouter|0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopViewControllers>g__AnimationLayouter|0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(viewControllers), ::il2cpp_utils::ExtractType(removingViewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers, removingViewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TitleViewController
#include "HMUI/TitleViewController.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TitleViewController.SetText
void HMUI::TitleViewController::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TitleViewController::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.ViewController/HMUI.DidActivateDelegate
#include "HMUI/ViewController_DidActivateDelegate.hpp"
// Including type: HMUI.ViewController/HMUI.DidDeactivateDelegate
#include "HMUI/ViewController_DidDeactivateDelegate.hpp"
// Including type: HMUI.ViewController/HMUI.AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
// Including type: HMUI.ViewController/HMUI.AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
// Including type: HMUI.ViewController/HMUI.<PresentViewControllerCoroutine>d__58
#include "HMUI/ViewController_-PresentViewControllerCoroutine-d__58.hpp"
// Including type: HMUI.ViewController/HMUI.<ReplaceViewControllerCoroutine>d__60
#include "HMUI/ViewController_-ReplaceViewControllerCoroutine-d__60.hpp"
// Including type: HMUI.ViewController/HMUI.<DismissViewControllerCoroutine>d__62
#include "HMUI/ViewController_-DismissViewControllerCoroutine-d__62.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.ContainerViewController
#include "HMUI/ContainerViewController.hpp"
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.EventSystems.BaseRaycaster
#include "UnityEngine/EventSystems/BaseRaycaster.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kTransitionDuration
float HMUI::ViewController::_get_kTransitionDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_get_kTransitionDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewController", "kTransitionDuration"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kTransitionDuration
void HMUI::ViewController::_set_kTransitionDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_set_kTransitionDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController", "kTransitionDuration", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kTransitionMoveOffset
float HMUI::ViewController::_get_kTransitionMoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_get_kTransitionMoveOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewController", "kTransitionMoveOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kTransitionMoveOffset
void HMUI::ViewController::_set_kTransitionMoveOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_set_kTransitionMoveOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController", "kTransitionMoveOffset", value));
}
// Autogenerated method: HMUI.ViewController.get_containerViewController
HMUI::ContainerViewController* HMUI::ViewController::get_containerViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_containerViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_containerViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ContainerViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_screen
HMUI::Screen* HMUI::ViewController::get_screen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_screen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_screen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_parentViewController
HMUI::ViewController* HMUI::ViewController::get_parentViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_parentViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_childViewController
HMUI::ViewController* HMUI::ViewController::get_childViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_childViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_childViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_isInViewControllerHierarchy
bool HMUI::ViewController::get_isInViewControllerHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_isInViewControllerHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInViewControllerHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_isActivated
bool HMUI::ViewController::get_isActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_isActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_wasActivatedBefore
bool HMUI::ViewController::get_wasActivatedBefore() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_wasActivatedBefore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wasActivatedBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_isInTransition
bool HMUI::ViewController::get_isInTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_isInTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.set_isInTransition
void HMUI::ViewController::set_isInTransition(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::set_isInTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isInTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.get_enableUserInteractions
bool HMUI::ViewController::get_enableUserInteractions() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_enableUserInteractions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableUserInteractions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.set_enableUserInteractions
void HMUI::ViewController::set_enableUserInteractions(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::set_enableUserInteractions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableUserInteractions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.get_buttonBinder
HMUI::ButtonBinder* HMUI::ViewController::get_buttonBinder() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_buttonBinder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_buttonBinder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ButtonBinder*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.set_buttonBinder
void HMUI::ViewController::set_buttonBinder(HMUI::ButtonBinder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::set_buttonBinder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_buttonBinder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.get_rectTransform
UnityEngine::RectTransform* HMUI::ViewController::get_rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_rectTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rectTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_canvasGroup
UnityEngine::CanvasGroup* HMUI::ViewController::get_canvasGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_canvasGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canvasGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::CanvasGroup*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_graphicRaycaster
UnityEngine::EventSystems::BaseRaycaster* HMUI::ViewController::get_graphicRaycaster() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_graphicRaycaster");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_graphicRaycaster", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::EventSystems::BaseRaycaster*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.add_didActivateEvent
void HMUI::ViewController::add_didActivateEvent(HMUI::ViewController::DidActivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::add_didActivateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didActivateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.remove_didActivateEvent
void HMUI::ViewController::remove_didActivateEvent(HMUI::ViewController::DidActivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::remove_didActivateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didActivateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.add_didDeactivateEvent
void HMUI::ViewController::add_didDeactivateEvent(HMUI::ViewController::DidDeactivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::add_didDeactivateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didDeactivateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.remove_didDeactivateEvent
void HMUI::ViewController::remove_didDeactivateEvent(HMUI::ViewController::DidDeactivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::remove_didDeactivateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didDeactivateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.OnDestroy
void HMUI::ViewController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.DidActivate
void HMUI::ViewController::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ViewController.DidDeactivate
void HMUI::ViewController::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.ViewController.__Init
void HMUI::ViewController::__Init(HMUI::Screen* screen, HMUI::ViewController* parentViewController, HMUI::ContainerViewController* containerViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screen), ::il2cpp_utils::ExtractType(parentViewController), ::il2cpp_utils::ExtractType(containerViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screen, parentViewController, containerViewController);
}
// Autogenerated method: HMUI.ViewController.__ResetViewController
void HMUI::ViewController::__ResetViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__ResetViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__ResetViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.__PresentViewController
void HMUI::ViewController::__PresentViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__PresentViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__PresentViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.PresentViewControllerCoroutine
System::Collections::IEnumerator* HMUI::ViewController::PresentViewControllerCoroutine(HMUI::ViewController* newViewController, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::PresentViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, newViewController, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.__ReplaceViewController
void HMUI::ViewController::__ReplaceViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__ReplaceViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__ReplaceViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationType), ::il2cpp_utils::ExtractType(animationDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationType, animationDirection);
}
// Autogenerated method: HMUI.ViewController.ReplaceViewControllerCoroutine
System::Collections::IEnumerator* HMUI::ViewController::ReplaceViewControllerCoroutine(HMUI::ViewController* newViewController, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::ReplaceViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationType), ::il2cpp_utils::ExtractType(animationDirection)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, newViewController, finishedCallback, animationType, animationDirection);
}
// Autogenerated method: HMUI.ViewController.__DismissViewController
void HMUI::ViewController::__DismissViewController(System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__DismissViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__DismissViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.DismissViewControllerCoroutine
System::Collections::IEnumerator* HMUI::ViewController::DismissViewControllerCoroutine(System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DismissViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.__Activate
void HMUI::ViewController::__Activate(bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ViewController.__Deactivate
void HMUI::ViewController::__Deactivate(bool removedFromHierarchy, bool deactivateGameObject, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(deactivateGameObject), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, deactivateGameObject, screenSystemDisabling);
}
// Autogenerated method: HMUI.ViewController.DeactivateGameObject
void HMUI::ViewController::DeactivateGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DeactivateGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.IsViewControllerInHierarchy
bool HMUI::ViewController::IsViewControllerInHierarchy(HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::IsViewControllerInHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsViewControllerInHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, viewController);
}
// Autogenerated method: HMUI.ViewController.Log
void HMUI::ViewController::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewController", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/HMUI.DidActivateDelegate
#include "HMUI/ViewController_DidActivateDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/HMUI.DidActivateDelegate.Invoke
void HMUI::ViewController::DidActivateDelegate::Invoke(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivateDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ViewController/HMUI.DidActivateDelegate.BeginInvoke
System::IAsyncResult* HMUI::ViewController::DidActivateDelegate::BeginInvoke(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivateDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling, callback, object);
}
// Autogenerated method: HMUI.ViewController/HMUI.DidActivateDelegate.EndInvoke
void HMUI::ViewController::DidActivateDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivateDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/HMUI.DidDeactivateDelegate
#include "HMUI/ViewController_DidDeactivateDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/HMUI.DidDeactivateDelegate.Invoke
void HMUI::ViewController::DidDeactivateDelegate::Invoke(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivateDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.ViewController/HMUI.DidDeactivateDelegate.BeginInvoke
System::IAsyncResult* HMUI::ViewController::DidDeactivateDelegate::BeginInvoke(bool removedFromHierarchy, bool screenSystemDisabling, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivateDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling, callback, object);
}
// Autogenerated method: HMUI.ViewController/HMUI.DidDeactivateDelegate.EndInvoke
void HMUI::ViewController::DidDeactivateDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivateDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewController/HMUI.AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/HMUI.AnimationType None
HMUI::ViewController::AnimationType HMUI::ViewController::AnimationType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationType>("HMUI", "ViewController/AnimationType", "None"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/HMUI.AnimationType None
void HMUI::ViewController::AnimationType::_set_None(HMUI::ViewController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/HMUI.AnimationType In
HMUI::ViewController::AnimationType HMUI::ViewController::AnimationType::_get_In() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_get_In");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationType>("HMUI", "ViewController/AnimationType", "In"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/HMUI.AnimationType In
void HMUI::ViewController::AnimationType::_set_In(HMUI::ViewController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_set_In");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationType", "In", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/HMUI.AnimationType Out
HMUI::ViewController::AnimationType HMUI::ViewController::AnimationType::_get_Out() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_get_Out");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationType>("HMUI", "ViewController/AnimationType", "Out"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/HMUI.AnimationType Out
void HMUI::ViewController::AnimationType::_set_Out(HMUI::ViewController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_set_Out");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationType", "Out", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewController/HMUI.AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/HMUI.AnimationDirection Horizontal
HMUI::ViewController::AnimationDirection HMUI::ViewController::AnimationDirection::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationDirection>("HMUI", "ViewController/AnimationDirection", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/HMUI.AnimationDirection Horizontal
void HMUI::ViewController::AnimationDirection::_set_Horizontal(HMUI::ViewController::AnimationDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationDirection", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/HMUI.AnimationDirection Vertical
HMUI::ViewController::AnimationDirection HMUI::ViewController::AnimationDirection::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationDirection>("HMUI", "ViewController/AnimationDirection", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/HMUI.AnimationDirection Vertical
void HMUI::ViewController::AnimationDirection::_set_Vertical(HMUI::ViewController::AnimationDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationDirection", "Vertical", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/HMUI.<PresentViewControllerCoroutine>d__58
#include "HMUI/ViewController_-PresentViewControllerCoroutine-d__58.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/HMUI.<PresentViewControllerCoroutine>d__58.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<PresentViewControllerCoroutine>d__58.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<PresentViewControllerCoroutine>d__58.System.IDisposable.Dispose
void HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<PresentViewControllerCoroutine>d__58.MoveNext
bool HMUI::ViewController::$PresentViewControllerCoroutine$d__58::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<PresentViewControllerCoroutine>d__58.System.Collections.IEnumerator.Reset
void HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/HMUI.<ReplaceViewControllerCoroutine>d__60
#include "HMUI/ViewController_-ReplaceViewControllerCoroutine-d__60.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/HMUI.<ReplaceViewControllerCoroutine>d__60.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<ReplaceViewControllerCoroutine>d__60.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<ReplaceViewControllerCoroutine>d__60.System.IDisposable.Dispose
void HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<ReplaceViewControllerCoroutine>d__60.MoveNext
bool HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<ReplaceViewControllerCoroutine>d__60.System.Collections.IEnumerator.Reset
void HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/HMUI.<DismissViewControllerCoroutine>d__62
#include "HMUI/ViewController_-DismissViewControllerCoroutine-d__62.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/HMUI.<DismissViewControllerCoroutine>d__62.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<DismissViewControllerCoroutine>d__62.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<DismissViewControllerCoroutine>d__62.System.IDisposable.Dispose
void HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<DismissViewControllerCoroutine>d__62.MoveNext
bool HMUI::ViewController::$DismissViewControllerCoroutine$d__62::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/HMUI.<DismissViewControllerCoroutine>d__62.System.Collections.IEnumerator.Reset
void HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewControllerTransitionHelpers
#include "HMUI/ViewControllerTransitionHelpers.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<DoPresentTransition>d__3
#include "HMUI/ViewControllerTransitionHelpers_-DoPresentTransition-d__3.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<DoDismissTransition>d__4
#include "HMUI/ViewControllerTransitionHelpers_-DoDismissTransition-d__4.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<>c__DisplayClass5_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass5_0.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<DoHorizontalTransition>d__5
#include "HMUI/ViewControllerTransitionHelpers_-DoHorizontalTransition-d__5.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<>c__DisplayClass6_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass6_0.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<DoVerticalTransition>d__6
#include "HMUI/ViewControllerTransitionHelpers_-DoVerticalTransition-d__6.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<AnimationCoroutine>d__8
#include "HMUI/ViewControllerTransitionHelpers_-AnimationCoroutine-d__8.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ViewController/HMUI.AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kTransitionDuration
float HMUI::ViewControllerTransitionHelpers::_get_kTransitionDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_get_kTransitionDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewControllerTransitionHelpers", "kTransitionDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kTransitionDuration
void HMUI::ViewControllerTransitionHelpers::_set_kTransitionDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_set_kTransitionDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewControllerTransitionHelpers", "kTransitionDuration", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kHorizontalTransitionMoveOffset
float HMUI::ViewControllerTransitionHelpers::_get_kHorizontalTransitionMoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_get_kHorizontalTransitionMoveOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewControllerTransitionHelpers", "kHorizontalTransitionMoveOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kHorizontalTransitionMoveOffset
void HMUI::ViewControllerTransitionHelpers::_set_kHorizontalTransitionMoveOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_set_kHorizontalTransitionMoveOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewControllerTransitionHelpers", "kHorizontalTransitionMoveOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kVerticalTransitionMoveOffset
float HMUI::ViewControllerTransitionHelpers::_get_kVerticalTransitionMoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_get_kVerticalTransitionMoveOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewControllerTransitionHelpers", "kVerticalTransitionMoveOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kVerticalTransitionMoveOffset
void HMUI::ViewControllerTransitionHelpers::_set_kVerticalTransitionMoveOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_set_kVerticalTransitionMoveOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewControllerTransitionHelpers", "kVerticalTransitionMoveOffset", value));
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoPresentTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoPresentTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, HMUI::ViewController::AnimationDirection animationDirection, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoPresentTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoPresentTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPresentViewController), ::il2cpp_utils::ExtractType(toDismissViewController), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(moveOffsetMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, animationDirection, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoDismissTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoDismissTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, HMUI::ViewController::AnimationDirection animationDirection, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoDismissTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoDismissTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPresentViewController), ::il2cpp_utils::ExtractType(toDismissViewController), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(moveOffsetMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, animationDirection, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoHorizontalTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoHorizontalTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoHorizontalTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoHorizontalTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPresentViewController), ::il2cpp_utils::ExtractType(toDismissViewController), ::il2cpp_utils::ExtractType(moveOffsetMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoVerticalTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoVerticalTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoVerticalTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoVerticalTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPresentViewController), ::il2cpp_utils::ExtractType(toDismissViewController), ::il2cpp_utils::ExtractType(moveOffsetMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.ImmediateTransition
void HMUI::ViewControllerTransitionHelpers::ImmediateTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::ImmediateTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "ImmediateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPresentViewController), ::il2cpp_utils::ExtractType(toDismissViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.AnimationCoroutine
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::AnimationCoroutine(System::Action_1<float>* transitionAnimation) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::AnimationCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "AnimationCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionAnimation)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transitionAnimation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<DoPresentTransition>d__3
#include "HMUI/ViewControllerTransitionHelpers_-DoPresentTransition-d__3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoPresentTransition>d__3.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoPresentTransition>d__3.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoPresentTransition>d__3.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoPresentTransition>d__3.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoPresentTransition>d__3.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<DoDismissTransition>d__4
#include "HMUI/ViewControllerTransitionHelpers_-DoDismissTransition-d__4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoDismissTransition>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoDismissTransition>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoDismissTransition>d__4.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoDismissTransition>d__4.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoDismissTransition>d__4.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<>c__DisplayClass5_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass5_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<>c__DisplayClass5_0.<DoHorizontalTransition>b__0
void HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass5_0::$DoHorizontalTransition$b__0(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass5_0::<DoHorizontalTransition>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DoHorizontalTransition>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<DoHorizontalTransition>d__5
#include "HMUI/ViewControllerTransitionHelpers_-DoHorizontalTransition-d__5.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<>c__DisplayClass5_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoHorizontalTransition>d__5.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoHorizontalTransition>d__5.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoHorizontalTransition>d__5.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoHorizontalTransition>d__5.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoHorizontalTransition>d__5.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<>c__DisplayClass6_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass6_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<>c__DisplayClass6_0.<DoVerticalTransition>b__0
void HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass6_0::$DoVerticalTransition$b__0(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass6_0::<DoVerticalTransition>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DoVerticalTransition>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<DoVerticalTransition>d__6
#include "HMUI/ViewControllerTransitionHelpers_-DoVerticalTransition-d__6.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<>c__DisplayClass6_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass6_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoVerticalTransition>d__6.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoVerticalTransition>d__6.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoVerticalTransition>d__6.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoVerticalTransition>d__6.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<DoVerticalTransition>d__6.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/HMUI.<AnimationCoroutine>d__8
#include "HMUI/ViewControllerTransitionHelpers_-AnimationCoroutine-d__8.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<AnimationCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<AnimationCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<AnimationCoroutine>d__8.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<AnimationCoroutine>d__8.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/HMUI.<AnimationCoroutine>d__8.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView
#include "HMUI/AnimatedSwitchView.hpp"
// Including type: HMUI.AnimatedSwitchView/HMUI.ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
// Including type: HMUI.AnimatedSwitchView/HMUI.GetColorDelegate
#include "HMUI/AnimatedSwitchView_GetColorDelegate.hpp"
// Including type: HMUI.AnimatedSwitchView/HMUI.<>c
#include "HMUI/AnimatedSwitchView_--c.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.AnimatedSwitchView.Awake
void HMUI::AnimatedSwitchView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.Start
void HMUI::AnimatedSwitchView::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.OnDestroy
void HMUI::AnimatedSwitchView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.Update
void HMUI::AnimatedSwitchView::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpPosition
void HMUI::AnimatedSwitchView::LerpPosition(float switchAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(switchAmount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, switchAmount);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpStretch
void HMUI::AnimatedSwitchView::LerpStretch(float switchAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpStretch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpStretch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(switchAmount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, switchAmount);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpColors
void HMUI::AnimatedSwitchView::LerpColors(float switchAmount, float highlightAmount, float disabledAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(switchAmount), ::il2cpp_utils::ExtractType(highlightAmount), ::il2cpp_utils::ExtractType(disabledAmount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, switchAmount, highlightAmount, disabledAmount);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpColor
UnityEngine::Color HMUI::AnimatedSwitchView::LerpColor(float switchAmount, float highlightAmount, float disabledAmount, HMUI::AnimatedSwitchView::GetColorDelegate* getColorDelegate) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(switchAmount), ::il2cpp_utils::ExtractType(highlightAmount), ::il2cpp_utils::ExtractType(disabledAmount), ::il2cpp_utils::ExtractType(getColorDelegate)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, switchAmount, highlightAmount, disabledAmount, getColorDelegate);
}
// Autogenerated method: HMUI.AnimatedSwitchView.HandleOnValueChanged
void HMUI::AnimatedSwitchView::HandleOnValueChanged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::HandleOnValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleOnValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.AnimatedSwitchView.HandleStateDidChange
void HMUI::AnimatedSwitchView::HandleStateDidChange(HMUI::ToggleWithCallbacks::SelectionState selectionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::HandleStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectionState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectionState);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView/HMUI.ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView/HMUI.AnimationState
#include "HMUI/AnimatedSwitchView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState Idle
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_Idle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_Idle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "Idle"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState Idle
void HMUI::AnimatedSwitchView::AnimationState::_set_Idle(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_Idle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "Idle", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState SwitchingOn
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOn"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState SwitchingOn
void HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOn(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOn", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState SwitchingOff
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState SwitchingOff
void HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOff(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOff", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState HighlightingOn
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOn"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState HighlightingOn
void HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOn(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOn", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState HighlightingOff
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState HighlightingOff
void HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOff(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOff", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState DisablingOn
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOn"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState DisablingOn
void HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOn(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOn", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState DisablingOff
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.AnimationState DisablingOff
void HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOff(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOff", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.AnimatedSwitchView/HMUI.GetColorDelegate
#include "HMUI/AnimatedSwitchView_GetColorDelegate.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: HMUI.AnimatedSwitchView/HMUI.ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.AnimatedSwitchView/HMUI.GetColorDelegate.Invoke
UnityEngine::Color HMUI::AnimatedSwitchView::GetColorDelegate::Invoke(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::GetColorDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/HMUI.GetColorDelegate.BeginInvoke
System::IAsyncResult* HMUI::AnimatedSwitchView::GetColorDelegate::BeginInvoke(HMUI::AnimatedSwitchView::ColorBlock* colorBlock, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::GetColorDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, colorBlock, callback, object);
}
// Autogenerated method: HMUI.AnimatedSwitchView/HMUI.GetColorDelegate.EndInvoke
UnityEngine::Color HMUI::AnimatedSwitchView::GetColorDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::GetColorDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView/HMUI.<>c
#include "HMUI/AnimatedSwitchView_--c.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: HMUI.AnimatedSwitchView/HMUI.GetColorDelegate
#include "HMUI/AnimatedSwitchView_GetColorDelegate.hpp"
// Including type: HMUI.AnimatedSwitchView/HMUI.ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.AnimatedSwitchView/HMUI.<>c <>9
HMUI::AnimatedSwitchView::$$c* HMUI::AnimatedSwitchView::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::$$c*>("HMUI", "AnimatedSwitchView/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.AnimatedSwitchView/HMUI.<>c <>9
void HMUI::AnimatedSwitchView::$$c::_set_$$9(HMUI::AnimatedSwitchView::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_0
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_0")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_0
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_0(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_0", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_1
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_1")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_1
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_1(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_1", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_2
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_2")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_2
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_2(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_2", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_3
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_3")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_3
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_3(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_3", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_4
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_4");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_4")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_4
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_4(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_4");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_4", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_5
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_5");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_5")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/HMUI.GetColorDelegate <>9__31_5
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_5(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_5");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_5", value)));
}
// Autogenerated method: HMUI.AnimatedSwitchView/HMUI.<>c..cctor
void HMUI::AnimatedSwitchView::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "AnimatedSwitchView/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView/HMUI.<>c.<LerpColors>b__31_0
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_0(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/HMUI.<>c.<LerpColors>b__31_1
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_1(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/HMUI.<>c.<LerpColors>b__31_2
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_2(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/HMUI.<>c.<LerpColors>b__31_3
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_3(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/HMUI.<>c.<LerpColors>b__31_4
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_4(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/HMUI.<>c.<LerpColors>b__31_5
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_5(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ButtonSpriteSwap
#include "HMUI/ButtonSpriteSwap.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ButtonSpriteSwap.Awake
void HMUI::ButtonSpriteSwap::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.Start
void HMUI::ButtonSpriteSwap::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.OnEnable
void HMUI::ButtonSpriteSwap::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.OnDestroy
void HMUI::ButtonSpriteSwap::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.HandleButtonSelectionStateDidChange
void HMUI::ButtonSpriteSwap::HandleButtonSelectionStateDidChange(HMUI::NoTransitionsButton::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::HandleButtonSelectionStateDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleButtonSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ButtonSpriteSwapToggle
#include "HMUI/ButtonSpriteSwapToggle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ButtonSpriteSwapToggle.OnEnable
void HMUI::ButtonSpriteSwapToggle::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwapToggle::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwapToggle.HandleButtonSelectionStateDidChange
void HMUI::ButtonSpriteSwapToggle::HandleButtonSelectionStateDidChange(HMUI::NoTransitionsButton::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwapToggle::HandleButtonSelectionStateDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleButtonSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ButtonStaticAnimations
#include "HMUI/ButtonStaticAnimations.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ButtonStaticAnimations.Awake
void HMUI::ButtonStaticAnimations::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.Start
void HMUI::ButtonStaticAnimations::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.OnEnable
void HMUI::ButtonStaticAnimations::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.OnDestroy
void HMUI::ButtonStaticAnimations::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.HandleButtonSelectionStateDidChange
void HMUI::ButtonStaticAnimations::HandleButtonSelectionStateDidChange(HMUI::NoTransitionsButton::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::HandleButtonSelectionStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleButtonSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NoTransitionsButton
#include "HMUI/NoTransitionsButton.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.UI.Selectable/UnityEngine.UI.SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NoTransitionsButton.get_selectionState
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::get_selectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::get_selectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::NoTransitionsButton::SelectionState, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.NoTransitionsButton.add_selectionStateDidChangeEvent
void HMUI::NoTransitionsButton::add_selectionStateDidChangeEvent(System::Action_1<HMUI::NoTransitionsButton::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::add_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.NoTransitionsButton.remove_selectionStateDidChangeEvent
void HMUI::NoTransitionsButton::remove_selectionStateDidChangeEvent(System::Action_1<HMUI::NoTransitionsButton::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::remove_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.NoTransitionsButton.DoStateTransition
void HMUI::NoTransitionsButton::DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::DoStateTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(instant)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NoTransitionsButton/HMUI.SelectionState
#include "HMUI/NoTransitionsButton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/HMUI.SelectionState Normal
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/HMUI.SelectionState Normal
void HMUI::NoTransitionsButton::SelectionState::_set_Normal(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/HMUI.SelectionState Highlighted
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Highlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Highlighted"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/HMUI.SelectionState Highlighted
void HMUI::NoTransitionsButton::SelectionState::_set_Highlighted(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Highlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Highlighted", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/HMUI.SelectionState Pressed
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Pressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Pressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Pressed"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/HMUI.SelectionState Pressed
void HMUI::NoTransitionsButton::SelectionState::_set_Pressed(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Pressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Pressed", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/HMUI.SelectionState Disabled
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/HMUI.SelectionState Disabled
void HMUI::NoTransitionsButton::SelectionState::_set_Disabled(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Disabled", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.DropdownWithTableView
#include "HMUI/DropdownWithTableView.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.ModalView
#include "HMUI/ModalView.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: HMUI.TableView/HMUI.IDataSource
#include "HMUI/TableView_IDataSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.DropdownWithTableView.get_tableViewDataSource
HMUI::TableView::IDataSource* HMUI::DropdownWithTableView::get_tableViewDataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::get_tableViewDataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tableViewDataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableView::IDataSource*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.get_selectedIndex
int HMUI::DropdownWithTableView::get_selectedIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::get_selectedIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.set_selectedIndex
void HMUI::DropdownWithTableView::set_selectedIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::set_selectedIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selectedIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.DropdownWithTableView.add_didSelectCellWithIdxEvent
void HMUI::DropdownWithTableView::add_didSelectCellWithIdxEvent(System::Action_2<HMUI::DropdownWithTableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::add_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.DropdownWithTableView.remove_didSelectCellWithIdxEvent
void HMUI::DropdownWithTableView::remove_didSelectCellWithIdxEvent(System::Action_2<HMUI::DropdownWithTableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::remove_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.DropdownWithTableView.Init
void HMUI::DropdownWithTableView::Init(HMUI::TableView::IDataSource* tableViewDataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableViewDataSource)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableViewDataSource);
}
// Autogenerated method: HMUI.DropdownWithTableView.ReloadData
void HMUI::DropdownWithTableView::ReloadData() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::ReloadData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.SelectCellWithIdx
void HMUI::DropdownWithTableView::SelectCellWithIdx(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::SelectCellWithIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: HMUI.DropdownWithTableView.Awake
void HMUI::DropdownWithTableView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.OnDisable
void HMUI::DropdownWithTableView::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.OnDestroy
void HMUI::DropdownWithTableView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.RefreshSize
void HMUI::DropdownWithTableView::RefreshSize(HMUI::TableView::IDataSource* dataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::RefreshSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataSource)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataSource);
}
// Autogenerated method: HMUI.DropdownWithTableView.OnButtonClick
void HMUI::DropdownWithTableView::OnButtonClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::OnButtonClick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnButtonClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.HandleTableViewDidSelectCellWithIdx
void HMUI::DropdownWithTableView::HandleTableViewDidSelectCellWithIdx(HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::HandleTableViewDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleTableViewDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated method: HMUI.DropdownWithTableView.Hide
void HMUI::DropdownWithTableView::Hide(bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated);
}
// Autogenerated method: HMUI.DropdownWithTableView.Show
void HMUI::DropdownWithTableView::Show(bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated);
}
// Autogenerated method: HMUI.DropdownWithTableView.HandleModalViewBlockerClicked
void HMUI::DropdownWithTableView::HandleModalViewBlockerClicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::HandleModalViewBlockerClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleModalViewBlockerClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.GradientImage
#include "HMUI/GradientImage.hpp"
// Including type: HMUI.CurvedCanvasSettingsHelper
#include "HMUI/CurvedCanvasSettingsHelper.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3AC8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 kVec2Zero
UnityEngine::Vector2 HMUI::GradientImage::_get_kVec2Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_kVec2Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("HMUI", "GradientImage", "kVec2Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 kVec2Zero
void HMUI::GradientImage::_set_kVec2Zero(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_kVec2Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "kVec2Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3AD8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 kVec3Zero
UnityEngine::Vector3 HMUI::GradientImage::_get_kVec3Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_kVec3Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("HMUI", "GradientImage", "kVec3Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 kVec3Zero
void HMUI::GradientImage::_set_kVec3Zero(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_kVec3Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "kVec3Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3AE8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 kVec4Zero
UnityEngine::Vector4 HMUI::GradientImage::_get_kVec4Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_kVec4Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("HMUI", "GradientImage", "kVec4Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 kVec4Zero
void HMUI::GradientImage::_set_kVec4Zero(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_kVec4Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "kVec4Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3AF8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
::Array<UnityEngine::Vector2>* HMUI::GradientImage::_get_s_VertScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_VertScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "GradientImage", "s_VertScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
void HMUI::GradientImage::_set_s_VertScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_VertScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_VertScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3B08
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
::Array<UnityEngine::Vector2>* HMUI::GradientImage::_get_s_UVScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_UVScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "GradientImage", "s_UVScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
void HMUI::GradientImage::_set_s_UVScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_UVScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_UVScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3B18
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color[] s_ColorScratch
::Array<UnityEngine::Color>* HMUI::GradientImage::_get_s_ColorScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_ColorScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Color>*>("HMUI", "GradientImage", "s_ColorScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color[] s_ColorScratch
void HMUI::GradientImage::_set_s_ColorScratch(::Array<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_ColorScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_ColorScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3B28
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Xy
::Array<UnityEngine::Vector3>* HMUI::GradientImage::_get_s_Xy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_Xy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "GradientImage", "s_Xy"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Xy
void HMUI::GradientImage::_set_s_Xy(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_Xy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_Xy", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3B38
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Uv
::Array<UnityEngine::Vector3>* HMUI::GradientImage::_get_s_Uv() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_Uv");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "GradientImage", "s_Uv"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Uv
void HMUI::GradientImage::_set_s_Uv(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_Uv");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_Uv", value));
}
// Autogenerated method: HMUI.GradientImage.get_color0
UnityEngine::Color HMUI::GradientImage::get_color0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::get_color0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.GradientImage.set_color0
void HMUI::GradientImage::set_color0(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::set_color0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.GradientImage.get_color1
UnityEngine::Color HMUI::GradientImage::get_color1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::get_color1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.GradientImage.set_color1
void HMUI::GradientImage::set_color1(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::set_color1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.GradientImage.GenerateSimpleSprite
void HMUI::GradientImage::GenerateSimpleSprite(UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateSimpleSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateSimpleSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh), ::il2cpp_utils::ExtractType(lPreserveAspect), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh, lPreserveAspect, curvedUIRadius);
}
// Autogenerated method: HMUI.GradientImage.GenerateSlicedSprite
void HMUI::GradientImage::GenerateSlicedSprite(UnityEngine::UI::VertexHelper* vh, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateSlicedSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateSlicedSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh, curvedUIRadius);
}
// Autogenerated method: HMUI.GradientImage.AddQuad
void HMUI::GradientImage::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color0, UnityEngine::Color32 color1, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, float elementWidthScale, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color0), ::il2cpp_utils::ExtractType(color1), ::il2cpp_utils::ExtractType(uv0Min), ::il2cpp_utils::ExtractType(uv0Max), ::il2cpp_utils::ExtractType(elementWidthScale), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, elementWidthScale, curvedUIRadius);
}
// Autogenerated method: HMUI.GradientImage..cctor
void HMUI::GradientImage::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.GradientImage.OnPopulateMesh
void HMUI::GradientImage::OnPopulateMesh(UnityEngine::UI::VertexHelper* toFill) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::OnPopulateMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill);
}
// Autogenerated method: HMUI.GradientImage.GenerateTiledSprite
void HMUI::GradientImage::GenerateTiledSprite(UnityEngine::UI::VertexHelper* toFill) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateTiledSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTiledSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill);
}
// Autogenerated method: HMUI.GradientImage.AddQuad
void HMUI::GradientImage::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, ::Array<UnityEngine::Vector3>* quadPositions, UnityEngine::Color32 color, ::Array<UnityEngine::Vector3>* quadUVs) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(quadPositions), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(quadUVs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, quadPositions, color, quadUVs);
}
// Autogenerated method: HMUI.GradientImage.AddQuad
void HMUI::GradientImage::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uvMin, UnityEngine::Vector2 uvMax) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(uvMin), ::il2cpp_utils::ExtractType(uvMax)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color, uvMin, uvMax);
}
// Autogenerated method: HMUI.GradientImage.GetAdjustedBorders
UnityEngine::Vector4 HMUI::GradientImage::GetAdjustedBorders(UnityEngine::Vector4 border, UnityEngine::Rect rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GetAdjustedBorders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAdjustedBorders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(border), ::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method, border, rect);
}
// Autogenerated method: HMUI.GradientImage.GenerateFilledSprite
void HMUI::GradientImage::GenerateFilledSprite(UnityEngine::UI::VertexHelper* toFill, bool preserveAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateFilledSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateFilledSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill), ::il2cpp_utils::ExtractType(preserveAspect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, preserveAspect);
}
// Autogenerated method: HMUI.GradientImage.RadialCut
bool HMUI::GradientImage::RadialCut(::Array<UnityEngine::Vector3>* xy, ::Array<UnityEngine::Vector3>* uv, float fill, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::RadialCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", "RadialCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xy), ::il2cpp_utils::ExtractType(uv), ::il2cpp_utils::ExtractType(fill), ::il2cpp_utils::ExtractType(invert), ::il2cpp_utils::ExtractType(corner)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, uv, fill, invert, corner);
}
// Autogenerated method: HMUI.GradientImage.RadialCut
void HMUI::GradientImage::RadialCut(::Array<UnityEngine::Vector3>* xy, float cos, float sin, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::RadialCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", "RadialCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xy), ::il2cpp_utils::ExtractType(cos), ::il2cpp_utils::ExtractType(sin), ::il2cpp_utils::ExtractType(invert), ::il2cpp_utils::ExtractType(corner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, cos, sin, invert, corner);
}
// Autogenerated method: HMUI.GradientImage.GetDrawingDimensions
UnityEngine::Vector4 HMUI::GradientImage::GetDrawingDimensions(bool shouldPreserveAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GetDrawingDimensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDrawingDimensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shouldPreserveAspect)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method, shouldPreserveAspect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: HMUI.CurvedCanvasSettingsHelper
#include "HMUI/CurvedCanvasSettingsHelper.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3BA8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 kVec2Zero
UnityEngine::Vector2 HMUI::ImageView::_get_kVec2Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_kVec2Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("HMUI", "ImageView", "kVec2Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 kVec2Zero
void HMUI::ImageView::_set_kVec2Zero(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_kVec2Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "kVec2Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3BB8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 kVec3Zero
UnityEngine::Vector3 HMUI::ImageView::_get_kVec3Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_kVec3Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("HMUI", "ImageView", "kVec3Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 kVec3Zero
void HMUI::ImageView::_set_kVec3Zero(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_kVec3Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "kVec3Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3BC8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 kVec4Zero
UnityEngine::Vector4 HMUI::ImageView::_get_kVec4Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_kVec4Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("HMUI", "ImageView", "kVec4Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 kVec4Zero
void HMUI::ImageView::_set_kVec4Zero(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_kVec4Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "kVec4Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3BD8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_VertScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_VertScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_VertScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
void HMUI::ImageView::_set_s_VertScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_VertScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_VertScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3BE8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_UVScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_UVScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_UVScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
void HMUI::ImageView::_set_s_UVScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_UVScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_UVScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3BF8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UV1Scratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_UV1Scratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_UV1Scratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_UV1Scratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UV1Scratch
void HMUI::ImageView::_set_s_UV1Scratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_UV1Scratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_UV1Scratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3C08
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color[] s_ColorScratch
::Array<UnityEngine::Color>* HMUI::ImageView::_get_s_ColorScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_ColorScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Color>*>("HMUI", "ImageView", "s_ColorScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color[] s_ColorScratch
void HMUI::ImageView::_set_s_ColorScratch(::Array<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_ColorScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_ColorScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3C18
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Xy
::Array<UnityEngine::Vector3>* HMUI::ImageView::_get_s_Xy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_Xy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "ImageView", "s_Xy"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Xy
void HMUI::ImageView::_set_s_Xy(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_Xy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_Xy", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3C28
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Uv
::Array<UnityEngine::Vector3>* HMUI::ImageView::_get_s_Uv() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_Uv");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "ImageView", "s_Uv"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Uv
void HMUI::ImageView::_set_s_Uv(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_Uv");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_Uv", value));
}
// Autogenerated method: HMUI.ImageView.get_gradient
bool HMUI::ImageView::get_gradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::get_gradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.get_skew
float HMUI::ImageView::get_skew() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::get_skew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_skew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.get_color0
UnityEngine::Color HMUI::ImageView::get_color0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::get_color0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.set_color0
void HMUI::ImageView::set_color0(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::set_color0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ImageView.get_color1
UnityEngine::Color HMUI::ImageView::get_color1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::get_color1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.set_color1
void HMUI::ImageView::set_color1(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::set_color1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ImageView.GenerateSimpleSprite
void HMUI::ImageView::GenerateSimpleSprite(UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateSimpleSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateSimpleSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh), ::il2cpp_utils::ExtractType(lPreserveAspect), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh, lPreserveAspect, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.GenerateSlicedSprite
void HMUI::ImageView::GenerateSlicedSprite(UnityEngine::UI::VertexHelper* toFill, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateSlicedSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateSlicedSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.GenerateTiledSprite
void HMUI::ImageView::GenerateTiledSprite(UnityEngine::UI::VertexHelper* toFill, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateTiledSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTiledSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uvMin, UnityEngine::Vector2 uvMax, float elementWidthScale, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(uvMin), ::il2cpp_utils::ExtractType(uvMax), ::il2cpp_utils::ExtractType(elementWidthScale), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color, uvMin, uvMax, elementWidthScale, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, UnityEngine::Vector2 uv1Min, UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(uv0Min), ::il2cpp_utils::ExtractType(uv0Max), ::il2cpp_utils::ExtractType(uv1Min), ::il2cpp_utils::ExtractType(uv1Max), ::il2cpp_utils::ExtractType(elementWidthScale), ::il2cpp_utils::ExtractType(curvedUIRadius), ::il2cpp_utils::ExtractType(skewFactor), ::il2cpp_utils::ExtractType(skewOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset);
}
// Autogenerated method: HMUI.ImageView.AddQuadWithHorizontalGradient
void HMUI::ImageView::AddQuadWithHorizontalGradient(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color0, UnityEngine::Color32 color1, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, UnityEngine::Vector2 uv1Min, UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuadWithHorizontalGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuadWithHorizontalGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color0), ::il2cpp_utils::ExtractType(color1), ::il2cpp_utils::ExtractType(uv0Min), ::il2cpp_utils::ExtractType(uv0Max), ::il2cpp_utils::ExtractType(uv1Min), ::il2cpp_utils::ExtractType(uv1Max), ::il2cpp_utils::ExtractType(elementWidthScale), ::il2cpp_utils::ExtractType(curvedUIRadius), ::il2cpp_utils::ExtractType(skewFactor), ::il2cpp_utils::ExtractType(skewOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset);
}
// Autogenerated method: HMUI.ImageView.AddQuadWithVerticalGradient
void HMUI::ImageView::AddQuadWithVerticalGradient(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color0, UnityEngine::Color32 color1, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, UnityEngine::Vector2 uv1Min, UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuadWithVerticalGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuadWithVerticalGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color0), ::il2cpp_utils::ExtractType(color1), ::il2cpp_utils::ExtractType(uv0Min), ::il2cpp_utils::ExtractType(uv0Max), ::il2cpp_utils::ExtractType(uv1Min), ::il2cpp_utils::ExtractType(uv1Max), ::il2cpp_utils::ExtractType(elementWidthScale), ::il2cpp_utils::ExtractType(curvedUIRadius), ::il2cpp_utils::ExtractType(skewFactor), ::il2cpp_utils::ExtractType(skewOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset);
}
// Autogenerated method: HMUI.ImageView.GenerateFilledSprite
void HMUI::ImageView::GenerateFilledSprite(UnityEngine::UI::VertexHelper* toFill, bool preserveAspect, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateFilledSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateFilledSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill), ::il2cpp_utils::ExtractType(preserveAspect), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, preserveAspect, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.GetNumberOfElements
int HMUI::ImageView::GetNumberOfElements(float curvedUIRadius, float width) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GetNumberOfElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "GetNumberOfElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curvedUIRadius), ::il2cpp_utils::ExtractType(width)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, curvedUIRadius, width);
}
// Autogenerated method: HMUI.ImageView..cctor
void HMUI::ImageView::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.ImageView.OnEnable
void HMUI::ImageView::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.OnPopulateMesh
void HMUI::ImageView::OnPopulateMesh(UnityEngine::UI::VertexHelper* toFill) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::OnPopulateMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill);
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, ::Array<UnityEngine::Vector3>* quadPositions, UnityEngine::Color32 color, ::Array<UnityEngine::Vector3>* quadUVs) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(quadPositions), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(quadUVs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, quadPositions, color, quadUVs);
}
// Autogenerated method: HMUI.ImageView.GetAdjustedBorders
UnityEngine::Vector4 HMUI::ImageView::GetAdjustedBorders(UnityEngine::Vector4 border, UnityEngine::Rect rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GetAdjustedBorders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "GetAdjustedBorders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(border), ::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, border, rect);
}
// Autogenerated method: HMUI.ImageView.RadialCut
bool HMUI::ImageView::RadialCut(::Array<UnityEngine::Vector3>* xy, ::Array<UnityEngine::Vector3>* uv, float fill, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::RadialCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "RadialCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xy), ::il2cpp_utils::ExtractType(uv), ::il2cpp_utils::ExtractType(fill), ::il2cpp_utils::ExtractType(invert), ::il2cpp_utils::ExtractType(corner)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, uv, fill, invert, corner);
}
// Autogenerated method: HMUI.ImageView.RadialCut
void HMUI::ImageView::RadialCut(::Array<UnityEngine::Vector3>* xy, float cos, float sin, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::RadialCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "RadialCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xy), ::il2cpp_utils::ExtractType(cos), ::il2cpp_utils::ExtractType(sin), ::il2cpp_utils::ExtractType(invert), ::il2cpp_utils::ExtractType(corner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, cos, sin, invert, corner);
}
// Autogenerated method: HMUI.ImageView.GetDrawingDimensions
UnityEngine::Vector4 HMUI::ImageView::GetDrawingDimensions(bool shouldPreserveAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GetDrawingDimensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDrawingDimensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shouldPreserveAspect)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method, shouldPreserveAspect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ImageView/HMUI.GradientDirection
#include "HMUI/ImageView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ImageView/HMUI.GradientDirection Horizontal
HMUI::ImageView::GradientDirection HMUI::ImageView::GradientDirection::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ImageView::GradientDirection>("HMUI", "ImageView/GradientDirection", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ImageView/HMUI.GradientDirection Horizontal
void HMUI::ImageView::GradientDirection::_set_Horizontal(HMUI::ImageView::GradientDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView/GradientDirection", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ImageView/HMUI.GradientDirection Vertical
HMUI::ImageView::GradientDirection HMUI::ImageView::GradientDirection::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ImageView::GradientDirection>("HMUI", "ImageView/GradientDirection", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ImageView/HMUI.GradientDirection Vertical
void HMUI::ImageView::GradientDirection::_set_Vertical(HMUI::ImageView::GradientDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView/GradientDirection", "Vertical", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ImageWithHint
#include "HMUI/ImageWithHint.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ImageWithHint.get_sprite
UnityEngine::Sprite* HMUI::ImageWithHint::get_sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageWithHint::get_sprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageWithHint.set_sprite
void HMUI::ImageWithHint::set_sprite(UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageWithHint::set_sprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ImageWithHint.set_hintText
void HMUI::ImageWithHint::set_hintText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageWithHint::set_hintText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hintText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.InputFieldView
#include "HMUI/InputFieldView.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.InputFieldView/HMUI.InputFieldChanged
#include "HMUI/InputFieldView_InputFieldChanged.hpp"
// Including type: HMUI.InputFieldView/HMUI.<BlinkingCaretCoroutine>d__43
#include "HMUI/InputFieldView_-BlinkingCaretCoroutine-d__43.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.YieldInstruction
#include "UnityEngine/YieldInstruction.hpp"
// Including type: HMUI.UIKeyboard
#include "HMUI/UIKeyboard.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: UnityEngine.UI.Selectable/UnityEngine.UI.SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kBlinkingRate
float HMUI::InputFieldView::_get_kBlinkingRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::_get_kBlinkingRate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "InputFieldView", "kBlinkingRate"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kBlinkingRate
void HMUI::InputFieldView::_set_kBlinkingRate(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::_set_kBlinkingRate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView", "kBlinkingRate", value));
}
// Autogenerated method: HMUI.InputFieldView.get_selectionState
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::get_selectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_selectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::InputFieldView::SelectionState, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.get_keyboardPositionOffset
UnityEngine::Vector3 HMUI::InputFieldView::get_keyboardPositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_keyboardPositionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keyboardPositionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.get_onValueChanged
HMUI::InputFieldView::InputFieldChanged* HMUI::InputFieldView::get_onValueChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_onValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::InputFieldView::InputFieldChanged*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.set_onValueChanged
void HMUI::InputFieldView::set_onValueChanged(HMUI::InputFieldView::InputFieldChanged* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::set_onValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.get_useGlobalKeyboard
bool HMUI::InputFieldView::get_useGlobalKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_useGlobalKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useGlobalKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.get_text
::Il2CppString* HMUI::InputFieldView::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.set_text
void HMUI::InputFieldView::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.add_selectionStateDidChangeEvent
void HMUI::InputFieldView::add_selectionStateDidChangeEvent(System::Action_1<HMUI::InputFieldView::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::add_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.remove_selectionStateDidChangeEvent
void HMUI::InputFieldView::remove_selectionStateDidChangeEvent(System::Action_1<HMUI::InputFieldView::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::remove_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.ActivateKeyboard
void HMUI::InputFieldView::ActivateKeyboard(HMUI::UIKeyboard* keyboard) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::ActivateKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyboard)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyboard);
}
// Autogenerated method: HMUI.InputFieldView.DeactivateKeyboard
void HMUI::InputFieldView::DeactivateKeyboard(HMUI::UIKeyboard* keyboard) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::DeactivateKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyboard)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyboard);
}
// Autogenerated method: HMUI.InputFieldView.SetText
void HMUI::InputFieldView::SetText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.ClearInput
void HMUI::InputFieldView::ClearInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::ClearInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.KeyboardKeyPressed
void HMUI::InputFieldView::KeyboardKeyPressed(::Il2CppChar letter) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::KeyboardKeyPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeyboardKeyPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(letter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, letter);
}
// Autogenerated method: HMUI.InputFieldView.KeyboardDeletePressed
void HMUI::InputFieldView::KeyboardDeletePressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::KeyboardDeletePressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeyboardDeletePressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.BlinkingCaretCoroutine
System::Collections::IEnumerator* HMUI::InputFieldView::BlinkingCaretCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::BlinkingCaretCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BlinkingCaretCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.UpdateCaretPosition
void HMUI::InputFieldView::UpdateCaretPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::UpdateCaretPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCaretPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.UpdatePlaceholder
void HMUI::InputFieldView::UpdatePlaceholder() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::UpdatePlaceholder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePlaceholder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.UpdateClearButton
void HMUI::InputFieldView::UpdateClearButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::UpdateClearButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateClearButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.<Awake>b__34_0
void HMUI::InputFieldView::$Awake$b__34_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::<Awake>b__34_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__34_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.Awake
void HMUI::InputFieldView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.OnDestroy
void HMUI::InputFieldView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.DoStateTransition
void HMUI::InputFieldView::DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::DoStateTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(instant)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldView/HMUI.SelectionState
#include "HMUI/InputFieldView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/HMUI.SelectionState Normal
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/HMUI.SelectionState Normal
void HMUI::InputFieldView::SelectionState::_set_Normal(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/HMUI.SelectionState Highlighted
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Highlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Highlighted"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/HMUI.SelectionState Highlighted
void HMUI::InputFieldView::SelectionState::_set_Highlighted(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Highlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Highlighted", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/HMUI.SelectionState Pressed
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Pressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Pressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Pressed"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/HMUI.SelectionState Pressed
void HMUI::InputFieldView::SelectionState::_set_Pressed(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Pressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Pressed", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/HMUI.SelectionState Disabled
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/HMUI.SelectionState Disabled
void HMUI::InputFieldView::SelectionState::_set_Disabled(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/HMUI.SelectionState Selected
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Selected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Selected"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/HMUI.SelectionState Selected
void HMUI::InputFieldView::SelectionState::_set_Selected(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Selected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Selected", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldView/HMUI.InputFieldChanged
#include "HMUI/InputFieldView_InputFieldChanged.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.InputFieldView/HMUI.<BlinkingCaretCoroutine>d__43
#include "HMUI/InputFieldView_-BlinkingCaretCoroutine-d__43.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.InputFieldView/HMUI.<BlinkingCaretCoroutine>d__43.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/HMUI.<BlinkingCaretCoroutine>d__43.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/HMUI.<BlinkingCaretCoroutine>d__43.System.IDisposable.Dispose
void HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/HMUI.<BlinkingCaretCoroutine>d__43.MoveNext
bool HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/HMUI.<BlinkingCaretCoroutine>d__43.System.Collections.IEnumerator.Reset
void HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldViewStaticAnimations
#include "HMUI/InputFieldViewStaticAnimations.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.Awake
void HMUI::InputFieldViewStaticAnimations::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.Start
void HMUI::InputFieldViewStaticAnimations::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.OnEnable
void HMUI::InputFieldViewStaticAnimations::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.OnDestroy
void HMUI::InputFieldViewStaticAnimations::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.HandleInputFieldViewSelectionStateDidChange
void HMUI::InputFieldViewStaticAnimations::HandleInputFieldViewSelectionStateDidChange(HMUI::InputFieldView::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::HandleInputFieldViewSelectionStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFieldViewSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ModalView
#include "HMUI/ModalView.hpp"
// Including type: HMUI.ModalView/HMUI.<>c__DisplayClass17_0
#include "HMUI/ModalView_--c__DisplayClass17_0.hpp"
// Including type: HMUI.ModalView/HMUI.<>c__DisplayClass21_0
#include "HMUI/ModalView_--c__DisplayClass21_0.hpp"
// Including type: HMUI.PanelAnimationSO
#include "HMUI/PanelAnimationSO.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ModalView.add_blockerClickedEvent
void HMUI::ModalView::add_blockerClickedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::add_blockerClickedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_blockerClickedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ModalView.remove_blockerClickedEvent
void HMUI::ModalView::remove_blockerClickedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::remove_blockerClickedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_blockerClickedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ModalView.OnDisable
void HMUI::ModalView::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.OnDestroy
void HMUI::ModalView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.SetupView
void HMUI::ModalView::SetupView(UnityEngine::Transform* screenTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::SetupView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenTransform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screenTransform);
}
// Autogenerated method: HMUI.ModalView.Hide
void HMUI::ModalView::Hide(bool animated, System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated), ::il2cpp_utils::ExtractType(finishedCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated, finishedCallback);
}
// Autogenerated method: HMUI.ModalView.Show
void HMUI::ModalView::Show(bool animated, bool moveToCenter, System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated), ::il2cpp_utils::ExtractType(moveToCenter), ::il2cpp_utils::ExtractType(finishedCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated, moveToCenter, finishedCallback);
}
// Autogenerated method: HMUI.ModalView.CreateBlocker
UnityEngine::GameObject* HMUI::ModalView::CreateBlocker() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::CreateBlocker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBlocker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.HandleBlockerButtonClicked
void HMUI::ModalView::HandleBlockerButtonClicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::HandleBlockerButtonClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBlockerButtonClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.HandleParentViewControllerDidDeactivate
void HMUI::ModalView::HandleParentViewControllerDidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::HandleParentViewControllerDidDeactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleParentViewControllerDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.ModalView.GetModalRootTransform
UnityEngine::Transform* HMUI::ModalView::GetModalRootTransform(UnityEngine::Transform* transform, UnityEngine::Canvas*& canvas, HMUI::ViewController*& viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::GetModalRootTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ModalView", "GetModalRootTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Canvas*&>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, canvas, viewController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ModalView/HMUI.<>c__DisplayClass17_0
#include "HMUI/ModalView_--c__DisplayClass17_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ModalView/HMUI.<>c__DisplayClass17_0.<Hide>b__0
void HMUI::ModalView::$$c__DisplayClass17_0::$Hide$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::$$c__DisplayClass17_0::<Hide>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Hide>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ModalView/HMUI.<>c__DisplayClass21_0
#include "HMUI/ModalView_--c__DisplayClass21_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ModalView/HMUI.<>c__DisplayClass21_0.<HandleParentViewControllerDidDeactivate>b__0
void HMUI::ModalView::$$c__DisplayClass21_0::$HandleParentViewControllerDidDeactivate$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::$$c__DisplayClass21_0::<HandleParentViewControllerDidDeactivate>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleParentViewControllerDidDeactivate>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ItemForFocussedScrolling
#include "HMUI/ItemForFocussedScrolling.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollToTopOnEnable
#include "HMUI/ScrollToTopOnEnable.hpp"
// Including type: HMUI.ScrollView
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollToTopOnEnable.OnEnable
void HMUI::ScrollToTopOnEnable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollToTopOnEnable::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ScrollView
#include "HMUI/ScrollView.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.ScrollView/HMUI.<>c
#include "HMUI/ScrollView_--c.hpp"
// Including type: HMUI.ScrollView/HMUI.<>c__DisplayClass50_0
#include "HMUI/ScrollView_--c__DisplayClass50_0.hpp"
// Including type: HMUI.ScrollView/HMUI.<>c__DisplayClass51_0
#include "HMUI/ScrollView_--c__DisplayClass51_0.hpp"
// Including type: HMUI.ScrollView/HMUI.<>c__DisplayClass56_0
#include "HMUI/ScrollView_--c__DisplayClass56_0.hpp"
// Including type: HMUI.ScrollView/HMUI.<>c__DisplayClass56_1
#include "HMUI/ScrollView_--c__DisplayClass56_1.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: HMUI.VerticalScrollIndicator
#include "HMUI/VerticalScrollIndicator.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.EventSystemListener
#include "HMUI/EventSystemListener.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: HMUI.ItemForFocussedScrolling
#include "HMUI/ItemForFocussedScrolling.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView.get_viewportTransform
UnityEngine::RectTransform* HMUI::ScrollView::get_viewportTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_viewportTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_viewportTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_contentTransform
UnityEngine::RectTransform* HMUI::ScrollView::get_contentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_contentTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_contentTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_position
float HMUI::ScrollView::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_scrollableSize
float HMUI::ScrollView::get_scrollableSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_scrollableSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scrollableSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_scrollPageSize
float HMUI::ScrollView::get_scrollPageSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_scrollPageSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scrollPageSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_contentSize
float HMUI::ScrollView::get_contentSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_contentSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_contentSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.add_scrollPositionChangedEvent
void HMUI::ScrollView::add_scrollPositionChangedEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::add_scrollPositionChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_scrollPositionChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScrollView.remove_scrollPositionChangedEvent
void HMUI::ScrollView::remove_scrollPositionChangedEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::remove_scrollPositionChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_scrollPositionChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScrollView.Awake
void HMUI::ScrollView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.OnDestroy
void HMUI::ScrollView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.Update
void HMUI::ScrollView::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.SetContentSize
void HMUI::ScrollView::SetContentSize(float contentSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::SetContentSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContentSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contentSize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, contentSize);
}
// Autogenerated method: HMUI.ScrollView.UpdateContentSize
void HMUI::ScrollView::UpdateContentSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::UpdateContentSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateContentSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.ScrollToEnd
void HMUI::ScrollView::ScrollToEnd(bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollToEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollToEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated);
}
// Autogenerated method: HMUI.ScrollView.ScrollToWorldPosition
void HMUI::ScrollView::ScrollToWorldPosition(UnityEngine::Vector3 worldPosition, float pageRelativePosition, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollToWorldPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollToWorldPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPosition), ::il2cpp_utils::ExtractType(pageRelativePosition), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, worldPosition, pageRelativePosition, animated);
}
// Autogenerated method: HMUI.ScrollView.ScrollToWorldPositionIfOutsideArea
void HMUI::ScrollView::ScrollToWorldPositionIfOutsideArea(UnityEngine::Vector3 worldPosition, float pageRelativePosition, float relativeBoundaryStart, float relativeBoundaryEnd, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollToWorldPositionIfOutsideArea");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollToWorldPositionIfOutsideArea", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPosition), ::il2cpp_utils::ExtractType(pageRelativePosition), ::il2cpp_utils::ExtractType(relativeBoundaryStart), ::il2cpp_utils::ExtractType(relativeBoundaryEnd), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, worldPosition, pageRelativePosition, relativeBoundaryStart, relativeBoundaryEnd, animated);
}
// Autogenerated method: HMUI.ScrollView.ScrollTo
void HMUI::ScrollView::ScrollTo(float destinationPos, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destinationPos), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, destinationPos, animated);
}
// Autogenerated method: HMUI.ScrollView.WorldPositionToScrollViewPosition
UnityEngine::Vector2 HMUI::ScrollView::WorldPositionToScrollViewPosition(UnityEngine::Vector3 worldPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::WorldPositionToScrollViewPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WorldPositionToScrollViewPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPosition)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, worldPosition);
}
// Autogenerated method: HMUI.ScrollView.SetDestinationPos
void HMUI::ScrollView::SetDestinationPos(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::SetDestinationPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDestinationPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScrollView.UpdateVerticalScrollIndicator
void HMUI::ScrollView::UpdateVerticalScrollIndicator(float posY) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::UpdateVerticalScrollIndicator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVerticalScrollIndicator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(posY)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, posY);
}
// Autogenerated method: HMUI.ScrollView.PageUpButtonPressed
void HMUI::ScrollView::PageUpButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::PageUpButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PageUpButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.PageDownButtonPressed
void HMUI::ScrollView::PageDownButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::PageDownButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PageDownButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.RefreshButtons
void HMUI::ScrollView::RefreshButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::RefreshButtons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshButtons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.HandlePointerDidEnter
void HMUI::ScrollView::HandlePointerDidEnter(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandlePointerDidEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePointerDidEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.ScrollView.HandlePointerDidExit
void HMUI::ScrollView::HandlePointerDidExit(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandlePointerDidExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePointerDidExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.ScrollView.HandleJoystickWasNotCenteredThisFrame
void HMUI::ScrollView::HandleJoystickWasNotCenteredThisFrame(UnityEngine::Vector2 deltaPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandleJoystickWasNotCenteredThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoystickWasNotCenteredThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaPos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deltaPos);
}
// Autogenerated method: HMUI.ScrollView.HandleJoystickWasCenteredThisFrame
void HMUI::ScrollView::HandleJoystickWasCenteredThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandleJoystickWasCenteredThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoystickWasCenteredThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.ResolveScrollDirection
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ResolveScrollDirection(UnityEngine::Vector2 deltaPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ResolveScrollDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveScrollDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaPos)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ScrollView::ScrollDirection, false>(this, ___internal__method, deltaPos);
}
// Autogenerated method: HMUI.ScrollView.<Awake>b__38_0
float HMUI::ScrollView::$Awake$b__38_0(HMUI::ItemForFocussedScrolling* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::<Awake>b__38_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__38_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, item);
}
// Autogenerated method: HMUI.ScrollView.<Awake>b__38_2
float HMUI::ScrollView::$Awake$b__38_2(HMUI::ItemForFocussedScrolling* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::<Awake>b__38_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__38_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, item);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/HMUI.ScrollType
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/HMUI.ScrollType PageSize
HMUI::ScrollView::ScrollType HMUI::ScrollView::ScrollType::_get_PageSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_get_PageSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollType>("HMUI", "ScrollView/ScrollType", "PageSize"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/HMUI.ScrollType PageSize
void HMUI::ScrollView::ScrollType::_set_PageSize(HMUI::ScrollView::ScrollType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_set_PageSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollType", "PageSize", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/HMUI.ScrollType FixedCellSize
HMUI::ScrollView::ScrollType HMUI::ScrollView::ScrollType::_get_FixedCellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_get_FixedCellSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollType>("HMUI", "ScrollView/ScrollType", "FixedCellSize"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/HMUI.ScrollType FixedCellSize
void HMUI::ScrollView::ScrollType::_set_FixedCellSize(HMUI::ScrollView::ScrollType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_set_FixedCellSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollType", "FixedCellSize", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/HMUI.ScrollType FocusItems
HMUI::ScrollView::ScrollType HMUI::ScrollView::ScrollType::_get_FocusItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_get_FocusItems");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollType>("HMUI", "ScrollView/ScrollType", "FocusItems"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/HMUI.ScrollType FocusItems
void HMUI::ScrollView::ScrollType::_set_FocusItems(HMUI::ScrollView::ScrollType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_set_FocusItems");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollType", "FocusItems", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/HMUI.ScrollDirection
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/HMUI.ScrollDirection None
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "None"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/HMUI.ScrollDirection None
void HMUI::ScrollView::ScrollDirection::_set_None(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "None", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/HMUI.ScrollDirection Up
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/HMUI.ScrollDirection Up
void HMUI::ScrollView::ScrollDirection::_set_Up(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/HMUI.ScrollDirection Down
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/HMUI.ScrollDirection Down
void HMUI::ScrollView::ScrollDirection::_set_Down(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/HMUI.ScrollDirection Left
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/HMUI.ScrollDirection Left
void HMUI::ScrollView::ScrollDirection::_set_Left(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/HMUI.ScrollDirection Right
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/HMUI.ScrollDirection Right
void HMUI::ScrollView::ScrollDirection::_set_Right(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "Right", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/HMUI.ScrollViewDirection
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/HMUI.ScrollViewDirection Vertical
HMUI::ScrollView::ScrollViewDirection HMUI::ScrollView::ScrollViewDirection::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollViewDirection::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollViewDirection>("HMUI", "ScrollView/ScrollViewDirection", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/HMUI.ScrollViewDirection Vertical
void HMUI::ScrollView::ScrollViewDirection::_set_Vertical(HMUI::ScrollView::ScrollViewDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollViewDirection::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollViewDirection", "Vertical", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/HMUI.ScrollViewDirection Horizontal
HMUI::ScrollView::ScrollViewDirection HMUI::ScrollView::ScrollViewDirection::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollViewDirection::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollViewDirection>("HMUI", "ScrollView/ScrollViewDirection", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/HMUI.ScrollViewDirection Horizontal
void HMUI::ScrollView::ScrollViewDirection::_set_Horizontal(HMUI::ScrollView::ScrollViewDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollViewDirection::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollViewDirection", "Horizontal", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/HMUI.<>c
#include "HMUI/ScrollView_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.ScrollView/HMUI.<>c <>9
HMUI::ScrollView::$$c* HMUI::ScrollView::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::ScrollView::$$c*>("HMUI", "ScrollView/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.ScrollView/HMUI.<>c <>9
void HMUI::ScrollView::$$c::_set_$$9(HMUI::ScrollView::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollView/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Single,System.Single> <>9__38_1
System::Func_2<float, float>* HMUI::ScrollView::$$c::_get_$$9__38_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_get_$$9__38_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<float, float>*>("HMUI", "ScrollView/<>c", "<>9__38_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Single,System.Single> <>9__38_1
void HMUI::ScrollView::$$c::_set_$$9__38_1(System::Func_2<float, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_set_$$9__38_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollView/<>c", "<>9__38_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Single,System.Single> <>9__38_3
System::Func_2<float, float>* HMUI::ScrollView::$$c::_get_$$9__38_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_get_$$9__38_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<float, float>*>("HMUI", "ScrollView/<>c", "<>9__38_3")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Single,System.Single> <>9__38_3
void HMUI::ScrollView::$$c::_set_$$9__38_3(System::Func_2<float, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_set_$$9__38_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollView/<>c", "<>9__38_3", value)));
}
// Autogenerated method: HMUI.ScrollView/HMUI.<>c..cctor
void HMUI::ScrollView::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ScrollView/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.ScrollView/HMUI.<>c.<Awake>b__38_1
float HMUI::ScrollView::$$c::$Awake$b__38_1(float i) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::<Awake>b__38_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__38_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, i);
}
// Autogenerated method: HMUI.ScrollView/HMUI.<>c.<Awake>b__38_3
float HMUI::ScrollView::$$c::$Awake$b__38_3(float i) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::<Awake>b__38_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__38_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, i);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/HMUI.<>c__DisplayClass50_0
#include "HMUI/ScrollView_--c__DisplayClass50_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/HMUI.<>c__DisplayClass50_0.<PageUpButtonPressed>b__0
bool HMUI::ScrollView::$$c__DisplayClass50_0::$PageUpButtonPressed$b__0(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass50_0::<PageUpButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PageUpButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/HMUI.<>c__DisplayClass51_0
#include "HMUI/ScrollView_--c__DisplayClass51_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/HMUI.<>c__DisplayClass51_0.<PageDownButtonPressed>b__0
bool HMUI::ScrollView::$$c__DisplayClass51_0::$PageDownButtonPressed$b__0(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass51_0::<PageDownButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PageDownButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/HMUI.<>c__DisplayClass56_0
#include "HMUI/ScrollView_--c__DisplayClass56_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/HMUI.<>c__DisplayClass56_0.<HandleJoystickWasCenteredThisFrame>b__0
bool HMUI::ScrollView::$$c__DisplayClass56_0::$HandleJoystickWasCenteredThisFrame$b__0(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass56_0::<HandleJoystickWasCenteredThisFrame>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleJoystickWasCenteredThisFrame>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/HMUI.<>c__DisplayClass56_1
#include "HMUI/ScrollView_--c__DisplayClass56_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/HMUI.<>c__DisplayClass56_1.<HandleJoystickWasCenteredThisFrame>b__1
bool HMUI::ScrollView::$$c__DisplayClass56_1::$HandleJoystickWasCenteredThisFrame$b__1(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass56_1::<HandleJoystickWasCenteredThisFrame>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleJoystickWasCenteredThisFrame>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ScrollViewItemForVisibilityController
#include "HMUI/ScrollViewItemForVisibilityController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollViewItemForVisibilityController.GetWorldCorners
void HMUI::ScrollViewItemForVisibilityController::GetWorldCorners(::Array<UnityEngine::Vector3>* fourCornersArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemForVisibilityController::GetWorldCorners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorldCorners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fourCornersArray)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fourCornersArray);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ScrollViewItemsVisibilityController
#include "HMUI/ScrollViewItemsVisibilityController.hpp"
// Including type: HMUI.ScrollViewItemsVisibilityController/HMUI.<>c
#include "HMUI/ScrollViewItemsVisibilityController_--c.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: HMUI.ScrollViewItemForVisibilityController
#include "HMUI/ScrollViewItemForVisibilityController.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController.Start
void HMUI::ScrollViewItemsVisibilityController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController.Update
void HMUI::ScrollViewItemsVisibilityController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController.UpdateVisibilityUpDirection
void HMUI::ScrollViewItemsVisibilityController::UpdateVisibilityUpDirection(float newContentAnchoredPositionY) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::UpdateVisibilityUpDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisibilityUpDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newContentAnchoredPositionY)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newContentAnchoredPositionY);
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController.UpdateVisibilityDownDirection
void HMUI::ScrollViewItemsVisibilityController::UpdateVisibilityDownDirection(float newContentAnchoredPositionY) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::UpdateVisibilityDownDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisibilityDownDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newContentAnchoredPositionY)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newContentAnchoredPositionY);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollViewItemsVisibilityController/HMUI.<>c
#include "HMUI/ScrollViewItemsVisibilityController_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: HMUI.ScrollViewItemForVisibilityController
#include "HMUI/ScrollViewItemForVisibilityController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.ScrollViewItemsVisibilityController/HMUI.<>c <>9
HMUI::ScrollViewItemsVisibilityController::$$c* HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::ScrollViewItemsVisibilityController::$$c*>("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.ScrollViewItemsVisibilityController/HMUI.<>c <>9
void HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9(HMUI::ScrollViewItemsVisibilityController::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Tuple`2<HMUI.ScrollViewItemForVisibilityController,System.Single>,System.Single> <>9__11_0
System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>* HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9__11_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9__11_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>*>("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9__11_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Tuple`2<HMUI.ScrollViewItemForVisibilityController,System.Single>,System.Single> <>9__11_0
void HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9__11_0(System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9__11_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9__11_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Tuple`2<HMUI.ScrollViewItemForVisibilityController,System.Single>,System.Single> <>9__11_1
System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>* HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9__11_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9__11_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>*>("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9__11_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Tuple`2<HMUI.ScrollViewItemForVisibilityController,System.Single>,System.Single> <>9__11_1
void HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9__11_1(System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9__11_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9__11_1", value)));
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController/HMUI.<>c..cctor
void HMUI::ScrollViewItemsVisibilityController::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ScrollViewItemsVisibilityController/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController/HMUI.<>c.<Start>b__11_0
float HMUI::ScrollViewItemsVisibilityController::$$c::$Start$b__11_0(System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::<Start>b__11_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__11_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, item);
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController/HMUI.<>c.<Start>b__11_1
float HMUI::ScrollViewItemsVisibilityController::$$c::$Start$b__11_1(System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::<Start>b__11_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__11_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, item);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SelectableCell
#include "HMUI/SelectableCell.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.EventSystems.BaseEventData
#include "UnityEngine/EventSystems/BaseEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SelectableCell.get_highlighted
bool HMUI::SelectableCell::get_highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::get_highlighted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_highlighted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCell.set_highlighted
void HMUI::SelectableCell::set_highlighted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::set_highlighted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_highlighted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.get_selected
bool HMUI::SelectableCell::get_selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::get_selected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCell.set_selected
void HMUI::SelectableCell::set_selected(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::set_selected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.add_selectionDidChangeEvent
void HMUI::SelectableCell::add_selectionDidChangeEvent(System::Action_3<HMUI::SelectableCell*, HMUI::SelectableCell::TransitionType, ::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::add_selectionDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectionDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.remove_selectionDidChangeEvent
void HMUI::SelectableCell::remove_selectionDidChangeEvent(System::Action_3<HMUI::SelectableCell*, HMUI::SelectableCell::TransitionType, ::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::remove_selectionDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectionDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.add_highlightDidChangeEvent
void HMUI::SelectableCell::add_highlightDidChangeEvent(System::Action_2<HMUI::SelectableCell*, HMUI::SelectableCell::TransitionType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::add_highlightDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_highlightDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.remove_highlightDidChangeEvent
void HMUI::SelectableCell::remove_highlightDidChangeEvent(System::Action_2<HMUI::SelectableCell*, HMUI::SelectableCell::TransitionType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::remove_highlightDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_highlightDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.Start
void HMUI::SelectableCell::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCell.SetSelected
void HMUI::SelectableCell::SetSelected(bool value, HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner, bool ignoreCurrentValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::SetSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(transitionType), ::il2cpp_utils::ExtractType(changeOwner), ::il2cpp_utils::ExtractType(ignoreCurrentValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, transitionType, changeOwner, ignoreCurrentValue);
}
// Autogenerated method: HMUI.SelectableCell.ClearHighlight
void HMUI::SelectableCell::ClearHighlight(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::ClearHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: HMUI.SelectableCell.SetHighlight
void HMUI::SelectableCell::SetHighlight(bool value, HMUI::SelectableCell::TransitionType transitionType, bool ignoreCurrentValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::SetHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(transitionType), ::il2cpp_utils::ExtractType(ignoreCurrentValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, transitionType, ignoreCurrentValue);
}
// Autogenerated method: HMUI.SelectableCell.InternalToggle
void HMUI::SelectableCell::InternalToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::InternalToggle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalToggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCell.SelectionDidChange
void HMUI::SelectableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: HMUI.SelectableCell.HighlightDidChange
void HMUI::SelectableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::HighlightDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: HMUI.SelectableCell.OnPointerClick
void HMUI::SelectableCell::OnPointerClick(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::OnPointerClick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.SelectableCell.OnSubmit
void HMUI::SelectableCell::OnSubmit(UnityEngine::EventSystems::BaseEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::OnSubmit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSubmit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.SelectableCell.OnPointerEnter
void HMUI::SelectableCell::OnPointerEnter(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::OnPointerEnter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.SelectableCell.OnPointerExit
void HMUI::SelectableCell::OnPointerExit(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::OnPointerExit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SelectableCell/HMUI.TransitionType
#include "HMUI/SelectableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.SelectableCell/HMUI.TransitionType Instant
HMUI::SelectableCell::TransitionType HMUI::SelectableCell::TransitionType::_get_Instant() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::TransitionType::_get_Instant");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::SelectableCell::TransitionType>("HMUI", "SelectableCell/TransitionType", "Instant"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.SelectableCell/HMUI.TransitionType Instant
void HMUI::SelectableCell::TransitionType::_set_Instant(HMUI::SelectableCell::TransitionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::TransitionType::_set_Instant");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "SelectableCell/TransitionType", "Instant", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.SelectableCell/HMUI.TransitionType Animated
HMUI::SelectableCell::TransitionType HMUI::SelectableCell::TransitionType::_get_Animated() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::TransitionType::_get_Animated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::SelectableCell::TransitionType>("HMUI", "SelectableCell/TransitionType", "Animated"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.SelectableCell/HMUI.TransitionType Animated
void HMUI::SelectableCell::TransitionType::_set_Animated(HMUI::SelectableCell::TransitionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::TransitionType::_set_Animated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "SelectableCell/TransitionType", "Animated", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SelectableCellStaticAnimations
#include "HMUI/SelectableCellStaticAnimations.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SelectableCellStaticAnimations.Awake
void HMUI::SelectableCellStaticAnimations::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCellStaticAnimations.Start
void HMUI::SelectableCellStaticAnimations::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCellStaticAnimations.OnDestroy
void HMUI::SelectableCellStaticAnimations::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCellStaticAnimations.HandleSelectionDidChange
void HMUI::SelectableCellStaticAnimations::HandleSelectionDidChange(HMUI::SelectableCell* selectableCell, HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::HandleSelectionDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectableCell), ::il2cpp_utils::ExtractType(transitionType), ::il2cpp_utils::ExtractType(changeOwner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectableCell, transitionType, changeOwner);
}
// Autogenerated method: HMUI.SelectableCellStaticAnimations.HandleHighlightDidChange
void HMUI::SelectableCellStaticAnimations::HandleHighlightDidChange(HMUI::SelectableCell* selectableCell, HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::HandleHighlightDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHighlightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectableCell), ::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectableCell, transitionType);
}
// Autogenerated method: HMUI.SelectableCellStaticAnimations.RefreshVisuals
void HMUI::SelectableCellStaticAnimations::RefreshVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::RefreshVisuals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SetPropertyUtility
#include "HMUI/SetPropertyUtility.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SetPropertyUtility.SetColor
bool HMUI::SetPropertyUtility::SetColor(UnityEngine::Color& currentValue, UnityEngine::Color newValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SetPropertyUtility::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "SetPropertyUtility", "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentValue), ::il2cpp_utils::ExtractType(newValue)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, currentValue, newValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SimpleTextDropdown
#include "HMUI/SimpleTextDropdown.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: SimpleTextTableCell
#include "GlobalNamespace/SimpleTextTableCell.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kCellReuseIdentifier
::Il2CppString* HMUI::SimpleTextDropdown::_get_kCellReuseIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::_get_kCellReuseIdentifier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("HMUI", "SimpleTextDropdown", "kCellReuseIdentifier"));
}
// Autogenerated static field setter
// Set static field: static private System.String kCellReuseIdentifier
void HMUI::SimpleTextDropdown::_set_kCellReuseIdentifier(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::_set_kCellReuseIdentifier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "SimpleTextDropdown", "kCellReuseIdentifier", value));
}
// Autogenerated method: HMUI.SimpleTextDropdown.LazyInit
void HMUI::SimpleTextDropdown::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::LazyInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SimpleTextDropdown.SetTexts
void HMUI::SimpleTextDropdown::SetTexts(System::Collections::Generic::IReadOnlyList_1<::Il2CppString*>* texts) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::SetTexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texts)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, texts);
}
// Autogenerated method: HMUI.SimpleTextDropdown.CellSize
float HMUI::SimpleTextDropdown::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::CellSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SimpleTextDropdown.NumberOfCells
int HMUI::SimpleTextDropdown::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SimpleTextDropdown.CellForIdx
HMUI::TableCell* HMUI::SimpleTextDropdown::CellForIdx(HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::CellForIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated method: HMUI.SimpleTextDropdown.HandleDidSelectCellWithIdx
void HMUI::SimpleTextDropdown::HandleDidSelectCellWithIdx(HMUI::DropdownWithTableView* dropdownWithTableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::HandleDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropdownWithTableView), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dropdownWithTableView, idx);
}
// Autogenerated method: HMUI.SimpleTextDropdown.OnDestroy
void HMUI::SimpleTextDropdown::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SimpleTextDropdown.Init
void HMUI::SimpleTextDropdown::Init(HMUI::TableView::IDataSource* initTableViewDataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initTableViewDataSource)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, initTableViewDataSource);
}
// Autogenerated method: HMUI.SimpleTextDropdown.SelectCellWithIdx
void HMUI::SimpleTextDropdown::SelectCellWithIdx(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::SelectCellWithIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SwitchView
#include "HMUI/SwitchView.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SwitchView.Awake
void HMUI::SwitchView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SwitchView.Start
void HMUI::SwitchView::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SwitchView.OnDestroy
void HMUI::SwitchView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SwitchView.HandleOnValueChanged
void HMUI::SwitchView::HandleOnValueChanged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::HandleOnValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleOnValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SwitchView.HandleStateDidChange
void HMUI::SwitchView::HandleStateDidChange(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::HandleStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SwitchView.RefreshVisuals
void HMUI::SwitchView::RefreshVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::RefreshVisuals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SwitchView/HMUI.AnimationType
#include "HMUI/SwitchView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.SwitchView/HMUI.AnimationType OnOff
HMUI::SwitchView::AnimationType HMUI::SwitchView::AnimationType::_get_OnOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::AnimationType::_get_OnOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::SwitchView::AnimationType>("HMUI", "SwitchView/AnimationType", "OnOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.SwitchView/HMUI.AnimationType OnOff
void HMUI::SwitchView::AnimationType::_set_OnOff(HMUI::SwitchView::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::AnimationType::_set_OnOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "SwitchView/AnimationType", "OnOff", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.SwitchView/HMUI.AnimationType SelectedState
HMUI::SwitchView::AnimationType HMUI::SwitchView::AnimationType::_get_SelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::AnimationType::_get_SelectedState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::SwitchView::AnimationType>("HMUI", "SwitchView/AnimationType", "SelectedState"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.SwitchView/HMUI.AnimationType SelectedState
void HMUI::SwitchView::AnimationType::_set_SelectedState(HMUI::SwitchView::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::AnimationType::_set_SelectedState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "SwitchView/AnimationType", "SelectedState", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TableViewSelectionType
#include "HMUI/TableViewSelectionType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewSelectionType None
HMUI::TableViewSelectionType HMUI::TableViewSelectionType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewSelectionType>("HMUI", "TableViewSelectionType", "None"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewSelectionType None
void HMUI::TableViewSelectionType::_set_None(HMUI::TableViewSelectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewSelectionType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewSelectionType Single
HMUI::TableViewSelectionType HMUI::TableViewSelectionType::_get_Single() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_get_Single");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewSelectionType>("HMUI", "TableViewSelectionType", "Single"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewSelectionType Single
void HMUI::TableViewSelectionType::_set_Single(HMUI::TableViewSelectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_set_Single");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewSelectionType", "Single", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewSelectionType Multiple
HMUI::TableViewSelectionType HMUI::TableViewSelectionType::_get_Multiple() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_get_Multiple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewSelectionType>("HMUI", "TableViewSelectionType", "Multiple"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewSelectionType Multiple
void HMUI::TableViewSelectionType::_set_Multiple(HMUI::TableViewSelectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_set_Multiple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewSelectionType", "Multiple", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ITableCellOwner
#include "HMUI/ITableCellOwner.hpp"
// Including type: HMUI.TableViewSelectionType
#include "HMUI/TableViewSelectionType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ITableCellOwner.get_selectionType
HMUI::TableViewSelectionType HMUI::ITableCellOwner::get_selectionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ITableCellOwner::get_selectionType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableViewSelectionType, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ITableCellOwner.get_canSelectSelectedCell
bool HMUI::ITableCellOwner::get_canSelectSelectedCell() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ITableCellOwner::get_canSelectSelectedCell");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canSelectSelectedCell", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ITableCellOwner.get_numberOfCells
int HMUI::ITableCellOwner::get_numberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ITableCellOwner::get_numberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_numberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SectionTableView
#include "HMUI/SectionTableView.hpp"
// Including type: HMUI.SectionTableView/HMUI.IDataSource
#include "HMUI/SectionTableView_IDataSource.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: HMUI.TableView/HMUI.ScrollPositionType
#include "HMUI/TableView_ScrollPositionType.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SectionTableView.get_dataSource
HMUI::SectionTableView::IDataSource* HMUI::SectionTableView::get_dataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::get_dataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::SectionTableView::IDataSource*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.set_dataSource
void HMUI::SectionTableView::set_dataSource(HMUI::SectionTableView::IDataSource* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::set_dataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SectionTableView.add_didSelectRowInSectionEvent
void HMUI::SectionTableView::add_didSelectRowInSectionEvent(System::Action_3<HMUI::SectionTableView*, int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::add_didSelectRowInSectionEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectRowInSectionEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SectionTableView.remove_didSelectRowInSectionEvent
void HMUI::SectionTableView::remove_didSelectRowInSectionEvent(System::Action_3<HMUI::SectionTableView*, int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::remove_didSelectRowInSectionEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectRowInSectionEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SectionTableView.add_didSelectHeaderEvent
void HMUI::SectionTableView::add_didSelectHeaderEvent(System::Action_2<HMUI::SectionTableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::add_didSelectHeaderEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectHeaderEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SectionTableView.remove_didSelectHeaderEvent
void HMUI::SectionTableView::remove_didSelectHeaderEvent(System::Action_2<HMUI::SectionTableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::remove_didSelectHeaderEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectHeaderEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SectionTableView.IsSectionUnfolded
bool HMUI::SectionTableView::IsSectionUnfolded(int section) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IsSectionUnfolded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSectionUnfolded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(section)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, section);
}
// Autogenerated method: HMUI.SectionTableView.CellSize
float HMUI::SectionTableView::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::CellSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.NumberOfCells
int HMUI::SectionTableView::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.CellForIdx
HMUI::TableCell* HMUI::SectionTableView::CellForIdx(HMUI::TableView* tableView, int baseRow) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::CellForIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(baseRow)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, baseRow);
}
// Autogenerated method: HMUI.SectionTableView.ReloadData
void HMUI::SectionTableView::ReloadData(bool resetFoldState) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::ReloadData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resetFoldState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resetFoldState);
}
// Autogenerated method: HMUI.SectionTableView.UnfoldAllSections
void HMUI::SectionTableView::UnfoldAllSections() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::UnfoldAllSections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnfoldAllSections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.FoldAll
void HMUI::SectionTableView::FoldAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::FoldAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FoldAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.UnfoldSection
void HMUI::SectionTableView::UnfoldSection(int section) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::UnfoldSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnfoldSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(section)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, section);
}
// Autogenerated method: HMUI.SectionTableView.FoldSection
void HMUI::SectionTableView::FoldSection(int section) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::FoldSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FoldSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(section)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, section);
}
// Autogenerated method: HMUI.SectionTableView.ScrollToRow
void HMUI::SectionTableView::ScrollToRow(int section, int row, HMUI::TableView::ScrollPositionType scrollPositionType, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::ScrollToRow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollToRow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(section), ::il2cpp_utils::ExtractType(row), ::il2cpp_utils::ExtractType(scrollPositionType), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, section, row, scrollPositionType, animated);
}
// Autogenerated method: HMUI.SectionTableView.SectionAndRowForBaseRow
void HMUI::SectionTableView::SectionAndRowForBaseRow(int baseRow, int& section, int& row, bool& isSectionHeader) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::SectionAndRowForBaseRow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SectionAndRowForBaseRow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseRow), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, baseRow, section, row, isSectionHeader);
}
// Autogenerated method: HMUI.SectionTableView.ReloadData
void HMUI::SectionTableView::ReloadData() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::ReloadData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.DidSelectCellWithIdx
void HMUI::SectionTableView::DidSelectCellWithIdx(int baseRow) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::DidSelectCellWithIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseRow)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, baseRow);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SectionTableView/HMUI.IDataSource
#include "HMUI/SectionTableView_IDataSource.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SectionTableView/HMUI.IDataSource.RowHeight
float HMUI::SectionTableView::IDataSource::RowHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IDataSource::RowHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RowHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView/HMUI.IDataSource.NumberOfSections
int HMUI::SectionTableView::IDataSource::NumberOfSections() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IDataSource::NumberOfSections");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfSections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView/HMUI.IDataSource.NumberOfRowsInSection
int HMUI::SectionTableView::IDataSource::NumberOfRowsInSection(int section) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IDataSource::NumberOfRowsInSection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfRowsInSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(section)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, section);
}
// Autogenerated method: HMUI.SectionTableView/HMUI.IDataSource.CellForSectionHeader
HMUI::TableCell* HMUI::SectionTableView::IDataSource::CellForSectionHeader(int section, bool unfolded) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IDataSource::CellForSectionHeader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForSectionHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(section), ::il2cpp_utils::ExtractType(unfolded)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, section, unfolded);
}
// Autogenerated method: HMUI.SectionTableView/HMUI.IDataSource.CellForRowInSection
HMUI::TableCell* HMUI::SectionTableView::IDataSource::CellForRowInSection(int section, int row) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IDataSource::CellForRowInSection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForRowInSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(section), ::il2cpp_utils::ExtractType(row)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, section, row);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: HMUI.ITableCellOwner
#include "HMUI/ITableCellOwner.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TableCell.get_reuseIdentifier
::Il2CppString* HMUI::TableCell::get_reuseIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::get_reuseIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_reuseIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableCell.set_reuseIdentifier
void HMUI::TableCell::set_reuseIdentifier(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::set_reuseIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_reuseIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableCell.get_idx
int HMUI::TableCell::get_idx() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::get_idx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_idx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableCell.set_idx
void HMUI::TableCell::set_idx(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::set_idx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_idx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableCell.get_tableCellOwner
HMUI::ITableCellOwner* HMUI::TableCell::get_tableCellOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::get_tableCellOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tableCellOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ITableCellOwner*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableCell.TableViewSetup
void HMUI::TableCell::TableViewSetup(HMUI::ITableCellOwner* tableCellOwner, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::TableViewSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TableViewSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableCellOwner), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableCellOwner, idx);
}
// Autogenerated method: HMUI.TableCell.MoveIdx
void HMUI::TableCell::MoveIdx(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::MoveIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, offset);
}
// Autogenerated method: HMUI.TableCell.__WasPreparedForReuse
void HMUI::TableCell::__WasPreparedForReuse() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::__WasPreparedForReuse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__WasPreparedForReuse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableCell.WasPreparedForReuse
void HMUI::TableCell::WasPreparedForReuse() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::WasPreparedForReuse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WasPreparedForReuse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableCell.InternalToggle
void HMUI::TableCell::InternalToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::InternalToggle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalToggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableView
#include "HMUI/TableView.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: HMUI.TableView/HMUI.ScrollPositionType
#include "HMUI/TableView_ScrollPositionType.hpp"
// Including type: HMUI.TableView/HMUI.CellsGroup
#include "HMUI/TableView_CellsGroup.hpp"
// Including type: HMUI.TableView/HMUI.IDataSource
#include "HMUI/TableView_IDataSource.hpp"
// Including type: HMUI.ScrollView
#include "HMUI/ScrollView.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.RectTransform/UnityEngine.Axis
#include "UnityEngine/RectTransform_Axis.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TableView.get_selectionType
HMUI::TableViewSelectionType HMUI::TableView::get_selectionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_selectionType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableViewSelectionType, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.set_selectionType
void HMUI::TableView::set_selectionType(HMUI::TableViewSelectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::set_selectionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selectionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.get_canSelectSelectedCell
bool HMUI::TableView::get_canSelectSelectedCell() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_canSelectSelectedCell");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canSelectSelectedCell", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_dataSource
HMUI::TableView::IDataSource* HMUI::TableView::get_dataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_dataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableView::IDataSource*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_visibleCells
System::Collections::Generic::IEnumerable_1<HMUI::TableCell*>* HMUI::TableView::get_visibleCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_visibleCells");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_visibleCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<HMUI::TableCell*>*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_viewportTransform
UnityEngine::RectTransform* HMUI::TableView::get_viewportTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_viewportTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_viewportTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_contentTransform
UnityEngine::RectTransform* HMUI::TableView::get_contentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_contentTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_contentTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_numberOfCells
int HMUI::TableView::get_numberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_numberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_numberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_cellSize
float HMUI::TableView::get_cellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_cellSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_tableType
HMUI::TableView::TableType HMUI::TableView::get_tableType() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_tableType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tableType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableView::TableType, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_scrollView
HMUI::ScrollView* HMUI::TableView::get_scrollView() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_scrollView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scrollView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ScrollView*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.add_didSelectCellWithIdxEvent
void HMUI::TableView::add_didSelectCellWithIdxEvent(System::Action_2<HMUI::TableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::add_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.remove_didSelectCellWithIdxEvent
void HMUI::TableView::remove_didSelectCellWithIdxEvent(System::Action_2<HMUI::TableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::remove_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.add_didReloadDataEvent
void HMUI::TableView::add_didReloadDataEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::add_didReloadDataEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didReloadDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.remove_didReloadDataEvent
void HMUI::TableView::remove_didReloadDataEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::remove_didReloadDataEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didReloadDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.add_didInsertCellsEvent
void HMUI::TableView::add_didInsertCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::add_didInsertCellsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInsertCellsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.remove_didInsertCellsEvent
void HMUI::TableView::remove_didInsertCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::remove_didInsertCellsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInsertCellsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.add_didDeleteCellsEvent
void HMUI::TableView::add_didDeleteCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::add_didDeleteCellsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didDeleteCellsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.remove_didDeleteCellsEvent
void HMUI::TableView::remove_didDeleteCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::remove_didDeleteCellsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didDeleteCellsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.add_didChangeRectSizeEvent
void HMUI::TableView::add_didChangeRectSizeEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::add_didChangeRectSizeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeRectSizeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.remove_didChangeRectSizeEvent
void HMUI::TableView::remove_didChangeRectSizeEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::remove_didChangeRectSizeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeRectSizeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.SetDataSource
void HMUI::TableView::SetDataSource(HMUI::TableView::IDataSource* newDataSource, bool reloadData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::SetDataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newDataSource), ::il2cpp_utils::ExtractType(reloadData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newDataSource, reloadData);
}
// Autogenerated method: HMUI.TableView.Awake
void HMUI::TableView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.OnDestroy
void HMUI::TableView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.OnEnable
void HMUI::TableView::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.LazyInit
void HMUI::TableView::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::LazyInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.Hide
void HMUI::TableView::Hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.Show
void HMUI::TableView::Show() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.RefreshContentSize
void HMUI::TableView::RefreshContentSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::RefreshContentSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshContentSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.RefreshCellsContent
void HMUI::TableView::RefreshCellsContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::RefreshCellsContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshCellsContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.GetVisibleCellsIdRange
System::Tuple_2<int, int>* HMUI::TableView::GetVisibleCellsIdRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::GetVisibleCellsIdRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVisibleCellsIdRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Tuple_2<int, int>*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.RefreshCells
void HMUI::TableView::RefreshCells(bool forcedVisualsRefresh, bool forcedContentRefresh) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::RefreshCells");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forcedVisualsRefresh), ::il2cpp_utils::ExtractType(forcedContentRefresh)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, forcedVisualsRefresh, forcedContentRefresh);
}
// Autogenerated method: HMUI.TableView.LayoutCellForIdx
void HMUI::TableView::LayoutCellForIdx(HMUI::TableCell* cell, int idx, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::LayoutCellForIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutCellForIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cell), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cell, idx, offset);
}
// Autogenerated method: HMUI.TableView.AddCellToReusableCells
void HMUI::TableView::AddCellToReusableCells(HMUI::TableCell* cell) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::AddCellToReusableCells");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCellToReusableCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cell)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cell);
}
// Autogenerated method: HMUI.TableView.HandleScrollRectValueChanged
void HMUI::TableView::HandleScrollRectValueChanged(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::HandleScrollRectValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScrollRectValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, f);
}
// Autogenerated method: HMUI.TableView.HandleCellSelectionDidChange
void HMUI::TableView::HandleCellSelectionDidChange(HMUI::SelectableCell* selectableCell, HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::HandleCellSelectionDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCellSelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectableCell), ::il2cpp_utils::ExtractType(transitionType), ::il2cpp_utils::ExtractType(changeOwner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectableCell, transitionType, changeOwner);
}
// Autogenerated method: HMUI.TableView.DidSelectCellWithIdx
void HMUI::TableView::DidSelectCellWithIdx(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::DidSelectCellWithIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: HMUI.TableView.ReloadDataKeepingPosition
void HMUI::TableView::ReloadDataKeepingPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ReloadDataKeepingPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadDataKeepingPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.ReloadData
void HMUI::TableView::ReloadData() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ReloadData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.InsertCells
void HMUI::TableView::InsertCells(int idx, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::InsertCells");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx, count);
}
// Autogenerated method: HMUI.TableView.DeleteCells
void HMUI::TableView::DeleteCells(int idx, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::DeleteCells");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx, count);
}
// Autogenerated method: HMUI.TableView.DequeueReusableCellForIdentifier
HMUI::TableCell* HMUI::TableView::DequeueReusableCellForIdentifier(::Il2CppString* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::DequeueReusableCellForIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DequeueReusableCellForIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, identifier);
}
// Autogenerated method: HMUI.TableView.SelectCellWithIdx
void HMUI::TableView::SelectCellWithIdx(int idx, bool callbackTable) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::SelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(callbackTable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx, callbackTable);
}
// Autogenerated method: HMUI.TableView.ClearSelection
void HMUI::TableView::ClearSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ClearSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.ClearHighlights
void HMUI::TableView::ClearHighlights() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ClearHighlights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearHighlights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.ScrollToCellWithIdx
void HMUI::TableView::ScrollToCellWithIdx(int idx, HMUI::TableView::ScrollPositionType scrollPositionType, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ScrollToCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollToCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(scrollPositionType), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx, scrollPositionType, animated);
}
// Autogenerated method: HMUI.TableView.ChangeRectSize
void HMUI::TableView::ChangeRectSize(UnityEngine::RectTransform::Axis axis, float size) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ChangeRectSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeRectSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, axis, size);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TableView/HMUI.TableType
#include "HMUI/TableView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.TableView/HMUI.TableType Vertical
HMUI::TableView::TableType HMUI::TableView::TableType::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::TableType::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableView::TableType>("HMUI", "TableView/TableType", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableView/HMUI.TableType Vertical
void HMUI::TableView::TableType::_set_Vertical(HMUI::TableView::TableType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::TableType::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableView/TableType", "Vertical", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableView/HMUI.TableType Horizontal
HMUI::TableView::TableType HMUI::TableView::TableType::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::TableType::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableView::TableType>("HMUI", "TableView/TableType", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableView/HMUI.TableType Horizontal
void HMUI::TableView::TableType::_set_Horizontal(HMUI::TableView::TableType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::TableType::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableView/TableType", "Horizontal", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TableView/HMUI.ScrollPositionType
#include "HMUI/TableView_ScrollPositionType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.TableView/HMUI.ScrollPositionType Beginning
HMUI::TableView::ScrollPositionType HMUI::TableView::ScrollPositionType::_get_Beginning() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ScrollPositionType::_get_Beginning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableView::ScrollPositionType>("HMUI", "TableView/ScrollPositionType", "Beginning"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableView/HMUI.ScrollPositionType Beginning
void HMUI::TableView::ScrollPositionType::_set_Beginning(HMUI::TableView::ScrollPositionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ScrollPositionType::_set_Beginning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableView/ScrollPositionType", "Beginning", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableView/HMUI.ScrollPositionType Center
HMUI::TableView::ScrollPositionType HMUI::TableView::ScrollPositionType::_get_Center() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ScrollPositionType::_get_Center");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableView::ScrollPositionType>("HMUI", "TableView/ScrollPositionType", "Center"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableView/HMUI.ScrollPositionType Center
void HMUI::TableView::ScrollPositionType::_set_Center(HMUI::TableView::ScrollPositionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ScrollPositionType::_set_Center");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableView/ScrollPositionType", "Center", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableView/HMUI.ScrollPositionType End
HMUI::TableView::ScrollPositionType HMUI::TableView::ScrollPositionType::_get_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ScrollPositionType::_get_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableView::ScrollPositionType>("HMUI", "TableView/ScrollPositionType", "End"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableView/HMUI.ScrollPositionType End
void HMUI::TableView::ScrollPositionType::_set_End(HMUI::TableView::ScrollPositionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ScrollPositionType::_set_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableView/ScrollPositionType", "End", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableView/HMUI.CellsGroup
#include "HMUI/TableView_CellsGroup.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TableView/HMUI.CellsGroup.get_reuseIdentifier
::Il2CppString* HMUI::TableView::CellsGroup::get_reuseIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::CellsGroup::get_reuseIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_reuseIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView/HMUI.CellsGroup.get_cells
System::Collections::Generic::List_1<HMUI::TableCell*>* HMUI::TableView::CellsGroup::get_cells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::CellsGroup::get_cells");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<HMUI::TableCell*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TableView/HMUI.IDataSource
#include "HMUI/TableView_IDataSource.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TableView/HMUI.IDataSource.CellSize
float HMUI::TableView::IDataSource::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::IDataSource::CellSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView/HMUI.IDataSource.NumberOfCells
int HMUI::TableView::IDataSource::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::IDataSource::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView/HMUI.IDataSource.CellForIdx
HMUI::TableCell* HMUI::TableView::IDataSource::CellForIdx(HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::IDataSource::CellForIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TextPageScrollView
#include "HMUI/TextPageScrollView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TextPageScrollView.SetText
void HMUI::TextPageScrollView::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextPageScrollView::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ToggleWithCallbacks
#include "HMUI/ToggleWithCallbacks.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.UI.Selectable/UnityEngine.UI.SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ToggleWithCallbacks.get_selectionState
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::get_selectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::get_selectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ToggleWithCallbacks::SelectionState, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ToggleWithCallbacks.add_stateDidChangeEvent
void HMUI::ToggleWithCallbacks::add_stateDidChangeEvent(System::Action_1<HMUI::ToggleWithCallbacks::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::add_stateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_stateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ToggleWithCallbacks.remove_stateDidChangeEvent
void HMUI::ToggleWithCallbacks::remove_stateDidChangeEvent(System::Action_1<HMUI::ToggleWithCallbacks::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::remove_stateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_stateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ToggleWithCallbacks.DoStateTransition
void HMUI::ToggleWithCallbacks::DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::DoStateTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(instant)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ToggleWithCallbacks/HMUI.SelectionState
#include "HMUI/ToggleWithCallbacks.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ToggleWithCallbacks/HMUI.SelectionState Normal
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::SelectionState::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ToggleWithCallbacks::SelectionState>("HMUI", "ToggleWithCallbacks/SelectionState", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ToggleWithCallbacks/HMUI.SelectionState Normal
void HMUI::ToggleWithCallbacks::SelectionState::_set_Normal(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ToggleWithCallbacks/SelectionState", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ToggleWithCallbacks/HMUI.SelectionState Highlighted
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::SelectionState::_get_Highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_get_Highlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ToggleWithCallbacks::SelectionState>("HMUI", "ToggleWithCallbacks/SelectionState", "Highlighted"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ToggleWithCallbacks/HMUI.SelectionState Highlighted
void HMUI::ToggleWithCallbacks::SelectionState::_set_Highlighted(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_set_Highlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ToggleWithCallbacks/SelectionState", "Highlighted", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ToggleWithCallbacks/HMUI.SelectionState Pressed
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::SelectionState::_get_Pressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_get_Pressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ToggleWithCallbacks::SelectionState>("HMUI", "ToggleWithCallbacks/SelectionState", "Pressed"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ToggleWithCallbacks/HMUI.SelectionState Pressed
void HMUI::ToggleWithCallbacks::SelectionState::_set_Pressed(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_set_Pressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ToggleWithCallbacks/SelectionState", "Pressed", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ToggleWithCallbacks/HMUI.SelectionState Selected
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::SelectionState::_get_Selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_get_Selected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ToggleWithCallbacks::SelectionState>("HMUI", "ToggleWithCallbacks/SelectionState", "Selected"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ToggleWithCallbacks/HMUI.SelectionState Selected
void HMUI::ToggleWithCallbacks::SelectionState::_set_Selected(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_set_Selected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ToggleWithCallbacks/SelectionState", "Selected", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ToggleWithCallbacks/HMUI.SelectionState Disabled
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::SelectionState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ToggleWithCallbacks::SelectionState>("HMUI", "ToggleWithCallbacks/SelectionState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ToggleWithCallbacks/HMUI.SelectionState Disabled
void HMUI::ToggleWithCallbacks::SelectionState::_set_Disabled(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ToggleWithCallbacks/SelectionState", "Disabled", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.VerticalScrollIndicator
#include "HMUI/VerticalScrollIndicator.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.VerticalScrollIndicator.get_progress
float HMUI::VerticalScrollIndicator::get_progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::get_progress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_progress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.set_progress
void HMUI::VerticalScrollIndicator::set_progress(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::set_progress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_progress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.get_normalizedPageHeight
float HMUI::VerticalScrollIndicator::get_normalizedPageHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::get_normalizedPageHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalizedPageHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.set_normalizedPageHeight
void HMUI::VerticalScrollIndicator::set_normalizedPageHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::set_normalizedPageHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizedPageHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.set_disabled
void HMUI::VerticalScrollIndicator::set_disabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::set_disabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.OnEnable
void HMUI::VerticalScrollIndicator::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.RefreshHandle
void HMUI::VerticalScrollIndicator::RefreshHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::RefreshHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppInspector.DLL.AddressAttribute
#include "Il2CppInspector/DLL/AddressAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppInspector.DLL.FieldOffsetAttribute
#include "Il2CppInspector/DLL/FieldOffsetAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppInspector.DLL.StaticFieldOffsetAttribute
#include "Il2CppInspector/DLL/StaticFieldOffsetAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppInspector.DLL.AttributeAttribute
#include "Il2CppInspector/DLL/AttributeAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppInspector.DLL.MetadataOffsetAttribute
#include "Il2CppInspector/DLL/MetadataOffsetAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppInspector.DLL.MetadataPreviewAttribute
#include "Il2CppInspector/DLL/MetadataPreviewAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppInspector.DLL.TokenAttribute
#include "Il2CppInspector/DLL/TokenAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.BaseChannel
#include "LiteNetLib/BaseChannel.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.BaseChannel.get_PacketsInQueue
int LiteNetLib::BaseChannel::get_PacketsInQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::get_PacketsInQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketsInQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.BaseChannel.AddToQueue
void LiteNetLib::BaseChannel::AddToQueue(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::AddToQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.BaseChannel.SendNextPackets
void LiteNetLib::BaseChannel::SendNextPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::SendNextPackets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNextPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.BaseChannel.ProcessPacket
bool LiteNetLib::BaseChannel::ProcessPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::ProcessPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ConnectionRequestResult
#include "LiteNetLib/ConnectionRequestResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult None
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult None
void LiteNetLib::ConnectionRequestResult::_set_None(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult Accept
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_Accept() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_Accept");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "Accept"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult Accept
void LiteNetLib::ConnectionRequestResult::_set_Accept(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_Accept");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "Accept", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult Reject
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_Reject() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_Reject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "Reject"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult Reject
void LiteNetLib::ConnectionRequestResult::_set_Reject(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_Reject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "Reject", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult RejectForce
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_RejectForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_RejectForce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "RejectForce"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult RejectForce
void LiteNetLib::ConnectionRequestResult::_set_RejectForce(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_RejectForce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "RejectForce", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.ConnectionRequest.get_Result
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequest::get_Result() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::get_Result");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Result", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::ConnectionRequestResult, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.set_Result
void LiteNetLib::ConnectionRequest::set_Result(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::set_Result");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Result", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.TryActivate
bool LiteNetLib::ConnectionRequest::TryActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::TryActivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.UpdateRequest
void LiteNetLib::ConnectionRequest::UpdateRequest(LiteNetLib::NetConnectRequestPacket* connRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::UpdateRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connRequest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connRequest);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.AcceptIfKey
LiteNetLib::NetPeer* LiteNetLib::ConnectionRequest::AcceptIfKey(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::AcceptIfKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcceptIfKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, key);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Accept
LiteNetLib::NetPeer* LiteNetLib::ConnectionRequest::Accept() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Accept");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Accept", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::Array<uint8_t>* rejectData, int start, int length, bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData, start, length, force);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::Array<uint8_t>* rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(::Array<uint8_t>* rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(::Array<uint8_t>* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(LiteNetLib::Utils::NetDataWriter* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::Array<uint8_t>* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(LiteNetLib::Utils::NetDataWriter* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.UnconnectedMessageType BasicMessage
LiteNetLib::UnconnectedMessageType LiteNetLib::UnconnectedMessageType::_get_BasicMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_get_BasicMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::UnconnectedMessageType>("LiteNetLib", "UnconnectedMessageType", "BasicMessage"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.UnconnectedMessageType BasicMessage
void LiteNetLib::UnconnectedMessageType::_set_BasicMessage(LiteNetLib::UnconnectedMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_set_BasicMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "UnconnectedMessageType", "BasicMessage", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.UnconnectedMessageType Broadcast
LiteNetLib::UnconnectedMessageType LiteNetLib::UnconnectedMessageType::_get_Broadcast() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_get_Broadcast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::UnconnectedMessageType>("LiteNetLib", "UnconnectedMessageType", "Broadcast"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.UnconnectedMessageType Broadcast
void LiteNetLib::UnconnectedMessageType::_set_Broadcast(LiteNetLib::UnconnectedMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_set_Broadcast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "UnconnectedMessageType", "Broadcast", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.DisconnectReason
#include "LiteNetLib/DisconnectReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason ConnectionFailed
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_ConnectionFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_ConnectionFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "ConnectionFailed"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason ConnectionFailed
void LiteNetLib::DisconnectReason::_set_ConnectionFailed(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_ConnectionFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "ConnectionFailed", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason Timeout
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_Timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_Timeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "Timeout"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason Timeout
void LiteNetLib::DisconnectReason::_set_Timeout(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_Timeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "Timeout", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason HostUnreachable
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_HostUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_HostUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "HostUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason HostUnreachable
void LiteNetLib::DisconnectReason::_set_HostUnreachable(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_HostUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "HostUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason NetworkUnreachable
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_NetworkUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_NetworkUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "NetworkUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason NetworkUnreachable
void LiteNetLib::DisconnectReason::_set_NetworkUnreachable(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_NetworkUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "NetworkUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason RemoteConnectionClose
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_RemoteConnectionClose() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_RemoteConnectionClose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "RemoteConnectionClose"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason RemoteConnectionClose
void LiteNetLib::DisconnectReason::_set_RemoteConnectionClose(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_RemoteConnectionClose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "RemoteConnectionClose", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason DisconnectPeerCalled
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_DisconnectPeerCalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_DisconnectPeerCalled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "DisconnectPeerCalled"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason DisconnectPeerCalled
void LiteNetLib::DisconnectReason::_set_DisconnectPeerCalled(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_DisconnectPeerCalled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "DisconnectPeerCalled", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason ConnectionRejected
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_ConnectionRejected() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_ConnectionRejected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "ConnectionRejected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason ConnectionRejected
void LiteNetLib::DisconnectReason::_set_ConnectionRejected(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_ConnectionRejected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "ConnectionRejected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason InvalidProtocol
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_InvalidProtocol() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_InvalidProtocol");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "InvalidProtocol"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason InvalidProtocol
void LiteNetLib::DisconnectReason::_set_InvalidProtocol(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_InvalidProtocol");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "InvalidProtocol", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason UnknownHost
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_UnknownHost() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_UnknownHost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "UnknownHost"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason UnknownHost
void LiteNetLib::DisconnectReason::_set_UnknownHost(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_UnknownHost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "UnknownHost", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason Reconnect
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_Reconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_Reconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "Reconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason Reconnect
void LiteNetLib::DisconnectReason::_set_Reconnect(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_Reconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "Reconnect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason PeerToPeerConnection
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_PeerToPeerConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_PeerToPeerConnection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "PeerToPeerConnection"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason PeerToPeerConnection
void LiteNetLib::DisconnectReason::_set_PeerToPeerConnection(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_PeerToPeerConnection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "PeerToPeerConnection", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.DisconnectInfo
#include "LiteNetLib/DisconnectInfo.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.INetEventListener.OnPeerConnected
void LiteNetLib::INetEventListener::OnPeerConnected(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnPeerConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPeerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnPeerDisconnected
void LiteNetLib::INetEventListener::OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnPeerDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPeerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(disconnectInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, disconnectInfo);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnNetworkError
void LiteNetLib::INetEventListener::OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketError) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnNetworkError");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(socketError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, socketError);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnNetworkReceive
void LiteNetLib::INetEventListener::OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnNetworkReceive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkReceive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, reader, deliveryMethod);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
void LiteNetLib::INetEventListener::OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnNetworkReceiveUnconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(messageType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, reader, messageType);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
void LiteNetLib::INetEventListener::OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnNetworkLatencyUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, latency);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnConnectionRequest
void LiteNetLib::INetEventListener::OnConnectionRequest(LiteNetLib::ConnectionRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnConnectionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnConnectionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.IDeliveryEventListener
#include "LiteNetLib/IDeliveryEventListener.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.IDeliveryEventListener.OnMessageDelivered
void LiteNetLib::IDeliveryEventListener::OnMessageDelivered(LiteNetLib::NetPeer* peer, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::IDeliveryEventListener::OnMessageDelivered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnMessageDelivered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, userData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener
#include "LiteNetLib/EventBasedNetListener.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected
#include "LiteNetLib/EventBasedNetListener_OnPeerConnected.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected
#include "LiteNetLib/EventBasedNetListener_OnPeerDisconnected.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError
#include "LiteNetLib/EventBasedNetListener_OnNetworkError.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive
#include "LiteNetLib/EventBasedNetListener_OnNetworkReceive.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected
#include "LiteNetLib/EventBasedNetListener_OnNetworkReceiveUnconnected.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate
#include "LiteNetLib/EventBasedNetListener_OnNetworkLatencyUpdate.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest
#include "LiteNetLib/EventBasedNetListener_OnConnectionRequest.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent
#include "LiteNetLib/EventBasedNetListener_OnDeliveryEvent.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.DisconnectInfo
#include "LiteNetLib/DisconnectInfo.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_PeerConnectedEvent
void LiteNetLib::EventBasedNetListener::add_PeerConnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerConnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_PeerConnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PeerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_PeerConnectedEvent
void LiteNetLib::EventBasedNetListener::remove_PeerConnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerConnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_PeerConnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PeerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_PeerDisconnectedEvent
void LiteNetLib::EventBasedNetListener::add_PeerDisconnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerDisconnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_PeerDisconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PeerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_PeerDisconnectedEvent
void LiteNetLib::EventBasedNetListener::remove_PeerDisconnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerDisconnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_PeerDisconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PeerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_NetworkErrorEvent
void LiteNetLib::EventBasedNetListener::add_NetworkErrorEvent(LiteNetLib::EventBasedNetListener::OnNetworkError* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_NetworkErrorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NetworkErrorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_NetworkErrorEvent
void LiteNetLib::EventBasedNetListener::remove_NetworkErrorEvent(LiteNetLib::EventBasedNetListener::OnNetworkError* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_NetworkErrorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NetworkErrorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_NetworkReceiveEvent
void LiteNetLib::EventBasedNetListener::add_NetworkReceiveEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceive* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_NetworkReceiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NetworkReceiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_NetworkReceiveEvent
void LiteNetLib::EventBasedNetListener::remove_NetworkReceiveEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceive* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_NetworkReceiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NetworkReceiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_NetworkReceiveUnconnectedEvent
void LiteNetLib::EventBasedNetListener::add_NetworkReceiveUnconnectedEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_NetworkReceiveUnconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NetworkReceiveUnconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_NetworkReceiveUnconnectedEvent
void LiteNetLib::EventBasedNetListener::remove_NetworkReceiveUnconnectedEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_NetworkReceiveUnconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NetworkReceiveUnconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_NetworkLatencyUpdateEvent
void LiteNetLib::EventBasedNetListener::add_NetworkLatencyUpdateEvent(LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_NetworkLatencyUpdateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NetworkLatencyUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_NetworkLatencyUpdateEvent
void LiteNetLib::EventBasedNetListener::remove_NetworkLatencyUpdateEvent(LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_NetworkLatencyUpdateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NetworkLatencyUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_ConnectionRequestEvent
void LiteNetLib::EventBasedNetListener::add_ConnectionRequestEvent(LiteNetLib::EventBasedNetListener::OnConnectionRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_ConnectionRequestEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_ConnectionRequestEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_ConnectionRequestEvent
void LiteNetLib::EventBasedNetListener::remove_ConnectionRequestEvent(LiteNetLib::EventBasedNetListener::OnConnectionRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_ConnectionRequestEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_ConnectionRequestEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_DeliveryEvent
void LiteNetLib::EventBasedNetListener::add_DeliveryEvent(LiteNetLib::EventBasedNetListener::OnDeliveryEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_DeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_DeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_DeliveryEvent
void LiteNetLib::EventBasedNetListener::remove_DeliveryEvent(LiteNetLib::EventBasedNetListener::OnDeliveryEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_DeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_DeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearPeerConnectedEvent
void LiteNetLib::EventBasedNetListener::ClearPeerConnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearPeerConnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearPeerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearPeerDisconnectedEvent
void LiteNetLib::EventBasedNetListener::ClearPeerDisconnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearPeerDisconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearPeerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearNetworkErrorEvent
void LiteNetLib::EventBasedNetListener::ClearNetworkErrorEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearNetworkErrorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearNetworkErrorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearNetworkReceiveEvent
void LiteNetLib::EventBasedNetListener::ClearNetworkReceiveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearNetworkReceiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearNetworkReceiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearNetworkReceiveUnconnectedEvent
void LiteNetLib::EventBasedNetListener::ClearNetworkReceiveUnconnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearNetworkReceiveUnconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearNetworkReceiveUnconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearNetworkLatencyUpdateEvent
void LiteNetLib::EventBasedNetListener::ClearNetworkLatencyUpdateEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearNetworkLatencyUpdateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearNetworkLatencyUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearConnectionRequestEvent
void LiteNetLib::EventBasedNetListener::ClearConnectionRequestEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearConnectionRequestEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearConnectionRequestEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearDeliveryEvent
void LiteNetLib::EventBasedNetListener::ClearDeliveryEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnPeerConnected
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnPeerConnected(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnPeerConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnPeerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnPeerDisconnected
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnPeerDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnPeerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(disconnectInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, disconnectInfo);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnNetworkError
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketErrorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnNetworkError");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(socketErrorCode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, socketErrorCode);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnNetworkReceive
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnNetworkReceive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkReceive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, reader, deliveryMethod);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(messageType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, reader, messageType);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnNetworkLatencyUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, latency);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnConnectionRequest
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnConnectionRequest(LiteNetLib::ConnectionRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnConnectionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnConnectionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.IDeliveryEventListener.OnMessageDelivered
void LiteNetLib::EventBasedNetListener::LiteNetLib_IDeliveryEventListener_OnMessageDelivered(LiteNetLib::NetPeer* peer, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.IDeliveryEventListener.OnMessageDelivered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.IDeliveryEventListener.OnMessageDelivered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, userData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected
#include "LiteNetLib/EventBasedNetListener_OnPeerConnected.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected.Invoke
void LiteNetLib::EventBasedNetListener::OnPeerConnected::Invoke(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerConnected::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnPeerConnected::BeginInvoke(LiteNetLib::NetPeer* peer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerConnected::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, peer, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected.EndInvoke
void LiteNetLib::EventBasedNetListener::OnPeerConnected::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerConnected::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected
#include "LiteNetLib/EventBasedNetListener_OnPeerDisconnected.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.DisconnectInfo
#include "LiteNetLib/DisconnectInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected.Invoke
void LiteNetLib::EventBasedNetListener::OnPeerDisconnected::Invoke(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerDisconnected::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(disconnectInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, disconnectInfo);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnPeerDisconnected::BeginInvoke(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerDisconnected::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(disconnectInfo), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, peer, disconnectInfo, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected.EndInvoke
void LiteNetLib::EventBasedNetListener::OnPeerDisconnected::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerDisconnected::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError
#include "LiteNetLib/EventBasedNetListener_OnNetworkError.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError.Invoke
void LiteNetLib::EventBasedNetListener::OnNetworkError::Invoke(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketError) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkError::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(socketError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, socketError);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnNetworkError::BeginInvoke(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkError::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(socketError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, endPoint, socketError, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError.EndInvoke
void LiteNetLib::EventBasedNetListener::OnNetworkError::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkError::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive
#include "LiteNetLib/EventBasedNetListener_OnNetworkReceive.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive.Invoke
void LiteNetLib::EventBasedNetListener::OnNetworkReceive::Invoke(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceive::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, reader, deliveryMethod);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnNetworkReceive::BeginInvoke(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceive::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, peer, reader, deliveryMethod, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive.EndInvoke
void LiteNetLib::EventBasedNetListener::OnNetworkReceive::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceive::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected
#include "LiteNetLib/EventBasedNetListener_OnNetworkReceiveUnconnected.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected.Invoke
void LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::Invoke(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(messageType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, reader, messageType);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::BeginInvoke(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(messageType), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, remoteEndPoint, reader, messageType, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected.EndInvoke
void LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate
#include "LiteNetLib/EventBasedNetListener_OnNetworkLatencyUpdate.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate.Invoke
void LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::Invoke(LiteNetLib::NetPeer* peer, int latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, latency);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::BeginInvoke(LiteNetLib::NetPeer* peer, int latency, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(latency), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, peer, latency, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate.EndInvoke
void LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest
#include "LiteNetLib/EventBasedNetListener_OnConnectionRequest.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest.Invoke
void LiteNetLib::EventBasedNetListener::OnConnectionRequest::Invoke(LiteNetLib::ConnectionRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnConnectionRequest::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnConnectionRequest::BeginInvoke(LiteNetLib::ConnectionRequest* request, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnConnectionRequest::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, request, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest.EndInvoke
void LiteNetLib::EventBasedNetListener::OnConnectionRequest::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnConnectionRequest::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent
#include "LiteNetLib/EventBasedNetListener_OnDeliveryEvent.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent.Invoke
void LiteNetLib::EventBasedNetListener::OnDeliveryEvent::Invoke(LiteNetLib::NetPeer* peer, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnDeliveryEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, userData);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnDeliveryEvent::BeginInvoke(LiteNetLib::NetPeer* peer, ::Il2CppObject* userData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnDeliveryEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, peer, userData, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent.EndInvoke
void LiteNetLib::EventBasedNetListener::OnDeliveryEvent::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnDeliveryEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NatAddressType
#include "LiteNetLib/NatAddressType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NatAddressType Internal
LiteNetLib::NatAddressType LiteNetLib::NatAddressType::_get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatAddressType::_get_Internal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NatAddressType>("LiteNetLib", "NatAddressType", "Internal"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NatAddressType Internal
void LiteNetLib::NatAddressType::_set_Internal(LiteNetLib::NatAddressType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatAddressType::_set_Internal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NatAddressType", "Internal", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NatAddressType External
LiteNetLib::NatAddressType LiteNetLib::NatAddressType::_get_External() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatAddressType::_get_External");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NatAddressType>("LiteNetLib", "NatAddressType", "External"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NatAddressType External
void LiteNetLib::NatAddressType::_set_External(LiteNetLib::NatAddressType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatAddressType::_set_External");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NatAddressType", "External", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.INatPunchListener
#include "LiteNetLib/INatPunchListener.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NatAddressType
#include "LiteNetLib/NatAddressType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.INatPunchListener.OnNatIntroductionRequest
void LiteNetLib::INatPunchListener::OnNatIntroductionRequest(System::Net::IPEndPoint* localEndPoint, System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INatPunchListener::OnNatIntroductionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNatIntroductionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localEndPoint), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localEndPoint, remoteEndPoint, token);
}
// Autogenerated method: LiteNetLib.INatPunchListener.OnNatIntroductionSuccess
void LiteNetLib::INatPunchListener::OnNatIntroductionSuccess(System::Net::IPEndPoint* targetEndPoint, LiteNetLib::NatAddressType type, ::Il2CppString* token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INatPunchListener::OnNatIntroductionSuccess");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNatIntroductionSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetEndPoint), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetEndPoint, type, token);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNatPunchListener
#include "LiteNetLib/EventBasedNatPunchListener.hpp"
// Including type: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest
#include "LiteNetLib/EventBasedNatPunchListener_OnNatIntroductionRequest.hpp"
// Including type: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess
#include "LiteNetLib/EventBasedNatPunchListener_OnNatIntroductionSuccess.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NatAddressType
#include "LiteNetLib/NatAddressType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.add_NatIntroductionRequest
void LiteNetLib::EventBasedNatPunchListener::add_NatIntroductionRequest(LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::add_NatIntroductionRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NatIntroductionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.remove_NatIntroductionRequest
void LiteNetLib::EventBasedNatPunchListener::remove_NatIntroductionRequest(LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::remove_NatIntroductionRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NatIntroductionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.add_NatIntroductionSuccess
void LiteNetLib::EventBasedNatPunchListener::add_NatIntroductionSuccess(LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::add_NatIntroductionSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NatIntroductionSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.remove_NatIntroductionSuccess
void LiteNetLib::EventBasedNatPunchListener::remove_NatIntroductionSuccess(LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::remove_NatIntroductionSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NatIntroductionSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.LiteNetLib.INatPunchListener.OnNatIntroductionRequest
void LiteNetLib::EventBasedNatPunchListener::LiteNetLib_INatPunchListener_OnNatIntroductionRequest(System::Net::IPEndPoint* localEndPoint, System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::LiteNetLib.INatPunchListener.OnNatIntroductionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INatPunchListener.OnNatIntroductionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localEndPoint), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localEndPoint, remoteEndPoint, token);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.LiteNetLib.INatPunchListener.OnNatIntroductionSuccess
void LiteNetLib::EventBasedNatPunchListener::LiteNetLib_INatPunchListener_OnNatIntroductionSuccess(System::Net::IPEndPoint* targetEndPoint, LiteNetLib::NatAddressType type, ::Il2CppString* token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::LiteNetLib.INatPunchListener.OnNatIntroductionSuccess");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INatPunchListener.OnNatIntroductionSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetEndPoint), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetEndPoint, type, token);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest
#include "LiteNetLib/EventBasedNatPunchListener_OnNatIntroductionRequest.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest.Invoke
void LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::Invoke(System::Net::IPEndPoint* localEndPoint, System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localEndPoint), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localEndPoint, remoteEndPoint, token);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::BeginInvoke(System::Net::IPEndPoint* localEndPoint, System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* token, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localEndPoint), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, localEndPoint, remoteEndPoint, token, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest.EndInvoke
void LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess
#include "LiteNetLib/EventBasedNatPunchListener_OnNatIntroductionSuccess.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NatAddressType
#include "LiteNetLib/NatAddressType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess.Invoke
void LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::Invoke(System::Net::IPEndPoint* targetEndPoint, LiteNetLib::NatAddressType type, ::Il2CppString* token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetEndPoint), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetEndPoint, type, token);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::BeginInvoke(System::Net::IPEndPoint* targetEndPoint, LiteNetLib::NatAddressType type, ::Il2CppString* token, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetEndPoint), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, targetEndPoint, type, token, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess.EndInvoke
void LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NatPunchModule
#include "LiteNetLib/NatPunchModule.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket
#include "LiteNetLib/NatPunchModule_NatIntroduceRequestPacket.hpp"
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket
#include "LiteNetLib/NatPunchModule_NatIntroduceResponsePacket.hpp"
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket
#include "LiteNetLib/NatPunchModule_NatPunchPacket.hpp"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor
#include "LiteNetLib/Utils/NetPacketProcessor.hpp"
// Including type: LiteNetLib.INatPunchListener
#include "LiteNetLib/INatPunchListener.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxTokenLength
int LiteNetLib::NatPunchModule::_get_MaxTokenLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::_get_MaxTokenLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NatPunchModule", "MaxTokenLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxTokenLength
void LiteNetLib::NatPunchModule::_set_MaxTokenLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::_set_MaxTokenLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NatPunchModule", "MaxTokenLength", value));
}
// Autogenerated method: LiteNetLib.NatPunchModule.ProcessMessage
void LiteNetLib::NatPunchModule::ProcessMessage(System::Net::IPEndPoint* senderEndPoint, LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::ProcessMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(senderEndPoint), ::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, senderEndPoint, packet);
}
// Autogenerated method: LiteNetLib.NatPunchModule.Init
void LiteNetLib::NatPunchModule::Init(LiteNetLib::INatPunchListener* listener) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, listener);
}
// Autogenerated method: LiteNetLib.NatPunchModule.NatIntroduce
void LiteNetLib::NatPunchModule::NatIntroduce(System::Net::IPEndPoint* hostInternal, System::Net::IPEndPoint* hostExternal, System::Net::IPEndPoint* clientInternal, System::Net::IPEndPoint* clientExternal, ::Il2CppString* additionalInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NatIntroduce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostInternal), ::il2cpp_utils::ExtractType(hostExternal), ::il2cpp_utils::ExtractType(clientInternal), ::il2cpp_utils::ExtractType(clientExternal), ::il2cpp_utils::ExtractType(additionalInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hostInternal, hostExternal, clientInternal, clientExternal, additionalInfo);
}
// Autogenerated method: LiteNetLib.NatPunchModule.PollEvents
void LiteNetLib::NatPunchModule::PollEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::PollEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule.SendNatIntroduceRequest
void LiteNetLib::NatPunchModule::SendNatIntroduceRequest(::Il2CppString* host, int port, ::Il2CppString* additionalInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::SendNatIntroduceRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNatIntroduceRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(host), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(additionalInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, host, port, additionalInfo);
}
// Autogenerated method: LiteNetLib.NatPunchModule.SendNatIntroduceRequest
void LiteNetLib::NatPunchModule::SendNatIntroduceRequest(System::Net::IPEndPoint* masterServerEndPoint, ::Il2CppString* additionalInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::SendNatIntroduceRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNatIntroduceRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(masterServerEndPoint), ::il2cpp_utils::ExtractType(additionalInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, masterServerEndPoint, additionalInfo);
}
// Autogenerated method: LiteNetLib.NatPunchModule.OnNatIntroductionRequest
void LiteNetLib::NatPunchModule::OnNatIntroductionRequest(LiteNetLib::NatPunchModule::NatIntroduceRequestPacket* req, System::Net::IPEndPoint* senderEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::OnNatIntroductionRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNatIntroductionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(req), ::il2cpp_utils::ExtractType(senderEndPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, req, senderEndPoint);
}
// Autogenerated method: LiteNetLib.NatPunchModule.OnNatIntroductionResponse
void LiteNetLib::NatPunchModule::OnNatIntroductionResponse(LiteNetLib::NatPunchModule::NatIntroduceResponsePacket* req) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::OnNatIntroductionResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNatIntroductionResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(req)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, req);
}
// Autogenerated method: LiteNetLib.NatPunchModule.OnNatPunch
void LiteNetLib::NatPunchModule::OnNatPunch(LiteNetLib::NatPunchModule::NatPunchPacket* req, System::Net::IPEndPoint* senderEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::OnNatPunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNatPunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(req), ::il2cpp_utils::ExtractType(senderEndPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, req, senderEndPoint);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket
#include "LiteNetLib/NatPunchModule_NatIntroduceRequestPacket.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket.get_Internal
System::Net::IPEndPoint* LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::get_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket.set_Internal
void LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::set_Internal(System::Net::IPEndPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::set_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket.get_Token
::Il2CppString* LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::get_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket.set_Token
void LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::set_Token(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::set_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket
#include "LiteNetLib/NatPunchModule_NatIntroduceResponsePacket.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.get_Internal
System::Net::IPEndPoint* LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.set_Internal
void LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_Internal(System::Net::IPEndPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.get_External
System::Net::IPEndPoint* LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_External() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_External");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_External", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.set_External
void LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_External(System::Net::IPEndPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_External");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_External", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.get_Token
::Il2CppString* LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.set_Token
void LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_Token(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket
#include "LiteNetLib/NatPunchModule_NatPunchPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.get_Token
::Il2CppString* LiteNetLib::NatPunchModule::NatPunchPacket::get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatPunchPacket::get_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.set_Token
void LiteNetLib::NatPunchModule::NatPunchPacket::set_Token(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatPunchPacket::set_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.get_IsExternal
bool LiteNetLib::NatPunchModule::NatPunchPacket::get_IsExternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatPunchPacket::get_IsExternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsExternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.set_IsExternal
void LiteNetLib::NatPunchModule::NatPunchPacket::set_IsExternal(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatPunchPacket::set_IsExternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsExternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod Unreliable
LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_Unreliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_get_Unreliable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "Unreliable"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod Unreliable
void LiteNetLib::DeliveryMethod::_set_Unreliable(LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_set_Unreliable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "Unreliable", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod ReliableUnordered
LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_ReliableUnordered() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_get_ReliableUnordered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "ReliableUnordered"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod ReliableUnordered
void LiteNetLib::DeliveryMethod::_set_ReliableUnordered(LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_set_ReliableUnordered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "ReliableUnordered", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod Sequenced
LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_Sequenced() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_get_Sequenced");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "Sequenced"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod Sequenced
void LiteNetLib::DeliveryMethod::_set_Sequenced(LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_set_Sequenced");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "Sequenced", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod ReliableOrdered
LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_ReliableOrdered() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_get_ReliableOrdered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "ReliableOrdered"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod ReliableOrdered
void LiteNetLib::DeliveryMethod::_set_ReliableOrdered(LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_set_ReliableOrdered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "ReliableOrdered", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod ReliableSequenced
LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_ReliableSequenced() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_get_ReliableSequenced");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "ReliableSequenced"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod ReliableSequenced
void LiteNetLib::DeliveryMethod::_set_ReliableSequenced(LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_set_ReliableSequenced");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "ReliableSequenced", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetConstants
#include "LiteNetLib/NetConstants.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 DefaultWindowSize
int LiteNetLib::NetConstants::_get_DefaultWindowSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_DefaultWindowSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "DefaultWindowSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 DefaultWindowSize
void LiteNetLib::NetConstants::_set_DefaultWindowSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_DefaultWindowSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "DefaultWindowSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 SocketBufferSize
int LiteNetLib::NetConstants::_get_SocketBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_SocketBufferSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "SocketBufferSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 SocketBufferSize
void LiteNetLib::NetConstants::_set_SocketBufferSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_SocketBufferSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "SocketBufferSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 SocketTTL
int LiteNetLib::NetConstants::_get_SocketTTL() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_SocketTTL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "SocketTTL"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 SocketTTL
void LiteNetLib::NetConstants::_set_SocketTTL(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_SocketTTL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "SocketTTL", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 HeaderSize
int LiteNetLib::NetConstants::_get_HeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_HeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "HeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 HeaderSize
void LiteNetLib::NetConstants::_set_HeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_HeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "HeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ChanneledHeaderSize
int LiteNetLib::NetConstants::_get_ChanneledHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_ChanneledHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "ChanneledHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ChanneledHeaderSize
void LiteNetLib::NetConstants::_set_ChanneledHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_ChanneledHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "ChanneledHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 FragmentHeaderSize
int LiteNetLib::NetConstants::_get_FragmentHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_FragmentHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "FragmentHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 FragmentHeaderSize
void LiteNetLib::NetConstants::_set_FragmentHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_FragmentHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "FragmentHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 FragmentedHeaderTotalSize
int LiteNetLib::NetConstants::_get_FragmentedHeaderTotalSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_FragmentedHeaderTotalSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "FragmentedHeaderTotalSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 FragmentedHeaderTotalSize
void LiteNetLib::NetConstants::_set_FragmentedHeaderTotalSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_FragmentedHeaderTotalSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "FragmentedHeaderTotalSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt16 MaxSequence
uint16_t LiteNetLib::NetConstants::_get_MaxSequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_MaxSequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint16_t>("LiteNetLib", "NetConstants", "MaxSequence"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt16 MaxSequence
void LiteNetLib::NetConstants::_set_MaxSequence(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_MaxSequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxSequence", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt16 HalfMaxSequence
uint16_t LiteNetLib::NetConstants::_get_HalfMaxSequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_HalfMaxSequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint16_t>("LiteNetLib", "NetConstants", "HalfMaxSequence"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt16 HalfMaxSequence
void LiteNetLib::NetConstants::_set_HalfMaxSequence(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_HalfMaxSequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "HalfMaxSequence", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 ProtocolId
int LiteNetLib::NetConstants::_get_ProtocolId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_ProtocolId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "ProtocolId"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 ProtocolId
void LiteNetLib::NetConstants::_set_ProtocolId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_ProtocolId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "ProtocolId", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 MaxUdpHeaderSize
int LiteNetLib::NetConstants::_get_MaxUdpHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_MaxUdpHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "MaxUdpHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 MaxUdpHeaderSize
void LiteNetLib::NetConstants::_set_MaxUdpHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_MaxUdpHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxUdpHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] PossibleMtu
::Array<int>* LiteNetLib::NetConstants::_get_PossibleMtu() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_PossibleMtu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<int>*>("LiteNetLib", "NetConstants", "PossibleMtu"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] PossibleMtu
void LiteNetLib::NetConstants::_set_PossibleMtu(::Array<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_PossibleMtu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "PossibleMtu", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 MaxPacketSize
int LiteNetLib::NetConstants::_get_MaxPacketSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_MaxPacketSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "MaxPacketSize"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 MaxPacketSize
void LiteNetLib::NetConstants::_set_MaxPacketSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_MaxPacketSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxPacketSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Byte MaxConnectionNumber
uint8_t LiteNetLib::NetConstants::_get_MaxConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_MaxConnectionNumber");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("LiteNetLib", "NetConstants", "MaxConnectionNumber"));
}
// Autogenerated static field setter
// Set static field: static public System.Byte MaxConnectionNumber
void LiteNetLib::NetConstants::_set_MaxConnectionNumber(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_MaxConnectionNumber");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxConnectionNumber", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 PacketPoolSize
int LiteNetLib::NetConstants::_get_PacketPoolSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_PacketPoolSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "PacketPoolSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 PacketPoolSize
void LiteNetLib::NetConstants::_set_PacketPoolSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_PacketPoolSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "PacketPoolSize", value));
}
// Autogenerated method: LiteNetLib.NetConstants..cctor
void LiteNetLib::NetConstants::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConstants", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetLogLevel
#include "LiteNetLib/NetLogLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Warning
LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Warning() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_get_Warning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Warning"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Warning
void LiteNetLib::NetLogLevel::_set_Warning(LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_set_Warning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Warning", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Error
LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Error"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Error
void LiteNetLib::NetLogLevel::_set_Error(LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Trace
LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Trace() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_get_Trace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Trace"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Trace
void LiteNetLib::NetLogLevel::_set_Trace(LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_set_Trace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Trace", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Info
LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Info() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_get_Info");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Info"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Info
void LiteNetLib::NetLogLevel::_set_Info(LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_set_Info");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Info", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.INetLogger
#include "LiteNetLib/INetLogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.INetLogger.WriteNet
void LiteNetLib::INetLogger::WriteNet(LiteNetLib::NetLogLevel level, ::Il2CppString* str, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetLogger::WriteNet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, level, str, args);
}
// Creating initializer_list -> params proxy for: System.Void WriteNet(LiteNetLib.NetLogLevel level, System.String str, params System.Object[] args)
void LiteNetLib::INetLogger::WriteNet(LiteNetLib::NetLogLevel level, ::Il2CppString* str, std::initializer_list<::Il2CppObject*> args) {
  LiteNetLib::INetLogger::WriteNet(level, str, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetDebug
#include "LiteNetLib/NetDebug.hpp"
// Including type: LiteNetLib.INetLogger
#include "LiteNetLib/INetLogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.INetLogger Logger
LiteNetLib::INetLogger* LiteNetLib::NetDebug::_get_Logger() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::_get_Logger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::INetLogger*>("LiteNetLib", "NetDebug", "Logger"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.INetLogger Logger
void LiteNetLib::NetDebug::_set_Logger(LiteNetLib::INetLogger* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::_set_Logger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetDebug", "Logger", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object DebugLogLock
::Il2CppObject* LiteNetLib::NetDebug::_get_DebugLogLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::_get_DebugLogLock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("LiteNetLib", "NetDebug", "DebugLogLock"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object DebugLogLock
void LiteNetLib::NetDebug::_set_DebugLogLock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::_set_DebugLogLock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetDebug", "DebugLogLock", value));
}
// Autogenerated method: LiteNetLib.NetDebug..cctor
void LiteNetLib::NetDebug::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetDebug.WriteLogic
void LiteNetLib::NetDebug::WriteLogic(LiteNetLib::NetLogLevel logLevel, ::Il2CppString* str, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::WriteLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(logLevel), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, logLevel, str, args);
}
// Creating initializer_list -> params proxy for: System.Void WriteLogic(LiteNetLib.NetLogLevel logLevel, System.String str, params System.Object[] args)
void LiteNetLib::NetDebug::WriteLogic(LiteNetLib::NetLogLevel logLevel, ::Il2CppString* str, std::initializer_list<::Il2CppObject*> args) {
  LiteNetLib::NetDebug::WriteLogic(logLevel, str, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: LiteNetLib.NetDebug.Write
void LiteNetLib::NetDebug::Write(::Il2CppString* str, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, str, args);
}
// Creating initializer_list -> params proxy for: System.Void Write(System.String str, params System.Object[] args)
void LiteNetLib::NetDebug::Write(::Il2CppString* str, std::initializer_list<::Il2CppObject*> args) {
  LiteNetLib::NetDebug::Write(str, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: LiteNetLib.NetDebug.Write
void LiteNetLib::NetDebug::Write(LiteNetLib::NetLogLevel level, ::Il2CppString* str, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, level, str, args);
}
// Creating initializer_list -> params proxy for: System.Void Write(LiteNetLib.NetLogLevel level, System.String str, params System.Object[] args)
void LiteNetLib::NetDebug::Write(LiteNetLib::NetLogLevel level, ::Il2CppString* str, std::initializer_list<::Il2CppObject*> args) {
  LiteNetLib::NetDebug::Write(level, str, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: LiteNetLib.NetDebug.WriteForce
void LiteNetLib::NetDebug::WriteForce(::Il2CppString* str, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::WriteForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, str, args);
}
// Creating initializer_list -> params proxy for: System.Void WriteForce(System.String str, params System.Object[] args)
void LiteNetLib::NetDebug::WriteForce(::Il2CppString* str, std::initializer_list<::Il2CppObject*> args) {
  LiteNetLib::NetDebug::WriteForce(str, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: LiteNetLib.NetDebug.WriteForce
void LiteNetLib::NetDebug::WriteForce(LiteNetLib::NetLogLevel level, ::Il2CppString* str, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::WriteForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, level, str, args);
}
// Creating initializer_list -> params proxy for: System.Void WriteForce(LiteNetLib.NetLogLevel level, System.String str, params System.Object[] args)
void LiteNetLib::NetDebug::WriteForce(LiteNetLib::NetLogLevel level, ::Il2CppString* str, std::initializer_list<::Il2CppObject*> args) {
  LiteNetLib::NetDebug::WriteForce(level, str, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: LiteNetLib.NetDebug.WriteError
void LiteNetLib::NetDebug::WriteError(::Il2CppString* str, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::WriteError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, str, args);
}
// Creating initializer_list -> params proxy for: System.Void WriteError(System.String str, params System.Object[] args)
void LiteNetLib::NetDebug::WriteError(::Il2CppString* str, std::initializer_list<::Il2CppObject*> args) {
  LiteNetLib::NetDebug::WriteError(str, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.InvalidPacketException
#include "LiteNetLib/InvalidPacketException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.TooBigPacketException
#include "LiteNetLib/TooBigPacketException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetEvent
#include "LiteNetLib/NetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NetPacketReader.SetSource
void LiteNetLib::NetPacketReader::SetSource(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPacketReader.RecycleInternal
void LiteNetLib::NetPacketReader::RecycleInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketReader::RecycleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacketReader.Recycle
void LiteNetLib::NetPacketReader::Recycle() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketReader::Recycle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Recycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetEvent
#include "LiteNetLib/NetEvent.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetEvent/LiteNetLib.EType
#include "LiteNetLib/NetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Connect
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Connect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_Connect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Connect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Connect
void LiteNetLib::NetEvent::EType::_set_Connect(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_Connect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Connect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Disconnect
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_Disconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Disconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Disconnect
void LiteNetLib::NetEvent::EType::_set_Disconnect(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_Disconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Disconnect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Receive
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Receive() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_Receive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Receive"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Receive
void LiteNetLib::NetEvent::EType::_set_Receive(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_Receive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Receive", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ReceiveUnconnected
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_ReceiveUnconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_ReceiveUnconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "ReceiveUnconnected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ReceiveUnconnected
void LiteNetLib::NetEvent::EType::_set_ReceiveUnconnected(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_ReceiveUnconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "ReceiveUnconnected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Error
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Error"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Error
void LiteNetLib::NetEvent::EType::_set_Error(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionLatencyUpdated
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_ConnectionLatencyUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_ConnectionLatencyUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "ConnectionLatencyUpdated"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionLatencyUpdated
void LiteNetLib::NetEvent::EType::_set_ConnectionLatencyUpdated(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_ConnectionLatencyUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "ConnectionLatencyUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Broadcast
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Broadcast() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_Broadcast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Broadcast"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Broadcast
void LiteNetLib::NetEvent::EType::_set_Broadcast(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_Broadcast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Broadcast", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionRequest
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_ConnectionRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_ConnectionRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "ConnectionRequest"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionRequest
void LiteNetLib::NetEvent::EType::_set_ConnectionRequest(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_ConnectionRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "ConnectionRequest", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType MessageDelivered
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_MessageDelivered() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_MessageDelivered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "MessageDelivered"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType MessageDelivered
void LiteNetLib::NetEvent::EType::_set_MessageDelivered(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_MessageDelivered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "MessageDelivered", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer
#include "LiteNetLib/NetManager_IPEndPointComparer.hpp"
// Including type: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator
#include "LiteNetLib/NetManager_NetPeerEnumerator.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: LiteNetLib.IDeliveryEventListener
#include "LiteNetLib/IDeliveryEventListener.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: System.Threading.ReaderWriterLockSlim
#include "System/Threading/ReaderWriterLockSlim.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LiteNetLib.Layers.PacketLayerBase
#include "LiteNetLib/Layers/PacketLayerBase.hpp"
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
// Including type: LiteNetLib.NatPunchModule
#include "LiteNetLib/NatPunchModule.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.DisconnectReason
#include "LiteNetLib/DisconnectReason.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: LiteNetLib.ConnectionState
#include "LiteNetLib/ConnectionState.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: LiteNetLib.NetEvent/LiteNetLib.EType
#include "LiteNetLib/NetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NetManager.get_IsRunning
bool LiteNetLib::NetManager::get_IsRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_IsRunning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRunning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_LocalPort
int LiteNetLib::NetManager::get_LocalPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_LocalPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LocalPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_FirstPeer
LiteNetLib::NetPeer* LiteNetLib::NetManager::get_FirstPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_FirstPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FirstPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_ChannelsCount
uint8_t LiteNetLib::NetManager::get_ChannelsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_ChannelsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChannelsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.set_ChannelsCount
void LiteNetLib::NetManager::set_ChannelsCount(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::set_ChannelsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChannelsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetManager.get_ConnectedPeerList
System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* LiteNetLib::NetManager::get_ConnectedPeerList() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_ConnectedPeerList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectedPeerList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<LiteNetLib::NetPeer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_ConnectedPeersCount
int LiteNetLib::NetManager::get_ConnectedPeersCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_ConnectedPeersCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectedPeersCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.GetPeerById
LiteNetLib::NetPeer* LiteNetLib::NetManager::GetPeerById(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::GetPeerById");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPeerById", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, id);
}
// Autogenerated method: LiteNetLib.NetManager.TryGetPeer
bool LiteNetLib::NetManager::TryGetPeer(System::Net::IPEndPoint* endPoint, LiteNetLib::NetPeer*& peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::TryGetPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint, peer);
}
// Autogenerated method: LiteNetLib.NetManager.AddPeer
void LiteNetLib::NetManager::AddPeer(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::AddPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.RemovePeer
void LiteNetLib::NetManager::RemovePeer(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::RemovePeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.RemovePeerInternal
void LiteNetLib::NetManager::RemovePeerInternal(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::RemovePeerInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePeerInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.ConnectionLatencyUpdated
void LiteNetLib::NetManager::ConnectionLatencyUpdated(LiteNetLib::NetPeer* fromPeer, int latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::ConnectionLatencyUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectionLatencyUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPeer), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fromPeer, latency);
}
// Autogenerated method: LiteNetLib.NetManager.MessageDelivered
void LiteNetLib::NetManager::MessageDelivered(LiteNetLib::NetPeer* fromPeer, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::MessageDelivered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MessageDelivered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPeer), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fromPeer, userData);
}
// Autogenerated method: LiteNetLib.NetManager.SendRawAndRecycle
int LiteNetLib::NetManager::SendRawAndRecycle(LiteNetLib::NetPacket* packet, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendRawAndRecycle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendRawAndRecycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, packet, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendRaw
int LiteNetLib::NetManager::SendRaw(LiteNetLib::NetPacket* packet, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, packet, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendRaw
int LiteNetLib::NetManager::SendRaw(::Array<uint8_t>* message, int start, int length, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, message, start, length, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeerForce
void LiteNetLib::NetManager::DisconnectPeerForce(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectReason reason, System::Net::Sockets::SocketError socketErrorCode, LiteNetLib::NetPacket* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeerForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeerForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reason), ::il2cpp_utils::ExtractType(socketErrorCode), ::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, reason, socketErrorCode, eventData);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectReason reason, System::Net::Sockets::SocketError socketErrorCode, bool force, ::Array<uint8_t>* data, int start, int count, LiteNetLib::NetPacket* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reason), ::il2cpp_utils::ExtractType(socketErrorCode), ::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, reason, socketErrorCode, force, data, start, count, eventData);
}
// Autogenerated method: LiteNetLib.NetManager.CreateEvent
void LiteNetLib::NetManager::CreateEvent(LiteNetLib::NetEvent::EType type, LiteNetLib::NetPeer* peer, System::Net::IPEndPoint* remoteEndPoint, System::Net::Sockets::SocketError errorCode, int latency, LiteNetLib::DisconnectReason disconnectReason, LiteNetLib::ConnectionRequest* connectionRequest, LiteNetLib::DeliveryMethod deliveryMethod, LiteNetLib::NetPacket* readerSource, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::CreateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(latency), ::il2cpp_utils::ExtractType(disconnectReason), ::il2cpp_utils::ExtractType(connectionRequest), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(readerSource), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, peer, remoteEndPoint, errorCode, latency, disconnectReason, connectionRequest, deliveryMethod, readerSource, userData);
}
// Autogenerated method: LiteNetLib.NetManager.ProcessEvent
void LiteNetLib::NetManager::ProcessEvent(LiteNetLib::NetEvent* evt) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::ProcessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, evt);
}
// Autogenerated method: LiteNetLib.NetManager.RecycleEvent
void LiteNetLib::NetManager::RecycleEvent(LiteNetLib::NetEvent* evt) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::RecycleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, evt);
}
// Autogenerated method: LiteNetLib.NetManager.UpdateLogic
void LiteNetLib::NetManager::UpdateLogic() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::UpdateLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.LiteNetLib.INetSocketListener.OnMessageReceived
void LiteNetLib::NetManager::LiteNetLib_INetSocketListener_OnMessageReceived(::Array<uint8_t>* data, int length, System::Net::Sockets::SocketError errorCode, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::LiteNetLib.INetSocketListener.OnMessageReceived");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetSocketListener.OnMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, length, errorCode, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.OnConnectionSolved
LiteNetLib::NetPeer* LiteNetLib::NetManager::OnConnectionSolved(LiteNetLib::ConnectionRequest* request, ::Array<uint8_t>* rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::OnConnectionSolved");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnConnectionSolved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(rejectData), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, request, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.NetManager.GetNextPeerId
int LiteNetLib::NetManager::GetNextPeerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::GetNextPeerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextPeerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.ProcessConnectRequest
void LiteNetLib::NetManager::ProcessConnectRequest(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPeer* netPeer, LiteNetLib::NetConnectRequestPacket* connRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::ProcessConnectRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessConnectRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(netPeer), ::il2cpp_utils::ExtractType(connRequest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, netPeer, connRequest);
}
// Autogenerated method: LiteNetLib.NetManager.DataReceived
void LiteNetLib::NetManager::DataReceived(::Array<uint8_t>* reusableBuffer, int count, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DataReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DataReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reusableBuffer), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reusableBuffer, count, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.CreateReceiveEvent
void LiteNetLib::NetManager::CreateReceiveEvent(LiteNetLib::NetPacket* packet, LiteNetLib::DeliveryMethod method, LiteNetLib::NetPeer* fromPeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::CreateReceiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateReceiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(fromPeer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, method, fromPeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, start, length, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, channelNumber, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, channelNumber, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, start, length, channelNumber, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, start, length, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, channelNumber, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, channelNumber, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, start, length, channelNumber, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(System::Net::IPAddress* addressIPv4, System::Net::IPAddress* addressIPv6, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addressIPv4), ::il2cpp_utils::ExtractType(addressIPv6), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, addressIPv4, addressIPv6, port);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(::Il2CppString* addressIPv4, ::Il2CppString* addressIPv6, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addressIPv4), ::il2cpp_utils::ExtractType(addressIPv6), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, addressIPv4, addressIPv6, port);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, port);
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(::Array<uint8_t>* message, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendUnconnectedMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnectedMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(LiteNetLib::Utils::NetDataWriter* writer, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendUnconnectedMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnectedMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, writer, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(::Array<uint8_t>* message, int start, int length, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendUnconnectedMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnectedMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message, start, length, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(LiteNetLib::Utils::NetDataWriter* writer, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, writer, port);
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(::Array<uint8_t>* data, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, port);
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(::Array<uint8_t>* data, int start, int length, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, start, length, port);
}
// Autogenerated method: LiteNetLib.NetManager.Flush
void LiteNetLib::NetManager::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.PollEvents
void LiteNetLib::NetManager::PollEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::PollEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(::Il2CppString* address, int port, ::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(address), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, address, port, key);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(::Il2CppString* address, int port, LiteNetLib::Utils::NetDataWriter* connectionData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(address), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(connectionData)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, address, port, connectionData);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(System::Net::IPEndPoint* target, ::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, target, key);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(System::Net::IPEndPoint* target, LiteNetLib::Utils::NetDataWriter* connectionData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(connectionData)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, target, connectionData);
}
// Autogenerated method: LiteNetLib.NetManager.Stop
void LiteNetLib::NetManager::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.Stop
void LiteNetLib::NetManager::Stop(bool sendDisconnectMessages) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sendDisconnectMessages)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sendDisconnectMessages);
}
// Autogenerated method: LiteNetLib.NetManager.GetPeersCount
int LiteNetLib::NetManager::GetPeersCount(LiteNetLib::ConnectionState peerState) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::GetPeersCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPeersCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peerState)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, peerState);
}
// Autogenerated method: LiteNetLib.NetManager.GetPeersNonAlloc
void LiteNetLib::NetManager::GetPeersNonAlloc(System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* peers, LiteNetLib::ConnectionState peerState) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::GetPeersNonAlloc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPeersNonAlloc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peers), ::il2cpp_utils::ExtractType(peerState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peers, peerState);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectAll
void LiteNetLib::NetManager::DisconnectAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectAll
void LiteNetLib::NetManager::DisconnectAll(::Array<uint8_t>* data, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, start, count);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeerForce
void LiteNetLib::NetManager::DisconnectPeerForce(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeerForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeerForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, ::Array<uint8_t>* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, data);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, writer);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, ::Array<uint8_t>* data, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, data, start, count);
}
// Autogenerated method: LiteNetLib.NetManager.GetEnumerator
LiteNetLib::NetManager::NetPeerEnumerator LiteNetLib::NetManager::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::GetEnumerator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetManager::NetPeerEnumerator, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator
System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>* LiteNetLib::NetManager::System_Collections_Generic_IEnumerable$LiteNetLib_NetPeer$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* LiteNetLib::NetManager::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer
#include "LiteNetLib/NetManager_IPEndPointComparer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer.Equals
bool LiteNetLib::NetManager::IPEndPointComparer::Equals(System::Net::IPEndPoint* x, System::Net::IPEndPoint* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::IPEndPointComparer::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x, y);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer.GetHashCode
int LiteNetLib::NetManager::IPEndPointComparer::GetHashCode(System::Net::IPEndPoint* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::IPEndPointComparer::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator
#include "LiteNetLib/NetManager_NetPeerEnumerator.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.get_Current
LiteNetLib::NetPeer* LiteNetLib::NetManager::NetPeerEnumerator::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(*this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.System.Collections.IEnumerator.get_Current
::Il2CppObject* LiteNetLib::NetManager::NetPeerEnumerator::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(*this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.Dispose
void LiteNetLib::NetManager::NetPeerEnumerator::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.MoveNext
bool LiteNetLib::NetManager::NetPeerEnumerator::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.Reset
void LiteNetLib::NetManager::NetPeerEnumerator::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.PacketProperty
#include "LiteNetLib/PacketProperty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Unreliable
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Unreliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Unreliable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Unreliable"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Unreliable
void LiteNetLib::PacketProperty::_set_Unreliable(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Unreliable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Unreliable", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Channeled
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Channeled() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Channeled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Channeled"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Channeled
void LiteNetLib::PacketProperty::_set_Channeled(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Channeled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Channeled", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Ack
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Ack() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Ack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Ack"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Ack
void LiteNetLib::PacketProperty::_set_Ack(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Ack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Ack", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Ping
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Ping() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Ping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Ping"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Ping
void LiteNetLib::PacketProperty::_set_Ping(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Ping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Ping", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Pong
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Pong() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Pong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Pong"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Pong
void LiteNetLib::PacketProperty::_set_Pong(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Pong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Pong", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty ConnectRequest
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_ConnectRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_ConnectRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "ConnectRequest"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty ConnectRequest
void LiteNetLib::PacketProperty::_set_ConnectRequest(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_ConnectRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "ConnectRequest", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty ConnectAccept
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_ConnectAccept() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_ConnectAccept");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "ConnectAccept"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty ConnectAccept
void LiteNetLib::PacketProperty::_set_ConnectAccept(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_ConnectAccept");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "ConnectAccept", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Disconnect
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Disconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Disconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Disconnect
void LiteNetLib::PacketProperty::_set_Disconnect(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Disconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Disconnect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty UnconnectedMessage
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_UnconnectedMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_UnconnectedMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "UnconnectedMessage"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty UnconnectedMessage
void LiteNetLib::PacketProperty::_set_UnconnectedMessage(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_UnconnectedMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "UnconnectedMessage", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty MtuCheck
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_MtuCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_MtuCheck");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "MtuCheck"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty MtuCheck
void LiteNetLib::PacketProperty::_set_MtuCheck(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_MtuCheck");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "MtuCheck", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty MtuOk
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_MtuOk() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_MtuOk");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "MtuOk"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty MtuOk
void LiteNetLib::PacketProperty::_set_MtuOk(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_MtuOk");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "MtuOk", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Broadcast
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Broadcast() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Broadcast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Broadcast"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Broadcast
void LiteNetLib::PacketProperty::_set_Broadcast(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Broadcast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Broadcast", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Merged
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Merged() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Merged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Merged"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Merged
void LiteNetLib::PacketProperty::_set_Merged(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Merged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Merged", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty ShutdownOk
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_ShutdownOk() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_ShutdownOk");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "ShutdownOk"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty ShutdownOk
void LiteNetLib::PacketProperty::_set_ShutdownOk(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_ShutdownOk");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "ShutdownOk", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty PeerNotFound
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_PeerNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_PeerNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "PeerNotFound"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty PeerNotFound
void LiteNetLib::PacketProperty::_set_PeerNotFound(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_PeerNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "PeerNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty InvalidProtocol
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_InvalidProtocol() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_InvalidProtocol");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "InvalidProtocol"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty InvalidProtocol
void LiteNetLib::PacketProperty::_set_InvalidProtocol(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_InvalidProtocol");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "InvalidProtocol", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty NatMessage
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_NatMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_NatMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "NatMessage"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty NatMessage
void LiteNetLib::PacketProperty::_set_NatMessage(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_NatMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "NatMessage", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Empty
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Empty"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Empty
void LiteNetLib::PacketProperty::_set_Empty(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Empty", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 LastProperty
int LiteNetLib::NetPacket::_get_LastProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::_get_LastProperty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPacket", "LastProperty"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 LastProperty
void LiteNetLib::NetPacket::_set_LastProperty(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::_set_LastProperty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPacket", "LastProperty", value));
}
// Autogenerated method: LiteNetLib.NetPacket.get_Property
LiteNetLib::PacketProperty LiteNetLib::NetPacket::get_Property() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_Property");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Property", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::PacketProperty, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_Property
void LiteNetLib::NetPacket::set_Property(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_Property");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Property", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_ConnectionNumber
uint8_t LiteNetLib::NetPacket::get_ConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_ConnectionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_ConnectionNumber
void LiteNetLib::NetPacket::set_ConnectionNumber(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_ConnectionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConnectionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_Sequence
uint16_t LiteNetLib::NetPacket::get_Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_Sequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Sequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_Sequence
void LiteNetLib::NetPacket::set_Sequence(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_Sequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Sequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_IsFragmented
bool LiteNetLib::NetPacket::get_IsFragmented() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_IsFragmented");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsFragmented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.get_ChannelId
uint8_t LiteNetLib::NetPacket::get_ChannelId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_ChannelId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChannelId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_ChannelId
void LiteNetLib::NetPacket::set_ChannelId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_ChannelId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChannelId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_FragmentId
uint16_t LiteNetLib::NetPacket::get_FragmentId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_FragmentId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FragmentId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_FragmentId
void LiteNetLib::NetPacket::set_FragmentId(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_FragmentId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FragmentId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_FragmentPart
uint16_t LiteNetLib::NetPacket::get_FragmentPart() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_FragmentPart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FragmentPart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_FragmentPart
void LiteNetLib::NetPacket::set_FragmentPart(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_FragmentPart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FragmentPart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_FragmentsTotal
uint16_t LiteNetLib::NetPacket::get_FragmentsTotal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_FragmentsTotal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FragmentsTotal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_FragmentsTotal
void LiteNetLib::NetPacket::set_FragmentsTotal(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_FragmentsTotal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FragmentsTotal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket..cctor
void LiteNetLib::NetPacket::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetPacket", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.MarkFragmented
void LiteNetLib::NetPacket::MarkFragmented() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::MarkFragmented");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkFragmented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.GetHeaderSize
int LiteNetLib::NetPacket::GetHeaderSize(LiteNetLib::PacketProperty property) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::GetHeaderSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetPacket", "GetHeaderSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, property);
}
// Autogenerated method: LiteNetLib.NetPacket.GetHeaderSize
int LiteNetLib::NetPacket::GetHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::GetHeaderSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHeaderSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.FromBytes
bool LiteNetLib::NetPacket::FromBytes(::Array<uint8_t>* data, int start, int packetSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(packetSize)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, start, packetSize);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Net.SocketAddress
#include "System/Net/SocketAddress.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 HeaderSize
int LiteNetLib::NetConnectRequestPacket::_get_HeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::_get_HeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConnectRequestPacket", "HeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 HeaderSize
void LiteNetLib::NetConnectRequestPacket::_set_HeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::_set_HeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConnectRequestPacket", "HeaderSize", value));
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.GetProtocolId
int LiteNetLib::NetConnectRequestPacket::GetProtocolId(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::GetProtocolId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", "GetProtocolId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.FromData
LiteNetLib::NetConnectRequestPacket* LiteNetLib::NetConnectRequestPacket::FromData(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::FromData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", "FromData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetConnectRequestPacket*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.Make
LiteNetLib::NetPacket* LiteNetLib::NetConnectRequestPacket::Make(LiteNetLib::Utils::NetDataWriter* connectData, System::Net::SocketAddress* addressBytes, int64_t connectId) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::Make");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", "Make", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectData), ::il2cpp_utils::ExtractType(addressBytes), ::il2cpp_utils::ExtractType(connectId)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPacket*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectData, addressBytes, connectId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetConnectAcceptPacket
#include "LiteNetLib/NetConnectAcceptPacket.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 Size
int LiteNetLib::NetConnectAcceptPacket::_get_Size() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::_get_Size");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConnectAcceptPacket", "Size"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 Size
void LiteNetLib::NetConnectAcceptPacket::_set_Size(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::_set_Size");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConnectAcceptPacket", "Size", value));
}
// Autogenerated method: LiteNetLib.NetConnectAcceptPacket.FromData
LiteNetLib::NetConnectAcceptPacket* LiteNetLib::NetConnectAcceptPacket::FromData(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::FromData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectAcceptPacket", "FromData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetConnectAcceptPacket*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectAcceptPacket.Make
LiteNetLib::NetPacket* LiteNetLib::NetConnectAcceptPacket::Make(int64_t connectId, uint8_t connectNum, bool reusedPeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::Make");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectAcceptPacket", "Make", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectId), ::il2cpp_utils::ExtractType(connectNum), ::il2cpp_utils::ExtractType(reusedPeer)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPacket*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectId, connectNum, reusedPeer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: System.Threading.ReaderWriterLockSlim
#include "System/Threading/ReaderWriterLockSlim.hpp"
// Including type: LiteNetLib.PacketProperty
#include "LiteNetLib/PacketProperty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NetPacketPool.GetWithData
LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetWithData(LiteNetLib::PacketProperty property, ::Array<uint8_t>* data, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::GetWithData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWithData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPacket*, false>(this, ___internal__method, property, data, start, length);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetWithProperty
LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetWithProperty(LiteNetLib::PacketProperty property, int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::GetWithProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWithProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property), ::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPacket*, false>(this, ___internal__method, property, size);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetWithProperty
LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetWithProperty(LiteNetLib::PacketProperty property) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::GetWithProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWithProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPacket*, false>(this, ___internal__method, property);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetPacket
LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetPacket(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::GetPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPacket*, false>(this, ___internal__method, size);
}
// Autogenerated method: LiteNetLib.NetPacketPool.Recycle
void LiteNetLib::NetPacketPool::Recycle(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::Recycle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Recycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ConnectionState
#include "LiteNetLib/ConnectionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Outgoing
LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Outgoing() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_get_Outgoing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Outgoing"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Outgoing
void LiteNetLib::ConnectionState::_set_Outgoing(LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_set_Outgoing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Outgoing", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Connected
LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Connected
void LiteNetLib::ConnectionState::_set_Connected(LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState ShutdownRequested
LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_ShutdownRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_get_ShutdownRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "ShutdownRequested"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState ShutdownRequested
void LiteNetLib::ConnectionState::_set_ShutdownRequested(LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_set_ShutdownRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "ShutdownRequested", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Disconnected
LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Disconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_get_Disconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Disconnected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Disconnected
void LiteNetLib::ConnectionState::_set_Disconnected(LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_set_Disconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Disconnected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Any
LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Any"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Any
void LiteNetLib::ConnectionState::_set_Any(LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Any", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ConnectRequestResult
#include "LiteNetLib/ConnectRequestResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult None
LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult None
void LiteNetLib::ConnectRequestResult::_set_None(LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult P2PLose
LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_P2PLose() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_get_P2PLose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "P2PLose"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult P2PLose
void LiteNetLib::ConnectRequestResult::_set_P2PLose(LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_set_P2PLose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "P2PLose", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult Reconnection
LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_Reconnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_get_Reconnection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "Reconnection"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult Reconnection
void LiteNetLib::ConnectRequestResult::_set_Reconnection(LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_set_Reconnection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "Reconnection", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult NewConnection
LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_NewConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_get_NewConnection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "NewConnection"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult NewConnection
void LiteNetLib::ConnectRequestResult::_set_NewConnection(LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_set_NewConnection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "NewConnection", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.DisconnectResult
#include "LiteNetLib/DisconnectResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectResult None
LiteNetLib::DisconnectResult LiteNetLib::DisconnectResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectResult>("LiteNetLib", "DisconnectResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectResult None
void LiteNetLib::DisconnectResult::_set_None(LiteNetLib::DisconnectResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectResult Reject
LiteNetLib::DisconnectResult LiteNetLib::DisconnectResult::_get_Reject() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_get_Reject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectResult>("LiteNetLib", "DisconnectResult", "Reject"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectResult Reject
void LiteNetLib::DisconnectResult::_set_Reject(LiteNetLib::DisconnectResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_set_Reject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectResult", "Reject", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectResult Disconnect
LiteNetLib::DisconnectResult LiteNetLib::DisconnectResult::_get_Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_get_Disconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectResult>("LiteNetLib", "DisconnectResult", "Disconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectResult Disconnect
void LiteNetLib::DisconnectResult::_set_Disconnect(LiteNetLib::DisconnectResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_set_Disconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectResult", "Disconnect", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ShutdownResult
#include "LiteNetLib/ShutdownResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ShutdownResult None
LiteNetLib::ShutdownResult LiteNetLib::ShutdownResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ShutdownResult>("LiteNetLib", "ShutdownResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ShutdownResult None
void LiteNetLib::ShutdownResult::_set_None(LiteNetLib::ShutdownResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ShutdownResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ShutdownResult Success
LiteNetLib::ShutdownResult LiteNetLib::ShutdownResult::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ShutdownResult>("LiteNetLib", "ShutdownResult", "Success"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ShutdownResult Success
void LiteNetLib::ShutdownResult::_set_Success(LiteNetLib::ShutdownResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ShutdownResult", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ShutdownResult WasConnected
LiteNetLib::ShutdownResult LiteNetLib::ShutdownResult::_get_WasConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_get_WasConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ShutdownResult>("LiteNetLib", "ShutdownResult", "WasConnected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ShutdownResult WasConnected
void LiteNetLib::ShutdownResult::_set_WasConnected(LiteNetLib::ShutdownResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_set_WasConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ShutdownResult", "WasConnected", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPeer/LiteNetLib.IncomingFragments
#include "LiteNetLib/NetPeer_IncomingFragments.hpp"
// Including type: System.Diagnostics.Stopwatch
#include "System/Diagnostics/Stopwatch.hpp"
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.BaseChannel
#include "LiteNetLib/BaseChannel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.NetConnectAcceptPacket
#include "LiteNetLib/NetConnectAcceptPacket.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: LiteNetLib.DisconnectResult
#include "LiteNetLib/DisconnectResult.hpp"
// Including type: LiteNetLib.ShutdownResult
#include "LiteNetLib/ShutdownResult.hpp"
// Including type: LiteNetLib.ConnectRequestResult
#include "LiteNetLib/ConnectRequestResult.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 MtuCheckDelay
int LiteNetLib::NetPeer::_get_MtuCheckDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_get_MtuCheckDelay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "MtuCheckDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MtuCheckDelay
void LiteNetLib::NetPeer::_set_MtuCheckDelay(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_set_MtuCheckDelay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "MtuCheckDelay", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 MaxMtuCheckAttempts
int LiteNetLib::NetPeer::_get_MaxMtuCheckAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_get_MaxMtuCheckAttempts");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "MaxMtuCheckAttempts"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MaxMtuCheckAttempts
void LiteNetLib::NetPeer::_set_MaxMtuCheckAttempts(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_set_MaxMtuCheckAttempts");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "MaxMtuCheckAttempts", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ShutdownDelay
int LiteNetLib::NetPeer::_get_ShutdownDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_get_ShutdownDelay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "ShutdownDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ShutdownDelay
void LiteNetLib::NetPeer::_set_ShutdownDelay(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_set_ShutdownDelay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "ShutdownDelay", value));
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectionNum
uint8_t LiteNetLib::NetPeer::get_ConnectionNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_ConnectionNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectionNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.set_ConnectionNum
void LiteNetLib::NetPeer::set_ConnectionNum(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::set_ConnectionNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConnectionNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectionState
LiteNetLib::ConnectionState LiteNetLib::NetPeer::get_ConnectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_ConnectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::ConnectionState, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectTime
int64_t LiteNetLib::NetPeer::get_ConnectTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_ConnectTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_Ping
int LiteNetLib::NetPeer::get_Ping() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_Ping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Ping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_Mtu
int LiteNetLib::NetPeer::get_Mtu() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_Mtu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mtu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_RemoteTimeDelta
int64_t LiteNetLib::NetPeer::get_RemoteTimeDelta() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_RemoteTimeDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RemoteTimeDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_RemoteUtcTime
System::DateTime LiteNetLib::NetPeer::get_RemoteUtcTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_RemoteUtcTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RemoteUtcTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_TimeSinceLastPacket
int LiteNetLib::NetPeer::get_TimeSinceLastPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_TimeSinceLastPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TimeSinceLastPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ResendDelay
double LiteNetLib::NetPeer::get_ResendDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_ResendDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ResendDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.SetMtu
void LiteNetLib::NetPeer::SetMtu(int mtuIdx) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SetMtu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMtu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mtuIdx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mtuIdx);
}
// Autogenerated method: LiteNetLib.NetPeer.GetPacketsCountInReliableQueue
int LiteNetLib::NetPeer::GetPacketsCountInReliableQueue(uint8_t channelNumber, bool ordered) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::GetPacketsCountInReliableQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPacketsCountInReliableQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(ordered)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, channelNumber, ordered);
}
// Autogenerated method: LiteNetLib.NetPeer.CreateChannel
LiteNetLib::BaseChannel* LiteNetLib::NetPeer::CreateChannel(uint8_t idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::CreateChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::BaseChannel*, false>(this, ___internal__method, idx);
}
// Autogenerated method: LiteNetLib.NetPeer.Reject
void LiteNetLib::NetPeer::Reject(int64_t connectionId, uint8_t connectionNumber, ::Array<uint8_t>* data, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionId), ::il2cpp_utils::ExtractType(connectionNumber), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectionId, connectionNumber, data, start, length);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessConnectAccept
bool LiteNetLib::NetPeer::ProcessConnectAccept(LiteNetLib::NetConnectAcceptPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::ProcessConnectAccept");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessConnectAccept", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.GetMaxSinglePacketSize
int LiteNetLib::NetPeer::GetMaxSinglePacketSize(LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::GetMaxSinglePacketSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaxSinglePacketSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, options);
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendWithDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendWithDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendWithDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendWithDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, start, length, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(LiteNetLib::Utils::NetDataWriter* dataWriter, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendWithDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendWithDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataWriter, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(LiteNetLib::Utils::NetDataWriter* dataWriter, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataWriter, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, start, length, options);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, channelNumber, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(LiteNetLib::Utils::NetDataWriter* dataWriter, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataWriter, channelNumber, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, start, length, channelNumber, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.SendInternal
void LiteNetLib::NetPeer::SendInternal(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, start, length, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(::Array<uint8_t>* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(::Array<uint8_t>* data, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, start, count);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessDisconnect
LiteNetLib::DisconnectResult LiteNetLib::NetPeer::ProcessDisconnect(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::ProcessDisconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessDisconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::DisconnectResult, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.Shutdown
LiteNetLib::ShutdownResult LiteNetLib::NetPeer::Shutdown(::Array<uint8_t>* data, int start, int length, bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Shutdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Shutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(force)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::ShutdownResult, false>(this, ___internal__method, data, start, length, force);
}
// Autogenerated method: LiteNetLib.NetPeer.UpdateRoundTripTime
void LiteNetLib::NetPeer::UpdateRoundTripTime(int roundTripTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::UpdateRoundTripTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRoundTripTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(roundTripTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, roundTripTime);
}
// Autogenerated method: LiteNetLib.NetPeer.AddReliablePacket
void LiteNetLib::NetPeer::AddReliablePacket(LiteNetLib::DeliveryMethod method, LiteNetLib::NetPacket* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::AddReliablePacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddReliablePacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, method, p);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessMtuPacket
void LiteNetLib::NetPeer::ProcessMtuPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::ProcessMtuPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMtuPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.UpdateMtuLogic
void LiteNetLib::NetPeer::UpdateMtuLogic(int deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::UpdateMtuLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMtuLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessConnectRequest
LiteNetLib::ConnectRequestResult LiteNetLib::NetPeer::ProcessConnectRequest(LiteNetLib::NetConnectRequestPacket* connRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::ProcessConnectRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessConnectRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connRequest)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::ConnectRequestResult, false>(this, ___internal__method, connRequest);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessPacket
void LiteNetLib::NetPeer::ProcessPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::ProcessPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.SendMerged
void LiteNetLib::NetPeer::SendMerged() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendMerged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMerged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.SendUserData
void LiteNetLib::NetPeer::SendUserData(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.Flush
void LiteNetLib::NetPeer::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.Update
void LiteNetLib::NetPeer::Update(int deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: LiteNetLib.NetPeer.RecycleAndDeliver
void LiteNetLib::NetPeer::RecycleAndDeliver(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::RecycleAndDeliver");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleAndDeliver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetPeer/LiteNetLib.IncomingFragments
#include "LiteNetLib/NetPeer_IncomingFragments.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.INetSocketListener
#include "LiteNetLib/INetSocketListener.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.INetSocketListener.OnMessageReceived
void LiteNetLib::INetSocketListener::OnMessageReceived(::Array<uint8_t>* data, int length, System::Net::Sockets::SocketError errorCode, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetSocketListener::OnMessageReceived");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, length, errorCode, remoteEndPoint);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Net.Sockets.Socket
#include "System/Net/Sockets/Socket.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: LiteNetLib.INetSocketListener
#include "LiteNetLib/INetSocketListener.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 ReceivePollingTime
int LiteNetLib::NetSocket::_get_ReceivePollingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_get_ReceivePollingTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetSocket", "ReceivePollingTime"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ReceivePollingTime
void LiteNetLib::NetSocket::_set_ReceivePollingTime(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_set_ReceivePollingTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "ReceivePollingTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SioUdpConnreset
int LiteNetLib::NetSocket::_get_SioUdpConnreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_get_SioUdpConnreset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetSocket", "SioUdpConnreset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SioUdpConnreset
void LiteNetLib::NetSocket::_set_SioUdpConnreset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_set_SioUdpConnreset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "SioUdpConnreset", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Net.IPAddress MulticastAddressV6
System::Net::IPAddress* LiteNetLib::NetSocket::_get_MulticastAddressV6() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_get_MulticastAddressV6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::IPAddress*>("LiteNetLib", "NetSocket", "MulticastAddressV6"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Net.IPAddress MulticastAddressV6
void LiteNetLib::NetSocket::_set_MulticastAddressV6(System::Net::IPAddress* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_set_MulticastAddressV6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "MulticastAddressV6", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Boolean IPv6Support
bool LiteNetLib::NetSocket::_get_IPv6Support() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_get_IPv6Support");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("LiteNetLib", "NetSocket", "IPv6Support"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Boolean IPv6Support
void LiteNetLib::NetSocket::_set_IPv6Support(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_set_IPv6Support");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "IPv6Support", value));
}
// Autogenerated method: LiteNetLib.NetSocket.get_LocalPort
int LiteNetLib::NetSocket::get_LocalPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::get_LocalPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LocalPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.set_LocalPort
void LiteNetLib::NetSocket::set_LocalPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::set_LocalPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LocalPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetSocket.get_Ttl
int16_t LiteNetLib::NetSocket::get_Ttl() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::get_Ttl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Ttl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.set_Ttl
void LiteNetLib::NetSocket::set_Ttl(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::set_Ttl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Ttl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetSocket..cctor
void LiteNetLib::NetSocket::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetSocket", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.IsActive
bool LiteNetLib::NetSocket::IsActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::IsActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.ReceiveLogic
void LiteNetLib::NetSocket::ReceiveLogic(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::ReceiveLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceiveLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: LiteNetLib.NetSocket.Bind
bool LiteNetLib::NetSocket::Bind(System::Net::IPAddress* addressIPv4, System::Net::IPAddress* addressIPv6, int port, bool reuseAddress, bool ipv6, System::Threading::ThreadPriority priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::Bind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addressIPv4), ::il2cpp_utils::ExtractType(addressIPv6), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(reuseAddress), ::il2cpp_utils::ExtractType(ipv6), ::il2cpp_utils::ExtractType(priority)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, addressIPv4, addressIPv6, port, reuseAddress, ipv6, priority);
}
// Autogenerated method: LiteNetLib.NetSocket.BindSocket
bool LiteNetLib::NetSocket::BindSocket(System::Net::Sockets::Socket* socket, System::Net::IPEndPoint* ep, bool reuseAddress) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::BindSocket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindSocket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(socket), ::il2cpp_utils::ExtractType(ep), ::il2cpp_utils::ExtractType(reuseAddress)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, socket, ep, reuseAddress);
}
// Autogenerated method: LiteNetLib.NetSocket.SendBroadcast
bool LiteNetLib::NetSocket::SendBroadcast(::Array<uint8_t>* data, int offset, int size, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, offset, size, port);
}
// Autogenerated method: LiteNetLib.NetSocket.SendTo
int LiteNetLib::NetSocket::SendTo(::Array<uint8_t>* data, int offset, int size, System::Net::IPEndPoint* remoteEndPoint, System::Net::Sockets::SocketError& errorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::SendTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(errorCode)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, data, offset, size, remoteEndPoint, errorCode);
}
// Autogenerated method: LiteNetLib.NetSocket.Close
void LiteNetLib::NetSocket::Close(bool suspend) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::Close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(suspend)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, suspend);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketsSent
int64_t LiteNetLib::NetStatistics::get_PacketsSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_PacketsSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketsSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketsReceived
int64_t LiteNetLib::NetStatistics::get_PacketsReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_PacketsReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketsReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_BytesSent
int64_t LiteNetLib::NetStatistics::get_BytesSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_BytesSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BytesSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_BytesReceived
int64_t LiteNetLib::NetStatistics::get_BytesReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_BytesReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BytesReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketLoss
int64_t LiteNetLib::NetStatistics::get_PacketLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_PacketLoss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketLoss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketLossPercent
int64_t LiteNetLib::NetStatistics::get_PacketLossPercent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_PacketLossPercent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketLossPercent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.Reset
void LiteNetLib::NetStatistics::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.IncrementPacketsSent
void LiteNetLib::NetStatistics::IncrementPacketsSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::IncrementPacketsSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.IncrementPacketsReceived
void LiteNetLib::NetStatistics::IncrementPacketsReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::IncrementPacketsReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.AddBytesSent
void LiteNetLib::NetStatistics::AddBytesSent(int64_t bytesSent) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::AddBytesSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBytesSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesSent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bytesSent);
}
// Autogenerated method: LiteNetLib.NetStatistics.AddBytesReceived
void LiteNetLib::NetStatistics::AddBytesReceived(int64_t bytesReceived) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::AddBytesReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBytesReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesReceived)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bytesReceived);
}
// Autogenerated method: LiteNetLib.NetStatistics.IncrementPacketLoss
void LiteNetLib::NetStatistics::IncrementPacketLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::IncrementPacketLoss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketLoss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.AddPacketLoss
void LiteNetLib::NetStatistics::AddPacketLoss(int64_t packetLoss) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::AddPacketLoss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPacketLoss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packetLoss)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packetLoss);
}
// Autogenerated method: LiteNetLib.NetStatistics.ToString
::Il2CppString* LiteNetLib::NetStatistics::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.LocalAddrType
#include "LiteNetLib/LocalAddrType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.LocalAddrType IPv4
LiteNetLib::LocalAddrType LiteNetLib::LocalAddrType::_get_IPv4() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_get_IPv4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::LocalAddrType>("LiteNetLib", "LocalAddrType", "IPv4"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.LocalAddrType IPv4
void LiteNetLib::LocalAddrType::_set_IPv4(LiteNetLib::LocalAddrType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_set_IPv4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "LocalAddrType", "IPv4", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.LocalAddrType IPv6
LiteNetLib::LocalAddrType LiteNetLib::LocalAddrType::_get_IPv6() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_get_IPv6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::LocalAddrType>("LiteNetLib", "LocalAddrType", "IPv6"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.LocalAddrType IPv6
void LiteNetLib::LocalAddrType::_set_IPv6(LiteNetLib::LocalAddrType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_set_IPv6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "LocalAddrType", "IPv6", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.LocalAddrType All
LiteNetLib::LocalAddrType LiteNetLib::LocalAddrType::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::LocalAddrType>("LiteNetLib", "LocalAddrType", "All"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.LocalAddrType All
void LiteNetLib::LocalAddrType::_set_All(LiteNetLib::LocalAddrType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "LocalAddrType", "All", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetUtils
#include "LiteNetLib/NetUtils.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Net.Sockets.AddressFamily
#include "System/Net/Sockets/AddressFamily.hpp"
// Including type: LiteNetLib.LocalAddrType
#include "LiteNetLib/LocalAddrType.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<System.String> IpList
System::Collections::Generic::List_1<::Il2CppString*>* LiteNetLib::NetUtils::_get_IpList() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::_get_IpList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<::Il2CppString*>*>("LiteNetLib", "NetUtils", "IpList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<System.String> IpList
void LiteNetLib::NetUtils::_set_IpList(System::Collections::Generic::List_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::_set_IpList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetUtils", "IpList", value));
}
// Autogenerated method: LiteNetLib.NetUtils..cctor
void LiteNetLib::NetUtils::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetUtils.MakeEndPoint
System::Net::IPEndPoint* LiteNetLib::NetUtils::MakeEndPoint(::Il2CppString* hostStr, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::MakeEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "MakeEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostStr, port);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddress
System::Net::IPAddress* LiteNetLib::NetUtils::ResolveAddress(::Il2CppString* hostStr) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::ResolveAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr)})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPAddress*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostStr);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddress
System::Net::IPAddress* LiteNetLib::NetUtils::ResolveAddress(::Il2CppString* hostStr, System::Net::Sockets::AddressFamily addressFamily) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::ResolveAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr), ::il2cpp_utils::ExtractType(addressFamily)})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPAddress*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostStr, addressFamily);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddresses
::Array<System::Net::IPAddress*>* LiteNetLib::NetUtils::ResolveAddresses(::Il2CppString* hostStr) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::ResolveAddresses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddresses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Net::IPAddress*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostStr);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIpList
System::Collections::Generic::List_1<::Il2CppString*>* LiteNetLib::NetUtils::GetLocalIpList(LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::GetLocalIpList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIpList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addrType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIpList
void LiteNetLib::NetUtils::GetLocalIpList(System::Collections::Generic::IList_1<::Il2CppString*>* targetList, LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::GetLocalIpList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIpList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetList), ::il2cpp_utils::ExtractType(addrType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, targetList, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIp
::Il2CppString* LiteNetLib::NetUtils::GetLocalIp(LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::GetLocalIp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addrType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.PrintInterfaceInfos
void LiteNetLib::NetUtils::PrintInterfaceInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::PrintInterfaceInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "PrintInterfaceInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetUtils.RelativeSequenceNumber
int LiteNetLib::NetUtils::RelativeSequenceNumber(int number, int expected) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::RelativeSequenceNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "RelativeSequenceNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number), ::il2cpp_utils::ExtractType(expected)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, number, expected);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.ReliableChannel
#include "LiteNetLib/ReliableChannel.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 BitsInByte
int LiteNetLib::ReliableChannel::_get_BitsInByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::_get_BitsInByte");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "ReliableChannel", "BitsInByte"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 BitsInByte
void LiteNetLib::ReliableChannel::_set_BitsInByte(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::_set_BitsInByte");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ReliableChannel", "BitsInByte", value));
}
// Autogenerated method: LiteNetLib.ReliableChannel.ProcessAck
void LiteNetLib::ReliableChannel::ProcessAck(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::ProcessAck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessAck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.ReliableChannel.SendNextPackets
void LiteNetLib::ReliableChannel::SendNextPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::SendNextPackets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNextPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ReliableChannel.ProcessPacket
bool LiteNetLib::ReliableChannel::ProcessPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::ProcessPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket
#include "LiteNetLib/ReliableChannel.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket.Init
void LiteNetLib::ReliableChannel::PendingPacket::Init(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::PendingPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket.TrySend
void LiteNetLib::ReliableChannel::PendingPacket::TrySend(int64_t currentTime, LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::PendingPacket::TrySend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TrySend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentTime), ::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, currentTime, peer);
}
// Autogenerated method: LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket.Clear
bool LiteNetLib::ReliableChannel::PendingPacket::Clear(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::PendingPacket::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket.ToString
::Il2CppString* LiteNetLib::ReliableChannel::PendingPacket::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::PendingPacket::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.SequencedChannel
#include "LiteNetLib/SequencedChannel.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.SequencedChannel.SendNextPackets
void LiteNetLib::SequencedChannel::SendNextPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::SequencedChannel::SendNextPackets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNextPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.SequencedChannel.ProcessPacket
bool LiteNetLib::SequencedChannel::ProcessPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::SequencedChannel::ProcessPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.SimpleChannel
#include "LiteNetLib/SimpleChannel.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.SimpleChannel.SendNextPackets
void LiteNetLib::SimpleChannel::SendNextPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::SimpleChannel::SendNextPackets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNextPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.SimpleChannel.ProcessPacket
bool LiteNetLib::SimpleChannel::ProcessPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::SimpleChannel::ProcessPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.CRC32C
#include "LiteNetLib/Utils/CRC32C.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 ChecksumSize
int LiteNetLib::Utils::CRC32C::_get_ChecksumSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::CRC32C::_get_ChecksumSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib.Utils", "CRC32C", "ChecksumSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ChecksumSize
void LiteNetLib::Utils::CRC32C::_set_ChecksumSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::CRC32C::_set_ChecksumSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "CRC32C", "ChecksumSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 Poly
uint LiteNetLib::Utils::CRC32C::_get_Poly() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::CRC32C::_get_Poly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("LiteNetLib.Utils", "CRC32C", "Poly"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 Poly
void LiteNetLib::Utils::CRC32C::_set_Poly(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::CRC32C::_set_Poly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "CRC32C", "Poly", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32[] Table
::Array<uint>* LiteNetLib::Utils::CRC32C::_get_Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::CRC32C::_get_Table");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("LiteNetLib.Utils", "CRC32C", "Table"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32[] Table
void LiteNetLib::Utils::CRC32C::_set_Table(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::CRC32C::_set_Table");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "CRC32C", "Table", value));
}
// Autogenerated method: LiteNetLib.Utils.CRC32C..cctor
void LiteNetLib::Utils::CRC32C::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::CRC32C::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "CRC32C", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.CRC32C.Compute
uint LiteNetLib::Utils::CRC32C::Compute(::Array<uint8_t>* input, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::CRC32C::Compute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "CRC32C", "Compute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, offset, length);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.FastBitConverter
#include "LiteNetLib/Utils/FastBitConverter.hpp"
// Including type: LiteNetLib.Utils.FastBitConverter/LiteNetLib.Utils.ConverterHelperDouble
#include "LiteNetLib/Utils/FastBitConverter_ConverterHelperDouble.hpp"
// Including type: LiteNetLib.Utils.FastBitConverter/LiteNetLib.Utils.ConverterHelperFloat
#include "LiteNetLib/Utils/FastBitConverter_ConverterHelperFloat.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.WriteLittleEndian
void LiteNetLib::Utils::FastBitConverter::WriteLittleEndian(::Array<uint8_t>* buffer, int offset, uint64_t data) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::WriteLittleEndian");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "WriteLittleEndian", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, buffer, offset, data);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.WriteLittleEndian
void LiteNetLib::Utils::FastBitConverter::WriteLittleEndian(::Array<uint8_t>* buffer, int offset, int data) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::WriteLittleEndian");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "WriteLittleEndian", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, buffer, offset, data);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.WriteLittleEndian
void LiteNetLib::Utils::FastBitConverter::WriteLittleEndian(::Array<uint8_t>* buffer, int offset, int16_t data) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::WriteLittleEndian");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "WriteLittleEndian", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, buffer, offset, data);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::Array<uint8_t>* bytes, int startIndex, double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::Array<uint8_t>* bytes, int startIndex, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::Array<uint8_t>* bytes, int startIndex, int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::Array<uint8_t>* bytes, int startIndex, uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::Array<uint8_t>* bytes, int startIndex, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::Array<uint8_t>* bytes, int startIndex, uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::Array<uint8_t>* bytes, int startIndex, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated method: LiteNetLib.Utils.FastBitConverter.GetBytes
void LiteNetLib::Utils::FastBitConverter::GetBytes(::Array<uint8_t>* bytes, int startIndex, uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::FastBitConverter::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "FastBitConverter", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, startIndex, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Utils.INetSerializable.Serialize
void LiteNetLib::Utils::INetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::INetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LiteNetLib.Utils.INetSerializable.Deserialize
void LiteNetLib::Utils::INetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::INetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.ArraySegment`1
#include "System/ArraySegment_1.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_RawData
::Array<uint8_t>* LiteNetLib::Utils::NetDataReader::get_RawData() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::get_RawData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RawData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_RawDataSize
int LiteNetLib::Utils::NetDataReader::get_RawDataSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::get_RawDataSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RawDataSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_UserDataOffset
int LiteNetLib::Utils::NetDataReader::get_UserDataOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::get_UserDataOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserDataOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_UserDataSize
int LiteNetLib::Utils::NetDataReader::get_UserDataSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::get_UserDataSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserDataSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_IsNull
bool LiteNetLib::Utils::NetDataReader::get_IsNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::get_IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_Position
int LiteNetLib::Utils::NetDataReader::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::get_Position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_EndOfData
bool LiteNetLib::Utils::NetDataReader::get_EndOfData() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::get_EndOfData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EndOfData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.get_AvailableBytes
int LiteNetLib::Utils::NetDataReader::get_AvailableBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::get_AvailableBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AvailableBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.SkipBytes
void LiteNetLib::Utils::NetDataReader::SkipBytes(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::SkipBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SkipBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, count);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.SetSource
void LiteNetLib::Utils::NetDataReader::SetSource(LiteNetLib::Utils::NetDataWriter* dataWriter) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataWriter);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.SetSource
void LiteNetLib::Utils::NetDataReader::SetSource(::Array<uint8_t>* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.SetSource
void LiteNetLib::Utils::NetDataReader::SetSource(::Array<uint8_t>* source, int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, offset);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.SetSource
void LiteNetLib::Utils::NetDataReader::SetSource(::Array<uint8_t>* source, int offset, int maxSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(maxSize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, offset, maxSize);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetNetEndPoint
System::Net::IPEndPoint* LiteNetLib::Utils::NetDataReader::GetNetEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetNetEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNetEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetByte
uint8_t LiteNetLib::Utils::NetDataReader::GetByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetSByte
int8_t LiteNetLib::Utils::NetDataReader::GetSByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetSByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetBoolArray
::Array<bool>* LiteNetLib::Utils::NetDataReader::GetBoolArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetBoolArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoolArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<bool>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetUShortArray
::Array<uint16_t>* LiteNetLib::Utils::NetDataReader::GetUShortArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetUShortArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUShortArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint16_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetShortArray
::Array<int16_t>* LiteNetLib::Utils::NetDataReader::GetShortArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetShortArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetShortArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<int16_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetLongArray
::Array<int64_t>* LiteNetLib::Utils::NetDataReader::GetLongArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetLongArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLongArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<int64_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetULongArray
::Array<uint64_t>* LiteNetLib::Utils::NetDataReader::GetULongArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetULongArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetULongArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint64_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetIntArray
::Array<int>* LiteNetLib::Utils::NetDataReader::GetIntArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetIntArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIntArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<int>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetUIntArray
::Array<uint>* LiteNetLib::Utils::NetDataReader::GetUIntArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetUIntArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUIntArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetFloatArray
::Array<float>* LiteNetLib::Utils::NetDataReader::GetFloatArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetFloatArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloatArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<float>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetDoubleArray
::Array<double>* LiteNetLib::Utils::NetDataReader::GetDoubleArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetDoubleArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDoubleArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<double>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetStringArray
::Array<::Il2CppString*>* LiteNetLib::Utils::NetDataReader::GetStringArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetStringArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetStringArray
::Array<::Il2CppString*>* LiteNetLib::Utils::NetDataReader::GetStringArray(int maxStringLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetStringArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxStringLength)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(this, ___internal__method, maxStringLength);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetBool
bool LiteNetLib::Utils::NetDataReader::GetBool() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetChar
::Il2CppChar LiteNetLib::Utils::NetDataReader::GetChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetUShort
uint16_t LiteNetLib::Utils::NetDataReader::GetUShort() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetUShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetShort
int16_t LiteNetLib::Utils::NetDataReader::GetShort() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetLong
int64_t LiteNetLib::Utils::NetDataReader::GetLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetULong
uint64_t LiteNetLib::Utils::NetDataReader::GetULong() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetInt
int LiteNetLib::Utils::NetDataReader::GetInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetUInt
uint LiteNetLib::Utils::NetDataReader::GetUInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetFloat
float LiteNetLib::Utils::NetDataReader::GetFloat() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetDouble
double LiteNetLib::Utils::NetDataReader::GetDouble() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetString
::Il2CppString* LiteNetLib::Utils::NetDataReader::GetString(int maxLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxLength)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, maxLength);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetString
::Il2CppString* LiteNetLib::Utils::NetDataReader::GetString() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetRemainingBytesSegment
System::ArraySegment_1<uint8_t> LiteNetLib::Utils::NetDataReader::GetRemainingBytesSegment() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetRemainingBytesSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRemainingBytesSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::ArraySegment_1<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetRemainingBytes
::Array<uint8_t>* LiteNetLib::Utils::NetDataReader::GetRemainingBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetRemainingBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRemainingBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetBytes
void LiteNetLib::Utils::NetDataReader::GetBytes(::Array<uint8_t>* destination, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, destination, start, count);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetBytes
void LiteNetLib::Utils::NetDataReader::GetBytes(::Array<uint8_t>* destination, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, destination, count);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetSBytesWithLength
::Array<int8_t>* LiteNetLib::Utils::NetDataReader::GetSBytesWithLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetSBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<int8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.GetBytesWithLength
::Array<uint8_t>* LiteNetLib::Utils::NetDataReader::GetBytesWithLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::GetBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekByte
uint8_t LiteNetLib::Utils::NetDataReader::PeekByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekSByte
int8_t LiteNetLib::Utils::NetDataReader::PeekSByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekSByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekSByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekBool
bool LiteNetLib::Utils::NetDataReader::PeekBool() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekChar
::Il2CppChar LiteNetLib::Utils::NetDataReader::PeekChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekUShort
uint16_t LiteNetLib::Utils::NetDataReader::PeekUShort() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekUShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekUShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekShort
int16_t LiteNetLib::Utils::NetDataReader::PeekShort() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekLong
int64_t LiteNetLib::Utils::NetDataReader::PeekLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekULong
uint64_t LiteNetLib::Utils::NetDataReader::PeekULong() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekInt
int LiteNetLib::Utils::NetDataReader::PeekInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekUInt
uint LiteNetLib::Utils::NetDataReader::PeekUInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekFloat
float LiteNetLib::Utils::NetDataReader::PeekFloat() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekDouble
double LiteNetLib::Utils::NetDataReader::PeekDouble() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekString
::Il2CppString* LiteNetLib::Utils::NetDataReader::PeekString(int maxLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxLength)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, maxLength);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.PeekString
::Il2CppString* LiteNetLib::Utils::NetDataReader::PeekString() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::PeekString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetByte
bool LiteNetLib::Utils::NetDataReader::TryGetByte(uint8_t& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetSByte
bool LiteNetLib::Utils::NetDataReader::TryGetSByte(int8_t& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetSByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetSByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int8_t&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetBool
bool LiteNetLib::Utils::NetDataReader::TryGetBool(bool& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetChar
bool LiteNetLib::Utils::NetDataReader::TryGetChar(::Il2CppChar& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetShort
bool LiteNetLib::Utils::NetDataReader::TryGetShort(int16_t& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int16_t&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetUShort
bool LiteNetLib::Utils::NetDataReader::TryGetUShort(uint16_t& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetUShort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetUShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint16_t&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetInt
bool LiteNetLib::Utils::NetDataReader::TryGetInt(int& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetUInt
bool LiteNetLib::Utils::NetDataReader::TryGetUInt(uint& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetLong
bool LiteNetLib::Utils::NetDataReader::TryGetLong(int64_t& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetULong
bool LiteNetLib::Utils::NetDataReader::TryGetULong(uint64_t& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetFloat
bool LiteNetLib::Utils::NetDataReader::TryGetFloat(float& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetDouble
bool LiteNetLib::Utils::NetDataReader::TryGetDouble(double& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetString
bool LiteNetLib::Utils::NetDataReader::TryGetString(::Il2CppString*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetStringArray
bool LiteNetLib::Utils::NetDataReader::TryGetStringArray(::Array<::Il2CppString*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetStringArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetStringArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.TryGetBytesWithLength
bool LiteNetLib::Utils::NetDataReader::TryGetBytesWithLength(::Array<uint8_t>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::TryGetBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated method: LiteNetLib.Utils.NetDataReader.Clear
void LiteNetLib::Utils::NetDataReader::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataReader::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 InitialSize
int LiteNetLib::Utils::NetDataWriter::_get_InitialSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::_get_InitialSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib.Utils", "NetDataWriter", "InitialSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 InitialSize
void LiteNetLib::Utils::NetDataWriter::_set_InitialSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::_set_InitialSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NetDataWriter", "InitialSize", value));
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.get_Capacity
int LiteNetLib::Utils::NetDataWriter::get_Capacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::get_Capacity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.get_Data
::Array<uint8_t>* LiteNetLib::Utils::NetDataWriter::get_Data() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::get_Data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.get_Length
int LiteNetLib::Utils::NetDataWriter::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::get_Length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.FromBytes
LiteNetLib::Utils::NetDataWriter* LiteNetLib::Utils::NetDataWriter::FromBytes(::Array<uint8_t>* bytes, bool copy) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NetDataWriter", "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(copy)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetDataWriter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, copy);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.FromBytes
LiteNetLib::Utils::NetDataWriter* LiteNetLib::Utils::NetDataWriter::FromBytes(::Array<uint8_t>* bytes, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NetDataWriter", "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetDataWriter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, offset, length);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.FromString
LiteNetLib::Utils::NetDataWriter* LiteNetLib::Utils::NetDataWriter::FromString(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::FromString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NetDataWriter", "FromString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetDataWriter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.ResizeIfNeed
void LiteNetLib::Utils::NetDataWriter::ResizeIfNeed(int newSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::ResizeIfNeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResizeIfNeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newSize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newSize);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Reset
void LiteNetLib::Utils::NetDataWriter::Reset(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, size);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Reset
void LiteNetLib::Utils::NetDataWriter::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.CopyData
::Array<uint8_t>* LiteNetLib::Utils::NetDataWriter::CopyData() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::CopyData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(int8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::Array<uint8_t>* data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, offset, length);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::Array<uint8_t>* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutSBytesWithLength
void LiteNetLib::Utils::NetDataWriter::PutSBytesWithLength(::Array<int8_t>* data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutSBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutSBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, offset, length);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutSBytesWithLength
void LiteNetLib::Utils::NetDataWriter::PutSBytesWithLength(::Array<int8_t>* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutSBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutSBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutBytesWithLength
void LiteNetLib::Utils::NetDataWriter::PutBytesWithLength(::Array<uint8_t>* data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, offset, length);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutBytesWithLength
void LiteNetLib::Utils::NetDataWriter::PutBytesWithLength(::Array<uint8_t>* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutBytesWithLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutBytesWithLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(System::Array* arr, int sz) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arr), ::il2cpp_utils::ExtractType(sz)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, arr, sz);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<double>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<int64_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<uint64_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<uint16_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<int16_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.PutArray
void LiteNetLib::Utils::NetDataWriter::PutArray(::Array<::Il2CppString*>* value, int maxLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::PutArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(maxLength)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, maxLength);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NetDataWriter.Put
void LiteNetLib::Utils::NetDataWriter::Put(::Il2CppString* value, int maxLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetDataWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(maxLength)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, maxLength);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NetPacketProcessor
#include "LiteNetLib/Utils/NetPacketProcessor.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.HashCache`1
#include "LiteNetLib/Utils/NetPacketProcessor_HashCache_1.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate
#include "LiteNetLib/Utils/NetPacketProcessor_SubscribeDelegate.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass25_0`1
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass25_0_1.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass26_0`2
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass26_0_2.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass27_0`1
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass27_0_1.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass28_0`2
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass28_0_2.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass29_0`2
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass29_0_2.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass30_0`1
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass30_0_1.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass31_0`2
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass31_0_2.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.<>c__DisplayClass32_0`1
#include "LiteNetLib/Utils/NetPacketProcessor_--c__DisplayClass32_0_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer
#include "LiteNetLib/Utils/NetSerializer.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor.GetCallbackFromData
LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate* LiteNetLib::Utils::NetPacketProcessor::GetCallbackFromData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetPacketProcessor::GetCallbackFromData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCallbackFromData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate*, false>(this, ___internal__method, reader);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor.ReadAllPackets
void LiteNetLib::Utils::NetPacketProcessor::ReadAllPackets(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetPacketProcessor::ReadAllPackets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadAllPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor.ReadAllPackets
void LiteNetLib::Utils::NetPacketProcessor::ReadAllPackets(LiteNetLib::Utils::NetDataReader* reader, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetPacketProcessor::ReadAllPackets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadAllPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader, userData);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor.ReadPacket
void LiteNetLib::Utils::NetPacketProcessor::ReadPacket(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetPacketProcessor::ReadPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor.ReadPacket
void LiteNetLib::Utils::NetPacketProcessor::ReadPacket(LiteNetLib::Utils::NetDataReader* reader, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetPacketProcessor::ReadPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader, userData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate
#include "LiteNetLib/Utils/NetPacketProcessor_SubscribeDelegate.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate.Invoke
void LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::Invoke(LiteNetLib::Utils::NetDataReader* reader, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader, userData);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate.BeginInvoke
System::IAsyncResult* LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::BeginInvoke(LiteNetLib::Utils::NetDataReader* reader, ::Il2CppObject* userData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, reader, userData, callback, object);
}
// Autogenerated method: LiteNetLib.Utils.NetPacketProcessor/LiteNetLib.Utils.SubscribeDelegate.EndInvoke
void LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NetPacketProcessor::SubscribeDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.InvalidTypeException
#include "LiteNetLib/Utils/InvalidTypeException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.ParseException
#include "LiteNetLib/Utils/ParseException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NetSerializer
#include "LiteNetLib/Utils/NetSerializer.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCall`1
#include "LiteNetLib/Utils/NetSerializer_FastCall_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCallSpecific`2
#include "LiteNetLib/Utils/NetSerializer_FastCallSpecific_2.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCallSpecificAuto`2
#include "LiteNetLib/Utils/NetSerializer_FastCallSpecificAuto_2.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCallStatic`2
#include "LiteNetLib/Utils/NetSerializer_FastCallStatic_2.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCallStruct`2
#include "LiteNetLib/Utils/NetSerializer_FastCallStruct_2.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCallClass`2
#include "LiteNetLib/Utils/NetSerializer_FastCallClass_2.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.IntSerializer`1
#include "LiteNetLib/Utils/NetSerializer_IntSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.UIntSerializer`1
#include "LiteNetLib/Utils/NetSerializer_UIntSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.ShortSerializer`1
#include "LiteNetLib/Utils/NetSerializer_ShortSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.UShortSerializer`1
#include "LiteNetLib/Utils/NetSerializer_UShortSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.LongSerializer`1
#include "LiteNetLib/Utils/NetSerializer_LongSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.ULongSerializer`1
#include "LiteNetLib/Utils/NetSerializer_ULongSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.ByteSerializer`1
#include "LiteNetLib/Utils/NetSerializer_ByteSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.SByteSerializer`1
#include "LiteNetLib/Utils/NetSerializer_SByteSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FloatSerializer`1
#include "LiteNetLib/Utils/NetSerializer_FloatSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.DoubleSerializer`1
#include "LiteNetLib/Utils/NetSerializer_DoubleSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.BoolSerializer`1
#include "LiteNetLib/Utils/NetSerializer_BoolSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CharSerializer`1
#include "LiteNetLib/Utils/NetSerializer_CharSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.IPEndPointSerializer`1
#include "LiteNetLib/Utils/NetSerializer_IPEndPointSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.StringSerializer`1
#include "LiteNetLib/Utils/NetSerializer_StringSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.EnumByteSerializer`1
#include "LiteNetLib/Utils/NetSerializer_EnumByteSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.EnumIntSerializer`1
#include "LiteNetLib/Utils/NetSerializer_EnumIntSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.ClassInfo`1
#include "LiteNetLib/Utils/NetSerializer_ClassInfo_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomType
#include "LiteNetLib/Utils/NetSerializer_CustomType.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomTypeStruct`1
#include "LiteNetLib/Utils/NetSerializer_CustomTypeStruct_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomTypeClass`1
#include "LiteNetLib/Utils/NetSerializer_CustomTypeClass_1.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomTypeStatic`1
#include "LiteNetLib/Utils/NetSerializer_CustomTypeStatic_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.CustomType
#include "LiteNetLib/Utils/NetSerializer_CustomType.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/LiteNetLib.Utils.FastCall`1
#include "LiteNetLib/Utils/NetSerializer_FastCall_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NtpPacket
#include "LiteNetLib/Utils/NtpPacket.hpp"
// Including type: LiteNetLib.Utils.NtpLeapIndicator
#include "LiteNetLib/Utils/NtpLeapIndicator.hpp"
// Including type: LiteNetLib.Utils.NtpMode
#include "LiteNetLib/Utils/NtpMode.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.DateTime Epoch
System::DateTime LiteNetLib::Utils::NtpPacket::_get_Epoch() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::_get_Epoch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::DateTime>("LiteNetLib.Utils", "NtpPacket", "Epoch"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.DateTime Epoch
void LiteNetLib::Utils::NtpPacket::_set_Epoch(System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::_set_Epoch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpPacket", "Epoch", value));
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_Bytes
::Array<uint8_t>* LiteNetLib::Utils::NtpPacket::get_Bytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_Bytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Bytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.set_Bytes
void LiteNetLib::Utils::NtpPacket::set_Bytes(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::set_Bytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Bytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_LeapIndicator
LiteNetLib::Utils::NtpLeapIndicator LiteNetLib::Utils::NtpPacket::get_LeapIndicator() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_LeapIndicator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LeapIndicator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NtpLeapIndicator, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_VersionNumber
int LiteNetLib::Utils::NtpPacket::get_VersionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_VersionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VersionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.set_VersionNumber
void LiteNetLib::Utils::NtpPacket::set_VersionNumber(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::set_VersionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_VersionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_Mode
LiteNetLib::Utils::NtpMode LiteNetLib::Utils::NtpPacket::get_Mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_Mode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NtpMode, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.set_Mode
void LiteNetLib::Utils::NtpPacket::set_Mode(LiteNetLib::Utils::NtpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::set_Mode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_Stratum
int LiteNetLib::Utils::NtpPacket::get_Stratum() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_Stratum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Stratum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_Poll
int LiteNetLib::Utils::NtpPacket::get_Poll() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_Poll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Poll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_Precision
int LiteNetLib::Utils::NtpPacket::get_Precision() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_Precision");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Precision", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_RootDelay
System::TimeSpan LiteNetLib::Utils::NtpPacket::get_RootDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_RootDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RootDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_RootDispersion
System::TimeSpan LiteNetLib::Utils::NtpPacket::get_RootDispersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_RootDispersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RootDispersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_ReferenceId
uint LiteNetLib::Utils::NtpPacket::get_ReferenceId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_ReferenceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReferenceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_ReferenceTimestamp
System::Nullable_1<System::DateTime> LiteNetLib::Utils::NtpPacket::get_ReferenceTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_ReferenceTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReferenceTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::DateTime>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_OriginTimestamp
System::Nullable_1<System::DateTime> LiteNetLib::Utils::NtpPacket::get_OriginTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_OriginTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OriginTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::DateTime>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_ReceiveTimestamp
System::Nullable_1<System::DateTime> LiteNetLib::Utils::NtpPacket::get_ReceiveTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_ReceiveTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReceiveTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::DateTime>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_TransmitTimestamp
System::Nullable_1<System::DateTime> LiteNetLib::Utils::NtpPacket::get_TransmitTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_TransmitTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TransmitTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::DateTime>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.set_TransmitTimestamp
void LiteNetLib::Utils::NtpPacket::set_TransmitTimestamp(System::Nullable_1<System::DateTime> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::set_TransmitTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TransmitTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_DestinationTimestamp
System::Nullable_1<System::DateTime> LiteNetLib::Utils::NtpPacket::get_DestinationTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_DestinationTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DestinationTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::DateTime>, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.set_DestinationTimestamp
void LiteNetLib::Utils::NtpPacket::set_DestinationTimestamp(System::Nullable_1<System::DateTime> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::set_DestinationTimestamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DestinationTimestamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_RoundTripTime
System::TimeSpan LiteNetLib::Utils::NtpPacket::get_RoundTripTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_RoundTripTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RoundTripTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.get_CorrectionOffset
System::TimeSpan LiteNetLib::Utils::NtpPacket::get_CorrectionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::get_CorrectionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CorrectionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket..cctor
void LiteNetLib::Utils::NtpPacket::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpPacket", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.FromServerResponse
LiteNetLib::Utils::NtpPacket* LiteNetLib::Utils::NtpPacket::FromServerResponse(::Array<uint8_t>* bytes, System::DateTime destinationTimestamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::FromServerResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpPacket", "FromServerResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(destinationTimestamp)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NtpPacket*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, destinationTimestamp);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.ValidateRequest
void LiteNetLib::Utils::NtpPacket::ValidateRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::ValidateRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.ValidateReply
void LiteNetLib::Utils::NtpPacket::ValidateReply() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::ValidateReply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateReply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.CheckTimestamps
void LiteNetLib::Utils::NtpPacket::CheckTimestamps() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::CheckTimestamps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckTimestamps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.GetDateTime64
System::Nullable_1<System::DateTime> LiteNetLib::Utils::NtpPacket::GetDateTime64(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::GetDateTime64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDateTime64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::DateTime>, false>(this, ___internal__method, offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.SetDateTime64
void LiteNetLib::Utils::NtpPacket::SetDateTime64(int offset, System::Nullable_1<System::DateTime> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::SetDateTime64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDateTime64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, offset, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.GetTimeSpan32
System::TimeSpan LiteNetLib::Utils::NtpPacket::GetTimeSpan32(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::GetTimeSpan32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTimeSpan32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<System::TimeSpan, false>(this, ___internal__method, offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.GetUInt64BE
uint64_t LiteNetLib::Utils::NtpPacket::GetUInt64BE(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::GetUInt64BE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUInt64BE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.SetUInt64BE
void LiteNetLib::Utils::NtpPacket::SetUInt64BE(int offset, uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::SetUInt64BE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUInt64BE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, offset, value);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.GetInt32BE
int LiteNetLib::Utils::NtpPacket::GetInt32BE(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::GetInt32BE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt32BE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.GetUInt32BE
uint LiteNetLib::Utils::NtpPacket::GetUInt32BE(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::GetUInt32BE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUInt32BE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, offset);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.SwapEndianness
uint LiteNetLib::Utils::NtpPacket::SwapEndianness(uint x) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::SwapEndianness");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpPacket", "SwapEndianness", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x);
}
// Autogenerated method: LiteNetLib.Utils.NtpPacket.SwapEndianness
uint64_t LiteNetLib::Utils::NtpPacket::SwapEndianness(uint64_t x) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpPacket::SwapEndianness");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpPacket", "SwapEndianness", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NtpLeapIndicator
#include "LiteNetLib/Utils/NtpLeapIndicator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpLeapIndicator NoWarning
LiteNetLib::Utils::NtpLeapIndicator LiteNetLib::Utils::NtpLeapIndicator::_get_NoWarning() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpLeapIndicator::_get_NoWarning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::Utils::NtpLeapIndicator>("LiteNetLib.Utils", "NtpLeapIndicator", "NoWarning"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpLeapIndicator NoWarning
void LiteNetLib::Utils::NtpLeapIndicator::_set_NoWarning(LiteNetLib::Utils::NtpLeapIndicator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpLeapIndicator::_set_NoWarning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpLeapIndicator", "NoWarning", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpLeapIndicator LastMinuteHas61Seconds
LiteNetLib::Utils::NtpLeapIndicator LiteNetLib::Utils::NtpLeapIndicator::_get_LastMinuteHas61Seconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpLeapIndicator::_get_LastMinuteHas61Seconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::Utils::NtpLeapIndicator>("LiteNetLib.Utils", "NtpLeapIndicator", "LastMinuteHas61Seconds"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpLeapIndicator LastMinuteHas61Seconds
void LiteNetLib::Utils::NtpLeapIndicator::_set_LastMinuteHas61Seconds(LiteNetLib::Utils::NtpLeapIndicator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpLeapIndicator::_set_LastMinuteHas61Seconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpLeapIndicator", "LastMinuteHas61Seconds", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpLeapIndicator LastMinuteHas59Seconds
LiteNetLib::Utils::NtpLeapIndicator LiteNetLib::Utils::NtpLeapIndicator::_get_LastMinuteHas59Seconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpLeapIndicator::_get_LastMinuteHas59Seconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::Utils::NtpLeapIndicator>("LiteNetLib.Utils", "NtpLeapIndicator", "LastMinuteHas59Seconds"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpLeapIndicator LastMinuteHas59Seconds
void LiteNetLib::Utils::NtpLeapIndicator::_set_LastMinuteHas59Seconds(LiteNetLib::Utils::NtpLeapIndicator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpLeapIndicator::_set_LastMinuteHas59Seconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpLeapIndicator", "LastMinuteHas59Seconds", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpLeapIndicator AlarmCondition
LiteNetLib::Utils::NtpLeapIndicator LiteNetLib::Utils::NtpLeapIndicator::_get_AlarmCondition() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpLeapIndicator::_get_AlarmCondition");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::Utils::NtpLeapIndicator>("LiteNetLib.Utils", "NtpLeapIndicator", "AlarmCondition"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpLeapIndicator AlarmCondition
void LiteNetLib::Utils::NtpLeapIndicator::_set_AlarmCondition(LiteNetLib::Utils::NtpLeapIndicator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpLeapIndicator::_set_AlarmCondition");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpLeapIndicator", "AlarmCondition", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.Utils.NtpMode
#include "LiteNetLib/Utils/NtpMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpMode Client
LiteNetLib::Utils::NtpMode LiteNetLib::Utils::NtpMode::_get_Client() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpMode::_get_Client");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::Utils::NtpMode>("LiteNetLib.Utils", "NtpMode", "Client"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpMode Client
void LiteNetLib::Utils::NtpMode::_set_Client(LiteNetLib::Utils::NtpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpMode::_set_Client");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpMode", "Client", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.Utils.NtpMode Server
LiteNetLib::Utils::NtpMode LiteNetLib::Utils::NtpMode::_get_Server() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpMode::_get_Server");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::Utils::NtpMode>("LiteNetLib.Utils", "NtpMode", "Server"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.Utils.NtpMode Server
void LiteNetLib::Utils::NtpMode::_set_Server(LiteNetLib::Utils::NtpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpMode::_set_Server");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpMode", "Server", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NtpRequest
#include "LiteNetLib/Utils/NtpRequest.hpp"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: LiteNetLib.Utils.NtpPacket
#include "LiteNetLib/Utils/NtpPacket.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 DefaultPort
int LiteNetLib::Utils::NtpRequest::_get_DefaultPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpRequest::_get_DefaultPort");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib.Utils", "NtpRequest", "DefaultPort"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 DefaultPort
void LiteNetLib::Utils::NtpRequest::_set_DefaultPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpRequest::_set_DefaultPort");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib.Utils", "NtpRequest", "DefaultPort", value));
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(System::Net::IPEndPoint* endPoint, System::Action_1<LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpRequest::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpRequest", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(onRequestComplete)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NtpRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, endPoint, onRequestComplete);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(System::Net::IPAddress* ipAddress, System::Action_1<LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpRequest::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpRequest", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ipAddress), ::il2cpp_utils::ExtractType(onRequestComplete)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NtpRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ipAddress, onRequestComplete);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(::Il2CppString* ntpServerAddress, int port, System::Action_1<LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpRequest::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpRequest", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ntpServerAddress), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(onRequestComplete)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NtpRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ntpServerAddress, port, onRequestComplete);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Create
LiteNetLib::Utils::NtpRequest* LiteNetLib::Utils::NtpRequest::Create(::Il2CppString* ntpServerAddress, System::Action_1<LiteNetLib::Utils::NtpPacket*>* onRequestComplete) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpRequest::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib.Utils", "NtpRequest", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ntpServerAddress), ::il2cpp_utils::ExtractType(onRequestComplete)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NtpRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ntpServerAddress, onRequestComplete);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Send
void LiteNetLib::Utils::NtpRequest::Send() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpRequest::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.Close
void LiteNetLib::Utils::NtpRequest::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpRequest::Close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.Utils.NtpRequest.LiteNetLib.INetSocketListener.OnMessageReceived
void LiteNetLib::Utils::NtpRequest::LiteNetLib_INetSocketListener_OnMessageReceived(::Array<uint8_t>* data, int length, System::Net::Sockets::SocketError errorCode, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Utils::NtpRequest::LiteNetLib.INetSocketListener.OnMessageReceived");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetSocketListener.OnMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, length, errorCode, remoteEndPoint);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Layers.Crc32cLayer
#include "LiteNetLib/Layers/Crc32cLayer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Layers.Crc32cLayer.ProcessInboundPacket
void LiteNetLib::Layers::Crc32cLayer::ProcessInboundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Layers::Crc32cLayer::ProcessInboundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessInboundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, data, offset, length);
}
// Autogenerated method: LiteNetLib.Layers.Crc32cLayer.ProcessOutBoundPacket
void LiteNetLib::Layers::Crc32cLayer::ProcessOutBoundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Layers::Crc32cLayer::ProcessOutBoundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessOutBoundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, data, offset, length);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Layers.PacketLayerBase
#include "LiteNetLib/Layers/PacketLayerBase.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Layers.PacketLayerBase.ProcessInboundPacket
void LiteNetLib::Layers::PacketLayerBase::ProcessInboundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Layers::PacketLayerBase::ProcessInboundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessInboundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, data, offset, length);
}
// Autogenerated method: LiteNetLib.Layers.PacketLayerBase.ProcessOutBoundPacket
void LiteNetLib::Layers::PacketLayerBase::ProcessOutBoundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Layers::PacketLayerBase::ProcessOutBoundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessOutBoundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, data, offset, length);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Layers.XorEncryptLayer
#include "LiteNetLib/Layers/XorEncryptLayer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.Layers.XorEncryptLayer.SetKey
void LiteNetLib::Layers::XorEncryptLayer::SetKey(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Layers::XorEncryptLayer::SetKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key);
}
// Autogenerated method: LiteNetLib.Layers.XorEncryptLayer.SetKey
void LiteNetLib::Layers::XorEncryptLayer::SetKey(::Array<uint8_t>* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Layers::XorEncryptLayer::SetKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key);
}
// Autogenerated method: LiteNetLib.Layers.XorEncryptLayer.ProcessInboundPacket
void LiteNetLib::Layers::XorEncryptLayer::ProcessInboundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Layers::XorEncryptLayer::ProcessInboundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessInboundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, data, offset, length);
}
// Autogenerated method: LiteNetLib.Layers.XorEncryptLayer.ProcessOutBoundPacket
void LiteNetLib::Layers::XorEncryptLayer::ProcessOutBoundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::Layers::XorEncryptLayer::ProcessOutBoundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessOutBoundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, data, offset, length);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LIV.SDK.Unity.HelpAttribute
#include "LIV/SDK/Unity/HelpAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LIV.SDK.Unity.LIV
#include "LIV/SDK/Unity/LIV.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnvironmentShaderWarmup
#include "GlobalNamespace/EnvironmentShaderWarmup.hpp"
// Including type: EnvironmentShaderWarmup/<Start>d__6
#include "GlobalNamespace/EnvironmentShaderWarmup_-Start-d__6.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: MainCamera
#include "GlobalNamespace/MainCamera.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kNumberOfColumns
int GlobalNamespace::EnvironmentShaderWarmup::_get_kNumberOfColumns() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::_get_kNumberOfColumns");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EnvironmentShaderWarmup", "kNumberOfColumns"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kNumberOfColumns
void GlobalNamespace::EnvironmentShaderWarmup::_set_kNumberOfColumns(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::_set_kNumberOfColumns");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EnvironmentShaderWarmup", "kNumberOfColumns", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kNumberOfRows
int GlobalNamespace::EnvironmentShaderWarmup::_get_kNumberOfRows() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::_get_kNumberOfRows");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EnvironmentShaderWarmup", "kNumberOfRows"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kNumberOfRows
void GlobalNamespace::EnvironmentShaderWarmup::_set_kNumberOfRows(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::_set_kNumberOfRows");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EnvironmentShaderWarmup", "kNumberOfRows", value));
}
// Autogenerated method: EnvironmentShaderWarmup.Start
System::Collections::IEnumerator* GlobalNamespace::EnvironmentShaderWarmup::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnvironmentShaderWarmup/<Start>d__6
#include "GlobalNamespace/EnvironmentShaderWarmup_-Start-d__6.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnvironmentShaderWarmup/<Start>d__6.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentShaderWarmup/<Start>d__6.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentShaderWarmup/<Start>d__6.System.IDisposable.Dispose
void GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentShaderWarmup/<Start>d__6.MoveNext
bool GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentShaderWarmup/<Start>d__6.System.Collections.IEnumerator.Reset
void GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BTSCharacter
#include "GlobalNamespace/BTSCharacter.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: BTSCharacterMaterialSwitcher
#include "GlobalNamespace/BTSCharacterMaterialSwitcher.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSCharacter.get_characterName
::Il2CppString* GlobalNamespace::BTSCharacter::get_characterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacter::get_characterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_characterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacter.get_materialPropertyBlockController
GlobalNamespace::MaterialPropertyBlockController* GlobalNamespace::BTSCharacter::get_materialPropertyBlockController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacter::get_materialPropertyBlockController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPropertyBlockController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MaterialPropertyBlockController*, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacter.get_animator
UnityEngine::Animator* GlobalNamespace::BTSCharacter::get_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacter::get_animator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animator*, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacter.get_headTransform
UnityEngine::Transform* GlobalNamespace::BTSCharacter::get_headTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacter::get_headTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacter.SetAlternativeAnimationAndMaterial
void GlobalNamespace::BTSCharacter::SetAlternativeAnimationAndMaterial(UnityEngine::AnimationClip* animation, bool alternativeMaterialOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacter::SetAlternativeAnimationAndMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAlternativeAnimationAndMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animation), ::il2cpp_utils::ExtractType(alternativeMaterialOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animation, alternativeMaterialOn);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BTSCharacterDataModel
#include "GlobalNamespace/BTSCharacterDataModel.hpp"
// Including type: BTSCharacterDataModel/PrefabWithId
#include "GlobalNamespace/BTSCharacterDataModel_PrefabWithId.hpp"
// Including type: BTSCharacterDataModel/AnimationClipWithId
#include "GlobalNamespace/BTSCharacterDataModel_AnimationClipWithId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSCharacterDataModel.get_prefabsWithIds
::Array<GlobalNamespace::BTSCharacterDataModel::PrefabWithId*>* GlobalNamespace::BTSCharacterDataModel::get_prefabsWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterDataModel::get_prefabsWithIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prefabsWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BTSCharacterDataModel::PrefabWithId*>*, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterDataModel.get_animationClipsWithIds
::Array<GlobalNamespace::BTSCharacterDataModel::AnimationClipWithId*>* GlobalNamespace::BTSCharacterDataModel::get_animationClipsWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterDataModel::get_animationClipsWithIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animationClipsWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BTSCharacterDataModel::AnimationClipWithId*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSCharacterDataModel/PrefabWithId
#include "GlobalNamespace/BTSCharacterDataModel_PrefabWithId.hpp"
// Including type: UnityEngine.AddressableAssets.AssetReference
#include "UnityEngine/AddressableAssets/AssetReference.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSCharacterDataModel/PrefabWithId.get_id
int GlobalNamespace::BTSCharacterDataModel::PrefabWithId::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterDataModel::PrefabWithId::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterDataModel/PrefabWithId.get_prefabAssetReference
UnityEngine::AddressableAssets::AssetReference* GlobalNamespace::BTSCharacterDataModel::PrefabWithId::get_prefabAssetReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterDataModel::PrefabWithId::get_prefabAssetReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prefabAssetReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AddressableAssets::AssetReference*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSCharacterDataModel/AnimationClipWithId
#include "GlobalNamespace/BTSCharacterDataModel_AnimationClipWithId.hpp"
// Including type: UnityEngine.AddressableAssets.AssetReference
#include "UnityEngine/AddressableAssets/AssetReference.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSCharacterDataModel/AnimationClipWithId.get_id
int GlobalNamespace::BTSCharacterDataModel::AnimationClipWithId::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterDataModel::AnimationClipWithId::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterDataModel/AnimationClipWithId.get_animationClipAssetReference
UnityEngine::AddressableAssets::AssetReference* GlobalNamespace::BTSCharacterDataModel::AnimationClipWithId::get_animationClipAssetReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterDataModel::AnimationClipWithId::get_animationClipAssetReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animationClipAssetReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AddressableAssets::AssetReference*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BTSCharacterMaterialSwitcher
#include "GlobalNamespace/BTSCharacterMaterialSwitcher.hpp"
// Including type: BTSCharacterMaterialSwitcher/RendererMaterialsPairs
#include "GlobalNamespace/BTSCharacterMaterialSwitcher_RendererMaterialsPairs.hpp"
// Including type: BTSCharacterMaterialSwitcher/MaterialPairs
#include "GlobalNamespace/BTSCharacterMaterialSwitcher_MaterialPairs.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSCharacterMaterialSwitcher.SwapMaterials
void GlobalNamespace::BTSCharacterMaterialSwitcher::SwapMaterials(bool alternative) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterMaterialSwitcher::SwapMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwapMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alternative)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, alternative);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSCharacterMaterialSwitcher/RendererMaterialsPairs
#include "GlobalNamespace/BTSCharacterMaterialSwitcher_RendererMaterialsPairs.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BTSCharacterMaterialSwitcher/MaterialPairs
#include "GlobalNamespace/BTSCharacterMaterialSwitcher_MaterialPairs.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSCharacterMaterialSwitcher/RendererMaterialsPairs.get_renderer
UnityEngine::Renderer* GlobalNamespace::BTSCharacterMaterialSwitcher::RendererMaterialsPairs::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterMaterialSwitcher::RendererMaterialsPairs::get_renderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterMaterialSwitcher/RendererMaterialsPairs.get_materialPairs
System::Collections::Generic::List_1<GlobalNamespace::BTSCharacterMaterialSwitcher::MaterialPairs*>* GlobalNamespace::BTSCharacterMaterialSwitcher::RendererMaterialsPairs::get_materialPairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterMaterialSwitcher::RendererMaterialsPairs::get_materialPairs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialPairs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::BTSCharacterMaterialSwitcher::MaterialPairs*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSCharacterMaterialSwitcher/MaterialPairs
#include "GlobalNamespace/BTSCharacterMaterialSwitcher_MaterialPairs.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSCharacterResultAnimationController
#include "GlobalNamespace/BTSCharacterResultAnimationController.hpp"
// Including type: MaterialPropertyBlockColorSetter
#include "GlobalNamespace/MaterialPropertyBlockColorSetter.hpp"
// Including type: MaterialPropertyBlockFloatAnimator
#include "GlobalNamespace/MaterialPropertyBlockFloatAnimator.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: BTSCharacter
#include "GlobalNamespace/BTSCharacter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSCharacterResultAnimationController.SetCharacter
void GlobalNamespace::BTSCharacterResultAnimationController::SetCharacter(GlobalNamespace::BTSCharacter* btsCharacter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterResultAnimationController::SetCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btsCharacter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, btsCharacter);
}
// Autogenerated method: BTSCharacterResultAnimationController.StopAnimation
void GlobalNamespace::BTSCharacterResultAnimationController::StopAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterResultAnimationController::StopAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BTSCharacterSpawnAnimationController
#include "GlobalNamespace/BTSCharacterSpawnAnimationController.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: JumpReceiver
#include "GlobalNamespace/JumpReceiver.hpp"
// Including type: MaterialPropertyBlockColorSetter
#include "GlobalNamespace/MaterialPropertyBlockColorSetter.hpp"
// Including type: MaterialPropertyBlockFloatAnimator
#include "GlobalNamespace/MaterialPropertyBlockFloatAnimator.hpp"
// Including type: SongSpeedData
#include "GlobalNamespace/SongSpeedData.hpp"
// Including type: UnityEngine.Timeline.ActivationTrack
#include "UnityEngine/Timeline/ActivationTrack.hpp"
// Including type: BTSCharacter
#include "GlobalNamespace/BTSCharacter.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kCharacterActivationStreamName
::Il2CppString* GlobalNamespace::BTSCharacterSpawnAnimationController::_get_kCharacterActivationStreamName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::_get_kCharacterActivationStreamName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BTSCharacterSpawnAnimationController", "kCharacterActivationStreamName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kCharacterActivationStreamName
void GlobalNamespace::BTSCharacterSpawnAnimationController::_set_kCharacterActivationStreamName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::_set_kCharacterActivationStreamName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSCharacterSpawnAnimationController", "kCharacterActivationStreamName", value));
}
// Autogenerated method: BTSCharacterSpawnAnimationController.get_isCharacterVisible
bool GlobalNamespace::BTSCharacterSpawnAnimationController::get_isCharacterVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::get_isCharacterVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isCharacterVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnAnimationController.get_duration
float GlobalNamespace::BTSCharacterSpawnAnimationController::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::get_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnAnimationController.get_characterActivationTrack
UnityEngine::Timeline::ActivationTrack* GlobalNamespace::BTSCharacterSpawnAnimationController::get_characterActivationTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::get_characterActivationTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_characterActivationTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ActivationTrack*, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnAnimationController.PlayAnimation
void GlobalNamespace::BTSCharacterSpawnAnimationController::PlayAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::PlayAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnAnimationController.EndEarlyAnimation
void GlobalNamespace::BTSCharacterSpawnAnimationController::EndEarlyAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::EndEarlyAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndEarlyAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnAnimationController.StopAnimation
void GlobalNamespace::BTSCharacterSpawnAnimationController::StopAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::StopAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnAnimationController.SetCharacter
void GlobalNamespace::BTSCharacterSpawnAnimationController::SetCharacter(GlobalNamespace::BTSCharacter* btsCharacter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::SetCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btsCharacter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, btsCharacter);
}
// Autogenerated method: BTSCharacterSpawnAnimationController.WillResumeAnimation
void GlobalNamespace::BTSCharacterSpawnAnimationController::WillResumeAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::WillResumeAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillResumeAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnAnimationController.ResumeAnimation
void GlobalNamespace::BTSCharacterSpawnAnimationController::ResumeAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::ResumeAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnAnimationController.PauseAnimation
void GlobalNamespace::BTSCharacterSpawnAnimationController::PauseAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnAnimationController::PauseAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSCharacterSpawnController
#include "GlobalNamespace/BTSCharacterSpawnController.hpp"
// Including type: BTSCharacterSpawnController/<TimelineStoppedDelayed>d__19
#include "GlobalNamespace/BTSCharacterSpawnController_-TimelineStoppedDelayed-d__19.hpp"
// Including type: BTSCharacterSpawnAnimationController
#include "GlobalNamespace/BTSCharacterSpawnAnimationController.hpp"
// Including type: BTSCharacterSpawnEventEffect
#include "GlobalNamespace/BTSCharacterSpawnEventEffect.hpp"
// Including type: IGamePause
#include "GlobalNamespace/IGamePause.hpp"
// Including type: ILevelEndActions
#include "GlobalNamespace/ILevelEndActions.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: BTSCharacter
#include "GlobalNamespace/BTSCharacter.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSCharacterSpawnController.get_isCharacterVisible
bool GlobalNamespace::BTSCharacterSpawnController::get_isCharacterVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::get_isCharacterVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isCharacterVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController.get_isSpawned
bool GlobalNamespace::BTSCharacterSpawnController::get_isSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::get_isSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController.Start
void GlobalNamespace::BTSCharacterSpawnController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController.OnDestroy
void GlobalNamespace::BTSCharacterSpawnController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController.HandleStartCharacterAnimation
void GlobalNamespace::BTSCharacterSpawnController::HandleStartCharacterAnimation(GlobalNamespace::BTSCharacter* btsCharacter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::HandleStartCharacterAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStartCharacterAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btsCharacter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, btsCharacter);
}
// Autogenerated method: BTSCharacterSpawnController.HandleGamePauseDidPause
void GlobalNamespace::BTSCharacterSpawnController::HandleGamePauseDidPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::HandleGamePauseDidPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGamePauseDidPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController.HandleGamePauseWillResume
void GlobalNamespace::BTSCharacterSpawnController::HandleGamePauseWillResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::HandleGamePauseWillResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGamePauseWillResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController.HandleGamePauseDidResume
void GlobalNamespace::BTSCharacterSpawnController::HandleGamePauseDidResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::HandleGamePauseDidResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGamePauseDidResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController.HandleLevelEndActionsLevelFailed
void GlobalNamespace::BTSCharacterSpawnController::HandleLevelEndActionsLevelFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::HandleLevelEndActionsLevelFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelEndActionsLevelFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController.TimelineStoppedDelayed
System::Collections::IEnumerator* GlobalNamespace::BTSCharacterSpawnController::TimelineStoppedDelayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::TimelineStoppedDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TimelineStoppedDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BTSCharacterSpawnController/<TimelineStoppedDelayed>d__19
#include "GlobalNamespace/BTSCharacterSpawnController_-TimelineStoppedDelayed-d__19.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSCharacterSpawnController/<TimelineStoppedDelayed>d__19.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::BTSCharacterSpawnController::$TimelineStoppedDelayed$d__19::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::$TimelineStoppedDelayed$d__19::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController/<TimelineStoppedDelayed>d__19.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::BTSCharacterSpawnController::$TimelineStoppedDelayed$d__19::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::$TimelineStoppedDelayed$d__19::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController/<TimelineStoppedDelayed>d__19.System.IDisposable.Dispose
void GlobalNamespace::BTSCharacterSpawnController::$TimelineStoppedDelayed$d__19::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::$TimelineStoppedDelayed$d__19::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController/<TimelineStoppedDelayed>d__19.MoveNext
bool GlobalNamespace::BTSCharacterSpawnController::$TimelineStoppedDelayed$d__19::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::$TimelineStoppedDelayed$d__19::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnController/<TimelineStoppedDelayed>d__19.System.Collections.IEnumerator.Reset
void GlobalNamespace::BTSCharacterSpawnController::$TimelineStoppedDelayed$d__19::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnController::$TimelineStoppedDelayed$d__19::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSCharacterSpawnEventEffect
#include "GlobalNamespace/BTSCharacterSpawnEventEffect.hpp"
// Including type: BTSCharacterDataModel
#include "GlobalNamespace/BTSCharacterDataModel.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BTSCharacter
#include "GlobalNamespace/BTSCharacter.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private BeatmapEventType kCharacterDisplayEventType
GlobalNamespace::BeatmapEventType GlobalNamespace::BTSCharacterSpawnEventEffect::_get_kCharacterDisplayEventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::_get_kCharacterDisplayEventType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BTSCharacterSpawnEventEffect", "kCharacterDisplayEventType"));
}
// Autogenerated static field setter
// Set static field: static private BeatmapEventType kCharacterDisplayEventType
void GlobalNamespace::BTSCharacterSpawnEventEffect::_set_kCharacterDisplayEventType(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::_set_kCharacterDisplayEventType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSCharacterSpawnEventEffect", "kCharacterDisplayEventType", value));
}
// Autogenerated method: BTSCharacterSpawnEventEffect.get_isInitialized
bool GlobalNamespace::BTSCharacterSpawnEventEffect::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::get_isInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnEventEffect.add_startCharacterAnimationEvent
void GlobalNamespace::BTSCharacterSpawnEventEffect::add_startCharacterAnimationEvent(System::Action_1<GlobalNamespace::BTSCharacter*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::add_startCharacterAnimationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_startCharacterAnimationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BTSCharacterSpawnEventEffect.remove_startCharacterAnimationEvent
void GlobalNamespace::BTSCharacterSpawnEventEffect::remove_startCharacterAnimationEvent(System::Action_1<GlobalNamespace::BTSCharacter*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::remove_startCharacterAnimationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_startCharacterAnimationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BTSCharacterSpawnEventEffect.Start
void GlobalNamespace::BTSCharacterSpawnEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnEventEffect.LoadAddressables
void GlobalNamespace::BTSCharacterSpawnEventEffect::LoadAddressables() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::LoadAddressables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAddressables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnEventEffect.CleanupAddressables
void GlobalNamespace::BTSCharacterSpawnEventEffect::CleanupAddressables() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::CleanupAddressables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CleanupAddressables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnEventEffect.OnDestroy
void GlobalNamespace::BTSCharacterSpawnEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSCharacterSpawnEventEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::BTSCharacterSpawnEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BTSCharacterSpawnEventEffect.GetCharacterWithAnimationClip
System::Tuple_2<GlobalNamespace::BTSCharacter*, UnityEngine::AnimationClip*>* GlobalNamespace::BTSCharacterSpawnEventEffect::GetCharacterWithAnimationClip(System::Collections::Generic::Dictionary_2<int, GlobalNamespace::BTSCharacter*>* charDictionary, System::Collections::Generic::Dictionary_2<int, UnityEngine::AnimationClip*>* animDictionary, int prefabId, int animationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::GetCharacterWithAnimationClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BTSCharacterSpawnEventEffect", "GetCharacterWithAnimationClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charDictionary), ::il2cpp_utils::ExtractType(animDictionary), ::il2cpp_utils::ExtractType(prefabId), ::il2cpp_utils::ExtractType(animationId)})));
  return ::il2cpp_utils::RunMethodThrow<System::Tuple_2<GlobalNamespace::BTSCharacter*, UnityEngine::AnimationClip*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, charDictionary, animDictionary, prefabId, animationId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSCharacterSpawnEventValueParser
#include "GlobalNamespace/BTSCharacterSpawnEventValueParser.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kPrefabMask
int GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kPrefabMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kPrefabMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BTSCharacterSpawnEventValueParser", "kPrefabMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kPrefabMask
void GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kPrefabMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kPrefabMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSCharacterSpawnEventValueParser", "kPrefabMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kPrefabBitOffset
int GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kPrefabBitOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kPrefabBitOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BTSCharacterSpawnEventValueParser", "kPrefabBitOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kPrefabBitOffset
void GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kPrefabBitOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kPrefabBitOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSCharacterSpawnEventValueParser", "kPrefabBitOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kAnimationMask
int GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kAnimationMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kAnimationMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BTSCharacterSpawnEventValueParser", "kAnimationMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kAnimationMask
void GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kAnimationMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kAnimationMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSCharacterSpawnEventValueParser", "kAnimationMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kAnimationBitOffset
int GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kAnimationBitOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kAnimationBitOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BTSCharacterSpawnEventValueParser", "kAnimationBitOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kAnimationBitOffset
void GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kAnimationBitOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kAnimationBitOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSCharacterSpawnEventValueParser", "kAnimationBitOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kAlternativeMaterialMask
int GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kAlternativeMaterialMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kAlternativeMaterialMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BTSCharacterSpawnEventValueParser", "kAlternativeMaterialMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kAlternativeMaterialMask
void GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kAlternativeMaterialMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kAlternativeMaterialMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSCharacterSpawnEventValueParser", "kAlternativeMaterialMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kAlternativeMaterialOffset
int GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kAlternativeMaterialOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_get_kAlternativeMaterialOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BTSCharacterSpawnEventValueParser", "kAlternativeMaterialOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kAlternativeMaterialOffset
void GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kAlternativeMaterialOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::_set_kAlternativeMaterialOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSCharacterSpawnEventValueParser", "kAlternativeMaterialOffset", value));
}
// Autogenerated method: BTSCharacterSpawnEventValueParser.GetPrefabId
int GlobalNamespace::BTSCharacterSpawnEventValueParser::GetPrefabId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::GetPrefabId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BTSCharacterSpawnEventValueParser", "GetPrefabId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: BTSCharacterSpawnEventValueParser.GetAnimationId
int GlobalNamespace::BTSCharacterSpawnEventValueParser::GetAnimationId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::GetAnimationId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BTSCharacterSpawnEventValueParser", "GetAnimationId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: BTSCharacterSpawnEventValueParser.GetIsAlternativeMaterial
bool GlobalNamespace::BTSCharacterSpawnEventValueParser::GetIsAlternativeMaterial(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::GetIsAlternativeMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BTSCharacterSpawnEventValueParser", "GetIsAlternativeMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: BTSCharacterSpawnEventValueParser.MergeValuesIntoOneInt
int GlobalNamespace::BTSCharacterSpawnEventValueParser::MergeValuesIntoOneInt(int prefabId, int animationId, bool isAlternativeMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventValueParser::MergeValuesIntoOneInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BTSCharacterSpawnEventValueParser", "MergeValuesIntoOneInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefabId), ::il2cpp_utils::ExtractType(animationId), ::il2cpp_utils::ExtractType(isAlternativeMaterial)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, prefabId, animationId, isAlternativeMaterial);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BTSStarTextEffectController
#include "GlobalNamespace/BTSStarTextEffectController.hpp"
// Including type: BTSStarTextEffectController/Pool
#include "GlobalNamespace/BTSStarTextEffectController_Pool.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kAnimationName
::Il2CppString* GlobalNamespace::BTSStarTextEffectController::_get_kAnimationName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectController::_get_kAnimationName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BTSStarTextEffectController", "kAnimationName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kAnimationName
void GlobalNamespace::BTSStarTextEffectController::_set_kAnimationName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectController::_set_kAnimationName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSStarTextEffectController", "kAnimationName", value));
}
// Autogenerated method: BTSStarTextEffectController.get_animationDuration
float GlobalNamespace::BTSStarTextEffectController::get_animationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectController::get_animationDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animationDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEffectController.Reinitialize
void GlobalNamespace::BTSStarTextEffectController::Reinitialize(UnityEngine::Sprite* sprite, UnityEngine::Transform* parentTransform, float desiredAnimationLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectController::Reinitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reinitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sprite), ::il2cpp_utils::ExtractType(parentTransform), ::il2cpp_utils::ExtractType(desiredAnimationLength)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sprite, parentTransform, desiredAnimationLength);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSStarTextEffectController/Pool
#include "GlobalNamespace/BTSStarTextEffectController_Pool.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSStarTextEffectController/Pool.Reinitialize
void GlobalNamespace::BTSStarTextEffectController::Pool::Reinitialize(UnityEngine::Sprite* sprite, UnityEngine::Transform* transform, float desiredAnimationLength, GlobalNamespace::BTSStarTextEffectController* starTextEffectController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectController::Pool::Reinitialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reinitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sprite), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(desiredAnimationLength), ::il2cpp_utils::ExtractType(starTextEffectController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sprite, transform, desiredAnimationLength, starTextEffectController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSStarTextEffectValueParser
#include "GlobalNamespace/BTSStarTextEffectValueParser.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kTextMask
int GlobalNamespace::BTSStarTextEffectValueParser::_get_kTextMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::_get_kTextMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BTSStarTextEffectValueParser", "kTextMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kTextMask
void GlobalNamespace::BTSStarTextEffectValueParser::_set_kTextMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::_set_kTextMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSStarTextEffectValueParser", "kTextMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kTextBitOffset
int GlobalNamespace::BTSStarTextEffectValueParser::_get_kTextBitOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::_get_kTextBitOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BTSStarTextEffectValueParser", "kTextBitOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kTextBitOffset
void GlobalNamespace::BTSStarTextEffectValueParser::_set_kTextBitOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::_set_kTextBitOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSStarTextEffectValueParser", "kTextBitOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kPositionMask
int GlobalNamespace::BTSStarTextEffectValueParser::_get_kPositionMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::_get_kPositionMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BTSStarTextEffectValueParser", "kPositionMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kPositionMask
void GlobalNamespace::BTSStarTextEffectValueParser::_set_kPositionMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::_set_kPositionMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSStarTextEffectValueParser", "kPositionMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kPositionBitOffset
int GlobalNamespace::BTSStarTextEffectValueParser::_get_kPositionBitOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::_get_kPositionBitOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BTSStarTextEffectValueParser", "kPositionBitOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kPositionBitOffset
void GlobalNamespace::BTSStarTextEffectValueParser::_set_kPositionBitOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::_set_kPositionBitOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSStarTextEffectValueParser", "kPositionBitOffset", value));
}
// Autogenerated method: BTSStarTextEffectValueParser.GetTextId
int GlobalNamespace::BTSStarTextEffectValueParser::GetTextId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::GetTextId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BTSStarTextEffectValueParser", "GetTextId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: BTSStarTextEffectValueParser.GetPositionId
int GlobalNamespace::BTSStarTextEffectValueParser::GetPositionId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::GetPositionId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BTSStarTextEffectValueParser", "GetPositionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: BTSStarTextEffectValueParser.MergeValuesIntoOneInt
int GlobalNamespace::BTSStarTextEffectValueParser::MergeValuesIntoOneInt(int textId, int positionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectValueParser::MergeValuesIntoOneInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BTSStarTextEffectValueParser", "MergeValuesIntoOneInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textId), ::il2cpp_utils::ExtractType(positionId)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, textId, positionId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSStarTextEffectsManager
#include "GlobalNamespace/BTSStarTextEffectsManager.hpp"
// Including type: BTSStarTextEffectsManager/<DespawnEffectDelayed>d__5
#include "GlobalNamespace/BTSStarTextEffectsManager_-DespawnEffectDelayed-d__5.hpp"
// Including type: BTSStarTextEventEffect
#include "GlobalNamespace/BTSStarTextEventEffect.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: BTSStarTextEffectController/Pool
#include "GlobalNamespace/BTSStarTextEffectController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSStarTextEffectsManager.Start
void GlobalNamespace::BTSStarTextEffectsManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectsManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEffectsManager.OnDestroy
void GlobalNamespace::BTSStarTextEffectsManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectsManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEffectsManager.HandleBTSStarTextEventEffect
void GlobalNamespace::BTSStarTextEffectsManager::HandleBTSStarTextEventEffect(UnityEngine::Sprite* sprite, UnityEngine::Transform* parentTransform, float desiredAnimationLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectsManager::HandleBTSStarTextEventEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBTSStarTextEventEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sprite), ::il2cpp_utils::ExtractType(parentTransform), ::il2cpp_utils::ExtractType(desiredAnimationLength)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sprite, parentTransform, desiredAnimationLength);
}
// Autogenerated method: BTSStarTextEffectsManager.DespawnEffectDelayed
System::Collections::IEnumerator* GlobalNamespace::BTSStarTextEffectsManager::DespawnEffectDelayed(GlobalNamespace::BTSStarTextEffectController* effectController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectsManager::DespawnEffectDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnEffectDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectController)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, effectController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BTSStarTextEffectsManager/<DespawnEffectDelayed>d__5
#include "GlobalNamespace/BTSStarTextEffectsManager_-DespawnEffectDelayed-d__5.hpp"
// Including type: BTSStarTextEffectController
#include "GlobalNamespace/BTSStarTextEffectController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSStarTextEffectsManager/<DespawnEffectDelayed>d__5.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::BTSStarTextEffectsManager::$DespawnEffectDelayed$d__5::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectsManager::$DespawnEffectDelayed$d__5::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEffectsManager/<DespawnEffectDelayed>d__5.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::BTSStarTextEffectsManager::$DespawnEffectDelayed$d__5::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectsManager::$DespawnEffectDelayed$d__5::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEffectsManager/<DespawnEffectDelayed>d__5.System.IDisposable.Dispose
void GlobalNamespace::BTSStarTextEffectsManager::$DespawnEffectDelayed$d__5::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectsManager::$DespawnEffectDelayed$d__5::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEffectsManager/<DespawnEffectDelayed>d__5.MoveNext
bool GlobalNamespace::BTSStarTextEffectsManager::$DespawnEffectDelayed$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectsManager::$DespawnEffectDelayed$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEffectsManager/<DespawnEffectDelayed>d__5.System.Collections.IEnumerator.Reset
void GlobalNamespace::BTSStarTextEffectsManager::$DespawnEffectDelayed$d__5::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEffectsManager::$DespawnEffectDelayed$d__5::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BTSStarTextEventEffect
#include "GlobalNamespace/BTSStarTextEventEffect.hpp"
// Including type: BTSStarTextEventEffect/StarTextSprite
#include "GlobalNamespace/BTSStarTextEventEffect_StarTextSprite.hpp"
// Including type: BTSStarTextEventEffect/StartTextPosition
#include "GlobalNamespace/BTSStarTextEventEffect_StartTextPosition.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private BeatmapEventType kStarTextAppearEventType
GlobalNamespace::BeatmapEventType GlobalNamespace::BTSStarTextEventEffect::_get_kStarTextAppearEventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::_get_kStarTextAppearEventType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BTSStarTextEventEffect", "kStarTextAppearEventType"));
}
// Autogenerated static field setter
// Set static field: static private BeatmapEventType kStarTextAppearEventType
void GlobalNamespace::BTSStarTextEventEffect::_set_kStarTextAppearEventType(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::_set_kStarTextAppearEventType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BTSStarTextEventEffect", "kStarTextAppearEventType", value));
}
// Autogenerated method: BTSStarTextEventEffect.add_startStarTextAnimationEvent
void GlobalNamespace::BTSStarTextEventEffect::add_startStarTextAnimationEvent(System::Action_3<UnityEngine::Sprite*, UnityEngine::Transform*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::add_startStarTextAnimationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_startStarTextAnimationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BTSStarTextEventEffect.remove_startStarTextAnimationEvent
void GlobalNamespace::BTSStarTextEventEffect::remove_startStarTextAnimationEvent(System::Action_3<UnityEngine::Sprite*, UnityEngine::Transform*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::remove_startStarTextAnimationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_startStarTextAnimationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BTSStarTextEventEffect.Start
void GlobalNamespace::BTSStarTextEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEventEffect.OnDestroy
void GlobalNamespace::BTSStarTextEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEventEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::BTSStarTextEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSStarTextEventEffect/StarTextSprite
#include "GlobalNamespace/BTSStarTextEventEffect_StarTextSprite.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSStarTextEventEffect/StarTextSprite.get_id
int GlobalNamespace::BTSStarTextEventEffect::StarTextSprite::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::StarTextSprite::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEventEffect/StarTextSprite.get_starTextSprite
UnityEngine::Sprite* GlobalNamespace::BTSStarTextEventEffect::StarTextSprite::get_starTextSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::StarTextSprite::get_starTextSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_starTextSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEventEffect/StarTextSprite.get_animationLength
float GlobalNamespace::BTSStarTextEventEffect::StarTextSprite::get_animationLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::StarTextSprite::get_animationLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animationLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSStarTextEventEffect/StartTextPosition
#include "GlobalNamespace/BTSStarTextEventEffect_StartTextPosition.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSStarTextEventEffect/StartTextPosition.get_id
int GlobalNamespace::BTSStarTextEventEffect::StartTextPosition::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::StartTextPosition::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BTSStarTextEventEffect/StartTextPosition.get_transform
UnityEngine::Transform* GlobalNamespace::BTSStarTextEventEffect::StartTextPosition::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventEffect::StartTextPosition::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BTSStarTextEventInstaller
#include "GlobalNamespace/BTSStarTextEventInstaller.hpp"
// Including type: BTSStarTextEffectController
#include "GlobalNamespace/BTSStarTextEffectController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BTSStarTextEventInstaller.InstallBindings
void GlobalNamespace::BTSStarTextEventInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSStarTextEventInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectAvoidancePathEvaluator
#include "GlobalNamespace/BeatmapObjectAvoidancePathEvaluator.hpp"
// Including type: BezierSplineEvaluator
#include "GlobalNamespace/BezierSplineEvaluator.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectAvoidancePathEvaluator.GetCurrentPathPosition
UnityEngine::Vector3 GlobalNamespace::BeatmapObjectAvoidancePathEvaluator::GetCurrentPathPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectAvoidancePathEvaluator::GetCurrentPathPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentPathPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectAvoidanceTiltEvaluator
#include "GlobalNamespace/BeatmapObjectAvoidanceTiltEvaluator.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: BezierSplineEvaluator
#include "GlobalNamespace/BezierSplineEvaluator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kLookAheadTime
float GlobalNamespace::BeatmapObjectAvoidanceTiltEvaluator::_get_kLookAheadTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectAvoidanceTiltEvaluator::_get_kLookAheadTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "BeatmapObjectAvoidanceTiltEvaluator", "kLookAheadTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kLookAheadTime
void GlobalNamespace::BeatmapObjectAvoidanceTiltEvaluator::_set_kLookAheadTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectAvoidanceTiltEvaluator::_set_kLookAheadTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectAvoidanceTiltEvaluator", "kLookAheadTime", value));
}
// Autogenerated method: BeatmapObjectAvoidanceTiltEvaluator.GetTiltAngle
float GlobalNamespace::BeatmapObjectAvoidanceTiltEvaluator::GetTiltAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectAvoidanceTiltEvaluator::GetTiltAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTiltAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectAvoidanceYOffsetEvaluator
#include "GlobalNamespace/BeatmapObjectAvoidanceYOffsetEvaluator.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kYJumpOffsetBufferLength
int GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::_get_kYJumpOffsetBufferLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::_get_kYJumpOffsetBufferLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BeatmapObjectAvoidanceYOffsetEvaluator", "kYJumpOffsetBufferLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kYJumpOffsetBufferLength
void GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::_set_kYJumpOffsetBufferLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::_set_kYJumpOffsetBufferLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectAvoidanceYOffsetEvaluator", "kYJumpOffsetBufferLength", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kYJumpOffsetBufferSongTimeInitValue
float GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::_get_kYJumpOffsetBufferSongTimeInitValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::_get_kYJumpOffsetBufferSongTimeInitValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "BeatmapObjectAvoidanceYOffsetEvaluator", "kYJumpOffsetBufferSongTimeInitValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kYJumpOffsetBufferSongTimeInitValue
void GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::_set_kYJumpOffsetBufferSongTimeInitValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::_set_kYJumpOffsetBufferSongTimeInitValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectAvoidanceYOffsetEvaluator", "kYJumpOffsetBufferSongTimeInitValue", value));
}
// Autogenerated method: BeatmapObjectAvoidanceYOffsetEvaluator.ManualUpdate
void GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectAvoidanceYOffsetEvaluator.GetJumpOffsetYAtJumpStartSongTime
float GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::GetJumpOffsetYAtJumpStartSongTime(float lastDeltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator::GetJumpOffsetYAtJumpStartSongTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetJumpOffsetYAtJumpStartSongTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lastDeltaTime)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lastDeltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectAvoidanceYOffsetEvaluator/BufferData
#include "GlobalNamespace/BeatmapObjectAvoidanceYOffsetEvaluator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectsAvoidance
#include "GlobalNamespace/BeatmapObjectsAvoidance.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: BeatmapObjectAvoidanceYOffsetEvaluator
#include "GlobalNamespace/BeatmapObjectAvoidanceYOffsetEvaluator.hpp"
// Including type: BeatmapObjectAvoidancePathEvaluator
#include "GlobalNamespace/BeatmapObjectAvoidancePathEvaluator.hpp"
// Including type: BeatmapObjectAvoidanceTiltEvaluator
#include "GlobalNamespace/BeatmapObjectAvoidanceTiltEvaluator.hpp"
// Including type: BezierSplineEvaluator
#include "GlobalNamespace/BezierSplineEvaluator.hpp"
// Including type: OffsetDirection
#include "GlobalNamespace/OffsetDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectsAvoidance.Awake
void GlobalNamespace::BeatmapObjectsAvoidance::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsAvoidance::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectsAvoidance.Start
void GlobalNamespace::BeatmapObjectsAvoidance::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsAvoidance::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectsAvoidance.OnDestroy
void GlobalNamespace::BeatmapObjectsAvoidance::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsAvoidance::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectsAvoidance.Update
void GlobalNamespace::BeatmapObjectsAvoidance::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsAvoidance::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectsAvoidance.SetupAndRun
void GlobalNamespace::BeatmapObjectsAvoidance::SetupAndRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsAvoidance::SetupAndRun");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupAndRun", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectsAvoidance.BuildAnimationCurvePath
bool GlobalNamespace::BeatmapObjectsAvoidance::BuildAnimationCurvePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsAvoidance::BuildAnimationCurvePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildAnimationCurvePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectsAvoidance.AdjustPositionWithOffsetDirection
void GlobalNamespace::BeatmapObjectsAvoidance::AdjustPositionWithOffsetDirection(UnityEngine::Vector2& position, int lineIndex, GlobalNamespace::OffsetDirection offsetDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsAvoidance::AdjustPositionWithOffsetDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustPositionWithOffsetDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(lineIndex), ::il2cpp_utils::ExtractType(offsetDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, lineIndex, offsetDirection);
}
// Autogenerated method: BeatmapObjectsAvoidance.HandleBeatmapObjectSpawnControllerDidInit
void GlobalNamespace::BeatmapObjectsAvoidance::HandleBeatmapObjectSpawnControllerDidInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsAvoidance::HandleBeatmapObjectSpawnControllerDidInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectSpawnControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BtsResultsEnvironmentController
#include "GlobalNamespace/BtsResultsEnvironmentController.hpp"
// Including type: BtsResultsEnvironmentController/BTSResultCharacterPlaceWithAnimation
#include "GlobalNamespace/BtsResultsEnvironmentController_BTSResultCharacterPlaceWithAnimation.hpp"
// Including type: BtsResultsEnvironmentController/<DestroyCharactersDelayed>d__11
#include "GlobalNamespace/BtsResultsEnvironmentController_-DestroyCharactersDelayed-d__11.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: BTSCharacterDataModel/PrefabWithId
#include "GlobalNamespace/BTSCharacterDataModel_PrefabWithId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private BeatmapEventType kCharacterDisplayEventType
GlobalNamespace::BeatmapEventType GlobalNamespace::BtsResultsEnvironmentController::_get_kCharacterDisplayEventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::_get_kCharacterDisplayEventType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BtsResultsEnvironmentController", "kCharacterDisplayEventType"));
}
// Autogenerated static field setter
// Set static field: static private BeatmapEventType kCharacterDisplayEventType
void GlobalNamespace::BtsResultsEnvironmentController::_set_kCharacterDisplayEventType(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::_set_kCharacterDisplayEventType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BtsResultsEnvironmentController", "kCharacterDisplayEventType", value));
}
// Autogenerated method: BtsResultsEnvironmentController.SpawnBtsCharacters
void GlobalNamespace::BtsResultsEnvironmentController::SpawnBtsCharacters(GlobalNamespace::BTSCharacterDataModel::PrefabWithId* btsCharacterPrefabToSpawn, bool useAlternativeMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::SpawnBtsCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBtsCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btsCharacterPrefabToSpawn), ::il2cpp_utils::ExtractType(useAlternativeMaterial)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, btsCharacterPrefabToSpawn, useAlternativeMaterial);
}
// Autogenerated method: BtsResultsEnvironmentController.DestroyCharactersDelayed
System::Collections::IEnumerator* GlobalNamespace::BtsResultsEnvironmentController::DestroyCharactersDelayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::DestroyCharactersDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyCharactersDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: BtsResultsEnvironmentController.DestroyCharactersAndStopAnimations
void GlobalNamespace::BtsResultsEnvironmentController::DestroyCharactersAndStopAnimations() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::DestroyCharactersAndStopAnimations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyCharactersAndStopAnimations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BtsResultsEnvironmentController.Setup
void GlobalNamespace::BtsResultsEnvironmentController::Setup(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::Setup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, difficultyBeatmap);
}
// Autogenerated method: BtsResultsEnvironmentController.Activate
void GlobalNamespace::BtsResultsEnvironmentController::Activate(bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, immediately);
}
// Autogenerated method: BtsResultsEnvironmentController.Deactivate
void GlobalNamespace::BtsResultsEnvironmentController::Deactivate(bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, immediately);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BtsResultsEnvironmentController/BTSResultCharacterPlaceWithAnimation
#include "GlobalNamespace/BtsResultsEnvironmentController_BTSResultCharacterPlaceWithAnimation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: BTSCharacterResultAnimationController
#include "GlobalNamespace/BTSCharacterResultAnimationController.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: BTSCharacter
#include "GlobalNamespace/BTSCharacter.hpp"
// Including type: UnityEngine.AddressableAssets.AssetReference
#include "UnityEngine/AddressableAssets/AssetReference.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BtsResultsEnvironmentController/BTSResultCharacterPlaceWithAnimation.get_name
::Il2CppString* GlobalNamespace::BtsResultsEnvironmentController::BTSResultCharacterPlaceWithAnimation::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::BTSResultCharacterPlaceWithAnimation::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BtsResultsEnvironmentController/BTSResultCharacterPlaceWithAnimation.Clean
void GlobalNamespace::BtsResultsEnvironmentController::BTSResultCharacterPlaceWithAnimation::Clean() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::BTSResultCharacterPlaceWithAnimation::Clean");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clean", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BtsResultsEnvironmentController/BTSResultCharacterPlaceWithAnimation.SetCharacter
void GlobalNamespace::BtsResultsEnvironmentController::BTSResultCharacterPlaceWithAnimation::SetCharacter(UnityEngine::AddressableAssets::AssetReference* assetReference, GlobalNamespace::BTSCharacter* btsCharacter, bool alternativeMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::BTSResultCharacterPlaceWithAnimation::SetCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assetReference), ::il2cpp_utils::ExtractType(btsCharacter), ::il2cpp_utils::ExtractType(alternativeMaterial)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, assetReference, btsCharacter, alternativeMaterial);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BtsResultsEnvironmentController/<DestroyCharactersDelayed>d__11
#include "GlobalNamespace/BtsResultsEnvironmentController_-DestroyCharactersDelayed-d__11.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BtsResultsEnvironmentController/<DestroyCharactersDelayed>d__11.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::BtsResultsEnvironmentController::$DestroyCharactersDelayed$d__11::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::$DestroyCharactersDelayed$d__11::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BtsResultsEnvironmentController/<DestroyCharactersDelayed>d__11.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::BtsResultsEnvironmentController::$DestroyCharactersDelayed$d__11::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::$DestroyCharactersDelayed$d__11::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BtsResultsEnvironmentController/<DestroyCharactersDelayed>d__11.System.IDisposable.Dispose
void GlobalNamespace::BtsResultsEnvironmentController::$DestroyCharactersDelayed$d__11::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::$DestroyCharactersDelayed$d__11::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BtsResultsEnvironmentController/<DestroyCharactersDelayed>d__11.MoveNext
bool GlobalNamespace::BtsResultsEnvironmentController::$DestroyCharactersDelayed$d__11::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::$DestroyCharactersDelayed$d__11::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BtsResultsEnvironmentController/<DestroyCharactersDelayed>d__11.System.Collections.IEnumerator.Reset
void GlobalNamespace::BtsResultsEnvironmentController::$DestroyCharactersDelayed$d__11::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BtsResultsEnvironmentController::$DestroyCharactersDelayed$d__11::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CloudsMeshGenerator
#include "GlobalNamespace/CloudsMeshGenerator.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BezierCurve
#include "GlobalNamespace/BezierCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BezierSpline
#include "GlobalNamespace/BezierSpline.hpp"
// Including type: BezierSpline/ComputeControlPointsResults
#include "GlobalNamespace/BezierSpline_ComputeControlPointsResults.hpp"
// Including type: BezierSpline/<>c
#include "GlobalNamespace/BezierSpline_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BezierSpline.get_segments
System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* GlobalNamespace::BezierSpline::get_segments() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::get_segments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_segments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>*, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.AddPoint
void GlobalNamespace::BezierSpline::AddPoint(float distance, UnityEngine::Vector2 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::AddPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance, point);
}
// Autogenerated method: BezierSpline.SortSourceData
void GlobalNamespace::BezierSpline::SortSourceData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::SortSourceData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortSourceData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.AddArtificialStartAndFinishPoint
void GlobalNamespace::BezierSpline::AddArtificialStartAndFinishPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::AddArtificialStartAndFinishPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddArtificialStartAndFinishPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.ComputeControlPoints
void GlobalNamespace::BezierSpline::ComputeControlPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::ComputeControlPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeControlPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.Clear
void GlobalNamespace::BezierSpline::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.ComputeControlPoints
GlobalNamespace::BezierSpline::ComputeControlPointsResults GlobalNamespace::BezierSpline::ComputeControlPoints(System::Collections::Generic::List_1<float>* k) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::ComputeControlPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeControlPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BezierSpline::ComputeControlPointsResults, false>(this, ___internal__method, k);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BezierSpline/ComputeControlPointsResults
#include "GlobalNamespace/BezierSpline_ComputeControlPointsResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BezierSpline/<>c
#include "GlobalNamespace/BezierSpline_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly BezierSpline/<>c <>9
GlobalNamespace::BezierSpline::$$c* GlobalNamespace::BezierSpline::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::BezierSpline::$$c*>("", "BezierSpline/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly BezierSpline/<>c <>9
void GlobalNamespace::BezierSpline::$$c::_set_$$9(GlobalNamespace::BezierSpline::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BezierSpline/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<UnityEngine.Vector3> <>9__6_0
System::Comparison_1<UnityEngine::Vector3>* GlobalNamespace::BezierSpline::$$c::_get_$$9__6_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::_get_$$9__6_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Comparison_1<UnityEngine::Vector3>*>("", "BezierSpline/<>c", "<>9__6_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<UnityEngine.Vector3> <>9__6_0
void GlobalNamespace::BezierSpline::$$c::_set_$$9__6_0(System::Comparison_1<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::_set_$$9__6_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BezierSpline/<>c", "<>9__6_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Vector3,System.Single> <>9__8_0
System::Func_2<UnityEngine::Vector3, float>* GlobalNamespace::BezierSpline::$$c::_get_$$9__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::_get_$$9__8_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Vector3, float>*>("", "BezierSpline/<>c", "<>9__8_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Vector3,System.Single> <>9__8_0
void GlobalNamespace::BezierSpline::$$c::_set_$$9__8_0(System::Func_2<UnityEngine::Vector3, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::_set_$$9__8_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BezierSpline/<>c", "<>9__8_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Vector3,System.Single> <>9__8_1
System::Func_2<UnityEngine::Vector3, float>* GlobalNamespace::BezierSpline::$$c::_get_$$9__8_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::_get_$$9__8_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Vector3, float>*>("", "BezierSpline/<>c", "<>9__8_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Vector3,System.Single> <>9__8_1
void GlobalNamespace::BezierSpline::$$c::_set_$$9__8_1(System::Func_2<UnityEngine::Vector3, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::_set_$$9__8_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BezierSpline/<>c", "<>9__8_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Vector3,System.Single> <>9__8_2
System::Func_2<UnityEngine::Vector3, float>* GlobalNamespace::BezierSpline::$$c::_get_$$9__8_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::_get_$$9__8_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Vector3, float>*>("", "BezierSpline/<>c", "<>9__8_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Vector3,System.Single> <>9__8_2
void GlobalNamespace::BezierSpline::$$c::_set_$$9__8_2(System::Func_2<UnityEngine::Vector3, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::_set_$$9__8_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BezierSpline/<>c", "<>9__8_2", value)));
}
// Autogenerated method: BezierSpline/<>c..cctor
void GlobalNamespace::BezierSpline::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BezierSpline/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BezierSpline/<>c.<SortSourceData>b__6_0
int GlobalNamespace::BezierSpline::$$c::$SortSourceData$b__6_0(UnityEngine::Vector3 point1, UnityEngine::Vector3 point2) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::<SortSourceData>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortSourceData>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point1), ::il2cpp_utils::ExtractType(point2)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, point1, point2);
}
// Autogenerated method: BezierSpline/<>c.<ComputeControlPoints>b__8_0
float GlobalNamespace::BezierSpline::$$c::$ComputeControlPoints$b__8_0(UnityEngine::Vector3 p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::<ComputeControlPoints>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ComputeControlPoints>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, p);
}
// Autogenerated method: BezierSpline/<>c.<ComputeControlPoints>b__8_1
float GlobalNamespace::BezierSpline::$$c::$ComputeControlPoints$b__8_1(UnityEngine::Vector3 p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::<ComputeControlPoints>b__8_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ComputeControlPoints>b__8_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, p);
}
// Autogenerated method: BezierSpline/<>c.<ComputeControlPoints>b__8_2
float GlobalNamespace::BezierSpline::$$c::$ComputeControlPoints$b__8_2(UnityEngine::Vector3 p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::$$c::<ComputeControlPoints>b__8_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ComputeControlPoints>b__8_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, p);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BezierSplineEvaluator
#include "GlobalNamespace/BezierSplineEvaluator.hpp"
// Including type: BezierSplineEvaluator/CubicSolveResult
#include "GlobalNamespace/BezierSplineEvaluator_CubicSolveResult.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BezierSpline
#include "GlobalNamespace/BezierSpline.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSlightAboveOne
float GlobalNamespace::BezierSplineEvaluator::_get_kSlightAboveOne() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::_get_kSlightAboveOne");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "BezierSplineEvaluator", "kSlightAboveOne"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSlightAboveOne
void GlobalNamespace::BezierSplineEvaluator::_set_kSlightAboveOne(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::_set_kSlightAboveOne");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BezierSplineEvaluator", "kSlightAboveOne", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kSlightBelowZero
float GlobalNamespace::BezierSplineEvaluator::_get_kSlightBelowZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::_get_kSlightBelowZero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "BezierSplineEvaluator", "kSlightBelowZero"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSlightBelowZero
void GlobalNamespace::BezierSplineEvaluator::_set_kSlightBelowZero(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::_set_kSlightBelowZero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BezierSplineEvaluator", "kSlightBelowZero", value));
}
// Autogenerated method: BezierSplineEvaluator.EvaluatePosition
UnityEngine::Vector3 GlobalNamespace::BezierSplineEvaluator::EvaluatePosition(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::EvaluatePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluatePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, time);
}
// Autogenerated method: BezierSplineEvaluator.Evaluate
UnityEngine::Vector3 GlobalNamespace::BezierSplineEvaluator::Evaluate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::Evaluate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSplineEvaluator.EvaluateFirstDerivation
UnityEngine::Vector3 GlobalNamespace::BezierSplineEvaluator::EvaluateFirstDerivation(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::EvaluateFirstDerivation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateFirstDerivation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSplineEvaluator.EvaluateSecondDerivation
UnityEngine::Vector3 GlobalNamespace::BezierSplineEvaluator::EvaluateSecondDerivation(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::EvaluateSecondDerivation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateSecondDerivation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSplineEvaluator.OffsetSegmentAndGetT
float GlobalNamespace::BezierSplineEvaluator::OffsetSegmentAndGetT(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::OffsetSegmentAndGetT");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OffsetSegmentAndGetT", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, time);
}
// Autogenerated method: BezierSplineEvaluator.GetTForSegment
float GlobalNamespace::BezierSplineEvaluator::GetTForSegment(int segmentIndex, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::GetTForSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTForSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(segmentIndex), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, segmentIndex, time);
}
// Autogenerated method: BezierSplineEvaluator.GetTimeValuesForSegment
void GlobalNamespace::BezierSplineEvaluator::GetTimeValuesForSegment(int segmentIndex, float& t0Value, float& t1Value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::GetTimeValuesForSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTimeValuesForSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(segmentIndex), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, segmentIndex, t0Value, t1Value);
}
// Autogenerated method: BezierSplineEvaluator.OffsetStartIndexToDistance
void GlobalNamespace::BezierSplineEvaluator::OffsetStartIndexToDistance(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::OffsetStartIndexToDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OffsetStartIndexToDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: BezierSplineEvaluator.CubeRoot
float GlobalNamespace::BezierSplineEvaluator::CubeRoot(float x) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::CubeRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BezierSplineEvaluator", "CubeRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x);
}
// Autogenerated method: BezierSplineEvaluator.SolveCubic
GlobalNamespace::BezierSplineEvaluator::CubicSolveResult GlobalNamespace::BezierSplineEvaluator::SolveCubic(float a, float b, float c, float d) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::SolveCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BezierSplineEvaluator", "SolveCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BezierSplineEvaluator::CubicSolveResult, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, c, d);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BezierSplineEvaluator/CubicSolveResult
#include "GlobalNamespace/BezierSplineEvaluator_CubicSolveResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: WaypointsTestMenuViewController
#include "GlobalNamespace/WaypointsTestMenuViewController.hpp"
// Including type: WaypointsTestMenuViewController/<CheckBeatmaps>d__13
#include "GlobalNamespace/WaypointsTestMenuViewController_-CheckBeatmaps-d__13.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: StandardLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/StandardLevelScenesTransitionSetupDataSO.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapLevelSO
#include "GlobalNamespace/BeatmapLevelSO.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: WaypointsTestMenuViewController.Start
void GlobalNamespace::WaypointsTestMenuViewController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController.OnDestroy
void GlobalNamespace::WaypointsTestMenuViewController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController.CheckBeatmaps
System::Collections::IEnumerator* GlobalNamespace::WaypointsTestMenuViewController::CheckBeatmaps(System::Collections::Generic::List_1<GlobalNamespace::BeatmapLevelSO*>* levels) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::CheckBeatmaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levels)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, levels);
}
// Autogenerated method: WaypointsTestMenuViewController.HandleMainGameSceneDidFinish
void GlobalNamespace::WaypointsTestMenuViewController::HandleMainGameSceneDidFinish(GlobalNamespace::StandardLevelScenesTransitionSetupDataSO* data, GlobalNamespace::LevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::HandleMainGameSceneDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMainGameSceneDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, results);
}
// Autogenerated method: WaypointsTestMenuViewController.<Start>b__11_0
void GlobalNamespace::WaypointsTestMenuViewController::$Start$b__11_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::<Start>b__11_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__11_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController.<Start>b__11_1
void GlobalNamespace::WaypointsTestMenuViewController::$Start$b__11_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::<Start>b__11_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__11_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController.<HandleMainGameSceneDidFinish>b__14_0
void GlobalNamespace::WaypointsTestMenuViewController::$HandleMainGameSceneDidFinish$b__14_0(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::<HandleMainGameSceneDidFinish>b__14_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleMainGameSceneDidFinish>b__14_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: WaypointsTestMenuViewController/<CheckBeatmaps>d__13
#include "GlobalNamespace/WaypointsTestMenuViewController_-CheckBeatmaps-d__13.hpp"
// Including type: BeatmapLevelSO
#include "GlobalNamespace/BeatmapLevelSO.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: WaypointsTestMenuViewController/<CheckBeatmaps>d__13.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController/<CheckBeatmaps>d__13.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController/<CheckBeatmaps>d__13.System.IDisposable.Dispose
void GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController/<CheckBeatmaps>d__13.MoveNext
bool GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController/<CheckBeatmaps>d__13.<>m__Finally1
void GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController/<CheckBeatmaps>d__13.<>m__Finally2
void GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::$$m__Finally2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::<>m__Finally2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController/<CheckBeatmaps>d__13.<>m__Finally3
void GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::$$m__Finally3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::<>m__Finally3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestMenuViewController/<CheckBeatmaps>d__13.System.Collections.IEnumerator.Reset
void GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestMenuViewController::$CheckBeatmaps$d__13::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HydraulicCarJumpEffect
#include "GlobalNamespace/HydraulicCarJumpEffect.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HydraulicCarJumpEffect.Start
void GlobalNamespace::HydraulicCarJumpEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HydraulicCarJumpEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HydraulicCarJumpEffect.OnDestroy
void GlobalNamespace::HydraulicCarJumpEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HydraulicCarJumpEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HydraulicCarJumpEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::HydraulicCarJumpEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HydraulicCarJumpEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HydraulicCarSuspensionEffect
#include "GlobalNamespace/HydraulicCarSuspensionEffect.hpp"
// Including type: UnityEngine.SpringJoint
#include "UnityEngine/SpringJoint.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HydraulicCarSuspensionEffect.Start
void GlobalNamespace::HydraulicCarSuspensionEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HydraulicCarSuspensionEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HydraulicCarSuspensionEffect.OnDestroy
void GlobalNamespace::HydraulicCarSuspensionEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HydraulicCarSuspensionEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HydraulicCarSuspensionEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::HydraulicCarSuspensionEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HydraulicCarSuspensionEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AnniversaryManager
#include "GlobalNamespace/AnniversaryManager.hpp"
// Including type: FireworksController
#include "GlobalNamespace/FireworksController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AnniversaryManager.Start
void GlobalNamespace::AnniversaryManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnniversaryManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AnniversaryManager.OnDestroy
void GlobalNamespace::AnniversaryManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnniversaryManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AnniversaryManager.HandleMainMenuViewControllerDidFinish
void GlobalNamespace::AnniversaryManager::HandleMainMenuViewControllerDidFinish(GlobalNamespace::MainMenuViewController* mainMenuViewController, GlobalNamespace::MainMenuViewController::MenuButton menuButton) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnniversaryManager::HandleMainMenuViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMainMenuViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainMenuViewController), ::il2cpp_utils::ExtractType(menuButton)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mainMenuViewController, menuButton);
}
// Autogenerated method: AnniversaryManager.StartFireworks
void GlobalNamespace::AnniversaryManager::StartFireworks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnniversaryManager::StartFireworks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartFireworks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AnniversaryManager.StopFireworks
void GlobalNamespace::AnniversaryManager::StopFireworks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnniversaryManager::StopFireworks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopFireworks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ClothRandomFluctuation
#include "GlobalNamespace/ClothRandomFluctuation.hpp"
// Including type: ClothRandomFluctuation/SineLayer
#include "GlobalNamespace/ClothRandomFluctuation_SineLayer.hpp"
// Including type: UnityEngine.Cloth
#include "UnityEngine/Cloth.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ClothRandomFluctuation.Update
void GlobalNamespace::ClothRandomFluctuation::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClothRandomFluctuation::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClothRandomFluctuation.FluctuateCloth
void GlobalNamespace::ClothRandomFluctuation::FluctuateCloth(UnityEngine::Cloth* cloth) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClothRandomFluctuation::FluctuateCloth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FluctuateCloth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cloth)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cloth);
}
// Autogenerated method: ClothRandomFluctuation.GetNoise
float GlobalNamespace::ClothRandomFluctuation::GetNoise(float time, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClothRandomFluctuation::GetNoise");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNoise", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, time, offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ClothRandomFluctuation/SineLayer
#include "GlobalNamespace/ClothRandomFluctuation_SineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DroneHover
#include "GlobalNamespace/DroneHover.hpp"
// Including type: DroneHover/SineLayer
#include "GlobalNamespace/DroneHover_SineLayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Cloth
#include "UnityEngine/Cloth.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DroneHover.Start
void GlobalNamespace::DroneHover::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DroneHover::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DroneHover.Update
void GlobalNamespace::DroneHover::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DroneHover::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DroneHover.GetNoiseVec3
UnityEngine::Vector3 GlobalNamespace::DroneHover::GetNoiseVec3(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DroneHover::GetNoiseVec3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNoiseVec3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, time);
}
// Autogenerated method: DroneHover.GetNoise
float GlobalNamespace::DroneHover::GetNoise(float time, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DroneHover::GetNoise");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNoise", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, time, offset);
}
// Autogenerated method: DroneHover.UpdateTiltTransform
void GlobalNamespace::DroneHover::UpdateTiltTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DroneHover::UpdateTiltTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTiltTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DroneHover/SineLayer
#include "GlobalNamespace/DroneHover_SineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseAppCoreInstaller
#include "GlobalNamespace/NetEaseAppCoreInstaller.hpp"
// Including type: NetEaseManager
#include "GlobalNamespace/NetEaseManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseAppCoreInstaller.InstallBindings
void GlobalNamespace::NetEaseAppCoreInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseAppCoreInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseAppInit
#include "GlobalNamespace/NetEaseAppInit.hpp"
// Including type: MainSystemInit
#include "GlobalNamespace/MainSystemInit.hpp"
// Including type: NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO
#include "GlobalNamespace/NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseAppInit.AppStartAndMultiSceneEditorSetup
void GlobalNamespace::NetEaseAppInit::AppStartAndMultiSceneEditorSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseAppInit::AppStartAndMultiSceneEditorSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppStartAndMultiSceneEditorSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseAppInit.RepeatableSetup
void GlobalNamespace::NetEaseAppInit::RepeatableSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseAppInit::RepeatableSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RepeatableSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseAppInit.TransitionToNextScene
void GlobalNamespace::NetEaseAppInit::TransitionToNextScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseAppInit::TransitionToNextScene");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNextScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseAppInit.InstallBindings
void GlobalNamespace::NetEaseAppInit::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseAppInit::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseLeaderboardModel
#include "GlobalNamespace/NetEaseLeaderboardModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseLeaderboardModel.Start
void GlobalNamespace::NetEaseLeaderboardModel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardModel::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLeaderboardModel.Update
void GlobalNamespace::NetEaseLeaderboardModel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardModel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseLeaderboardViewController
#include "GlobalNamespace/NetEaseLeaderboardViewController.hpp"
// Including type: NetEaseLeaderboardViewController/<RefreshDelayed>d__14
#include "GlobalNamespace/NetEaseLeaderboardViewController_-RefreshDelayed-d__14.hpp"
// Including type: NetEaseLeaderboardViewController/<LoadScoresAsync>d__15
#include "GlobalNamespace/NetEaseLeaderboardViewController_-LoadScoresAsync-d__15.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: LoadingControl
#include "GlobalNamespace/LoadingControl.hpp"
// Including type: NetEaseManager
#include "GlobalNamespace/NetEaseManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: LeaderboardTableView/ScoreData
#include "GlobalNamespace/LeaderboardTableView_ScoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseLeaderboardViewController.HandleLoadingControlDidPressRefreshButton
void GlobalNamespace::NetEaseLeaderboardViewController::HandleLoadingControlDidPressRefreshButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::HandleLoadingControlDidPressRefreshButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLoadingControlDidPressRefreshButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLeaderboardViewController.Refresh
void GlobalNamespace::NetEaseLeaderboardViewController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLeaderboardViewController.Refresh
void GlobalNamespace::NetEaseLeaderboardViewController::Refresh(bool showLoadingIndicator, bool clear) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(showLoadingIndicator), ::il2cpp_utils::ExtractType(clear)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, showLoadingIndicator, clear);
}
// Autogenerated method: NetEaseLeaderboardViewController.RefreshDelayed
System::Collections::IEnumerator* GlobalNamespace::NetEaseLeaderboardViewController::RefreshDelayed(bool showLoadingIndicator, bool clear) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::RefreshDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(showLoadingIndicator), ::il2cpp_utils::ExtractType(clear)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, showLoadingIndicator, clear);
}
// Autogenerated method: NetEaseLeaderboardViewController.LoadScoresAsync
void GlobalNamespace::NetEaseLeaderboardViewController::LoadScoresAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::LoadScoresAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScoresAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLeaderboardViewController.ClearContent
void GlobalNamespace::NetEaseLeaderboardViewController::ClearContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::ClearContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLeaderboardViewController.SetData
void GlobalNamespace::NetEaseLeaderboardViewController::SetData(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::SetData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, difficultyBeatmap);
}
// Autogenerated method: NetEaseLeaderboardViewController.DidActivate
void GlobalNamespace::NetEaseLeaderboardViewController::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: NetEaseLeaderboardViewController.DidDeactivate
void GlobalNamespace::NetEaseLeaderboardViewController::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: NetEaseLeaderboardViewController.OnDestroy
void GlobalNamespace::NetEaseLeaderboardViewController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEaseLeaderboardViewController/<RefreshDelayed>d__14
#include "GlobalNamespace/NetEaseLeaderboardViewController_-RefreshDelayed-d__14.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseLeaderboardViewController/<RefreshDelayed>d__14.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::NetEaseLeaderboardViewController::$RefreshDelayed$d__14::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::$RefreshDelayed$d__14::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLeaderboardViewController/<RefreshDelayed>d__14.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::NetEaseLeaderboardViewController::$RefreshDelayed$d__14::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::$RefreshDelayed$d__14::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLeaderboardViewController/<RefreshDelayed>d__14.System.IDisposable.Dispose
void GlobalNamespace::NetEaseLeaderboardViewController::$RefreshDelayed$d__14::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::$RefreshDelayed$d__14::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLeaderboardViewController/<RefreshDelayed>d__14.MoveNext
bool GlobalNamespace::NetEaseLeaderboardViewController::$RefreshDelayed$d__14::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::$RefreshDelayed$d__14::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLeaderboardViewController/<RefreshDelayed>d__14.System.Collections.IEnumerator.Reset
void GlobalNamespace::NetEaseLeaderboardViewController::$RefreshDelayed$d__14::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::$RefreshDelayed$d__14::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseLeaderboardViewController/<LoadScoresAsync>d__15
#include "GlobalNamespace/NetEaseLeaderboardViewController_-LoadScoresAsync-d__15.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseLeaderboardViewController/<LoadScoresAsync>d__15.MoveNext
void GlobalNamespace::NetEaseLeaderboardViewController::$LoadScoresAsync$d__15::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::$LoadScoresAsync$d__15::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetEaseLeaderboardViewController/<LoadScoresAsync>d__15.SetStateMachine
void GlobalNamespace::NetEaseLeaderboardViewController::$LoadScoresAsync$d__15::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLeaderboardViewController::$LoadScoresAsync$d__15::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseLoginController
#include "GlobalNamespace/NetEaseLoginController.hpp"
// Including type: NetEaseLoginController/<Start>d__3
#include "GlobalNamespace/NetEaseLoginController_-Start-d__3.hpp"
// Including type: NetEaseLoginController/<LoginAsync>d__4
#include "GlobalNamespace/NetEaseLoginController_-LoginAsync-d__4.hpp"
// Including type: MenuScenesTransitionSetupDataSO
#include "GlobalNamespace/MenuScenesTransitionSetupDataSO.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: NetEaseManager
#include "GlobalNamespace/NetEaseManager.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseLoginController.Start
System::Collections::IEnumerator* GlobalNamespace::NetEaseLoginController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLoginController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLoginController.LoginAsync
void GlobalNamespace::NetEaseLoginController::LoginAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLoginController::LoginAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoginAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEaseLoginController/<Start>d__3
#include "GlobalNamespace/NetEaseLoginController_-Start-d__3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseLoginController/<Start>d__3.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::NetEaseLoginController::$Start$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLoginController::$Start$d__3::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLoginController/<Start>d__3.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::NetEaseLoginController::$Start$d__3::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLoginController::$Start$d__3::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLoginController/<Start>d__3.System.IDisposable.Dispose
void GlobalNamespace::NetEaseLoginController::$Start$d__3::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLoginController::$Start$d__3::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLoginController/<Start>d__3.MoveNext
bool GlobalNamespace::NetEaseLoginController::$Start$d__3::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLoginController::$Start$d__3::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseLoginController/<Start>d__3.System.Collections.IEnumerator.Reset
void GlobalNamespace::NetEaseLoginController::$Start$d__3::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLoginController::$Start$d__3::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseLoginController/<LoginAsync>d__4
#include "GlobalNamespace/NetEaseLoginController_-LoginAsync-d__4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseLoginController/<LoginAsync>d__4.MoveNext
void GlobalNamespace::NetEaseLoginController::$LoginAsync$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLoginController::$LoginAsync$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetEaseLoginController/<LoginAsync>d__4.SetStateMachine
void GlobalNamespace::NetEaseLoginController::$LoginAsync$d__4::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseLoginController::$LoginAsync$d__4::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEaseManager
#include "GlobalNamespace/NetEaseManager.hpp"
// Including type: NetEaseManager/<InitAsync>d__11
#include "GlobalNamespace/NetEaseManager_-InitAsync-d__11.hpp"
// Including type: NetEaseManager/<LoginAsync>d__13
#include "GlobalNamespace/NetEaseManager_-LoginAsync-d__13.hpp"
// Including type: NetEaseManager/<LogoutAsync>d__15
#include "GlobalNamespace/NetEaseManager_-LogoutAsync-d__15.hpp"
// Including type: NetEaseManager/<RequestHighscoreDataAsync>d__17
#include "GlobalNamespace/NetEaseManager_-RequestHighscoreDataAsync-d__17.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseManager.get_supportsLeaderboards
bool GlobalNamespace::NetEaseManager::get_supportsLeaderboards() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::get_supportsLeaderboards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_supportsLeaderboards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseManager.get_userName
::Il2CppString* GlobalNamespace::NetEaseManager::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::get_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseManager.Awake
void GlobalNamespace::NetEaseManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseManager.Update
void GlobalNamespace::NetEaseManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseManager.InitAsync
System::Threading::Tasks::Task_1<NetEase::Docker::InitializeData>* GlobalNamespace::NetEaseManager::InitAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::InitAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<NetEase::Docker::InitializeData>*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseManager.HandleDidInitialize
void GlobalNamespace::NetEaseManager::HandleDidInitialize(NetEase::Docker::InitializeData initializeData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::HandleDidInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initializeData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, initializeData);
}
// Autogenerated method: NetEaseManager.LoginAsync
System::Threading::Tasks::Task_1<NetEase::Docker::LoginData>* GlobalNamespace::NetEaseManager::LoginAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::LoginAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoginAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<NetEase::Docker::LoginData>*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseManager.HandleDidLogin
void GlobalNamespace::NetEaseManager::HandleDidLogin(NetEase::Docker::LoginData loginData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::HandleDidLogin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidLogin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loginData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, loginData);
}
// Autogenerated method: NetEaseManager.LogoutAsync
System::Threading::Tasks::Task_1<NetEase::Docker::LogoutData>* GlobalNamespace::NetEaseManager::LogoutAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::LogoutAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogoutAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<NetEase::Docker::LogoutData>*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseManager.HandleDidLogout
void GlobalNamespace::NetEaseManager::HandleDidLogout(NetEase::Docker::LogoutData logoutData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::HandleDidLogout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidLogout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(logoutData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, logoutData);
}
// Autogenerated method: NetEaseManager.RequestHighscoreDataAsync
System::Threading::Tasks::Task_1<NetEase::Docker::ReceivedHighscoreData>* GlobalNamespace::NetEaseManager::RequestHighscoreDataAsync(::Il2CppString* leaderboardId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::RequestHighscoreDataAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestHighscoreDataAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leaderboardId)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<NetEase::Docker::ReceivedHighscoreData>*, false>(this, ___internal__method, leaderboardId);
}
// Autogenerated method: NetEaseManager.HandleDidReceiveHighscore
void GlobalNamespace::NetEaseManager::HandleDidReceiveHighscore(NetEase::Docker::ReceivedHighscoreData highscoreData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::HandleDidReceiveHighscore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidReceiveHighscore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highscoreData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, highscoreData);
}
// Autogenerated method: NetEaseManager.UploadHighscore
void GlobalNamespace::NetEaseManager::UploadHighscore(::Il2CppString* leaderboardId, int score) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::UploadHighscore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UploadHighscore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leaderboardId), ::il2cpp_utils::ExtractType(score)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, leaderboardId, score);
}
// Autogenerated method: NetEaseManager.Log
void GlobalNamespace::NetEaseManager::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetEaseManager", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseManager/<InitAsync>d__11
#include "GlobalNamespace/NetEaseManager_-InitAsync-d__11.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseManager/<InitAsync>d__11.MoveNext
void GlobalNamespace::NetEaseManager::$InitAsync$d__11::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::$InitAsync$d__11::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetEaseManager/<InitAsync>d__11.SetStateMachine
void GlobalNamespace::NetEaseManager::$InitAsync$d__11::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::$InitAsync$d__11::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseManager/<LoginAsync>d__13
#include "GlobalNamespace/NetEaseManager_-LoginAsync-d__13.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseManager/<LoginAsync>d__13.MoveNext
void GlobalNamespace::NetEaseManager::$LoginAsync$d__13::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::$LoginAsync$d__13::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetEaseManager/<LoginAsync>d__13.SetStateMachine
void GlobalNamespace::NetEaseManager::$LoginAsync$d__13::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::$LoginAsync$d__13::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseManager/<LogoutAsync>d__15
#include "GlobalNamespace/NetEaseManager_-LogoutAsync-d__15.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseManager/<LogoutAsync>d__15.MoveNext
void GlobalNamespace::NetEaseManager::$LogoutAsync$d__15::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::$LogoutAsync$d__15::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetEaseManager/<LogoutAsync>d__15.SetStateMachine
void GlobalNamespace::NetEaseManager::$LogoutAsync$d__15::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::$LogoutAsync$d__15::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEaseManager/<RequestHighscoreDataAsync>d__17
#include "GlobalNamespace/NetEaseManager_-RequestHighscoreDataAsync-d__17.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseManager/<RequestHighscoreDataAsync>d__17.MoveNext
void GlobalNamespace::NetEaseManager::$RequestHighscoreDataAsync$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::$RequestHighscoreDataAsync$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetEaseManager/<RequestHighscoreDataAsync>d__17.SetStateMachine
void GlobalNamespace::NetEaseManager::$RequestHighscoreDataAsync$d__17::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::$RequestHighscoreDataAsync$d__17::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRsenalLogger
#include "GlobalNamespace/VRsenalLogger.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: StringSignal
#include "GlobalNamespace/StringSignal.hpp"
// Including type: VRsenalScoreLogger
#include "GlobalNamespace/VRsenalScoreLogger.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRsenalLogger.Awake
void GlobalNamespace::VRsenalLogger::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalLogger::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRsenalLogger.OnDestroy
void GlobalNamespace::VRsenalLogger::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalLogger::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRsenalLogger.HandleGameScenesManagerInstallEarlyBindings
void GlobalNamespace::VRsenalLogger::HandleGameScenesManagerInstallEarlyBindings(GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalLogger::HandleGameScenesManagerInstallEarlyBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameScenesManagerInstallEarlyBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scenesTransitionSetupData, container);
}
// Autogenerated method: VRsenalLogger.HandlePlayerNameWasEntered
void GlobalNamespace::VRsenalLogger::HandlePlayerNameWasEntered(::Il2CppString* playerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalLogger::HandlePlayerNameWasEntered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerNameWasEntered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playerName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRsenalScoreLogger
#include "GlobalNamespace/VRsenalScoreLogger.hpp"
// Including type: VRsenalScoreLogger/<Start>d__3
#include "GlobalNamespace/VRsenalScoreLogger_-Start-d__3.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: ILevelEndActions
#include "GlobalNamespace/ILevelEndActions.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRsenalScoreLogger.Start
System::Collections::IEnumerator* GlobalNamespace::VRsenalScoreLogger::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalScoreLogger::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: VRsenalScoreLogger.OnDestroy
void GlobalNamespace::VRsenalScoreLogger::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalScoreLogger::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRsenalScoreLogger.HandleLevelFinishedEvent
void GlobalNamespace::VRsenalScoreLogger::HandleLevelFinishedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalScoreLogger::HandleLevelFinishedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRsenalScoreLogger.LogScore
void GlobalNamespace::VRsenalScoreLogger::LogScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalScoreLogger::LogScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRsenalScoreLogger/<Start>d__3
#include "GlobalNamespace/VRsenalScoreLogger_-Start-d__3.hpp"
// Including type: UnityEngine.YieldInstruction
#include "UnityEngine/YieldInstruction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRsenalScoreLogger/<Start>d__3.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::VRsenalScoreLogger::$Start$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalScoreLogger::$Start$d__3::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VRsenalScoreLogger/<Start>d__3.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::VRsenalScoreLogger::$Start$d__3::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalScoreLogger::$Start$d__3::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VRsenalScoreLogger/<Start>d__3.System.IDisposable.Dispose
void GlobalNamespace::VRsenalScoreLogger::$Start$d__3::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalScoreLogger::$Start$d__3::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRsenalScoreLogger/<Start>d__3.MoveNext
bool GlobalNamespace::VRsenalScoreLogger::$Start$d__3::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalScoreLogger::$Start$d__3::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRsenalScoreLogger/<Start>d__3.System.Collections.IEnumerator.Reset
void GlobalNamespace::VRsenalScoreLogger::$Start$d__3::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRsenalScoreLogger::$Start$d__3::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IAnalyticsModel
#include "GlobalNamespace/IAnalyticsModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IAnalyticsModel.get_supportsOpenDataPrivacyPage
bool GlobalNamespace::IAnalyticsModel::get_supportsOpenDataPrivacyPage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAnalyticsModel::get_supportsOpenDataPrivacyPage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_supportsOpenDataPrivacyPage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IAnalyticsModel.OpenDataPrivacyPage
void GlobalNamespace::IAnalyticsModel::OpenDataPrivacyPage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAnalyticsModel::OpenDataPrivacyPage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenDataPrivacyPage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IAnalyticsModel.LogEvent
void GlobalNamespace::IAnalyticsModel::LogEvent(::Il2CppString* eventType, System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppString*>* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAnalyticsModel::LogEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventType, eventData);
}
// Autogenerated method: IAnalyticsModel.LogClick
void GlobalNamespace::IAnalyticsModel::LogClick(::Il2CppString* clickType, System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppString*>* clickData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAnalyticsModel::LogClick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clickType), ::il2cpp_utils::ExtractType(clickData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clickType, clickData);
}
// Autogenerated method: IAnalyticsModel.LogImpression
void GlobalNamespace::IAnalyticsModel::LogImpression(::Il2CppString* impressionType, System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppString*>* impressionData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAnalyticsModel::LogImpression");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogImpression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(impressionType), ::il2cpp_utils::ExtractType(impressionData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, impressionType, impressionData);
}
// Autogenerated method: IAnalyticsModel.LogExposure
void GlobalNamespace::IAnalyticsModel::LogExposure(::Il2CppString* exposureType, System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppString*>* exposureData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAnalyticsModel::LogExposure");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogExposure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exposureType), ::il2cpp_utils::ExtractType(exposureData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, exposureType, exposureData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelCompletionResultsAnalyticsHelper
#include "GlobalNamespace/LevelCompletionResultsAnalyticsHelper.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelCompletionResultsAnalyticsHelper.FillEventData
void GlobalNamespace::LevelCompletionResultsAnalyticsHelper::FillEventData(GlobalNamespace::LevelCompletionResults* levelCompletionResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppString*>* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCompletionResultsAnalyticsHelper::FillEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LevelCompletionResultsAnalyticsHelper", "FillEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, levelCompletionResults, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionLevelAnalytics
#include "GlobalNamespace/MissionLevelAnalytics.hpp"
// Including type: MissionLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MissionLevelScenesTransitionSetupDataSO.hpp"
// Including type: IAnalyticsModel
#include "GlobalNamespace/IAnalyticsModel.hpp"
// Including type: MissionCompletionResults
#include "GlobalNamespace/MissionCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionLevelAnalytics.Start
void GlobalNamespace::MissionLevelAnalytics::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelAnalytics::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelAnalytics.OnDestroy
void GlobalNamespace::MissionLevelAnalytics::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelAnalytics::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelAnalytics.HandleMissionLevelDidFinishEvent
void GlobalNamespace::MissionLevelAnalytics::HandleMissionLevelDidFinishEvent(GlobalNamespace::MissionLevelScenesTransitionSetupDataSO* missionLevelScenesTransitionSetupData, GlobalNamespace::MissionCompletionResults* missionCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelAnalytics::HandleMissionLevelDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionLevelDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionLevelScenesTransitionSetupData), ::il2cpp_utils::ExtractType(missionCompletionResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionLevelScenesTransitionSetupData, missionCompletionResults);
}
