// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefab
#include "Zenject/SubContainerCreatorByNewPrefab.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.GameObjectCreationParameters _gameObjectBindInfo
Zenject::GameObjectCreationParameters*& Zenject::SubContainerCreatorByNewPrefab::dyn__gameObjectBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefab::dyn__gameObjectBindInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameObjectBindInfo"))->offset;
  return *reinterpret_cast<Zenject::GameObjectCreationParameters**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.IPrefabProvider _prefabProvider
Zenject::IPrefabProvider*& Zenject::SubContainerCreatorByNewPrefab::dyn__prefabProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefab::dyn__prefabProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prefabProvider"))->offset;
  return *reinterpret_cast<Zenject::IPrefabProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
Zenject::DiContainer*& Zenject::SubContainerCreatorByNewPrefab::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefab::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefab.CreateSubContainer
Zenject::DiContainer* Zenject::SubContainerCreatorByNewPrefab::CreateSubContainer(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, Zenject::InjectContext* parentContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefab::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(parentContext)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method, args, parentContext);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefabDynamicContext
#include "Zenject/SubContainerCreatorByNewPrefabDynamicContext.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.IPrefabProvider _prefabProvider
Zenject::IPrefabProvider*& Zenject::SubContainerCreatorByNewPrefabDynamicContext::dyn__prefabProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabDynamicContext::dyn__prefabProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prefabProvider"))->offset;
  return *reinterpret_cast<Zenject::IPrefabProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.GameObjectCreationParameters _gameObjectBindInfo
Zenject::GameObjectCreationParameters*& Zenject::SubContainerCreatorByNewPrefabDynamicContext::dyn__gameObjectBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabDynamicContext::dyn__gameObjectBindInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameObjectBindInfo"))->offset;
  return *reinterpret_cast<Zenject::GameObjectCreationParameters**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabDynamicContext.CreateGameObject
UnityEngine::GameObject* Zenject::SubContainerCreatorByNewPrefabDynamicContext::CreateGameObject(ByRef<bool> shouldMakeActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabDynamicContext::CreateGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(___instance_arg, ___internal__method, byref(shouldMakeActive));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefabInstaller
#include "Zenject/SubContainerCreatorByNewPrefabInstaller.hpp"
// Including type: Zenject.SubContainerCreatorByNewPrefabInstaller/Zenject.<>c__DisplayClass3_0
#include "Zenject/SubContainerCreatorByNewPrefabInstaller_--c__DisplayClass3_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.GameObjectContext
#include "Zenject/GameObjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _installerType
System::Type*& Zenject::SubContainerCreatorByNewPrefabInstaller::dyn__installerType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabInstaller::dyn__installerType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installerType"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.TypeValuePair> _extraArgs
System::Collections::Generic::List_1<Zenject::TypeValuePair>*& Zenject::SubContainerCreatorByNewPrefabInstaller::dyn__extraArgs() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabInstaller::dyn__extraArgs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_extraArgs"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabInstaller.AddInstallers
void Zenject::SubContainerCreatorByNewPrefabInstaller::AddInstallers(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, Zenject::GameObjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabInstaller::AddInstallers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, args, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefabInstaller/Zenject.<>c__DisplayClass3_0
#include "Zenject/SubContainerCreatorByNewPrefabInstaller_--c__DisplayClass3_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.SubContainerCreatorByNewPrefabInstaller <>4__this
Zenject::SubContainerCreatorByNewPrefabInstaller*& Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<Zenject::SubContainerCreatorByNewPrefabInstaller**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<Zenject.TypeValuePair> args
System::Collections::Generic::List_1<Zenject::TypeValuePair>*& Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::dyn_args() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::dyn_args");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "args"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabInstaller/Zenject.<>c__DisplayClass3_0.<AddInstallers>b__0
void Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::$AddInstallers$b__0(Zenject::DiContainer* subContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::<AddInstallers>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AddInstallers>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subContainer)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, subContainer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefabMethod
#include "Zenject/SubContainerCreatorByNewPrefabMethod.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.GameObjectContext
#include "Zenject/GameObjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Action`1<Zenject.DiContainer> _installerMethod
System::Action_1<Zenject::DiContainer*>*& Zenject::SubContainerCreatorByNewPrefabMethod::dyn__installerMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabMethod::dyn__installerMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installerMethod"))->offset;
  return *reinterpret_cast<System::Action_1<Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabMethod.AddInstallers
void Zenject::SubContainerCreatorByNewPrefabMethod::AddInstallers(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, Zenject::GameObjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabMethod::AddInstallers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, args, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefabWithParams
#include "Zenject/SubContainerCreatorByNewPrefabWithParams.hpp"
// Including type: Zenject.SubContainerCreatorByNewPrefabWithParams/Zenject.<>c__DisplayClass7_0
#include "Zenject/SubContainerCreatorByNewPrefabWithParams_--c__DisplayClass7_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
Zenject::DiContainer*& Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.IPrefabProvider _prefabProvider
Zenject::IPrefabProvider*& Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__prefabProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__prefabProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prefabProvider"))->offset;
  return *reinterpret_cast<Zenject::IPrefabProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _installerType
System::Type*& Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__installerType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__installerType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installerType"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.GameObjectCreationParameters _gameObjectBindInfo
Zenject::GameObjectCreationParameters*& Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__gameObjectBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__gameObjectBindInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameObjectBindInfo"))->offset;
  return *reinterpret_cast<Zenject::GameObjectCreationParameters**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams.get_Container
Zenject::DiContainer* Zenject::SubContainerCreatorByNewPrefabWithParams::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabWithParams::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams.CreateTempContainer
Zenject::DiContainer* Zenject::SubContainerCreatorByNewPrefabWithParams::CreateTempContainer(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabWithParams::CreateTempContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateTempContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method, args);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams.CreateSubContainer
Zenject::DiContainer* Zenject::SubContainerCreatorByNewPrefabWithParams::CreateSubContainer(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, Zenject::InjectContext* parentContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabWithParams::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(parentContext)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method, args, parentContext);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefabWithParams/Zenject.<>c__DisplayClass7_0
#include "Zenject/SubContainerCreatorByNewPrefabWithParams_--c__DisplayClass7_0.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.TypeValuePair argPair
Zenject::TypeValuePair& Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::dyn_argPair() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::dyn_argPair");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "argPair"))->offset;
  return *reinterpret_cast<Zenject::TypeValuePair*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams/Zenject.<>c__DisplayClass7_0.<CreateTempContainer>b__0
bool Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::$CreateTempContainer$b__0(Zenject::InjectableInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::<CreateTempContainer>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateTempContainer>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams/Zenject.<>c__DisplayClass7_0.<CreateTempContainer>b__1
int Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::$CreateTempContainer$b__1(Zenject::InjectableInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::<CreateTempContainer>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateTempContainer>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorCached
#include "Zenject/SubContainerCreatorCached.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.ISubContainerCreator _subCreator
Zenject::ISubContainerCreator*& Zenject::SubContainerCreatorCached::dyn__subCreator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorCached::dyn__subCreator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subCreator"))->offset;
  return *reinterpret_cast<Zenject::ISubContainerCreator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isLookingUp
bool& Zenject::SubContainerCreatorCached::dyn__isLookingUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorCached::dyn__isLookingUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isLookingUp"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.DiContainer _subContainer
Zenject::DiContainer*& Zenject::SubContainerCreatorCached::dyn__subContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorCached::dyn__subContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subContainer"))->offset;
  return *reinterpret_cast<Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorCached.CreateSubContainer
Zenject::DiContainer* Zenject::SubContainerCreatorCached::CreateSubContainer(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorCached::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method, args, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorDynamicContext
#include "Zenject/SubContainerCreatorDynamicContext.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.GameObjectContext
#include "Zenject/GameObjectContext.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
Zenject::DiContainer*& Zenject::SubContainerCreatorDynamicContext::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorDynamicContext::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorDynamicContext.get_Container
Zenject::DiContainer* Zenject::SubContainerCreatorDynamicContext::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorDynamicContext::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerCreatorDynamicContext.CreateSubContainer
Zenject::DiContainer* Zenject::SubContainerCreatorDynamicContext::CreateSubContainer(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, Zenject::InjectContext* parentContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorDynamicContext::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(parentContext)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method, args, parentContext);
}
// Autogenerated method: Zenject.SubContainerCreatorDynamicContext.AddInstallers
void Zenject::SubContainerCreatorDynamicContext::AddInstallers(System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, Zenject::GameObjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorDynamicContext::AddInstallers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, args, context);
}
// Autogenerated method: Zenject.SubContainerCreatorDynamicContext.CreateGameObject
UnityEngine::GameObject* Zenject::SubContainerCreatorDynamicContext::CreateGameObject(ByRef<bool> shouldMakeActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorDynamicContext::CreateGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(___instance_arg, ___internal__method, byref(shouldMakeActive));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorUtil
#include "Zenject/SubContainerCreatorUtil.hpp"
// Including type: Zenject.SubContainerCreatorBindInfo
#include "Zenject/SubContainerCreatorBindInfo.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerCreatorUtil.ApplyBindSettings
void Zenject::SubContainerCreatorUtil::ApplyBindSettings(Zenject::SubContainerCreatorBindInfo* subContainerBindInfo, Zenject::DiContainer* subContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerCreatorUtil::ApplyBindSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SubContainerCreatorUtil", "ApplyBindSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subContainerBindInfo), ::il2cpp_utils::ExtractType(subContainer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, subContainerBindInfo, subContainer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerDependencyProvider
#include "Zenject/SubContainerDependencyProvider.hpp"
// Including type: Zenject.ISubContainerCreator
#include "Zenject/ISubContainerCreator.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.ISubContainerCreator _subContainerCreator
Zenject::ISubContainerCreator*& Zenject::SubContainerDependencyProvider::dyn__subContainerCreator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerDependencyProvider::dyn__subContainerCreator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subContainerCreator"))->offset;
  return *reinterpret_cast<Zenject::ISubContainerCreator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _dependencyType
System::Type*& Zenject::SubContainerDependencyProvider::dyn__dependencyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerDependencyProvider::dyn__dependencyType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dependencyType"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _identifier
::Il2CppObject*& Zenject::SubContainerDependencyProvider::dyn__identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerDependencyProvider::dyn__identifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_identifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _resolveAll
bool& Zenject::SubContainerDependencyProvider::dyn__resolveAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerDependencyProvider::dyn__resolveAll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resolveAll"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerDependencyProvider.get_IsCached
bool Zenject::SubContainerDependencyProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerDependencyProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerDependencyProvider.get_TypeVariesBasedOnMemberType
bool Zenject::SubContainerDependencyProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerDependencyProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerDependencyProvider.GetInstanceType
System::Type* Zenject::SubContainerDependencyProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerDependencyProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(___instance_arg, ___internal__method, context);
}
// Autogenerated method: Zenject.SubContainerDependencyProvider.CreateSubContext
Zenject::InjectContext* Zenject::SubContainerDependencyProvider::CreateSubContext(Zenject::InjectContext* parent, Zenject::DiContainer* subContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerDependencyProvider::CreateSubContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(subContainer)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectContext*, false>(___instance_arg, ___internal__method, parent, subContainer);
}
// Autogenerated method: Zenject.SubContainerDependencyProvider.GetAllInstancesWithInjectSplit
void Zenject::SubContainerDependencyProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, ByRef<System::Action*> injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerDependencyProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, context, args, byref(injectAction), buffer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TransientProvider
#include "Zenject/TransientProvider.hpp"
// Including type: Zenject.TransientProvider/Zenject.<>c__DisplayClass11_0
#include "Zenject/TransientProvider_--c__DisplayClass11_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
Zenject::DiContainer*& Zenject::TransientProvider::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _concreteType
System::Type*& Zenject::TransientProvider::dyn__concreteType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::dyn__concreteType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_concreteType"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.TypeValuePair> _extraArguments
System::Collections::Generic::List_1<Zenject::TypeValuePair>*& Zenject::TransientProvider::dyn__extraArguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::dyn__extraArguments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_extraArguments"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _concreteIdentifier
::Il2CppObject*& Zenject::TransientProvider::dyn__concreteIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::dyn__concreteIdentifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_concreteIdentifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Action`2<Zenject.InjectContext,System.Object> _instantiateCallback
System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>*& Zenject::TransientProvider::dyn__instantiateCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::dyn__instantiateCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instantiateCallback"))->offset;
  return *reinterpret_cast<System::Action_2<Zenject::InjectContext*, ::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TransientProvider.get_IsCached
bool Zenject::TransientProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.TransientProvider.get_TypeVariesBasedOnMemberType
bool Zenject::TransientProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.TransientProvider.GetInstanceType
System::Type* Zenject::TransientProvider::GetInstanceType(Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(___instance_arg, ___internal__method, context);
}
// Autogenerated method: Zenject.TransientProvider.GetAllInstancesWithInjectSplit
void Zenject::TransientProvider::GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, ByRef<System::Action*> injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, context, args, byref(injectAction), buffer);
}
// Autogenerated method: Zenject.TransientProvider.GetTypeToCreate
System::Type* Zenject::TransientProvider::GetTypeToCreate(System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::GetTypeToCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTypeToCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(___instance_arg, ___internal__method, contractType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TransientProvider/Zenject.<>c__DisplayClass11_0
#include "Zenject/TransientProvider_--c__DisplayClass11_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.TransientProvider <>4__this
Zenject::TransientProvider*& Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<Zenject::TransientProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object instance
::Il2CppObject*& Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_instance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instance"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Type instanceType
System::Type*& Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_instanceType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_instanceType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instanceType"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs
System::Collections::Generic::List_1<Zenject::TypeValuePair>*& Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_extraArgs() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_extraArgs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extraArgs"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Zenject.InjectContext context
Zenject::InjectContext*& Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_context() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_context");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "context"))->offset;
  return *reinterpret_cast<Zenject::InjectContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TransientProvider/Zenject.<>c__DisplayClass11_0.<GetAllInstancesWithInjectSplit>b__0
void Zenject::TransientProvider::$$c__DisplayClass11_0::$GetAllInstancesWithInjectSplit$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TransientProvider::$$c__DisplayClass11_0::<GetAllInstancesWithInjectSplit>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.AnimatorIkHandlerManager
#include "Zenject/AnimatorIkHandlerManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IAnimatorIkHandler
#include "Zenject/IAnimatorIkHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.IAnimatorIkHandler> _handlers
System::Collections::Generic::List_1<Zenject::IAnimatorIkHandler*>*& Zenject::AnimatorIkHandlerManager::dyn__handlers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AnimatorIkHandlerManager::dyn__handlers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handlers"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::IAnimatorIkHandler*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.AnimatorIkHandlerManager.Construct
void Zenject::AnimatorIkHandlerManager::Construct(System::Collections::Generic::List_1<Zenject::IAnimatorIkHandler*>* handlers) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AnimatorIkHandlerManager::Construct");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Construct", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handlers)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, handlers);
}
// Autogenerated method: Zenject.AnimatorIkHandlerManager.OnAnimatorIk
void Zenject::AnimatorIkHandlerManager::OnAnimatorIk() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AnimatorIkHandlerManager::OnAnimatorIk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAnimatorIk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.AnimatorInstaller
#include "Zenject/AnimatorInstaller.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Animator _animator
UnityEngine::Animator*& Zenject::AnimatorInstaller::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AnimatorInstaller::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.AnimatorInstaller.InstallBindings
void Zenject::AnimatorInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AnimatorInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.AnimatorMoveHandlerManager
#include "Zenject/AnimatorMoveHandlerManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IAnimatorMoveHandler
#include "Zenject/IAnimatorMoveHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.IAnimatorMoveHandler> _handlers
System::Collections::Generic::List_1<Zenject::IAnimatorMoveHandler*>*& Zenject::AnimatorMoveHandlerManager::dyn__handlers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AnimatorMoveHandlerManager::dyn__handlers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handlers"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::IAnimatorMoveHandler*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.AnimatorMoveHandlerManager.Construct
void Zenject::AnimatorMoveHandlerManager::Construct(System::Collections::Generic::List_1<Zenject::IAnimatorMoveHandler*>* handlers) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AnimatorMoveHandlerManager::Construct");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Construct", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handlers)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, handlers);
}
// Autogenerated method: Zenject.AnimatorMoveHandlerManager.OnAnimatorMove
void Zenject::AnimatorMoveHandlerManager::OnAnimatorMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AnimatorMoveHandlerManager::OnAnimatorMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAnimatorMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IAnimatorIkHandler
#include "Zenject/IAnimatorIkHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IAnimatorIkHandler.OnAnimatorIk
void Zenject::IAnimatorIkHandler::OnAnimatorIk() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IAnimatorIkHandler::OnAnimatorIk");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAnimatorIk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IAnimatorMoveHandler
#include "Zenject/IAnimatorMoveHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IAnimatorMoveHandler.OnAnimatorMove
void Zenject::IAnimatorMoveHandler::OnAnimatorMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IAnimatorMoveHandler::OnAnimatorMove");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAnimatorMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DisposableManager
#include "Zenject/DisposableManager.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: Zenject.DisposableManager/Zenject.LateDisposableInfo
#include "Zenject/DisposableManager_LateDisposableInfo.hpp"
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_0
#include "Zenject/DisposableManager_--c__DisplayClass4_0.hpp"
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_1
#include "Zenject/DisposableManager_--c__DisplayClass4_1.hpp"
// Including type: Zenject.DisposableManager/Zenject.<>c
#include "Zenject/DisposableManager_--c.hpp"
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass9_0
#include "Zenject/DisposableManager_--c__DisplayClass9_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.DisposableManager/Zenject.DisposableInfo> _disposables
System::Collections::Generic::List_1<Zenject::DisposableManager::DisposableInfo>*& Zenject::DisposableManager::dyn__disposables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::dyn__disposables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposables"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::DisposableManager::DisposableInfo>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.DisposableManager/Zenject.LateDisposableInfo> _lateDisposables
System::Collections::Generic::List_1<Zenject::DisposableManager::LateDisposableInfo*>*& Zenject::DisposableManager::dyn__lateDisposables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::dyn__lateDisposables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lateDisposables"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::DisposableManager::LateDisposableInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disposed
bool& Zenject::DisposableManager::dyn__disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::dyn__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _lateDisposed
bool& Zenject::DisposableManager::dyn__lateDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::dyn__lateDisposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lateDisposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposableManager.Add
void Zenject::DisposableManager::Add(System::IDisposable* disposable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, disposable);
}
// Autogenerated method: Zenject.DisposableManager.Add
void Zenject::DisposableManager::Add(System::IDisposable* disposable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable), ::il2cpp_utils::ExtractType(priority)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, disposable, priority);
}
// Autogenerated method: Zenject.DisposableManager.AddLate
void Zenject::DisposableManager::AddLate(Zenject::ILateDisposable* disposable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::AddLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, disposable);
}
// Autogenerated method: Zenject.DisposableManager.AddLate
void Zenject::DisposableManager::AddLate(Zenject::ILateDisposable* disposable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::AddLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable), ::il2cpp_utils::ExtractType(priority)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, disposable, priority);
}
// Autogenerated method: Zenject.DisposableManager.Remove
void Zenject::DisposableManager::Remove(System::IDisposable* disposable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, disposable);
}
// Autogenerated method: Zenject.DisposableManager.LateDispose
void Zenject::DisposableManager::LateDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::LateDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.DisposableManager.Dispose
void Zenject::DisposableManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DisposableManager/Zenject.DisposableInfo
#include "Zenject/DisposableManager.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IDisposable Disposable
System::IDisposable*& Zenject::DisposableManager::DisposableInfo::dyn_Disposable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::DisposableInfo::dyn_Disposable");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Disposable"))->offset;
  return *reinterpret_cast<System::IDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
int& Zenject::DisposableManager::DisposableInfo::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::DisposableInfo::dyn_Priority");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DisposableManager/Zenject.LateDisposableInfo
#include "Zenject/DisposableManager_LateDisposableInfo.hpp"
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.ILateDisposable LateDisposable
Zenject::ILateDisposable*& Zenject::DisposableManager::LateDisposableInfo::dyn_LateDisposable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::LateDisposableInfo::dyn_LateDisposable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LateDisposable"))->offset;
  return *reinterpret_cast<Zenject::ILateDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
int& Zenject::DisposableManager::LateDisposableInfo::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::LateDisposableInfo::dyn_Priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_0
#include "Zenject/DisposableManager_--c__DisplayClass4_0.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IDisposable disposable
System::IDisposable*& Zenject::DisposableManager::$$c__DisplayClass4_0::dyn_disposable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c__DisplayClass4_0::dyn_disposable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disposable"))->offset;
  return *reinterpret_cast<System::IDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_0.<.ctor>b__0
bool Zenject::DisposableManager::$$c__DisplayClass4_0::$_ctor$b__0(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c__DisplayClass4_0::<.ctor>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_1
#include "Zenject/DisposableManager_--c__DisplayClass4_1.hpp"
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.ILateDisposable lateDisposable
Zenject::ILateDisposable*& Zenject::DisposableManager::$$c__DisplayClass4_1::dyn_lateDisposable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c__DisplayClass4_1::dyn_lateDisposable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lateDisposable"))->offset;
  return *reinterpret_cast<Zenject::ILateDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_1.<.ctor>b__2
bool Zenject::DisposableManager::$$c__DisplayClass4_1::$_ctor$b__2(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c__DisplayClass4_1::<.ctor>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DisposableManager/Zenject.<>c
#include "Zenject/DisposableManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.DisposableManager/Zenject.LateDisposableInfo
#include "Zenject/DisposableManager_LateDisposableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.DisposableManager/Zenject.<>c <>9
Zenject::DisposableManager::$$c* Zenject::DisposableManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::DisposableManager::$$c*>("Zenject", "DisposableManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.DisposableManager/Zenject.<>c <>9
void Zenject::DisposableManager::$$c::_set_$$9(Zenject::DisposableManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DisposableManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__4_1
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Nullable_1<int>>* Zenject::DisposableManager::$$c::_get_$$9__4_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::_get_$$9__4_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Nullable_1<int>>*>("Zenject", "DisposableManager/<>c", "<>9__4_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__4_1
void Zenject::DisposableManager::$$c::_set_$$9__4_1(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Nullable_1<int>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::_set_$$9__4_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DisposableManager/<>c", "<>9__4_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__4_3
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Nullable_1<int>>* Zenject::DisposableManager::$$c::_get_$$9__4_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::_get_$$9__4_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Nullable_1<int>>*>("Zenject", "DisposableManager/<>c", "<>9__4_3")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__4_3
void Zenject::DisposableManager::$$c::_set_$$9__4_3(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Nullable_1<int>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::_set_$$9__4_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DisposableManager/<>c", "<>9__4_3", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.DisposableManager/Zenject.LateDisposableInfo,System.Int32> <>9__10_0
System::Func_2<Zenject::DisposableManager::LateDisposableInfo*, int>* Zenject::DisposableManager::$$c::_get_$$9__10_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::_get_$$9__10_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::DisposableManager::LateDisposableInfo*, int>*>("Zenject", "DisposableManager/<>c", "<>9__10_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.DisposableManager/Zenject.LateDisposableInfo,System.Int32> <>9__10_0
void Zenject::DisposableManager::$$c::_set_$$9__10_0(System::Func_2<Zenject::DisposableManager::LateDisposableInfo*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::_set_$$9__10_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DisposableManager/<>c", "<>9__10_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.DisposableManager/Zenject.DisposableInfo,System.Int32> <>9__11_0
System::Func_2<Zenject::DisposableManager::DisposableInfo, int>* Zenject::DisposableManager::$$c::_get_$$9__11_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::_get_$$9__11_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::DisposableManager::DisposableInfo, int>*>("Zenject", "DisposableManager/<>c", "<>9__11_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.DisposableManager/Zenject.DisposableInfo,System.Int32> <>9__11_0
void Zenject::DisposableManager::$$c::_set_$$9__11_0(System::Func_2<Zenject::DisposableManager::DisposableInfo, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::_set_$$9__11_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DisposableManager/<>c", "<>9__11_0", value)));
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c..cctor
void Zenject::DisposableManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c.<.ctor>b__4_1
System::Nullable_1<int> Zenject::DisposableManager::$$c::$_ctor$b__4_1(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::<.ctor>b__4_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__4_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<int>, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c.<.ctor>b__4_3
System::Nullable_1<int> Zenject::DisposableManager::$$c::$_ctor$b__4_3(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::<.ctor>b__4_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__4_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<int>, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c.<LateDispose>b__10_0
int Zenject::DisposableManager::$$c::$LateDispose$b__10_0(Zenject::DisposableManager::LateDisposableInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::<LateDispose>b__10_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LateDispose>b__10_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c.<Dispose>b__11_0
int Zenject::DisposableManager::$$c::$Dispose$b__11_0(Zenject::DisposableManager::DisposableInfo x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c::<Dispose>b__11_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Dispose>b__11_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass9_0
#include "Zenject/DisposableManager_--c__DisplayClass9_0.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Zenject.DisposableManager/Zenject.DisposableInfo
#include "Zenject/DisposableManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IDisposable disposable
System::IDisposable*& Zenject::DisposableManager::$$c__DisplayClass9_0::dyn_disposable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c__DisplayClass9_0::dyn_disposable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disposable"))->offset;
  return *reinterpret_cast<System::IDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass9_0.<Remove>b__0
bool Zenject::DisposableManager::$$c__DisplayClass9_0::$Remove$b__0(Zenject::DisposableManager::DisposableInfo x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposableManager::$$c__DisplayClass9_0::<Remove>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Remove>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.GuiRenderableManager
#include "Zenject/GuiRenderableManager.hpp"
// Including type: Zenject.GuiRenderableManager/Zenject.RenderableInfo
#include "Zenject/GuiRenderableManager_RenderableInfo.hpp"
// Including type: Zenject.GuiRenderableManager/Zenject.<>c__DisplayClass1_0
#include "Zenject/GuiRenderableManager_--c__DisplayClass1_0.hpp"
// Including type: Zenject.GuiRenderableManager/Zenject.<>c
#include "Zenject/GuiRenderableManager_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IGuiRenderable
#include "Zenject/IGuiRenderable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.GuiRenderableManager/Zenject.RenderableInfo> _renderables
System::Collections::Generic::List_1<Zenject::GuiRenderableManager::RenderableInfo*>*& Zenject::GuiRenderableManager::dyn__renderables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::dyn__renderables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderables"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::GuiRenderableManager::RenderableInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.GuiRenderableManager.OnGui
void Zenject::GuiRenderableManager::OnGui() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::OnGui");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGui", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.GuiRenderableManager/Zenject.RenderableInfo
#include "Zenject/GuiRenderableManager_RenderableInfo.hpp"
// Including type: Zenject.IGuiRenderable
#include "Zenject/IGuiRenderable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IGuiRenderable Renderable
Zenject::IGuiRenderable*& Zenject::GuiRenderableManager::RenderableInfo::dyn_Renderable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::RenderableInfo::dyn_Renderable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Renderable"))->offset;
  return *reinterpret_cast<Zenject::IGuiRenderable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
int& Zenject::GuiRenderableManager::RenderableInfo::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::RenderableInfo::dyn_Priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.GuiRenderableManager/Zenject.<>c__DisplayClass1_0
#include "Zenject/GuiRenderableManager_--c__DisplayClass1_0.hpp"
// Including type: Zenject.IGuiRenderable
#include "Zenject/IGuiRenderable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IGuiRenderable renderable
Zenject::IGuiRenderable*& Zenject::GuiRenderableManager::$$c__DisplayClass1_0::dyn_renderable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c__DisplayClass1_0::dyn_renderable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderable"))->offset;
  return *reinterpret_cast<Zenject::IGuiRenderable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c__DisplayClass1_0.<.ctor>b__1
bool Zenject::GuiRenderableManager::$$c__DisplayClass1_0::$_ctor$b__1(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c__DisplayClass1_0::<.ctor>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.GuiRenderableManager/Zenject.<>c
#include "Zenject/GuiRenderableManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.GuiRenderableManager/Zenject.RenderableInfo
#include "Zenject/GuiRenderableManager_RenderableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.GuiRenderableManager/Zenject.<>c <>9
Zenject::GuiRenderableManager::$$c* Zenject::GuiRenderableManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::GuiRenderableManager::$$c*>("Zenject", "GuiRenderableManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.GuiRenderableManager/Zenject.<>c <>9
void Zenject::GuiRenderableManager::$$c::_set_$$9(Zenject::GuiRenderableManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "GuiRenderableManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__1_2
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>* Zenject::GuiRenderableManager::$$c::_get_$$9__1_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c::_get_$$9__1_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>*>("Zenject", "GuiRenderableManager/<>c", "<>9__1_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__1_2
void Zenject::GuiRenderableManager::$$c::_set_$$9__1_2(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c::_set_$$9__1_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "GuiRenderableManager/<>c", "<>9__1_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.GuiRenderableManager/Zenject.RenderableInfo,System.Int32> <>9__1_0
System::Func_2<Zenject::GuiRenderableManager::RenderableInfo*, int>* Zenject::GuiRenderableManager::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::GuiRenderableManager::RenderableInfo*, int>*>("Zenject", "GuiRenderableManager/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.GuiRenderableManager/Zenject.RenderableInfo,System.Int32> <>9__1_0
void Zenject::GuiRenderableManager::$$c::_set_$$9__1_0(System::Func_2<Zenject::GuiRenderableManager::RenderableInfo*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "GuiRenderableManager/<>c", "<>9__1_0", value)));
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c..cctor
void Zenject::GuiRenderableManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderableManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c.<.ctor>b__1_2
int Zenject::GuiRenderableManager::$$c::$_ctor$b__1_2(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c::<.ctor>b__1_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__1_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c.<.ctor>b__1_0
int Zenject::GuiRenderableManager::$$c::$_ctor$b__1_0(Zenject::GuiRenderableManager::RenderableInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::$$c::<.ctor>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.GuiRenderer
#include "Zenject/GuiRenderer.hpp"
// Including type: Zenject.GuiRenderableManager
#include "Zenject/GuiRenderableManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.GuiRenderableManager _renderableManager
Zenject::GuiRenderableManager*& Zenject::GuiRenderer::dyn__renderableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderer::dyn__renderableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderableManager"))->offset;
  return *reinterpret_cast<Zenject::GuiRenderableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.GuiRenderer.Construct
void Zenject::GuiRenderer::Construct(Zenject::GuiRenderableManager* renderableManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderer::Construct");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Construct", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderableManager)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, renderableManager);
}
// Autogenerated method: Zenject.GuiRenderer.OnGUI
void Zenject::GuiRenderer::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderer::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InitializableManager
#include "Zenject/InitializableManager.hpp"
// Including type: Zenject.InitializableManager/Zenject.InitializableInfo
#include "Zenject/InitializableManager_InitializableInfo.hpp"
// Including type: Zenject.InitializableManager/Zenject.<>c__DisplayClass2_0
#include "Zenject/InitializableManager_--c__DisplayClass2_0.hpp"
// Including type: Zenject.InitializableManager/Zenject.<>c
#include "Zenject/InitializableManager_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.InitializableManager/Zenject.InitializableInfo> _initializables
System::Collections::Generic::List_1<Zenject::InitializableManager::InitializableInfo*>*& Zenject::InitializableManager::dyn__initializables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::dyn__initializables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initializables"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::InitializableManager::InitializableInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInitialized
bool& Zenject::InitializableManager::dyn__hasInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::dyn__hasInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.InitializableManager.Add
void Zenject::InitializableManager::Add(Zenject::IInitializable* initializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initializable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, initializable);
}
// Autogenerated method: Zenject.InitializableManager.Add
void Zenject::InitializableManager::Add(Zenject::IInitializable* initializable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initializable), ::il2cpp_utils::ExtractType(priority)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, initializable, priority);
}
// Autogenerated method: Zenject.InitializableManager.Initialize
void Zenject::InitializableManager::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InitializableManager/Zenject.InitializableInfo
#include "Zenject/InitializableManager_InitializableInfo.hpp"
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IInitializable Initializable
Zenject::IInitializable*& Zenject::InitializableManager::InitializableInfo::dyn_Initializable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::InitializableInfo::dyn_Initializable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Initializable"))->offset;
  return *reinterpret_cast<Zenject::IInitializable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
int& Zenject::InitializableManager::InitializableInfo::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::InitializableInfo::dyn_Priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InitializableManager/Zenject.<>c__DisplayClass2_0
#include "Zenject/InitializableManager_--c__DisplayClass2_0.hpp"
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IInitializable initializable
Zenject::IInitializable*& Zenject::InitializableManager::$$c__DisplayClass2_0::dyn_initializable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c__DisplayClass2_0::dyn_initializable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initializable"))->offset;
  return *reinterpret_cast<Zenject::IInitializable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c__DisplayClass2_0.<.ctor>b__0
bool Zenject::InitializableManager::$$c__DisplayClass2_0::$_ctor$b__0(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c__DisplayClass2_0::<.ctor>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InitializableManager/Zenject.<>c
#include "Zenject/InitializableManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InitializableManager/Zenject.InitializableInfo
#include "Zenject/InitializableManager_InitializableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.InitializableManager/Zenject.<>c <>9
Zenject::InitializableManager::$$c* Zenject::InitializableManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::InitializableManager::$$c*>("Zenject", "InitializableManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.InitializableManager/Zenject.<>c <>9
void Zenject::InitializableManager::$$c::_set_$$9(Zenject::InitializableManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "InitializableManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__2_1
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>* Zenject::InitializableManager::$$c::_get_$$9__2_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c::_get_$$9__2_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>*>("Zenject", "InitializableManager/<>c", "<>9__2_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__2_1
void Zenject::InitializableManager::$$c::_set_$$9__2_1(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c::_set_$$9__2_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "InitializableManager/<>c", "<>9__2_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.InitializableManager/Zenject.InitializableInfo,System.Int32> <>9__5_0
System::Func_2<Zenject::InitializableManager::InitializableInfo*, int>* Zenject::InitializableManager::$$c::_get_$$9__5_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c::_get_$$9__5_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::InitializableManager::InitializableInfo*, int>*>("Zenject", "InitializableManager/<>c", "<>9__5_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.InitializableManager/Zenject.InitializableInfo,System.Int32> <>9__5_0
void Zenject::InitializableManager::$$c::_set_$$9__5_0(System::Func_2<Zenject::InitializableManager::InitializableInfo*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c::_set_$$9__5_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "InitializableManager/<>c", "<>9__5_0", value)));
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c..cctor
void Zenject::InitializableManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InitializableManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c.<.ctor>b__2_1
int Zenject::InitializableManager::$$c::$_ctor$b__2_1(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c::<.ctor>b__2_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__2_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c.<Initialize>b__5_0
int Zenject::InitializableManager::$$c::$Initialize$b__5_0(Zenject::InitializableManager::InitializableInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InitializableManager::$$c::<Initialize>b__5_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Initialize>b__5_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DefaultGameObjectKernel
#include "Zenject/DefaultGameObjectKernel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.Kernel
#include "Zenject/Kernel.hpp"
// Including type: Zenject.TickableManager
#include "Zenject/TickableManager.hpp"
// Including type: Zenject.InitializableManager
#include "Zenject/InitializableManager.hpp"
// Including type: Zenject.DisposableManager
#include "Zenject/DisposableManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.TickableManager _tickableManager
Zenject::TickableManager*& Zenject::Kernel::dyn__tickableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Kernel::dyn__tickableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tickableManager"))->offset;
  return *reinterpret_cast<Zenject::TickableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.InitializableManager _initializableManager
Zenject::InitializableManager*& Zenject::Kernel::dyn__initializableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Kernel::dyn__initializableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initializableManager"))->offset;
  return *reinterpret_cast<Zenject::InitializableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.DisposableManager _disposablesManager
Zenject::DisposableManager*& Zenject::Kernel::dyn__disposablesManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Kernel::dyn__disposablesManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposablesManager"))->offset;
  return *reinterpret_cast<Zenject::DisposableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.Kernel.Initialize
void Zenject::Kernel::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Kernel::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.Dispose
void Zenject::Kernel::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Kernel::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.LateDispose
void Zenject::Kernel::LateDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Kernel::LateDispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.Tick
void Zenject::Kernel::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Kernel::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.LateTick
void Zenject::Kernel::LateTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Kernel::LateTick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.FixedTick
void Zenject::Kernel::FixedTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Kernel::FixedTick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.MonoKernel
#include "Zenject/MonoKernel.hpp"
// Including type: Zenject.TickableManager
#include "Zenject/TickableManager.hpp"
// Including type: Zenject.InitializableManager
#include "Zenject/InitializableManager.hpp"
// Including type: Zenject.DisposableManager
#include "Zenject/DisposableManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.TickableManager _tickableManager
Zenject::TickableManager*& Zenject::MonoKernel::dyn__tickableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::dyn__tickableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tickableManager"))->offset;
  return *reinterpret_cast<Zenject::TickableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.InitializableManager _initializableManager
Zenject::InitializableManager*& Zenject::MonoKernel::dyn__initializableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::dyn__initializableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initializableManager"))->offset;
  return *reinterpret_cast<Zenject::InitializableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.DisposableManager _disposablesManager
Zenject::DisposableManager*& Zenject::MonoKernel::dyn__disposablesManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::dyn__disposablesManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposablesManager"))->offset;
  return *reinterpret_cast<Zenject::DisposableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInitialized
bool& Zenject::MonoKernel::dyn__hasInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::dyn__hasInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isDestroyed
bool& Zenject::MonoKernel::dyn__isDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::dyn__isDestroyed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isDestroyed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.MonoKernel.get_IsDestroyed
bool Zenject::MonoKernel::get_IsDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::get_IsDestroyed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDestroyed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.Start
void Zenject::MonoKernel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.Initialize
void Zenject::MonoKernel::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.Update
void Zenject::MonoKernel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::Update");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.FixedUpdate
void Zenject::MonoKernel::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::FixedUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.LateUpdate
void Zenject::MonoKernel::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::LateUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.OnDestroy
void Zenject::MonoKernel::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MonoKernel::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ProjectKernel
#include "Zenject/ProjectKernel.hpp"
// Including type: Zenject.ProjectKernel/Zenject.<>c__DisplayClass4_0
#include "Zenject/ProjectKernel_--c__DisplayClass4_0.hpp"
// Including type: Zenject.ZenjectSettings
#include "Zenject/ZenjectSettings.hpp"
// Including type: Zenject.SceneContextRegistry
#include "Zenject/SceneContextRegistry.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.ZenjectSettings _settings
Zenject::ZenjectSettings*& Zenject::ProjectKernel::dyn__settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectKernel::dyn__settings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_settings"))->offset;
  return *reinterpret_cast<Zenject::ZenjectSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.SceneContextRegistry _contextRegistry
Zenject::SceneContextRegistry*& Zenject::ProjectKernel::dyn__contextRegistry() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectKernel::dyn__contextRegistry");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_contextRegistry"))->offset;
  return *reinterpret_cast<Zenject::SceneContextRegistry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ProjectKernel.OnApplicationQuit
void Zenject::ProjectKernel::OnApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectKernel::OnApplicationQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.ProjectKernel.DestroyEverythingInOrder
void Zenject::ProjectKernel::DestroyEverythingInOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectKernel::DestroyEverythingInOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyEverythingInOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.ProjectKernel.ForceUnloadAllScenes
void Zenject::ProjectKernel::ForceUnloadAllScenes(bool immediate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectKernel::ForceUnloadAllScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceUnloadAllScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(immediate)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, immediate);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ProjectKernel/Zenject.<>c__DisplayClass4_0
#include "Zenject/ProjectKernel_--c__DisplayClass4_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.SceneContext
#include "Zenject/SceneContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.SceneManagement.Scene> sceneOrder
System::Collections::Generic::List_1<UnityEngine::SceneManagement::Scene>*& Zenject::ProjectKernel::$$c__DisplayClass4_0::dyn_sceneOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectKernel::$$c__DisplayClass4_0::dyn_sceneOrder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sceneOrder"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<UnityEngine::SceneManagement::Scene>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Func`2<Zenject.SceneContext,System.Int32> <>9__0
System::Func_2<Zenject::SceneContext*, int>*& Zenject::ProjectKernel::$$c__DisplayClass4_0::dyn_$$9__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectKernel::$$c__DisplayClass4_0::dyn_$$9__0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>9__0"))->offset;
  return *reinterpret_cast<System::Func_2<Zenject::SceneContext*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ProjectKernel/Zenject.<>c__DisplayClass4_0.<ForceUnloadAllScenes>b__0
int Zenject::ProjectKernel::$$c__DisplayClass4_0::$ForceUnloadAllScenes$b__0(Zenject::SceneContext* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectKernel::$$c__DisplayClass4_0::<ForceUnloadAllScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ForceUnloadAllScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SceneKernel
#include "Zenject/SceneKernel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PoolableManager
#include "Zenject/PoolableManager.hpp"
// Including type: Zenject.PoolableManager/Zenject.PoolableInfo
#include "Zenject/PoolableManager_PoolableInfo.hpp"
// Including type: Zenject.PoolableManager/Zenject.<>c__DisplayClass2_0
#include "Zenject/PoolableManager_--c__DisplayClass2_0.hpp"
// Including type: Zenject.PoolableManager/Zenject.<>c
#include "Zenject/PoolableManager_--c.hpp"
// Including type: Zenject.PoolableManager/Zenject.<>c__DisplayClass3_0
#include "Zenject/PoolableManager_--c__DisplayClass3_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.IPoolable> _poolables
System::Collections::Generic::List_1<Zenject::IPoolable*>*& Zenject::PoolableManager::dyn__poolables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::dyn__poolables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_poolables"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::IPoolable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isSpawned
bool& Zenject::PoolableManager::dyn__isSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::dyn__isSpawned");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isSpawned"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.PoolableManager.CreatePoolableInfo
Zenject::PoolableManager::PoolableInfo Zenject::PoolableManager::CreatePoolableInfo(Zenject::IPoolable* poolable, System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>* priorities) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::CreatePoolableInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePoolableInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poolable), ::il2cpp_utils::ExtractType(priorities)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::PoolableManager::PoolableInfo, false>(___instance_arg, ___internal__method, poolable, priorities);
}
// Autogenerated method: Zenject.PoolableManager.TriggerOnSpawned
void Zenject::PoolableManager::TriggerOnSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::TriggerOnSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerOnSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.PoolableManager.TriggerOnDespawned
void Zenject::PoolableManager::TriggerOnDespawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::TriggerOnDespawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerOnDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PoolableManager/Zenject.PoolableInfo
#include "Zenject/PoolableManager_PoolableInfo.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IPoolable Poolable
Zenject::IPoolable*& Zenject::PoolableManager::PoolableInfo::dyn_Poolable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::PoolableInfo::dyn_Poolable");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Poolable"))->offset;
  return *reinterpret_cast<Zenject::IPoolable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
int& Zenject::PoolableManager::PoolableInfo::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::PoolableInfo::dyn_Priority");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PoolableManager/Zenject.<>c__DisplayClass2_0
#include "Zenject/PoolableManager_--c__DisplayClass2_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
// Including type: Zenject.PoolableManager/Zenject.PoolableInfo
#include "Zenject/PoolableManager_PoolableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.PoolableManager <>4__this
Zenject::PoolableManager*& Zenject::PoolableManager::$$c__DisplayClass2_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c__DisplayClass2_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<Zenject::PoolableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> priorities
System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>*& Zenject::PoolableManager::$$c__DisplayClass2_0::dyn_priorities() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c__DisplayClass2_0::dyn_priorities");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "priorities"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c__DisplayClass2_0.<.ctor>b__0
Zenject::PoolableManager::PoolableInfo Zenject::PoolableManager::$$c__DisplayClass2_0::$_ctor$b__0(Zenject::IPoolable* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c__DisplayClass2_0::<.ctor>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::PoolableManager::PoolableInfo, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PoolableManager/Zenject.<>c
#include "Zenject/PoolableManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.PoolableManager/Zenject.<>c <>9
Zenject::PoolableManager::$$c* Zenject::PoolableManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::PoolableManager::$$c*>("Zenject", "PoolableManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.PoolableManager/Zenject.<>c <>9
void Zenject::PoolableManager::$$c::_set_$$9(Zenject::PoolableManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "PoolableManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.PoolableManager/Zenject.PoolableInfo,System.Int32> <>9__2_1
System::Func_2<Zenject::PoolableManager::PoolableInfo, int>* Zenject::PoolableManager::$$c::_get_$$9__2_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::_get_$$9__2_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::PoolableManager::PoolableInfo, int>*>("Zenject", "PoolableManager/<>c", "<>9__2_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.PoolableManager/Zenject.PoolableInfo,System.Int32> <>9__2_1
void Zenject::PoolableManager::$$c::_set_$$9__2_1(System::Func_2<Zenject::PoolableManager::PoolableInfo, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::_set_$$9__2_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "PoolableManager/<>c", "<>9__2_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.PoolableManager/Zenject.PoolableInfo,Zenject.IPoolable> <>9__2_2
System::Func_2<Zenject::PoolableManager::PoolableInfo, Zenject::IPoolable*>* Zenject::PoolableManager::$$c::_get_$$9__2_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::_get_$$9__2_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::PoolableManager::PoolableInfo, Zenject::IPoolable*>*>("Zenject", "PoolableManager/<>c", "<>9__2_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.PoolableManager/Zenject.PoolableInfo,Zenject.IPoolable> <>9__2_2
void Zenject::PoolableManager::$$c::_set_$$9__2_2(System::Func_2<Zenject::PoolableManager::PoolableInfo, Zenject::IPoolable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::_set_$$9__2_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "PoolableManager/<>c", "<>9__2_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__3_1
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Nullable_1<int>>* Zenject::PoolableManager::$$c::_get_$$9__3_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::_get_$$9__3_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Nullable_1<int>>*>("Zenject", "PoolableManager/<>c", "<>9__3_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__3_1
void Zenject::PoolableManager::$$c::_set_$$9__3_1(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Nullable_1<int>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::_set_$$9__3_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "PoolableManager/<>c", "<>9__3_1", value)));
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c..cctor
void Zenject::PoolableManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolableManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c.<.ctor>b__2_1
int Zenject::PoolableManager::$$c::$_ctor$b__2_1(Zenject::PoolableManager::PoolableInfo x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::<.ctor>b__2_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__2_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c.<.ctor>b__2_2
Zenject::IPoolable* Zenject::PoolableManager::$$c::$_ctor$b__2_2(Zenject::PoolableManager::PoolableInfo x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::<.ctor>b__2_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__2_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::IPoolable*, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c.<CreatePoolableInfo>b__3_1
System::Nullable_1<int> Zenject::PoolableManager::$$c::$CreatePoolableInfo$b__3_1(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c::<CreatePoolableInfo>b__3_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreatePoolableInfo>b__3_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<int>, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PoolableManager/Zenject.<>c__DisplayClass3_0
#include "Zenject/PoolableManager_--c__DisplayClass3_0.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IPoolable poolable
Zenject::IPoolable*& Zenject::PoolableManager::$$c__DisplayClass3_0::dyn_poolable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c__DisplayClass3_0::dyn_poolable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "poolable"))->offset;
  return *reinterpret_cast<Zenject::IPoolable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c__DisplayClass3_0.<CreatePoolableInfo>b__0
bool Zenject::PoolableManager::$$c__DisplayClass3_0::$CreatePoolableInfo$b__0(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolableManager::$$c__DisplayClass3_0::<CreatePoolableInfo>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreatePoolableInfo>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SceneContextRegistry
#include "Zenject/SceneContextRegistry.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Zenject.SceneContext
#include "Zenject/SceneContext.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.SceneManagement.Scene,Zenject.SceneContext> _map
System::Collections::Generic::Dictionary_2<UnityEngine::SceneManagement::Scene, Zenject::SceneContext*>*& Zenject::SceneContextRegistry::dyn__map() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistry::dyn__map");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_map"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<UnityEngine::SceneManagement::Scene, Zenject::SceneContext*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SceneContextRegistry.get_SceneContexts
System::Collections::Generic::IEnumerable_1<Zenject::SceneContext*>* Zenject::SceneContextRegistry::get_SceneContexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistry::get_SceneContexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SceneContexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::SceneContext*>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.SceneContextRegistry.Add
void Zenject::SceneContextRegistry::Add(Zenject::SceneContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistry::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, context);
}
// Autogenerated method: Zenject.SceneContextRegistry.GetSceneContextForScene
Zenject::SceneContext* Zenject::SceneContextRegistry::GetSceneContextForScene(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistry::GetSceneContextForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSceneContextForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::SceneContext*, false>(___instance_arg, ___internal__method, name);
}
// Autogenerated method: Zenject.SceneContextRegistry.GetSceneContextForScene
Zenject::SceneContext* Zenject::SceneContextRegistry::GetSceneContextForScene(UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistry::GetSceneContextForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSceneContextForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::SceneContext*, false>(___instance_arg, ___internal__method, scene);
}
// Autogenerated method: Zenject.SceneContextRegistry.TryGetSceneContextForScene
Zenject::SceneContext* Zenject::SceneContextRegistry::TryGetSceneContextForScene(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistry::TryGetSceneContextForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetSceneContextForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::SceneContext*, false>(___instance_arg, ___internal__method, name);
}
// Autogenerated method: Zenject.SceneContextRegistry.TryGetSceneContextForScene
Zenject::SceneContext* Zenject::SceneContextRegistry::TryGetSceneContextForScene(UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistry::TryGetSceneContextForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetSceneContextForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::SceneContext*, false>(___instance_arg, ___internal__method, scene);
}
// Autogenerated method: Zenject.SceneContextRegistry.GetContainerForScene
Zenject::DiContainer* Zenject::SceneContextRegistry::GetContainerForScene(UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistry::GetContainerForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetContainerForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method, scene);
}
// Autogenerated method: Zenject.SceneContextRegistry.TryGetContainerForScene
Zenject::DiContainer* Zenject::SceneContextRegistry::TryGetContainerForScene(UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistry::TryGetContainerForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetContainerForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method, scene);
}
// Autogenerated method: Zenject.SceneContextRegistry.Remove
void Zenject::SceneContextRegistry::Remove(Zenject::SceneContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistry::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SceneContextRegistryAdderAndRemover
#include "Zenject/SceneContextRegistryAdderAndRemover.hpp"
// Including type: Zenject.SceneContextRegistry
#include "Zenject/SceneContextRegistry.hpp"
// Including type: Zenject.SceneContext
#include "Zenject/SceneContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SceneContextRegistry _registry
Zenject::SceneContextRegistry*& Zenject::SceneContextRegistryAdderAndRemover::dyn__registry() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistryAdderAndRemover::dyn__registry");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_registry"))->offset;
  return *reinterpret_cast<Zenject::SceneContextRegistry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SceneContext _sceneContext
Zenject::SceneContext*& Zenject::SceneContextRegistryAdderAndRemover::dyn__sceneContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistryAdderAndRemover::dyn__sceneContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneContext"))->offset;
  return *reinterpret_cast<Zenject::SceneContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SceneContextRegistryAdderAndRemover.Initialize
void Zenject::SceneContextRegistryAdderAndRemover::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistryAdderAndRemover::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.SceneContextRegistryAdderAndRemover.Dispose
void Zenject::SceneContextRegistryAdderAndRemover::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContextRegistryAdderAndRemover::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.TickablesTaskUpdater
#include "Zenject/TickablesTaskUpdater.hpp"
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.TickablesTaskUpdater.UpdateItem
void Zenject::TickablesTaskUpdater::UpdateItem(Zenject::ITickable* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickablesTaskUpdater::UpdateItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, task);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.LateTickablesTaskUpdater
#include "Zenject/LateTickablesTaskUpdater.hpp"
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.LateTickablesTaskUpdater.UpdateItem
void Zenject::LateTickablesTaskUpdater::UpdateItem(Zenject::ILateTickable* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LateTickablesTaskUpdater::UpdateItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, task);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FixedTickablesTaskUpdater
#include "Zenject/FixedTickablesTaskUpdater.hpp"
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.FixedTickablesTaskUpdater.UpdateItem
void Zenject::FixedTickablesTaskUpdater::UpdateItem(Zenject::IFixedTickable* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FixedTickablesTaskUpdater::UpdateItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, task);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.TickableManager
#include "Zenject/TickableManager.hpp"
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass17_0
#include "Zenject/TickableManager_--c__DisplayClass17_0.hpp"
// Including type: Zenject.TickableManager/Zenject.<>c
#include "Zenject/TickableManager_--c.hpp"
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass18_0
#include "Zenject/TickableManager_--c__DisplayClass18_0.hpp"
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass19_0
#include "Zenject/TickableManager_--c__DisplayClass19_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.TickablesTaskUpdater
#include "Zenject/TickablesTaskUpdater.hpp"
// Including type: Zenject.FixedTickablesTaskUpdater
#include "Zenject/FixedTickablesTaskUpdater.hpp"
// Including type: Zenject.LateTickablesTaskUpdater
#include "Zenject/LateTickablesTaskUpdater.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.ITickable> _tickables
System::Collections::Generic::List_1<Zenject::ITickable*>*& Zenject::TickableManager::dyn__tickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::dyn__tickables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tickables"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::ITickable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.IFixedTickable> _fixedTickables
System::Collections::Generic::List_1<Zenject::IFixedTickable*>*& Zenject::TickableManager::dyn__fixedTickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::dyn__fixedTickables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedTickables"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::IFixedTickable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.ILateTickable> _lateTickables
System::Collections::Generic::List_1<Zenject::ILateTickable*>*& Zenject::TickableManager::dyn__lateTickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::dyn__lateTickables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lateTickables"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::ILateTickable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> _priorities
System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>*& Zenject::TickableManager::dyn__priorities() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::dyn__priorities");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_priorities"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> _fixedPriorities
System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>*& Zenject::TickableManager::dyn__fixedPriorities() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::dyn__fixedPriorities");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedPriorities"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> _latePriorities
System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>*& Zenject::TickableManager::dyn__latePriorities() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::dyn__latePriorities");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_latePriorities"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.TickablesTaskUpdater _updater
Zenject::TickablesTaskUpdater*& Zenject::TickableManager::dyn__updater() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::dyn__updater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updater"))->offset;
  return *reinterpret_cast<Zenject::TickablesTaskUpdater**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.FixedTickablesTaskUpdater _fixedUpdater
Zenject::FixedTickablesTaskUpdater*& Zenject::TickableManager::dyn__fixedUpdater() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::dyn__fixedUpdater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedUpdater"))->offset;
  return *reinterpret_cast<Zenject::FixedTickablesTaskUpdater**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.LateTickablesTaskUpdater _lateUpdater
Zenject::LateTickablesTaskUpdater*& Zenject::TickableManager::dyn__lateUpdater() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::dyn__lateUpdater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lateUpdater"))->offset;
  return *reinterpret_cast<Zenject::LateTickablesTaskUpdater**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isPaused
bool& Zenject::TickableManager::dyn__isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::dyn__isPaused");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isPaused"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TickableManager.get_Tickables
System::Collections::Generic::IEnumerable_1<Zenject::ITickable*>* Zenject::TickableManager::get_Tickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::get_Tickables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Tickables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::ITickable*>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.get_IsPaused
bool Zenject::TickableManager::get_IsPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::get_IsPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.set_IsPaused
void Zenject::TickableManager::set_IsPaused(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::set_IsPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: Zenject.TickableManager.Initialize
void Zenject::TickableManager::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.InitFixedTickables
void Zenject::TickableManager::InitFixedTickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::InitFixedTickables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitFixedTickables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.InitTickables
void Zenject::TickableManager::InitTickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::InitTickables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitTickables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.InitLateTickables
void Zenject::TickableManager::InitLateTickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::InitLateTickables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitLateTickables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.Add
void Zenject::TickableManager::Add(Zenject::ITickable* tickable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable), ::il2cpp_utils::ExtractType(priority)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, tickable, priority);
}
// Autogenerated method: Zenject.TickableManager.Add
void Zenject::TickableManager::Add(Zenject::ITickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.AddLate
void Zenject::TickableManager::AddLate(Zenject::ILateTickable* tickable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::AddLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable), ::il2cpp_utils::ExtractType(priority)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, tickable, priority);
}
// Autogenerated method: Zenject.TickableManager.AddLate
void Zenject::TickableManager::AddLate(Zenject::ILateTickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::AddLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.AddFixed
void Zenject::TickableManager::AddFixed(Zenject::IFixedTickable* tickable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::AddFixed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFixed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable), ::il2cpp_utils::ExtractType(priority)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, tickable, priority);
}
// Autogenerated method: Zenject.TickableManager.AddFixed
void Zenject::TickableManager::AddFixed(Zenject::IFixedTickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::AddFixed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFixed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.Remove
void Zenject::TickableManager::Remove(Zenject::ITickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.RemoveLate
void Zenject::TickableManager::RemoveLate(Zenject::ILateTickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::RemoveLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.RemoveFixed
void Zenject::TickableManager::RemoveFixed(Zenject::IFixedTickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::RemoveFixed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveFixed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.Update
void Zenject::TickableManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.FixedUpdate
void Zenject::TickableManager::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.LateUpdate
void Zenject::TickableManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass17_0
#include "Zenject/TickableManager_--c__DisplayClass17_0.hpp"
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IFixedTickable tickable
Zenject::IFixedTickable*& Zenject::TickableManager::$$c__DisplayClass17_0::dyn_tickable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c__DisplayClass17_0::dyn_tickable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tickable"))->offset;
  return *reinterpret_cast<Zenject::IFixedTickable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass17_0.<InitFixedTickables>b__1
bool Zenject::TickableManager::$$c__DisplayClass17_0::$InitFixedTickables$b__1(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c__DisplayClass17_0::<InitFixedTickables>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitFixedTickables>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.TickableManager/Zenject.<>c
#include "Zenject/TickableManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.TickableManager/Zenject.<>c <>9
Zenject::TickableManager::$$c* Zenject::TickableManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::TickableManager::$$c*>("Zenject", "TickableManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.TickableManager/Zenject.<>c <>9
void Zenject::TickableManager::$$c::_set_$$9(Zenject::TickableManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__17_0
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Type*>* Zenject::TickableManager::$$c::_get_$$9__17_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_get_$$9__17_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Type*>*>("Zenject", "TickableManager/<>c", "<>9__17_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__17_0
void Zenject::TickableManager::$$c::_set_$$9__17_0(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Type*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_set_$$9__17_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__17_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__17_2
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>* Zenject::TickableManager::$$c::_get_$$9__17_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_get_$$9__17_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>*>("Zenject", "TickableManager/<>c", "<>9__17_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__17_2
void Zenject::TickableManager::$$c::_set_$$9__17_2(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_set_$$9__17_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__17_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__18_0
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Type*>* Zenject::TickableManager::$$c::_get_$$9__18_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_get_$$9__18_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Type*>*>("Zenject", "TickableManager/<>c", "<>9__18_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__18_0
void Zenject::TickableManager::$$c::_set_$$9__18_0(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Type*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_set_$$9__18_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__18_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__18_2
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>* Zenject::TickableManager::$$c::_get_$$9__18_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_get_$$9__18_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>*>("Zenject", "TickableManager/<>c", "<>9__18_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__18_2
void Zenject::TickableManager::$$c::_set_$$9__18_2(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_set_$$9__18_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__18_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__19_0
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Type*>* Zenject::TickableManager::$$c::_get_$$9__19_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_get_$$9__19_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Type*>*>("Zenject", "TickableManager/<>c", "<>9__19_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__19_0
void Zenject::TickableManager::$$c::_set_$$9__19_0(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, System::Type*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_set_$$9__19_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__19_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__19_2
System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>* Zenject::TickableManager::$$c::_get_$$9__19_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_get_$$9__19_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>*>("Zenject", "TickableManager/<>c", "<>9__19_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__19_2
void Zenject::TickableManager::$$c::_set_$$9__19_2(System::Func_2<ModestTree::Util::ValuePair_2<System::Type*, int>*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::_set_$$9__19_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__19_2", value)));
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c..cctor
void Zenject::TickableManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitFixedTickables>b__17_0
System::Type* Zenject::TickableManager::$$c::$InitFixedTickables$b__17_0(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::<InitFixedTickables>b__17_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitFixedTickables>b__17_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitFixedTickables>b__17_2
int Zenject::TickableManager::$$c::$InitFixedTickables$b__17_2(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::<InitFixedTickables>b__17_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitFixedTickables>b__17_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitTickables>b__18_0
System::Type* Zenject::TickableManager::$$c::$InitTickables$b__18_0(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::<InitTickables>b__18_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitTickables>b__18_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitTickables>b__18_2
int Zenject::TickableManager::$$c::$InitTickables$b__18_2(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::<InitTickables>b__18_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitTickables>b__18_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitLateTickables>b__19_0
System::Type* Zenject::TickableManager::$$c::$InitLateTickables$b__19_0(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::<InitLateTickables>b__19_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitLateTickables>b__19_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitLateTickables>b__19_2
int Zenject::TickableManager::$$c::$InitLateTickables$b__19_2(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c::<InitLateTickables>b__19_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitLateTickables>b__19_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass18_0
#include "Zenject/TickableManager_--c__DisplayClass18_0.hpp"
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.ITickable tickable
Zenject::ITickable*& Zenject::TickableManager::$$c__DisplayClass18_0::dyn_tickable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c__DisplayClass18_0::dyn_tickable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tickable"))->offset;
  return *reinterpret_cast<Zenject::ITickable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass18_0.<InitTickables>b__1
bool Zenject::TickableManager::$$c__DisplayClass18_0::$InitTickables$b__1(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c__DisplayClass18_0::<InitTickables>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitTickables>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass19_0
#include "Zenject/TickableManager_--c__DisplayClass19_0.hpp"
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.ILateTickable tickable
Zenject::ILateTickable*& Zenject::TickableManager::$$c__DisplayClass19_0::dyn_tickable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c__DisplayClass19_0::dyn_tickable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tickable"))->offset;
  return *reinterpret_cast<Zenject::ILateTickable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass19_0.<InitLateTickables>b__1
bool Zenject::TickableManager::$$c__DisplayClass19_0::$InitLateTickables$b__1(ModestTree::Util::ValuePair_2<System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TickableManager::$$c__DisplayClass19_0::<InitLateTickables>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitLateTickables>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ActionInstaller
#include "Zenject/ActionInstaller.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Action`1<Zenject.DiContainer> _installMethod
System::Action_1<Zenject::DiContainer*>*& Zenject::ActionInstaller::dyn__installMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ActionInstaller::dyn__installMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installMethod"))->offset;
  return *reinterpret_cast<System::Action_1<Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ActionInstaller.InstallBindings
void Zenject::ActionInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ActionInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DefaultGameObjectParentInstaller
#include "Zenject/DefaultGameObjectParentInstaller.hpp"
// Including type: Zenject.DefaultGameObjectParentInstaller/Zenject.DefaultParentObjectDestroyer
#include "Zenject/DefaultGameObjectParentInstaller_DefaultParentObjectDestroyer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.String _name
::Il2CppString*& Zenject::DefaultGameObjectParentInstaller::dyn__name() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DefaultGameObjectParentInstaller::dyn__name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_name"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DefaultGameObjectParentInstaller.InstallBindings
void Zenject::DefaultGameObjectParentInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DefaultGameObjectParentInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DefaultGameObjectParentInstaller/Zenject.DefaultParentObjectDestroyer
#include "Zenject/DefaultGameObjectParentInstaller_DefaultParentObjectDestroyer.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.GameObject _gameObject
UnityEngine::GameObject*& Zenject::DefaultGameObjectParentInstaller::DefaultParentObjectDestroyer::dyn__gameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DefaultGameObjectParentInstaller::DefaultParentObjectDestroyer::dyn__gameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameObject"))->offset;
  return *reinterpret_cast<UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DefaultGameObjectParentInstaller/Zenject.DefaultParentObjectDestroyer.Dispose
void Zenject::DefaultGameObjectParentInstaller::DefaultParentObjectDestroyer::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DefaultGameObjectParentInstaller::DefaultParentObjectDestroyer::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DisposeBlock
#include "Zenject/DisposeBlock.hpp"
// Including type: Zenject.StaticMemoryPool`1
#include "Zenject/StaticMemoryPool_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: Zenject.IDespawnableMemoryPool`1
#include "Zenject/IDespawnableMemoryPool_1.hpp"
// Including type: Zenject.IMemoryPool`1
#include "Zenject/IMemoryPool_1.hpp"
// Including type: Zenject.IMemoryPool`2
#include "Zenject/IMemoryPool_2.hpp"
// Including type: Zenject.IMemoryPool`3
#include "Zenject/IMemoryPool_3.hpp"
// Including type: Zenject.IMemoryPool`4
#include "Zenject/IMemoryPool_4.hpp"
// Including type: Zenject.IMemoryPool`5
#include "Zenject/IMemoryPool_5.hpp"
// Including type: Zenject.IMemoryPool`6
#include "Zenject/IMemoryPool_6.hpp"
// Including type: Zenject.IMemoryPool`7
#include "Zenject/IMemoryPool_7.hpp"
// Including type: Zenject.IMemoryPool`8
#include "Zenject/IMemoryPool_8.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly Zenject.StaticMemoryPool`1<Zenject.DisposeBlock> _pool
Zenject::StaticMemoryPool_1<Zenject::DisposeBlock*>* Zenject::DisposeBlock::_get__pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::_get__pool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::StaticMemoryPool_1<Zenject::DisposeBlock*>*>("Zenject", "DisposeBlock", "_pool"));
}
// Autogenerated static field setter
// Set static field: static private readonly Zenject.StaticMemoryPool`1<Zenject.DisposeBlock> _pool
void Zenject::DisposeBlock::_set__pool(Zenject::StaticMemoryPool_1<Zenject::DisposeBlock*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::_set__pool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "DisposeBlock", "_pool", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.IDisposable> _disposables
System::Collections::Generic::List_1<System::IDisposable*>*& Zenject::DisposeBlock::dyn__disposables() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::dyn__disposables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposables"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<System::IDisposable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.DisposeBlock/Zenject.SpawnedObjectPoolPair> _objectPoolPairs
System::Collections::Generic::List_1<Zenject::DisposeBlock::SpawnedObjectPoolPair>*& Zenject::DisposeBlock::dyn__objectPoolPairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::dyn__objectPoolPairs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_objectPoolPairs"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<Zenject::DisposeBlock::SpawnedObjectPoolPair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposeBlock..cctor
void Zenject::DisposeBlock::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposeBlock", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.DisposeBlock.OnSpawned
void Zenject::DisposeBlock::OnSpawned(Zenject::DisposeBlock* that) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::OnSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposeBlock", "OnSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(that)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, that);
}
// Autogenerated method: Zenject.DisposeBlock.OnDespawned
void Zenject::DisposeBlock::OnDespawned(Zenject::DisposeBlock* that) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::OnDespawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposeBlock", "OnDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(that)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, that);
}
// Autogenerated method: Zenject.DisposeBlock.LazyInitializeDisposableList
void Zenject::DisposeBlock::LazyInitializeDisposableList() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::LazyInitializeDisposableList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInitializeDisposableList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.DisposeBlock.Add
void Zenject::DisposeBlock::Add(System::IDisposable* disposable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, disposable);
}
// Autogenerated method: Zenject.DisposeBlock.Remove
void Zenject::DisposeBlock::Remove(System::IDisposable* disposable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, disposable);
}
// Autogenerated method: Zenject.DisposeBlock.Spawn
Zenject::DisposeBlock* Zenject::DisposeBlock::Spawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::Spawn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposeBlock", "Spawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DisposeBlock*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.DisposeBlock.Dispose
void Zenject::DisposeBlock::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DisposeBlock::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ExecutionOrderInstaller
#include "Zenject/ExecutionOrderInstaller.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Type> _typeOrder
System::Collections::Generic::List_1<System::Type*>*& Zenject::ExecutionOrderInstaller::dyn__typeOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ExecutionOrderInstaller::dyn__typeOrder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_typeOrder"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<System::Type*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ExecutionOrderInstaller.InstallBindings
void Zenject::ExecutionOrderInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ExecutionOrderInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ProfileBlock
#include "Zenject/ProfileBlock.hpp"
// Including type: System.Text.RegularExpressions.Regex
#include "System/Text/RegularExpressions/Regex.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.RegularExpressions.Regex <ProfilePattern>k__BackingField
System::Text::RegularExpressions::Regex* Zenject::ProfileBlock::_get_$ProfilePattern$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::_get_$ProfilePattern$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Text::RegularExpressions::Regex*>("Zenject", "ProfileBlock", "<ProfilePattern>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Text.RegularExpressions.Regex <ProfilePattern>k__BackingField
void Zenject::ProfileBlock::_set_$ProfilePattern$k__BackingField(System::Text::RegularExpressions::Regex* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::_set_$ProfilePattern$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ProfileBlock", "<ProfilePattern>k__BackingField", value));
}
// Autogenerated method: Zenject.ProfileBlock.get_ProfilePattern
System::Text::RegularExpressions::Regex* Zenject::ProfileBlock::get_ProfilePattern() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::get_ProfilePattern");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProfileBlock", "get_ProfilePattern", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::RegularExpressions::Regex*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ProfileBlock.set_ProfilePattern
void Zenject::ProfileBlock::set_ProfilePattern(System::Text::RegularExpressions::Regex* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::set_ProfilePattern");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProfileBlock", "set_ProfilePattern", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Zenject.ProfileBlock.Start
Zenject::ProfileBlock* Zenject::ProfileBlock::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProfileBlock", "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ProfileBlock*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ProfileBlock.Start
Zenject::ProfileBlock* Zenject::ProfileBlock::Start(::Il2CppString* sampleNameFormat, ::Il2CppObject* obj1, ::Il2CppObject* obj2) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProfileBlock", "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sampleNameFormat), ::il2cpp_utils::ExtractType(obj1), ::il2cpp_utils::ExtractType(obj2)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ProfileBlock*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sampleNameFormat, obj1, obj2);
}
// Autogenerated method: Zenject.ProfileBlock.Start
Zenject::ProfileBlock* Zenject::ProfileBlock::Start(::Il2CppString* sampleNameFormat, ::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProfileBlock", "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sampleNameFormat), ::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ProfileBlock*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sampleNameFormat, obj);
}
// Autogenerated method: Zenject.ProfileBlock.Start
Zenject::ProfileBlock* Zenject::ProfileBlock::Start(::Il2CppString* sampleName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProfileBlock", "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sampleName)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ProfileBlock*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sampleName);
}
// Autogenerated method: Zenject.ProfileBlock.Dispose
void Zenject::ProfileBlock::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenTypeInfoGetter
#include "Zenject/ZenTypeInfoGetter.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ZenTypeInfoGetter.Invoke
Zenject::InjectTypeInfo* Zenject::ZenTypeInfoGetter::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenTypeInfoGetter::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.ZenTypeInfoGetter.BeginInvoke
System::IAsyncResult* Zenject::ZenTypeInfoGetter::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenTypeInfoGetter::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(___instance_arg, ___internal__method, callback, object);
}
// Autogenerated method: Zenject.ZenTypeInfoGetter.EndInvoke
Zenject::InjectTypeInfo* Zenject::ZenTypeInfoGetter::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenTypeInfoGetter::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo*, false>(___instance_arg, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ReflectionBakingCoverageModes
#include "Zenject/ReflectionBakingCoverageModes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.ReflectionBakingCoverageModes FallbackToDirectReflection
Zenject::ReflectionBakingCoverageModes Zenject::ReflectionBakingCoverageModes::_get_FallbackToDirectReflection() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ReflectionBakingCoverageModes::_get_FallbackToDirectReflection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ReflectionBakingCoverageModes>("Zenject", "ReflectionBakingCoverageModes", "FallbackToDirectReflection"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ReflectionBakingCoverageModes FallbackToDirectReflection
void Zenject::ReflectionBakingCoverageModes::_set_FallbackToDirectReflection(Zenject::ReflectionBakingCoverageModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ReflectionBakingCoverageModes::_set_FallbackToDirectReflection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ReflectionBakingCoverageModes", "FallbackToDirectReflection", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ReflectionBakingCoverageModes NoCheckAssumeFullCoverage
Zenject::ReflectionBakingCoverageModes Zenject::ReflectionBakingCoverageModes::_get_NoCheckAssumeFullCoverage() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ReflectionBakingCoverageModes::_get_NoCheckAssumeFullCoverage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ReflectionBakingCoverageModes>("Zenject", "ReflectionBakingCoverageModes", "NoCheckAssumeFullCoverage"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ReflectionBakingCoverageModes NoCheckAssumeFullCoverage
void Zenject::ReflectionBakingCoverageModes::_set_NoCheckAssumeFullCoverage(Zenject::ReflectionBakingCoverageModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ReflectionBakingCoverageModes::_set_NoCheckAssumeFullCoverage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ReflectionBakingCoverageModes", "NoCheckAssumeFullCoverage", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ReflectionBakingCoverageModes FallbackToDirectReflectionWithWarning
Zenject::ReflectionBakingCoverageModes Zenject::ReflectionBakingCoverageModes::_get_FallbackToDirectReflectionWithWarning() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ReflectionBakingCoverageModes::_get_FallbackToDirectReflectionWithWarning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ReflectionBakingCoverageModes>("Zenject", "ReflectionBakingCoverageModes", "FallbackToDirectReflectionWithWarning"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ReflectionBakingCoverageModes FallbackToDirectReflectionWithWarning
void Zenject::ReflectionBakingCoverageModes::_set_FallbackToDirectReflectionWithWarning(Zenject::ReflectionBakingCoverageModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ReflectionBakingCoverageModes::_set_FallbackToDirectReflectionWithWarning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ReflectionBakingCoverageModes", "FallbackToDirectReflectionWithWarning", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Zenject::ReflectionBakingCoverageModes::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ReflectionBakingCoverageModes::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TypeAnalyzer
#include "Zenject/TypeAnalyzer.hpp"
// Including type: Zenject.TypeAnalyzer/Zenject.<>c__DisplayClass23_0
#include "Zenject/TypeAnalyzer_--c__DisplayClass23_0.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Type,Zenject.InjectTypeInfo> _typeInfo
System::Collections::Generic::Dictionary_2<System::Type*, Zenject::InjectTypeInfo*>* Zenject::TypeAnalyzer::_get__typeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_get__typeInfo");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, Zenject::InjectTypeInfo*>*>("Zenject", "TypeAnalyzer", "_typeInfo")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Type,Zenject.InjectTypeInfo> _typeInfo
void Zenject::TypeAnalyzer::_set__typeInfo(System::Collections::Generic::Dictionary_2<System::Type*, Zenject::InjectTypeInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_set__typeInfo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "TypeAnalyzer", "_typeInfo", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _allowDuringValidation
System::Collections::Generic::Dictionary_2<System::Type*, bool>* Zenject::TypeAnalyzer::_get__allowDuringValidation() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_get__allowDuringValidation");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, bool>*>("Zenject", "TypeAnalyzer", "_allowDuringValidation")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _allowDuringValidation
void Zenject::TypeAnalyzer::_set__allowDuringValidation(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_set__allowDuringValidation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "TypeAnalyzer", "_allowDuringValidation", value));
}
// Autogenerated static field getter
// Get static field: static public System.String ReflectionBakingGetInjectInfoMethodName
::Il2CppString* Zenject::TypeAnalyzer::_get_ReflectionBakingGetInjectInfoMethodName() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_get_ReflectionBakingGetInjectInfoMethodName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Zenject", "TypeAnalyzer", "ReflectionBakingGetInjectInfoMethodName"));
}
// Autogenerated static field setter
// Set static field: static public System.String ReflectionBakingGetInjectInfoMethodName
void Zenject::TypeAnalyzer::_set_ReflectionBakingGetInjectInfoMethodName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_set_ReflectionBakingGetInjectInfoMethodName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "TypeAnalyzer", "ReflectionBakingGetInjectInfoMethodName", value));
}
// Autogenerated static field getter
// Get static field: static public System.String ReflectionBakingFactoryMethodName
::Il2CppString* Zenject::TypeAnalyzer::_get_ReflectionBakingFactoryMethodName() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_get_ReflectionBakingFactoryMethodName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Zenject", "TypeAnalyzer", "ReflectionBakingFactoryMethodName"));
}
// Autogenerated static field setter
// Set static field: static public System.String ReflectionBakingFactoryMethodName
void Zenject::TypeAnalyzer::_set_ReflectionBakingFactoryMethodName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_set_ReflectionBakingFactoryMethodName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "TypeAnalyzer", "ReflectionBakingFactoryMethodName", value));
}
// Autogenerated static field getter
// Get static field: static public System.String ReflectionBakingInjectMethodPrefix
::Il2CppString* Zenject::TypeAnalyzer::_get_ReflectionBakingInjectMethodPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_get_ReflectionBakingInjectMethodPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Zenject", "TypeAnalyzer", "ReflectionBakingInjectMethodPrefix"));
}
// Autogenerated static field setter
// Set static field: static public System.String ReflectionBakingInjectMethodPrefix
void Zenject::TypeAnalyzer::_set_ReflectionBakingInjectMethodPrefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_set_ReflectionBakingInjectMethodPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "TypeAnalyzer", "ReflectionBakingInjectMethodPrefix", value));
}
// Autogenerated static field getter
// Get static field: static public System.String ReflectionBakingFieldSetterPrefix
::Il2CppString* Zenject::TypeAnalyzer::_get_ReflectionBakingFieldSetterPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_get_ReflectionBakingFieldSetterPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Zenject", "TypeAnalyzer", "ReflectionBakingFieldSetterPrefix"));
}
// Autogenerated static field setter
// Set static field: static public System.String ReflectionBakingFieldSetterPrefix
void Zenject::TypeAnalyzer::_set_ReflectionBakingFieldSetterPrefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_set_ReflectionBakingFieldSetterPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "TypeAnalyzer", "ReflectionBakingFieldSetterPrefix", value));
}
// Autogenerated static field getter
// Get static field: static public System.String ReflectionBakingPropertySetterPrefix
::Il2CppString* Zenject::TypeAnalyzer::_get_ReflectionBakingPropertySetterPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_get_ReflectionBakingPropertySetterPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Zenject", "TypeAnalyzer", "ReflectionBakingPropertySetterPrefix"));
}
// Autogenerated static field setter
// Set static field: static public System.String ReflectionBakingPropertySetterPrefix
void Zenject::TypeAnalyzer::_set_ReflectionBakingPropertySetterPrefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_set_ReflectionBakingPropertySetterPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "TypeAnalyzer", "ReflectionBakingPropertySetterPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private Zenject.ReflectionBakingCoverageModes <ReflectionBakingCoverageMode>k__BackingField
Zenject::ReflectionBakingCoverageModes Zenject::TypeAnalyzer::_get_$ReflectionBakingCoverageMode$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_get_$ReflectionBakingCoverageMode$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::ReflectionBakingCoverageModes>("Zenject", "TypeAnalyzer", "<ReflectionBakingCoverageMode>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private Zenject.ReflectionBakingCoverageModes <ReflectionBakingCoverageMode>k__BackingField
void Zenject::TypeAnalyzer::_set_$ReflectionBakingCoverageMode$k__BackingField(Zenject::ReflectionBakingCoverageModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::_set_$ReflectionBakingCoverageMode$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "TypeAnalyzer", "<ReflectionBakingCoverageMode>k__BackingField", value));
}
// Autogenerated method: Zenject.TypeAnalyzer.get_ReflectionBakingCoverageMode
Zenject::ReflectionBakingCoverageModes Zenject::TypeAnalyzer::get_ReflectionBakingCoverageMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::get_ReflectionBakingCoverageMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "get_ReflectionBakingCoverageMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ReflectionBakingCoverageModes, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.TypeAnalyzer.set_ReflectionBakingCoverageMode
void Zenject::TypeAnalyzer::set_ReflectionBakingCoverageMode(Zenject::ReflectionBakingCoverageModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::set_ReflectionBakingCoverageMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "set_ReflectionBakingCoverageMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Zenject.TypeAnalyzer..cctor
void Zenject::TypeAnalyzer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.TypeAnalyzer.ShouldAllowDuringValidation
bool Zenject::TypeAnalyzer::ShouldAllowDuringValidation(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::ShouldAllowDuringValidation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "ShouldAllowDuringValidation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.TypeAnalyzer.ShouldAllowDuringValidationInternal
bool Zenject::TypeAnalyzer::ShouldAllowDuringValidationInternal(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::ShouldAllowDuringValidationInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "ShouldAllowDuringValidationInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.TypeAnalyzer.HasInfo
bool Zenject::TypeAnalyzer::HasInfo(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::HasInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "HasInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.TypeAnalyzer.GetInfo
Zenject::InjectTypeInfo* Zenject::TypeAnalyzer::GetInfo(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::GetInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "GetInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.TypeAnalyzer.TryGetInfo
Zenject::InjectTypeInfo* Zenject::TypeAnalyzer::TryGetInfo(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::TryGetInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "TryGetInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.TypeAnalyzer.GetInfoInternal
Zenject::InjectTypeInfo* Zenject::TypeAnalyzer::GetInfoInternal(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::GetInfoInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "GetInfoInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.TypeAnalyzer.ShouldSkipTypeAnalysis
bool Zenject::TypeAnalyzer::ShouldSkipTypeAnalysis(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::ShouldSkipTypeAnalysis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "ShouldSkipTypeAnalysis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.TypeAnalyzer.IsStaticType
bool Zenject::TypeAnalyzer::IsStaticType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::IsStaticType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "IsStaticType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.TypeAnalyzer.CreateTypeInfoFromReflection
Zenject::InjectTypeInfo* Zenject::TypeAnalyzer::CreateTypeInfoFromReflection(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::CreateTypeInfoFromReflection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TypeAnalyzer", "CreateTypeInfoFromReflection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.TypeAnalyzer/Zenject.<>c__DisplayClass23_0
#include "Zenject/TypeAnalyzer_--c__DisplayClass23_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMemberInfo
#include "Zenject/InjectTypeInfo_InjectMemberInfo.hpp"
// Including type: Zenject.Internal.ReflectionTypeInfo/Zenject.Internal.InjectFieldInfo
#include "Zenject/Internal/ReflectionTypeInfo_InjectFieldInfo.hpp"
// Including type: Zenject.Internal.ReflectionTypeInfo/Zenject.Internal.InjectPropertyInfo
#include "Zenject/Internal/ReflectionTypeInfo_InjectPropertyInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type type
System::Type*& Zenject::TypeAnalyzer::$$c__DisplayClass23_0::dyn_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::$$c__DisplayClass23_0::dyn_type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "type"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TypeAnalyzer/Zenject.<>c__DisplayClass23_0.<CreateTypeInfoFromReflection>b__0
Zenject::InjectTypeInfo::InjectMemberInfo* Zenject::TypeAnalyzer::$$c__DisplayClass23_0::$CreateTypeInfoFromReflection$b__0(Zenject::Internal::ReflectionTypeInfo::InjectFieldInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::$$c__DisplayClass23_0::<CreateTypeInfoFromReflection>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateTypeInfoFromReflection>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo::InjectMemberInfo*, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated method: Zenject.TypeAnalyzer/Zenject.<>c__DisplayClass23_0.<CreateTypeInfoFromReflection>b__1
Zenject::InjectTypeInfo::InjectMemberInfo* Zenject::TypeAnalyzer::$$c__DisplayClass23_0::$CreateTypeInfoFromReflection$b__1(Zenject::Internal::ReflectionTypeInfo::InjectPropertyInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::TypeAnalyzer::$$c__DisplayClass23_0::<CreateTypeInfoFromReflection>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateTypeInfoFromReflection>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo::InjectMemberInfo*, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ValidationUtil
#include "Zenject/ValidationUtil.hpp"
// Including type: Zenject.ValidationUtil/Zenject.<>c
#include "Zenject/ValidationUtil_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ValidationUtil.CreateDefaultArgs
System::Collections::Generic::List_1<Zenject::TypeValuePair>* Zenject::ValidationUtil::CreateDefaultArgs(::Array<System::Type*>* argTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationUtil::CreateDefaultArgs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ValidationUtil", "CreateDefaultArgs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argTypes)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<Zenject::TypeValuePair>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, argTypes);
}
// Creating initializer_list -> params proxy for: System.Collections.Generic.List`1<Zenject.TypeValuePair> CreateDefaultArgs(params System.Type[] argTypes)
System::Collections::Generic::List_1<Zenject::TypeValuePair>* Zenject::ValidationUtil::CreateDefaultArgs(std::initializer_list<System::Type*> argTypes) {
  return Zenject::ValidationUtil::CreateDefaultArgs(::Array<System::Type*>::New(argTypes));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ValidationUtil/Zenject.<>c
#include "Zenject/ValidationUtil_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.ValidationUtil/Zenject.<>c <>9
Zenject::ValidationUtil::$$c* Zenject::ValidationUtil::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationUtil::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::ValidationUtil::$$c*>("Zenject", "ValidationUtil/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.ValidationUtil/Zenject.<>c <>9
void Zenject::ValidationUtil::$$c::_set_$$9(Zenject::ValidationUtil::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationUtil::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ValidationUtil/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,Zenject.TypeValuePair> <>9__0_0
System::Func_2<System::Type*, Zenject::TypeValuePair>* Zenject::ValidationUtil::$$c::_get_$$9__0_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationUtil::$$c::_get_$$9__0_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, Zenject::TypeValuePair>*>("Zenject", "ValidationUtil/<>c", "<>9__0_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,Zenject.TypeValuePair> <>9__0_0
void Zenject::ValidationUtil::$$c::_set_$$9__0_0(System::Func_2<System::Type*, Zenject::TypeValuePair>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationUtil::$$c::_set_$$9__0_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ValidationUtil/<>c", "<>9__0_0", value)));
}
// Autogenerated method: Zenject.ValidationUtil/Zenject.<>c..cctor
void Zenject::ValidationUtil::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationUtil::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ValidationUtil/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ValidationUtil/Zenject.<>c.<CreateDefaultArgs>b__0_0
Zenject::TypeValuePair Zenject::ValidationUtil::$$c::$CreateDefaultArgs$b__0_0(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationUtil::$$c::<CreateDefaultArgs>b__0_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateDefaultArgs>b__0_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::TypeValuePair, false>(___instance_arg, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ZenAutoInjecter
#include "Zenject/ZenAutoInjecter.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.ZenAutoInjecter/Zenject.ContainerSources _containerSource
Zenject::ZenAutoInjecter::ContainerSources& Zenject::ZenAutoInjecter::dyn__containerSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::dyn__containerSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_containerSource"))->offset;
  return *reinterpret_cast<Zenject::ZenAutoInjecter::ContainerSources*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInjected
bool& Zenject::ZenAutoInjecter::dyn__hasInjected() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::dyn__hasInjected");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInjected"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ZenAutoInjecter.get_ContainerSource
Zenject::ZenAutoInjecter::ContainerSources Zenject::ZenAutoInjecter::get_ContainerSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::get_ContainerSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContainerSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenAutoInjecter::ContainerSources, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.ZenAutoInjecter.set_ContainerSource
void Zenject::ZenAutoInjecter::set_ContainerSource(Zenject::ZenAutoInjecter::ContainerSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::set_ContainerSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ContainerSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: Zenject.ZenAutoInjecter.Construct
void Zenject::ZenAutoInjecter::Construct() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::Construct");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Construct", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.ZenAutoInjecter.Awake
void Zenject::ZenAutoInjecter::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.ZenAutoInjecter.LookupContainer
Zenject::DiContainer* Zenject::ZenAutoInjecter::LookupContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::LookupContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.ZenAutoInjecter.GetContainerForCurrentScene
Zenject::DiContainer* Zenject::ZenAutoInjecter::GetContainerForCurrentScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::GetContainerForCurrentScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetContainerForCurrentScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ZenAutoInjecter/Zenject.ContainerSources
#include "Zenject/ZenAutoInjecter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.ZenAutoInjecter/Zenject.ContainerSources SceneContext
Zenject::ZenAutoInjecter::ContainerSources Zenject::ZenAutoInjecter::ContainerSources::_get_SceneContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::ContainerSources::_get_SceneContext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ZenAutoInjecter::ContainerSources>("Zenject", "ZenAutoInjecter/ContainerSources", "SceneContext"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ZenAutoInjecter/Zenject.ContainerSources SceneContext
void Zenject::ZenAutoInjecter::ContainerSources::_set_SceneContext(Zenject::ZenAutoInjecter::ContainerSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::ContainerSources::_set_SceneContext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ZenAutoInjecter/ContainerSources", "SceneContext", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ZenAutoInjecter/Zenject.ContainerSources ProjectContext
Zenject::ZenAutoInjecter::ContainerSources Zenject::ZenAutoInjecter::ContainerSources::_get_ProjectContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::ContainerSources::_get_ProjectContext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ZenAutoInjecter::ContainerSources>("Zenject", "ZenAutoInjecter/ContainerSources", "ProjectContext"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ZenAutoInjecter/Zenject.ContainerSources ProjectContext
void Zenject::ZenAutoInjecter::ContainerSources::_set_ProjectContext(Zenject::ZenAutoInjecter::ContainerSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::ContainerSources::_set_ProjectContext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ZenAutoInjecter/ContainerSources", "ProjectContext", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ZenAutoInjecter/Zenject.ContainerSources SearchHierarchy
Zenject::ZenAutoInjecter::ContainerSources Zenject::ZenAutoInjecter::ContainerSources::_get_SearchHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::ContainerSources::_get_SearchHierarchy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ZenAutoInjecter::ContainerSources>("Zenject", "ZenAutoInjecter/ContainerSources", "SearchHierarchy"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ZenAutoInjecter/Zenject.ContainerSources SearchHierarchy
void Zenject::ZenAutoInjecter::ContainerSources::_set_SearchHierarchy(Zenject::ZenAutoInjecter::ContainerSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::ContainerSources::_set_SearchHierarchy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ZenAutoInjecter/ContainerSources", "SearchHierarchy", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Zenject::ZenAutoInjecter::ContainerSources::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenAutoInjecter::ContainerSources::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenjectException
#include "Zenject/ZenjectException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.LoadSceneRelationship
#include "Zenject/LoadSceneRelationship.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.LoadSceneRelationship None
Zenject::LoadSceneRelationship Zenject::LoadSceneRelationship::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LoadSceneRelationship::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::LoadSceneRelationship>("Zenject", "LoadSceneRelationship", "None"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.LoadSceneRelationship None
void Zenject::LoadSceneRelationship::_set_None(Zenject::LoadSceneRelationship value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LoadSceneRelationship::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "LoadSceneRelationship", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.LoadSceneRelationship Child
Zenject::LoadSceneRelationship Zenject::LoadSceneRelationship::_get_Child() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LoadSceneRelationship::_get_Child");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::LoadSceneRelationship>("Zenject", "LoadSceneRelationship", "Child"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.LoadSceneRelationship Child
void Zenject::LoadSceneRelationship::_set_Child(Zenject::LoadSceneRelationship value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LoadSceneRelationship::_set_Child");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "LoadSceneRelationship", "Child", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.LoadSceneRelationship Sibling
Zenject::LoadSceneRelationship Zenject::LoadSceneRelationship::_get_Sibling() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LoadSceneRelationship::_get_Sibling");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::LoadSceneRelationship>("Zenject", "LoadSceneRelationship", "Sibling"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.LoadSceneRelationship Sibling
void Zenject::LoadSceneRelationship::_set_Sibling(Zenject::LoadSceneRelationship value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LoadSceneRelationship::_set_Sibling");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "LoadSceneRelationship", "Sibling", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Zenject::LoadSceneRelationship::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::LoadSceneRelationship::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ZenjectSceneLoader
#include "Zenject/ZenjectSceneLoader.hpp"
// Including type: Zenject.ProjectKernel
#include "Zenject/ProjectKernel.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.SceneContext
#include "Zenject/SceneContext.hpp"
// Including type: UnityEngine.SceneManagement.LoadSceneMode
#include "UnityEngine/SceneManagement/LoadSceneMode.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.LoadSceneRelationship
#include "Zenject/LoadSceneRelationship.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.ProjectKernel _projectKernel
Zenject::ProjectKernel*& Zenject::ZenjectSceneLoader::dyn__projectKernel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::dyn__projectKernel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_projectKernel"))->offset;
  return *reinterpret_cast<Zenject::ProjectKernel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _sceneContainer
Zenject::DiContainer*& Zenject::ZenjectSceneLoader::dyn__sceneContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::dyn__sceneContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneContainer"))->offset;
  return *reinterpret_cast<Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadScene
void Zenject::ZenjectSceneLoader::LoadScene(::Il2CppString* sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sceneName);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadScene
void Zenject::ZenjectSceneLoader::LoadScene(::Il2CppString* sceneName, UnityEngine::SceneManagement::LoadSceneMode loadMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName), ::il2cpp_utils::ExtractType(loadMode)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sceneName, loadMode);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadScene
void Zenject::ZenjectSceneLoader::LoadScene(::Il2CppString* sceneName, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sceneName, loadMode, extraBindings);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadScene
void Zenject::ZenjectSceneLoader::LoadScene(::Il2CppString* sceneName, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings, Zenject::LoadSceneRelationship containerMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings), ::il2cpp_utils::ExtractType(containerMode)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sceneName, loadMode, extraBindings, containerMode);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadScene
void Zenject::ZenjectSceneLoader::LoadScene(::Il2CppString* sceneName, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings, Zenject::LoadSceneRelationship containerMode, System::Action_1<Zenject::DiContainer*>* extraBindingsLate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings), ::il2cpp_utils::ExtractType(containerMode), ::il2cpp_utils::ExtractType(extraBindingsLate)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sceneName, loadMode, extraBindings, containerMode, extraBindingsLate);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadSceneAsync
UnityEngine::AsyncOperation* Zenject::ZenjectSceneLoader::LoadSceneAsync(::Il2CppString* sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadSceneAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(___instance_arg, ___internal__method, sceneName);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadSceneAsync
UnityEngine::AsyncOperation* Zenject::ZenjectSceneLoader::LoadSceneAsync(::Il2CppString* sceneName, UnityEngine::SceneManagement::LoadSceneMode loadMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadSceneAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName), ::il2cpp_utils::ExtractType(loadMode)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(___instance_arg, ___internal__method, sceneName, loadMode);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadSceneAsync
UnityEngine::AsyncOperation* Zenject::ZenjectSceneLoader::LoadSceneAsync(::Il2CppString* sceneName, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadSceneAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(___instance_arg, ___internal__method, sceneName, loadMode, extraBindings);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadSceneAsync
UnityEngine::AsyncOperation* Zenject::ZenjectSceneLoader::LoadSceneAsync(::Il2CppString* sceneName, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings, Zenject::LoadSceneRelationship containerMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadSceneAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings), ::il2cpp_utils::ExtractType(containerMode)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(___instance_arg, ___internal__method, sceneName, loadMode, extraBindings, containerMode);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadSceneAsync
UnityEngine::AsyncOperation* Zenject::ZenjectSceneLoader::LoadSceneAsync(::Il2CppString* sceneName, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindingsEarly, System::Action_1<Zenject::DiContainer*>* extraBindings, Zenject::LoadSceneRelationship containerMode, System::Action_1<Zenject::DiContainer*>* extraBindingsLate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadSceneAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindingsEarly), ::il2cpp_utils::ExtractType(extraBindings), ::il2cpp_utils::ExtractType(containerMode), ::il2cpp_utils::ExtractType(extraBindingsLate)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(___instance_arg, ___internal__method, sceneName, loadMode, extraBindingsEarly, extraBindings, containerMode, extraBindingsLate);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.PrepareForLoadScene
void Zenject::ZenjectSceneLoader::PrepareForLoadScene(UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindingsEarly, System::Action_1<Zenject::DiContainer*>* extraBindings, System::Action_1<Zenject::DiContainer*>* extraBindingsLate, Zenject::LoadSceneRelationship containerMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::PrepareForLoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepareForLoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindingsEarly), ::il2cpp_utils::ExtractType(extraBindings), ::il2cpp_utils::ExtractType(extraBindingsLate), ::il2cpp_utils::ExtractType(containerMode)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, loadMode, extraBindingsEarly, extraBindings, extraBindingsLate, containerMode);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadScene
void Zenject::ZenjectSceneLoader::LoadScene(int sceneIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sceneIndex);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadScene
void Zenject::ZenjectSceneLoader::LoadScene(int sceneIndex, UnityEngine::SceneManagement::LoadSceneMode loadMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex), ::il2cpp_utils::ExtractType(loadMode)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sceneIndex, loadMode);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadScene
void Zenject::ZenjectSceneLoader::LoadScene(int sceneIndex, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sceneIndex, loadMode, extraBindings);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadScene
void Zenject::ZenjectSceneLoader::LoadScene(int sceneIndex, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings, Zenject::LoadSceneRelationship containerMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings), ::il2cpp_utils::ExtractType(containerMode)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sceneIndex, loadMode, extraBindings, containerMode);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadScene
void Zenject::ZenjectSceneLoader::LoadScene(int sceneIndex, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings, Zenject::LoadSceneRelationship containerMode, System::Action_1<Zenject::DiContainer*>* extraBindingsLate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings), ::il2cpp_utils::ExtractType(containerMode), ::il2cpp_utils::ExtractType(extraBindingsLate)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sceneIndex, loadMode, extraBindings, containerMode, extraBindingsLate);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadSceneAsync
UnityEngine::AsyncOperation* Zenject::ZenjectSceneLoader::LoadSceneAsync(int sceneIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadSceneAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(___instance_arg, ___internal__method, sceneIndex);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadSceneAsync
UnityEngine::AsyncOperation* Zenject::ZenjectSceneLoader::LoadSceneAsync(int sceneIndex, UnityEngine::SceneManagement::LoadSceneMode loadMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadSceneAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex), ::il2cpp_utils::ExtractType(loadMode)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(___instance_arg, ___internal__method, sceneIndex, loadMode);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadSceneAsync
UnityEngine::AsyncOperation* Zenject::ZenjectSceneLoader::LoadSceneAsync(int sceneIndex, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadSceneAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(___instance_arg, ___internal__method, sceneIndex, loadMode, extraBindings);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadSceneAsync
UnityEngine::AsyncOperation* Zenject::ZenjectSceneLoader::LoadSceneAsync(int sceneIndex, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings, Zenject::LoadSceneRelationship containerMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadSceneAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings), ::il2cpp_utils::ExtractType(containerMode)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(___instance_arg, ___internal__method, sceneIndex, loadMode, extraBindings, containerMode);
}
// Autogenerated method: Zenject.ZenjectSceneLoader.LoadSceneAsync
UnityEngine::AsyncOperation* Zenject::ZenjectSceneLoader::LoadSceneAsync(int sceneIndex, UnityEngine::SceneManagement::LoadSceneMode loadMode, System::Action_1<Zenject::DiContainer*>* extraBindings, Zenject::LoadSceneRelationship containerMode, System::Action_1<Zenject::DiContainer*>* extraBindingsLate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectSceneLoader::LoadSceneAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex), ::il2cpp_utils::ExtractType(loadMode), ::il2cpp_utils::ExtractType(extraBindings), ::il2cpp_utils::ExtractType(containerMode), ::il2cpp_utils::ExtractType(extraBindingsLate)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(___instance_arg, ___internal__method, sceneIndex, loadMode, extraBindings, containerMode, extraBindingsLate);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ZenjectStateMachineBehaviourAutoInjecter
#include "Zenject/ZenjectStateMachineBehaviourAutoInjecter.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.DiContainer _container
Zenject::DiContainer*& Zenject::ZenjectStateMachineBehaviourAutoInjecter::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectStateMachineBehaviourAutoInjecter::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator _animator
UnityEngine::Animator*& Zenject::ZenjectStateMachineBehaviourAutoInjecter::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectStateMachineBehaviourAutoInjecter::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ZenjectStateMachineBehaviourAutoInjecter.Construct
void Zenject::ZenjectStateMachineBehaviourAutoInjecter::Construct(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectStateMachineBehaviourAutoInjecter::Construct");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Construct", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, container);
}
// Autogenerated method: Zenject.ZenjectStateMachineBehaviourAutoInjecter.Start
void Zenject::ZenjectStateMachineBehaviourAutoInjecter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ZenjectStateMachineBehaviourAutoInjecter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IValidatable
#include "Zenject/IValidatable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IValidatable.Validate
void Zenject::IValidatable::Validate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IValidatable::Validate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ValidationMarker
#include "Zenject/ValidationMarker.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <InstantiateFailed>k__BackingField
bool& Zenject::ValidationMarker::dyn_$InstantiateFailed$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationMarker::dyn_$InstantiateFailed$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InstantiateFailed>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <MarkedType>k__BackingField
System::Type*& Zenject::ValidationMarker::dyn_$MarkedType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationMarker::dyn_$MarkedType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MarkedType>k__BackingField"))->offset;
  return *reinterpret_cast<System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ValidationMarker.get_InstantiateFailed
bool Zenject::ValidationMarker::get_InstantiateFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationMarker::get_InstantiateFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InstantiateFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.ValidationMarker.set_InstantiateFailed
void Zenject::ValidationMarker::set_InstantiateFailed(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationMarker::set_InstantiateFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InstantiateFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: Zenject.ValidationMarker.get_MarkedType
System::Type* Zenject::ValidationMarker::get_MarkedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationMarker::get_MarkedType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MarkedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Zenject.ValidationMarker.set_MarkedType
void Zenject::ValidationMarker::set_MarkedType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationMarker::set_MarkedType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MarkedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.Internal.LookupId
#include "Zenject/Internal/LookupId.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IProvider Provider
Zenject::IProvider*& Zenject::Internal::LookupId::dyn_Provider() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::LookupId::dyn_Provider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Provider"))->offset;
  return *reinterpret_cast<Zenject::IProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Zenject.BindingId BindingId
Zenject::BindingId& Zenject::Internal::LookupId::dyn_BindingId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::LookupId::dyn_BindingId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BindingId"))->offset;
  return *reinterpret_cast<Zenject::BindingId*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.Internal.LookupId.GetHashCode
int Zenject::Internal::LookupId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::LookupId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.Internal.SingletonMarkRegistry
#include "Zenject/Internal/SingletonMarkRegistry.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<System.Type> _boundSingletons
System::Collections::Generic::HashSet_1<System::Type*>*& Zenject::Internal::SingletonMarkRegistry::dyn__boundSingletons() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::SingletonMarkRegistry::dyn__boundSingletons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boundSingletons"))->offset;
  return *reinterpret_cast<System::Collections::Generic::HashSet_1<System::Type*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<System.Type> _boundNonSingletons
System::Collections::Generic::HashSet_1<System::Type*>*& Zenject::Internal::SingletonMarkRegistry::dyn__boundNonSingletons() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::SingletonMarkRegistry::dyn__boundNonSingletons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_boundNonSingletons"))->offset;
  return *reinterpret_cast<System::Collections::Generic::HashSet_1<System::Type*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.Internal.SingletonMarkRegistry.MarkNonSingleton
void Zenject::Internal::SingletonMarkRegistry::MarkNonSingleton(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::SingletonMarkRegistry::MarkNonSingleton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkNonSingleton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, type);
}
// Autogenerated method: Zenject.Internal.SingletonMarkRegistry.MarkSingleton
void Zenject::Internal::SingletonMarkRegistry::MarkSingleton(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::SingletonMarkRegistry::MarkSingleton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkSingleton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, type);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.Internal.IDecoratorProvider
#include "Zenject/Internal/IDecoratorProvider.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.Internal.IDecoratorProvider.GetAllInstances
void Zenject::Internal::IDecoratorProvider::GetAllInstances(Zenject::IProvider* provider, Zenject::InjectContext* context, System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::IDecoratorProvider::GetAllInstances");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(buffer)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, provider, context, buffer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.Internal.ReflectionInfoTypeInfoConverter
#include "Zenject/Internal/ReflectionInfoTypeInfoConverter.hpp"
// Including type: Zenject.Internal.ReflectionInfoTypeInfoConverter/Zenject.Internal.<>c__DisplayClass0_0
#include "Zenject/Internal/ReflectionInfoTypeInfoConverter_--c__DisplayClass0_0.hpp"
// Including type: Zenject.Internal.ReflectionInfoTypeInfoConverter/Zenject.Internal.<>c
#include "Zenject/Internal/ReflectionInfoTypeInfoConverter_--c.hpp"
// Including type: Zenject.Internal.ReflectionInfoTypeInfoConverter/Zenject.Internal.<>c__DisplayClass4_0
#include "Zenject/Internal/ReflectionInfoTypeInfoConverter_--c__DisplayClass4_0.hpp"
// Including type: Zenject.Internal.ReflectionInfoTypeInfoConverter/Zenject.Internal.<>c__DisplayClass8_0
#include "Zenject/Internal/ReflectionInfoTypeInfoConverter_--c__DisplayClass8_0.hpp"
// Including type: Zenject.Internal.ReflectionInfoTypeInfoConverter/Zenject.Internal.<>c__DisplayClass8_1
#include "Zenject/Internal/ReflectionInfoTypeInfoConverter_--c__DisplayClass8_1.hpp"
// Including type: Zenject.Internal.ReflectionInfoTypeInfoConverter/Zenject.Internal.<>c__DisplayClass9_0
#include "Zenject/Internal/ReflectionInfoTypeInfoConverter_--c__DisplayClass9_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.ZenFactoryMethod
#include "Zenject/ZenFactoryMethod.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: Zenject.ZenInjectMethod
#include "Zenject/ZenInjectMethod.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: Zenject.ZenMemberSetterMethod
#include "Zenject/ZenMemberSetterMethod.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMethodInfo
#include "Zenject/InjectTypeInfo_InjectMethodInfo.hpp"
// Including type: Zenject.Internal.ReflectionTypeInfo/Zenject.Internal.InjectMethodInfo
#include "Zenject/Internal/ReflectionTypeInfo_InjectMethodInfo.hpp"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectConstructorInfo
#include "Zenject/InjectTypeInfo_InjectConstructorInfo.hpp"
// Including type: Zenject.Internal.ReflectionTypeInfo/Zenject.Internal.InjectConstructorInfo
#include "Zenject/Internal/ReflectionTypeInfo_InjectConstructorInfo.hpp"
// Including type: Zenject.InjectTypeInfo/Zenject.InjectMemberInfo
#include "Zenject/InjectTypeInfo_InjectMemberInfo.hpp"
// Including type: Zenject.Internal.ReflectionTypeInfo/Zenject.Internal.InjectFieldInfo
#include "Zenject/Internal/ReflectionTypeInfo_InjectFieldInfo.hpp"
// Including type: Zenject.Internal.ReflectionTypeInfo/Zenject.Internal.InjectPropertyInfo
#include "Zenject/Internal/ReflectionTypeInfo_InjectPropertyInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.ConvertMethod
Zenject::InjectTypeInfo::InjectMethodInfo* Zenject::Internal::ReflectionInfoTypeInfoConverter::ConvertMethod(Zenject::Internal::ReflectionTypeInfo::InjectMethodInfo* injectMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::ConvertMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "ConvertMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectMethod)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo::InjectMethodInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, injectMethod);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.ConvertConstructor
Zenject::InjectTypeInfo::InjectConstructorInfo* Zenject::Internal::ReflectionInfoTypeInfoConverter::ConvertConstructor(Zenject::Internal::ReflectionTypeInfo::InjectConstructorInfo* injectConstructor, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::ConvertConstructor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "ConvertConstructor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectConstructor), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo::InjectConstructorInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, injectConstructor, type);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.ConvertField
Zenject::InjectTypeInfo::InjectMemberInfo* Zenject::Internal::ReflectionInfoTypeInfoConverter::ConvertField(System::Type* parentType, Zenject::Internal::ReflectionTypeInfo::InjectFieldInfo* injectField) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::ConvertField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "ConvertField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentType), ::il2cpp_utils::ExtractType(injectField)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo::InjectMemberInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, parentType, injectField);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.ConvertProperty
Zenject::InjectTypeInfo::InjectMemberInfo* Zenject::Internal::ReflectionInfoTypeInfoConverter::ConvertProperty(System::Type* parentType, Zenject::Internal::ReflectionTypeInfo::InjectPropertyInfo* injectProperty) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::ConvertProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "ConvertProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentType), ::il2cpp_utils::ExtractType(injectProperty)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectTypeInfo::InjectMemberInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, parentType, injectProperty);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.TryCreateFactoryMethod
Zenject::ZenFactoryMethod* Zenject::Internal::ReflectionInfoTypeInfoConverter::TryCreateFactoryMethod(System::Type* type, Zenject::Internal::ReflectionTypeInfo::InjectConstructorInfo* reflectionInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::TryCreateFactoryMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "TryCreateFactoryMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(reflectionInfo)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenFactoryMethod*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type, reflectionInfo);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.TryCreateFactoryMethodCompiledLambdaExpression
Zenject::ZenFactoryMethod* Zenject::Internal::ReflectionInfoTypeInfoConverter::TryCreateFactoryMethodCompiledLambdaExpression(System::Type* type, System::Reflection::ConstructorInfo* constructor) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::TryCreateFactoryMethodCompiledLambdaExpression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "TryCreateFactoryMethodCompiledLambdaExpression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(constructor)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenFactoryMethod*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type, constructor);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.TryCreateActionForMethod
Zenject::ZenInjectMethod* Zenject::Internal::ReflectionInfoTypeInfoConverter::TryCreateActionForMethod(System::Reflection::MethodInfo* methodInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::TryCreateActionForMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "TryCreateActionForMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodInfo)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenInjectMethod*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, methodInfo);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.GetAllFields
System::Collections::Generic::IEnumerable_1<System::Reflection::FieldInfo*>* Zenject::Internal::ReflectionInfoTypeInfoConverter::GetAllFields(System::Type* t, System::Reflection::BindingFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::GetAllFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "GetAllFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Reflection::FieldInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, flags);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.GetOnlyPropertySetter
Zenject::ZenMemberSetterMethod* Zenject::Internal::ReflectionInfoTypeInfoConverter::GetOnlyPropertySetter(System::Type* parentType, ::Il2CppString* propertyName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::GetOnlyPropertySetter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "GetOnlyPropertySetter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentType), ::il2cpp_utils::ExtractType(propertyName)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenMemberSetterMethod*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, parentType, propertyName);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.GetSetter
Zenject::ZenMemberSetterMethod* Zenject::Internal::ReflectionInfoTypeInfoConverter::GetSetter(System::Type* parentType, System::Reflection::MemberInfo* memInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::GetSetter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "GetSetter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentType), ::il2cpp_utils::ExtractType(memInfo)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenMemberSetterMethod*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, parentType, memInfo);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter.TryGetSetterAsCompiledExpression
Zenject::ZenMemberSetterMethod* Zenject::Internal::ReflectionInfoTypeInfoConverter::TryGetSetterAsCompiledExpression(System::Type* parentType, System::Reflection::MemberInfo* memInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::TryGetSetterAsCompiledExpression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject.Internal", "ReflectionInfoTypeInfoConverter", "TryGetSetterAsCompiledExpression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentType), ::il2cpp_utils::ExtractType(memInfo)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenMemberSetterMethod*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, parentType, memInfo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.Internal.ReflectionInfoTypeInfoConverter/Zenject.Internal.<>c__DisplayClass0_0
#include "Zenject/Internal/ReflectionInfoTypeInfoConverter_--c__DisplayClass0_0.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Reflection.MethodInfo methodInfo
System::Reflection::MethodInfo*& Zenject::Internal::ReflectionInfoTypeInfoConverter::$$c__DisplayClass0_0::dyn_methodInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::$$c__DisplayClass0_0::dyn_methodInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "methodInfo"))->offset;
  return *reinterpret_cast<System::Reflection::MethodInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter/Zenject.Internal.<>c__DisplayClass0_0.<ConvertMethod>b__0
void Zenject::Internal::ReflectionInfoTypeInfoConverter::$$c__DisplayClass0_0::$ConvertMethod$b__0(::Il2CppObject* obj, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::$$c__DisplayClass0_0::<ConvertMethod>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ConvertMethod>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(args)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, obj, args);
}
