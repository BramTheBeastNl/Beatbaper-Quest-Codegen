// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.PlayMode
#include "UnityEngine/PlayMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.PlayMode StopSameLayer
UnityEngine::PlayMode UnityEngine::PlayMode::_get_StopSameLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayMode::_get_StopSameLayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::PlayMode>("UnityEngine", "PlayMode", "StopSameLayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.PlayMode StopSameLayer
void UnityEngine::PlayMode::_set_StopSameLayer(UnityEngine::PlayMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayMode::_set_StopSameLayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "PlayMode", "StopSameLayer", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.PlayMode StopAll
UnityEngine::PlayMode UnityEngine::PlayMode::_get_StopAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayMode::_get_StopAll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::PlayMode>("UnityEngine", "PlayMode", "StopAll"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.PlayMode StopAll
void UnityEngine::PlayMode::_set_StopAll(UnityEngine::PlayMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayMode::_set_StopAll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "PlayMode", "StopAll", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: UnityEngine.Animation/Enumerator
#include "UnityEngine/Animation_Enumerator.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: UnityEngine.AnimationState
#include "UnityEngine/AnimationState.hpp"
// Including type: UnityEngine.PlayMode
#include "UnityEngine/PlayMode.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Animation.get_clip
UnityEngine::AnimationClip* UnityEngine::Animation::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animation.Rewind
void UnityEngine::Animation::Rewind(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::Rewind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rewind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: UnityEngine.Animation.Internal_RewindByName
void UnityEngine::Animation::Internal_RewindByName(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::Internal_RewindByName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Internal_RewindByName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: UnityEngine.Animation.Rewind
void UnityEngine::Animation::Rewind() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::Rewind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rewind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animation.INTERNAL_CALL_Rewind
void UnityEngine::Animation::INTERNAL_CALL_Rewind(UnityEngine::Animation* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::INTERNAL_CALL_Rewind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Animation", "INTERNAL_CALL_Rewind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, self);
}
// Autogenerated method: UnityEngine.Animation.Sample
void UnityEngine::Animation::Sample() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::Sample");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Sample", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animation.INTERNAL_CALL_Sample
void UnityEngine::Animation::INTERNAL_CALL_Sample(UnityEngine::Animation* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::INTERNAL_CALL_Sample");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Animation", "INTERNAL_CALL_Sample", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, self);
}
// Autogenerated method: UnityEngine.Animation.get_Item
UnityEngine::AnimationState* UnityEngine::Animation::get_Item(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationState*, false>(this, ___internal__method, name);
}
// Autogenerated method: UnityEngine.Animation.Play
bool UnityEngine::Animation::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animation.Play
bool UnityEngine::Animation::Play(UnityEngine::PlayMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, mode);
}
// Autogenerated method: UnityEngine.Animation.CrossFade
void UnityEngine::Animation::CrossFade(::Il2CppString* animation, float fadeLength, UnityEngine::PlayMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::CrossFade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animation), ::il2cpp_utils::ExtractType(fadeLength), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animation, fadeLength, mode);
}
// Autogenerated method: UnityEngine.Animation.CrossFade
void UnityEngine::Animation::CrossFade(::Il2CppString* animation, float fadeLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::CrossFade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animation), ::il2cpp_utils::ExtractType(fadeLength)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animation, fadeLength);
}
// Autogenerated method: UnityEngine.Animation.PlayDefaultAnimation
bool UnityEngine::Animation::PlayDefaultAnimation(UnityEngine::PlayMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::PlayDefaultAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayDefaultAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, mode);
}
// Autogenerated method: UnityEngine.Animation.GetEnumerator
System::Collections::IEnumerator* UnityEngine::Animation::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animation.GetState
UnityEngine::AnimationState* UnityEngine::Animation::GetState(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::GetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationState*, false>(this, ___internal__method, name);
}
// Autogenerated method: UnityEngine.Animation.GetStateAtIndex
UnityEngine::AnimationState* UnityEngine::Animation::GetStateAtIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::GetStateAtIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStateAtIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationState*, false>(this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Animation.GetStateCount
int UnityEngine::Animation::GetStateCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::GetStateCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStateCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animation.get_animatePhysics
bool UnityEngine::Animation::get_animatePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::get_animatePhysics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animatePhysics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Animation::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (Animation::*)()>(&Animation::get_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Animation::Rewind
// Il2CppName: Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Animation::*)(::Il2CppString*)>(&Animation::Rewind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Animation::Internal_RewindByName
// Il2CppName: Internal_RewindByName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Animation::*)(::Il2CppString*)>(&Animation::Internal_RewindByName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "Internal_RewindByName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Animation::Rewind
// Il2CppName: Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Animation::*)()>(&Animation::Rewind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Animation::INTERNAL_CALL_Rewind
// Il2CppName: INTERNAL_CALL_Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Animation*)>(&Animation::INTERNAL_CALL_Rewind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "INTERNAL_CALL_Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animation*>()});
  }
};
// Writing MetadataGetter for method: Animation::Sample
// Il2CppName: Sample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Animation::*)()>(&Animation::Sample)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "Sample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Animation::INTERNAL_CALL_Sample
// Il2CppName: INTERNAL_CALL_Sample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Animation*)>(&Animation::INTERNAL_CALL_Sample)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "INTERNAL_CALL_Sample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animation*>()});
  }
};
// Writing MetadataGetter for method: Animation::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationState* (Animation::*)(::Il2CppString*)>(&Animation::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Animation::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Animation::*)()>(&Animation::Play)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Animation::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Animation::*)(UnityEngine::PlayMode)>(&Animation::Play)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::PlayMode>()});
  }
};
// Writing MetadataGetter for method: Animation::CrossFade
// Il2CppName: CrossFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Animation::*)(::Il2CppString*, float, UnityEngine::PlayMode)>(&Animation::CrossFade)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "CrossFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::PlayMode>()});
  }
};
// Writing MetadataGetter for method: Animation::CrossFade
// Il2CppName: CrossFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Animation::*)(::Il2CppString*, float)>(&Animation::CrossFade)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "CrossFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Animation::PlayDefaultAnimation
// Il2CppName: PlayDefaultAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Animation::*)(UnityEngine::PlayMode)>(&Animation::PlayDefaultAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "PlayDefaultAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::PlayMode>()});
  }
};
// Writing MetadataGetter for method: Animation::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (Animation::*)()>(&Animation::GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Animation::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationState* (Animation::*)(::Il2CppString*)>(&Animation::GetState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Animation::GetStateAtIndex
// Il2CppName: GetStateAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationState* (Animation::*)(int)>(&Animation::GetStateAtIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "GetStateAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Animation::GetStateCount
// Il2CppName: GetStateCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Animation::*)()>(&Animation::GetStateCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "GetStateCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Animation::get_animatePhysics
// Il2CppName: get_animatePhysics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Animation::*)()>(&Animation::get_animatePhysics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation*), "get_animatePhysics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Animation/Enumerator
#include "UnityEngine/Animation_Enumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Animation/Enumerator.get_Current
::Il2CppObject* UnityEngine::Animation::Enumerator::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::Enumerator::get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animation/Enumerator.MoveNext
bool UnityEngine::Animation::Enumerator::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::Enumerator::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animation/Enumerator.Reset
void UnityEngine::Animation::Enumerator::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animation::Enumerator::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Animation::Enumerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Animation::Enumerator::*)(UnityEngine::Animation*)>(&Animation::Enumerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation::Enumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animation*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Animation::Enumerator::*)(UnityEngine::Animation*)>(&Animation::Enumerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation::Enumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animation*>()});
  }
};
// Writing MetadataGetter for method: Animation::Enumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Animation::Enumerator::*)()>(&Animation::Enumerator::get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation::Enumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Animation::Enumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Animation::Enumerator::*)()>(&Animation::Enumerator::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation::Enumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Animation::Enumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Animation::Enumerator::*)()>(&Animation::Enumerator::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Animation::Enumerator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.AnimationState
#include "UnityEngine/AnimationState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AnimationState.set_time
void UnityEngine::AnimationState::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationState::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AnimationState.set_normalizedTime
void UnityEngine::AnimationState::set_normalizedTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationState::set_normalizedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AnimationState.set_speed
void UnityEngine::AnimationState::set_speed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationState::set_speed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_speed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AnimationState.set_layer
void UnityEngine::AnimationState::set_layer(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationState::set_layer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_layer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AnimationState::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationState::*)(float)>(&AnimationState::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationState*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AnimationState::set_normalizedTime
// Il2CppName: set_normalizedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationState::*)(float)>(&AnimationState::set_normalizedTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationState*), "set_normalizedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AnimationState::set_speed
// Il2CppName: set_speed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationState::*)(float)>(&AnimationState::set_speed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationState*), "set_speed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AnimationState::set_layer
// Il2CppName: set_layer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationState::*)(int)>(&AnimationState::set_layer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationState*), "set_layer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationState::*)()>(&AnimationState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationState::*)()>(&AnimationState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.Animations.IAnimationWindowPreview
#include "UnityEngine/Experimental/Animations/IAnimationWindowPreview.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.Animations.IAnimationWindowPreview.UpdatePreviewGraph
void UnityEngine::Experimental::Animations::IAnimationWindowPreview::UpdatePreviewGraph(UnityEngine::Playables::PlayableGraph graph) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Animations::IAnimationWindowPreview::UpdatePreviewGraph");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePreviewGraph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, graph);
}
// Writing MetadataGetter for method: IAnimationWindowPreview::UpdatePreviewGraph
// Il2CppName: UpdatePreviewGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnimationWindowPreview::*)(UnityEngine::Playables::PlayableGraph)>(&IAnimationWindowPreview::UpdatePreviewGraph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnimationWindowPreview*), "UpdatePreviewGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Animations.AnimationPlayableBinding
#include "UnityEngine/Animations/AnimationPlayableBinding.hpp"
// Including type: UnityEngine.Playables.PlayableBinding
#include "UnityEngine/Playables/PlayableBinding.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Playables.PlayableOutput
#include "UnityEngine/Playables/PlayableOutput.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Animations.AnimationPlayableBinding.Create
UnityEngine::Playables::PlayableBinding UnityEngine::Animations::AnimationPlayableBinding::Create(::Il2CppString* name, UnityEngine::Object* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableBinding::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationPlayableBinding", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableBinding, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, key);
}
// Autogenerated method: UnityEngine.Animations.AnimationPlayableBinding.CreateAnimationOutput
UnityEngine::Playables::PlayableOutput UnityEngine::Animations::AnimationPlayableBinding::CreateAnimationOutput(UnityEngine::Playables::PlayableGraph graph, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableBinding::CreateAnimationOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationPlayableBinding", "CreateAnimationOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, name);
}
// Writing MetadataGetter for method: AnimationPlayableBinding::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableBinding (*)(::Il2CppString*, UnityEngine::Object*)>(&AnimationPlayableBinding::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableBinding*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableBinding::CreateAnimationOutput
// Il2CppName: CreateAnimationOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutput (*)(UnityEngine::Playables::PlayableGraph, ::Il2CppString*)>(&AnimationPlayableBinding::CreateAnimationOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableBinding*), "CreateAnimationOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Animations.AnimationClipPlayable
#include "UnityEngine/Animations/AnimationClipPlayable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.Create
UnityEngine::Animations::AnimationClipPlayable UnityEngine::Animations::AnimationClipPlayable::Create(UnityEngine::Playables::PlayableGraph graph, UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationClipPlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationClipPlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, clip);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.CreateHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationClipPlayable::CreateHandle(UnityEngine::Playables::PlayableGraph graph, UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::CreateHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationClipPlayable", "CreateHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, clip);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationClipPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.Equals
bool UnityEngine::Animations::AnimationClipPlayable::Equals(UnityEngine::Animations::AnimationClipPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.SetApplyFootIK
void UnityEngine::Animations::AnimationClipPlayable::SetApplyFootIK(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::SetApplyFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetApplyFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.SetRemoveStartOffset
void UnityEngine::Animations::AnimationClipPlayable::SetRemoveStartOffset(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::SetRemoveStartOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetRemoveStartOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.SetOverrideLoopTime
void UnityEngine::Animations::AnimationClipPlayable::SetOverrideLoopTime(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::SetOverrideLoopTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetOverrideLoopTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.SetLoopTime
void UnityEngine::Animations::AnimationClipPlayable::SetLoopTime(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::SetLoopTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetLoopTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.CreateHandleInternal
bool UnityEngine::Animations::AnimationClipPlayable::CreateHandleInternal(UnityEngine::Playables::PlayableGraph graph, UnityEngine::AnimationClip* clip, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::CreateHandleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationClipPlayable", "CreateHandleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, clip, handle);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.SetApplyFootIKInternal
void UnityEngine::Animations::AnimationClipPlayable::SetApplyFootIKInternal(UnityEngine::Playables::PlayableHandle& handle, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::SetApplyFootIKInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationClipPlayable", "SetApplyFootIKInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.SetRemoveStartOffsetInternal
void UnityEngine::Animations::AnimationClipPlayable::SetRemoveStartOffsetInternal(UnityEngine::Playables::PlayableHandle& handle, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::SetRemoveStartOffsetInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationClipPlayable", "SetRemoveStartOffsetInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.SetOverrideLoopTimeInternal
void UnityEngine::Animations::AnimationClipPlayable::SetOverrideLoopTimeInternal(UnityEngine::Playables::PlayableHandle& handle, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::SetOverrideLoopTimeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationClipPlayable", "SetOverrideLoopTimeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.SetLoopTimeInternal
void UnityEngine::Animations::AnimationClipPlayable::SetLoopTimeInternal(UnityEngine::Playables::PlayableHandle& handle, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::SetLoopTimeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationClipPlayable", "SetLoopTimeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationClipPlayable.CreateHandleInternal_Injected
bool UnityEngine::Animations::AnimationClipPlayable::CreateHandleInternal_Injected(UnityEngine::Playables::PlayableGraph& graph, UnityEngine::AnimationClip* clip, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationClipPlayable::CreateHandleInternal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationClipPlayable", "CreateHandleInternal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, clip, handle);
}
// Writing MetadataGetter for method: AnimationClipPlayable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationClipPlayable (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::AnimationClip*)>(&AnimationClipPlayable::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::CreateHandle
// Il2CppName: CreateHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::AnimationClip*)>(&AnimationClipPlayable::CreateHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "CreateHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::AnimationClipPlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationClipPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationClipPlayable::AnimationClipPlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationClipPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationClipPlayable::AnimationClipPlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AnimationClipPlayable::*)()>(&AnimationClipPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationClipPlayable::*)(UnityEngine::Animations::AnimationClipPlayable)>(&AnimationClipPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationClipPlayable>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::SetApplyFootIK
// Il2CppName: SetApplyFootIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationClipPlayable::*)(bool)>(&AnimationClipPlayable::SetApplyFootIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "SetApplyFootIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::SetRemoveStartOffset
// Il2CppName: SetRemoveStartOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationClipPlayable::*)(bool)>(&AnimationClipPlayable::SetRemoveStartOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "SetRemoveStartOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::SetOverrideLoopTime
// Il2CppName: SetOverrideLoopTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationClipPlayable::*)(bool)>(&AnimationClipPlayable::SetOverrideLoopTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "SetOverrideLoopTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::SetLoopTime
// Il2CppName: SetLoopTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationClipPlayable::*)(bool)>(&AnimationClipPlayable::SetLoopTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "SetLoopTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::CreateHandleInternal
// Il2CppName: CreateHandleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::AnimationClip*, UnityEngine::Playables::PlayableHandle&)>(&AnimationClipPlayable::CreateHandleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "CreateHandleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::SetApplyFootIKInternal
// Il2CppName: SetApplyFootIKInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, bool)>(&AnimationClipPlayable::SetApplyFootIKInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "SetApplyFootIKInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::SetRemoveStartOffsetInternal
// Il2CppName: SetRemoveStartOffsetInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, bool)>(&AnimationClipPlayable::SetRemoveStartOffsetInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "SetRemoveStartOffsetInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::SetOverrideLoopTimeInternal
// Il2CppName: SetOverrideLoopTimeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, bool)>(&AnimationClipPlayable::SetOverrideLoopTimeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "SetOverrideLoopTimeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::SetLoopTimeInternal
// Il2CppName: SetLoopTimeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, bool)>(&AnimationClipPlayable::SetLoopTimeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "SetLoopTimeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationClipPlayable::CreateHandleInternal_Injected
// Il2CppName: CreateHandleInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, UnityEngine::AnimationClip*, UnityEngine::Playables::PlayableHandle&)>(&AnimationClipPlayable::CreateHandleInternal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationClipPlayable), "CreateHandleInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Animations.AnimationLayerMixerPlayable
#include "UnityEngine/Animations/AnimationLayerMixerPlayable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.AvatarMask
#include "UnityEngine/AvatarMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Animations.AnimationLayerMixerPlayable m_NullPlayable
UnityEngine::Animations::AnimationLayerMixerPlayable UnityEngine::Animations::AnimationLayerMixerPlayable::_get_m_NullPlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::_get_m_NullPlayable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Animations::AnimationLayerMixerPlayable>("UnityEngine.Animations", "AnimationLayerMixerPlayable", "m_NullPlayable"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Animations.AnimationLayerMixerPlayable m_NullPlayable
void UnityEngine::Animations::AnimationLayerMixerPlayable::_set_m_NullPlayable(UnityEngine::Animations::AnimationLayerMixerPlayable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::_set_m_NullPlayable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Animations", "AnimationLayerMixerPlayable", "m_NullPlayable", value));
}
// Autogenerated method: UnityEngine.Animations.AnimationLayerMixerPlayable.Create
UnityEngine::Animations::AnimationLayerMixerPlayable UnityEngine::Animations::AnimationLayerMixerPlayable::Create(UnityEngine::Playables::PlayableGraph graph, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationLayerMixerPlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationLayerMixerPlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, inputCount);
}
// Autogenerated method: UnityEngine.Animations.AnimationLayerMixerPlayable.CreateHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationLayerMixerPlayable::CreateHandle(UnityEngine::Playables::PlayableGraph graph, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::CreateHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationLayerMixerPlayable", "CreateHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, inputCount);
}
// Autogenerated method: UnityEngine.Animations.AnimationLayerMixerPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationLayerMixerPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationLayerMixerPlayable.Equals
bool UnityEngine::Animations::AnimationLayerMixerPlayable::Equals(UnityEngine::Animations::AnimationLayerMixerPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Animations.AnimationLayerMixerPlayable.SetLayerMaskFromAvatarMask
void UnityEngine::Animations::AnimationLayerMixerPlayable::SetLayerMaskFromAvatarMask(uint layerIndex, UnityEngine::AvatarMask* mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::SetLayerMaskFromAvatarMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetLayerMaskFromAvatarMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerIndex), ::il2cpp_utils::ExtractType(mask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, layerIndex, mask);
}
// Autogenerated method: UnityEngine.Animations.AnimationLayerMixerPlayable.CreateHandleInternal
bool UnityEngine::Animations::AnimationLayerMixerPlayable::CreateHandleInternal(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::CreateHandleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationLayerMixerPlayable", "CreateHandleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, handle);
}
// Autogenerated method: UnityEngine.Animations.AnimationLayerMixerPlayable.SetLayerMaskFromAvatarMaskInternal
void UnityEngine::Animations::AnimationLayerMixerPlayable::SetLayerMaskFromAvatarMaskInternal(UnityEngine::Playables::PlayableHandle& handle, uint layerIndex, UnityEngine::AvatarMask* mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::SetLayerMaskFromAvatarMaskInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationLayerMixerPlayable", "SetLayerMaskFromAvatarMaskInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(layerIndex), ::il2cpp_utils::ExtractType(mask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, layerIndex, mask);
}
// Autogenerated method: UnityEngine.Animations.AnimationLayerMixerPlayable..cctor
void UnityEngine::Animations::AnimationLayerMixerPlayable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationLayerMixerPlayable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationLayerMixerPlayable.CreateHandleInternal_Injected
bool UnityEngine::Animations::AnimationLayerMixerPlayable::CreateHandleInternal_Injected(UnityEngine::Playables::PlayableGraph& graph, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationLayerMixerPlayable::CreateHandleInternal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationLayerMixerPlayable", "CreateHandleInternal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, handle);
}
// Writing MetadataGetter for method: AnimationLayerMixerPlayable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationLayerMixerPlayable (*)(UnityEngine::Playables::PlayableGraph, int)>(&AnimationLayerMixerPlayable::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationLayerMixerPlayable::CreateHandle
// Il2CppName: CreateHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (*)(UnityEngine::Playables::PlayableGraph, int)>(&AnimationLayerMixerPlayable::CreateHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), "CreateHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationLayerMixerPlayable::AnimationLayerMixerPlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationLayerMixerPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationLayerMixerPlayable::AnimationLayerMixerPlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationLayerMixerPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationLayerMixerPlayable::AnimationLayerMixerPlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AnimationLayerMixerPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AnimationLayerMixerPlayable::*)()>(&AnimationLayerMixerPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationLayerMixerPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationLayerMixerPlayable::*)(UnityEngine::Animations::AnimationLayerMixerPlayable)>(&AnimationLayerMixerPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationLayerMixerPlayable>()});
  }
};
// Writing MetadataGetter for method: AnimationLayerMixerPlayable::SetLayerMaskFromAvatarMask
// Il2CppName: SetLayerMaskFromAvatarMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationLayerMixerPlayable::*)(uint, UnityEngine::AvatarMask*)>(&AnimationLayerMixerPlayable::SetLayerMaskFromAvatarMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), "SetLayerMaskFromAvatarMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AvatarMask*>()});
  }
};
// Writing MetadataGetter for method: AnimationLayerMixerPlayable::CreateHandleInternal
// Il2CppName: CreateHandleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Playables::PlayableHandle&)>(&AnimationLayerMixerPlayable::CreateHandleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), "CreateHandleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: AnimationLayerMixerPlayable::SetLayerMaskFromAvatarMaskInternal
// Il2CppName: SetLayerMaskFromAvatarMaskInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, uint, UnityEngine::AvatarMask*)>(&AnimationLayerMixerPlayable::SetLayerMaskFromAvatarMaskInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), "SetLayerMaskFromAvatarMaskInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AvatarMask*>()});
  }
};
// Writing MetadataGetter for method: AnimationLayerMixerPlayable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AnimationLayerMixerPlayable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationLayerMixerPlayable::CreateHandleInternal_Injected
// Il2CppName: CreateHandleInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, UnityEngine::Playables::PlayableHandle&)>(&AnimationLayerMixerPlayable::CreateHandleInternal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationLayerMixerPlayable), "CreateHandleInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Animations.AnimationMixerPlayable
#include "UnityEngine/Animations/AnimationMixerPlayable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Animations.AnimationMixerPlayable m_NullPlayable
UnityEngine::Animations::AnimationMixerPlayable UnityEngine::Animations::AnimationMixerPlayable::_get_m_NullPlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMixerPlayable::_get_m_NullPlayable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Animations::AnimationMixerPlayable>("UnityEngine.Animations", "AnimationMixerPlayable", "m_NullPlayable"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Animations.AnimationMixerPlayable m_NullPlayable
void UnityEngine::Animations::AnimationMixerPlayable::_set_m_NullPlayable(UnityEngine::Animations::AnimationMixerPlayable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMixerPlayable::_set_m_NullPlayable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Animations", "AnimationMixerPlayable", "m_NullPlayable", value));
}
// Autogenerated method: UnityEngine.Animations.AnimationMixerPlayable.Create
UnityEngine::Animations::AnimationMixerPlayable UnityEngine::Animations::AnimationMixerPlayable::Create(UnityEngine::Playables::PlayableGraph graph, int inputCount, bool normalizeWeights) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMixerPlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMixerPlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount), ::il2cpp_utils::ExtractType(normalizeWeights)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationMixerPlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, inputCount, normalizeWeights);
}
// Autogenerated method: UnityEngine.Animations.AnimationMixerPlayable.CreateHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationMixerPlayable::CreateHandle(UnityEngine::Playables::PlayableGraph graph, int inputCount, bool normalizeWeights) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMixerPlayable::CreateHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMixerPlayable", "CreateHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount), ::il2cpp_utils::ExtractType(normalizeWeights)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, inputCount, normalizeWeights);
}
// Autogenerated method: UnityEngine.Animations.AnimationMixerPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationMixerPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMixerPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationMixerPlayable.Equals
bool UnityEngine::Animations::AnimationMixerPlayable::Equals(UnityEngine::Animations::AnimationMixerPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMixerPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Animations.AnimationMixerPlayable.CreateHandleInternal
bool UnityEngine::Animations::AnimationMixerPlayable::CreateHandleInternal(UnityEngine::Playables::PlayableGraph graph, bool normalizeWeights, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMixerPlayable::CreateHandleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMixerPlayable", "CreateHandleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(normalizeWeights), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, normalizeWeights, handle);
}
// Autogenerated method: UnityEngine.Animations.AnimationMixerPlayable..cctor
void UnityEngine::Animations::AnimationMixerPlayable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMixerPlayable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMixerPlayable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationMixerPlayable.CreateHandleInternal_Injected
bool UnityEngine::Animations::AnimationMixerPlayable::CreateHandleInternal_Injected(UnityEngine::Playables::PlayableGraph& graph, bool normalizeWeights, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMixerPlayable::CreateHandleInternal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMixerPlayable", "CreateHandleInternal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(normalizeWeights), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, normalizeWeights, handle);
}
// Writing MetadataGetter for method: AnimationMixerPlayable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationMixerPlayable (*)(UnityEngine::Playables::PlayableGraph, int, bool)>(&AnimationMixerPlayable::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMixerPlayable), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationMixerPlayable::CreateHandle
// Il2CppName: CreateHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (*)(UnityEngine::Playables::PlayableGraph, int, bool)>(&AnimationMixerPlayable::CreateHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMixerPlayable), "CreateHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationMixerPlayable::AnimationMixerPlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationMixerPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationMixerPlayable::AnimationMixerPlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMixerPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationMixerPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationMixerPlayable::AnimationMixerPlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMixerPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AnimationMixerPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AnimationMixerPlayable::*)()>(&AnimationMixerPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMixerPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationMixerPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationMixerPlayable::*)(UnityEngine::Animations::AnimationMixerPlayable)>(&AnimationMixerPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMixerPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationMixerPlayable>()});
  }
};
// Writing MetadataGetter for method: AnimationMixerPlayable::CreateHandleInternal
// Il2CppName: CreateHandleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph, bool, UnityEngine::Playables::PlayableHandle&)>(&AnimationMixerPlayable::CreateHandleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMixerPlayable), "CreateHandleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: AnimationMixerPlayable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AnimationMixerPlayable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMixerPlayable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationMixerPlayable::CreateHandleInternal_Injected
// Il2CppName: CreateHandleInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, bool, UnityEngine::Playables::PlayableHandle&)>(&AnimationMixerPlayable::CreateHandleInternal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMixerPlayable), "CreateHandleInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Animations.AnimationMotionXToDeltaPlayable
#include "UnityEngine/Animations/AnimationMotionXToDeltaPlayable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Animations.AnimationMotionXToDeltaPlayable m_NullPlayable
UnityEngine::Animations::AnimationMotionXToDeltaPlayable UnityEngine::Animations::AnimationMotionXToDeltaPlayable::_get_m_NullPlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::_get_m_NullPlayable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Animations::AnimationMotionXToDeltaPlayable>("UnityEngine.Animations", "AnimationMotionXToDeltaPlayable", "m_NullPlayable"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Animations.AnimationMotionXToDeltaPlayable m_NullPlayable
void UnityEngine::Animations::AnimationMotionXToDeltaPlayable::_set_m_NullPlayable(UnityEngine::Animations::AnimationMotionXToDeltaPlayable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::_set_m_NullPlayable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Animations", "AnimationMotionXToDeltaPlayable", "m_NullPlayable", value));
}
// Autogenerated method: UnityEngine.Animations.AnimationMotionXToDeltaPlayable.Create
UnityEngine::Animations::AnimationMotionXToDeltaPlayable UnityEngine::Animations::AnimationMotionXToDeltaPlayable::Create(UnityEngine::Playables::PlayableGraph graph) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMotionXToDeltaPlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationMotionXToDeltaPlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph);
}
// Autogenerated method: UnityEngine.Animations.AnimationMotionXToDeltaPlayable.CreateHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationMotionXToDeltaPlayable::CreateHandle(UnityEngine::Playables::PlayableGraph graph) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::CreateHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMotionXToDeltaPlayable", "CreateHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph);
}
// Autogenerated method: UnityEngine.Animations.AnimationMotionXToDeltaPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationMotionXToDeltaPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationMotionXToDeltaPlayable.Equals
bool UnityEngine::Animations::AnimationMotionXToDeltaPlayable::Equals(UnityEngine::Animations::AnimationMotionXToDeltaPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Animations.AnimationMotionXToDeltaPlayable.SetAbsoluteMotion
void UnityEngine::Animations::AnimationMotionXToDeltaPlayable::SetAbsoluteMotion(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::SetAbsoluteMotion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetAbsoluteMotion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationMotionXToDeltaPlayable.CreateHandleInternal
bool UnityEngine::Animations::AnimationMotionXToDeltaPlayable::CreateHandleInternal(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::CreateHandleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMotionXToDeltaPlayable", "CreateHandleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, handle);
}
// Autogenerated method: UnityEngine.Animations.AnimationMotionXToDeltaPlayable.SetAbsoluteMotionInternal
void UnityEngine::Animations::AnimationMotionXToDeltaPlayable::SetAbsoluteMotionInternal(UnityEngine::Playables::PlayableHandle& handle, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::SetAbsoluteMotionInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMotionXToDeltaPlayable", "SetAbsoluteMotionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationMotionXToDeltaPlayable..cctor
void UnityEngine::Animations::AnimationMotionXToDeltaPlayable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMotionXToDeltaPlayable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationMotionXToDeltaPlayable.CreateHandleInternal_Injected
bool UnityEngine::Animations::AnimationMotionXToDeltaPlayable::CreateHandleInternal_Injected(UnityEngine::Playables::PlayableGraph& graph, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationMotionXToDeltaPlayable::CreateHandleInternal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationMotionXToDeltaPlayable", "CreateHandleInternal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, handle);
}
// Writing MetadataGetter for method: AnimationMotionXToDeltaPlayable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationMotionXToDeltaPlayable (*)(UnityEngine::Playables::PlayableGraph)>(&AnimationMotionXToDeltaPlayable::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>()});
  }
};
// Writing MetadataGetter for method: AnimationMotionXToDeltaPlayable::CreateHandle
// Il2CppName: CreateHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (*)(UnityEngine::Playables::PlayableGraph)>(&AnimationMotionXToDeltaPlayable::CreateHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), "CreateHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>()});
  }
};
// Writing MetadataGetter for method: AnimationMotionXToDeltaPlayable::AnimationMotionXToDeltaPlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationMotionXToDeltaPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationMotionXToDeltaPlayable::AnimationMotionXToDeltaPlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationMotionXToDeltaPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationMotionXToDeltaPlayable::AnimationMotionXToDeltaPlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AnimationMotionXToDeltaPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AnimationMotionXToDeltaPlayable::*)()>(&AnimationMotionXToDeltaPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationMotionXToDeltaPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationMotionXToDeltaPlayable::*)(UnityEngine::Animations::AnimationMotionXToDeltaPlayable)>(&AnimationMotionXToDeltaPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationMotionXToDeltaPlayable>()});
  }
};
// Writing MetadataGetter for method: AnimationMotionXToDeltaPlayable::SetAbsoluteMotion
// Il2CppName: SetAbsoluteMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationMotionXToDeltaPlayable::*)(bool)>(&AnimationMotionXToDeltaPlayable::SetAbsoluteMotion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), "SetAbsoluteMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationMotionXToDeltaPlayable::CreateHandleInternal
// Il2CppName: CreateHandleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Playables::PlayableHandle&)>(&AnimationMotionXToDeltaPlayable::CreateHandleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), "CreateHandleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: AnimationMotionXToDeltaPlayable::SetAbsoluteMotionInternal
// Il2CppName: SetAbsoluteMotionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, bool)>(&AnimationMotionXToDeltaPlayable::SetAbsoluteMotionInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), "SetAbsoluteMotionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationMotionXToDeltaPlayable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AnimationMotionXToDeltaPlayable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationMotionXToDeltaPlayable::CreateHandleInternal_Injected
// Il2CppName: CreateHandleInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, UnityEngine::Playables::PlayableHandle&)>(&AnimationMotionXToDeltaPlayable::CreateHandleInternal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationMotionXToDeltaPlayable), "CreateHandleInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Animations.AnimationOffsetPlayable
#include "UnityEngine/Animations/AnimationOffsetPlayable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Animations.AnimationOffsetPlayable m_NullPlayable
UnityEngine::Animations::AnimationOffsetPlayable UnityEngine::Animations::AnimationOffsetPlayable::_get_m_NullPlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationOffsetPlayable::_get_m_NullPlayable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Animations::AnimationOffsetPlayable>("UnityEngine.Animations", "AnimationOffsetPlayable", "m_NullPlayable"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Animations.AnimationOffsetPlayable m_NullPlayable
void UnityEngine::Animations::AnimationOffsetPlayable::_set_m_NullPlayable(UnityEngine::Animations::AnimationOffsetPlayable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationOffsetPlayable::_set_m_NullPlayable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Animations", "AnimationOffsetPlayable", "m_NullPlayable", value));
}
// Autogenerated method: UnityEngine.Animations.AnimationOffsetPlayable.Create
UnityEngine::Animations::AnimationOffsetPlayable UnityEngine::Animations::AnimationOffsetPlayable::Create(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationOffsetPlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationOffsetPlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationOffsetPlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, position, rotation, inputCount);
}
// Autogenerated method: UnityEngine.Animations.AnimationOffsetPlayable.CreateHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationOffsetPlayable::CreateHandle(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationOffsetPlayable::CreateHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationOffsetPlayable", "CreateHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, position, rotation, inputCount);
}
// Autogenerated method: UnityEngine.Animations.AnimationOffsetPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationOffsetPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationOffsetPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationOffsetPlayable.Equals
bool UnityEngine::Animations::AnimationOffsetPlayable::Equals(UnityEngine::Animations::AnimationOffsetPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationOffsetPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Animations.AnimationOffsetPlayable.CreateHandleInternal
bool UnityEngine::Animations::AnimationOffsetPlayable::CreateHandleInternal(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationOffsetPlayable::CreateHandleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationOffsetPlayable", "CreateHandleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, position, rotation, handle);
}
// Autogenerated method: UnityEngine.Animations.AnimationOffsetPlayable..cctor
void UnityEngine::Animations::AnimationOffsetPlayable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationOffsetPlayable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationOffsetPlayable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationOffsetPlayable.CreateHandleInternal_Injected
bool UnityEngine::Animations::AnimationOffsetPlayable::CreateHandleInternal_Injected(UnityEngine::Playables::PlayableGraph& graph, UnityEngine::Vector3& position, UnityEngine::Quaternion& rotation, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationOffsetPlayable::CreateHandleInternal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationOffsetPlayable", "CreateHandleInternal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, position, rotation, handle);
}
// Writing MetadataGetter for method: AnimationOffsetPlayable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationOffsetPlayable (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Vector3, UnityEngine::Quaternion, int)>(&AnimationOffsetPlayable::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOffsetPlayable), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationOffsetPlayable::CreateHandle
// Il2CppName: CreateHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Vector3, UnityEngine::Quaternion, int)>(&AnimationOffsetPlayable::CreateHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOffsetPlayable), "CreateHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationOffsetPlayable::AnimationOffsetPlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationOffsetPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationOffsetPlayable::AnimationOffsetPlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOffsetPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationOffsetPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationOffsetPlayable::AnimationOffsetPlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOffsetPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AnimationOffsetPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AnimationOffsetPlayable::*)()>(&AnimationOffsetPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOffsetPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationOffsetPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationOffsetPlayable::*)(UnityEngine::Animations::AnimationOffsetPlayable)>(&AnimationOffsetPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOffsetPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationOffsetPlayable>()});
  }
};
// Writing MetadataGetter for method: AnimationOffsetPlayable::CreateHandleInternal
// Il2CppName: CreateHandleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Playables::PlayableHandle&)>(&AnimationOffsetPlayable::CreateHandleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOffsetPlayable), "CreateHandleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: AnimationOffsetPlayable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AnimationOffsetPlayable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOffsetPlayable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationOffsetPlayable::CreateHandleInternal_Injected
// Il2CppName: CreateHandleInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, UnityEngine::Vector3&, UnityEngine::Quaternion&, UnityEngine::Playables::PlayableHandle&)>(&AnimationOffsetPlayable::CreateHandleInternal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOffsetPlayable), "CreateHandleInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Animations.AnimationPlayableExtensions
#include "UnityEngine/Animations/AnimationPlayableExtensions.hpp"
// Including type: UnityEngine.Playables.IPlayable
#include "UnityEngine/Playables/IPlayable.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: UnityEngine.Playables.PlayableHandle
#include "UnityEngine/Playables/PlayableHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Animations.AnimationPlayableExtensions.SetAnimatedPropertiesInternal
void UnityEngine::Animations::AnimationPlayableExtensions::SetAnimatedPropertiesInternal(UnityEngine::Playables::PlayableHandle& playable, UnityEngine::AnimationClip* animatedProperties) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableExtensions::SetAnimatedPropertiesInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationPlayableExtensions", "SetAnimatedPropertiesInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(animatedProperties)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, playable, animatedProperties);
}
// Writing MetadataGetter for method: AnimationPlayableExtensions::SetAnimatedProperties
// Il2CppName: SetAnimatedProperties
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: AnimationPlayableExtensions::SetAnimatedPropertiesInternal
// Il2CppName: SetAnimatedPropertiesInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, UnityEngine::AnimationClip*)>(&AnimationPlayableExtensions::SetAnimatedPropertiesInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableExtensions*), "SetAnimatedPropertiesInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Animations.AnimationPlayableGraphExtensions
#include "UnityEngine/Animations/AnimationPlayableGraphExtensions.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.PlayableOutputHandle
#include "UnityEngine/Playables/PlayableOutputHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Animations.AnimationPlayableGraphExtensions.InternalCreateAnimationOutput
bool UnityEngine::Animations::AnimationPlayableGraphExtensions::InternalCreateAnimationOutput(UnityEngine::Playables::PlayableGraph& graph, ::Il2CppString* name, UnityEngine::Playables::PlayableOutputHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableGraphExtensions::InternalCreateAnimationOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationPlayableGraphExtensions", "InternalCreateAnimationOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, name, handle);
}
// Writing MetadataGetter for method: AnimationPlayableGraphExtensions::InternalCreateAnimationOutput
// Il2CppName: InternalCreateAnimationOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, ::Il2CppString*, UnityEngine::Playables::PlayableOutputHandle&)>(&AnimationPlayableGraphExtensions::InternalCreateAnimationOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableGraphExtensions*), "InternalCreateAnimationOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Animations.AnimationPlayableOutput
#include "UnityEngine/Animations/AnimationPlayableOutput.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Playables.PlayableOutput
#include "UnityEngine/Playables/PlayableOutput.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Animations.AnimationPlayableOutput.Create
UnityEngine::Animations::AnimationPlayableOutput UnityEngine::Animations::AnimationPlayableOutput::Create(UnityEngine::Playables::PlayableGraph graph, ::Il2CppString* name, UnityEngine::Animator* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableOutput::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationPlayableOutput", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationPlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, name, target);
}
// Autogenerated method: UnityEngine.Animations.AnimationPlayableOutput.get_Null
UnityEngine::Animations::AnimationPlayableOutput UnityEngine::Animations::AnimationPlayableOutput::get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableOutput::get_Null");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationPlayableOutput", "get_Null", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationPlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationPlayableOutput.GetHandle
UnityEngine::Playables::PlayableOutputHandle UnityEngine::Animations::AnimationPlayableOutput::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableOutput::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutputHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationPlayableOutput.op_Explicit
UnityEngine::Animations::AnimationPlayableOutput::AnimationPlayableOutput(UnityEngine::Playables::PlayableOutput& output) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableOutput::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationPlayableOutput", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output)})));
  *this = ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationPlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, output);
}
// Autogenerated method: UnityEngine.Animations.AnimationPlayableOutput.GetTarget
UnityEngine::Animator* UnityEngine::Animations::AnimationPlayableOutput::GetTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableOutput::GetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animator*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationPlayableOutput.SetTarget
void UnityEngine::Animations::AnimationPlayableOutput::SetTarget(UnityEngine::Animator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableOutput::SetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Animations.AnimationPlayableOutput.InternalGetTarget
UnityEngine::Animator* UnityEngine::Animations::AnimationPlayableOutput::InternalGetTarget(UnityEngine::Playables::PlayableOutputHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableOutput::InternalGetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationPlayableOutput", "InternalGetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: UnityEngine.Animations.AnimationPlayableOutput.InternalSetTarget
void UnityEngine::Animations::AnimationPlayableOutput::InternalSetTarget(UnityEngine::Playables::PlayableOutputHandle& handle, UnityEngine::Animator* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPlayableOutput::InternalSetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationPlayableOutput", "InternalSetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, target);
}
// Writing MetadataGetter for method: AnimationPlayableOutput::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationPlayableOutput (*)(UnityEngine::Playables::PlayableGraph, ::Il2CppString*, UnityEngine::Animator*)>(&AnimationPlayableOutput::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableOutput), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Animator*>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableOutput::AnimationPlayableOutput
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableOutput::*)(UnityEngine::Playables::PlayableOutputHandle)>(&AnimationPlayableOutput::AnimationPlayableOutput<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableOutput), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableOutput::*)(UnityEngine::Playables::PlayableOutputHandle)>(&AnimationPlayableOutput::AnimationPlayableOutput<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableOutput), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableOutput::get_Null
// Il2CppName: get_Null
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationPlayableOutput (*)()>(&AnimationPlayableOutput::get_Null)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableOutput), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableOutput::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutputHandle (AnimationPlayableOutput::*)()>(&AnimationPlayableOutput::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableOutput), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableOutput::AnimationPlayableOutput
// Il2CppName: op_Explicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationPlayableOutput (*)(UnityEngine::Playables::PlayableOutput&)>(&AnimationPlayableOutput::AnimationPlayableOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableOutput), "op_Explicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutput&>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableOutput::GetTarget
// Il2CppName: GetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animator* (AnimationPlayableOutput::*)()>(&AnimationPlayableOutput::GetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableOutput), "GetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableOutput::SetTarget
// Il2CppName: SetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableOutput::*)(UnityEngine::Animator*)>(&AnimationPlayableOutput::SetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableOutput), "SetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animator*>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableOutput::InternalGetTarget
// Il2CppName: InternalGetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animator* (*)(UnityEngine::Playables::PlayableOutputHandle&)>(&AnimationPlayableOutput::InternalGetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableOutput), "InternalGetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableOutput::InternalSetTarget
// Il2CppName: InternalSetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableOutputHandle&, UnityEngine::Animator*)>(&AnimationPlayableOutput::InternalSetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableOutput), "InternalSetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Animator*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Animations.AnimationPosePlayable
#include "UnityEngine/Animations/AnimationPosePlayable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Animations.AnimationPosePlayable m_NullPlayable
UnityEngine::Animations::AnimationPosePlayable UnityEngine::Animations::AnimationPosePlayable::_get_m_NullPlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPosePlayable::_get_m_NullPlayable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Animations::AnimationPosePlayable>("UnityEngine.Animations", "AnimationPosePlayable", "m_NullPlayable"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Animations.AnimationPosePlayable m_NullPlayable
void UnityEngine::Animations::AnimationPosePlayable::_set_m_NullPlayable(UnityEngine::Animations::AnimationPosePlayable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPosePlayable::_set_m_NullPlayable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Animations", "AnimationPosePlayable", "m_NullPlayable", value));
}
// Autogenerated method: UnityEngine.Animations.AnimationPosePlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationPosePlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPosePlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationPosePlayable.Equals
bool UnityEngine::Animations::AnimationPosePlayable::Equals(UnityEngine::Animations::AnimationPosePlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPosePlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Animations.AnimationPosePlayable..cctor
void UnityEngine::Animations::AnimationPosePlayable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationPosePlayable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationPosePlayable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: AnimationPosePlayable::AnimationPosePlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPosePlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationPosePlayable::AnimationPosePlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPosePlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPosePlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationPosePlayable::AnimationPosePlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPosePlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AnimationPosePlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AnimationPosePlayable::*)()>(&AnimationPosePlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPosePlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPosePlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationPosePlayable::*)(UnityEngine::Animations::AnimationPosePlayable)>(&AnimationPosePlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPosePlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationPosePlayable>()});
  }
};
// Writing MetadataGetter for method: AnimationPosePlayable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AnimationPosePlayable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPosePlayable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Animations.AnimationRemoveScalePlayable
#include "UnityEngine/Animations/AnimationRemoveScalePlayable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Animations.AnimationRemoveScalePlayable m_NullPlayable
UnityEngine::Animations::AnimationRemoveScalePlayable UnityEngine::Animations::AnimationRemoveScalePlayable::_get_m_NullPlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationRemoveScalePlayable::_get_m_NullPlayable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Animations::AnimationRemoveScalePlayable>("UnityEngine.Animations", "AnimationRemoveScalePlayable", "m_NullPlayable"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Animations.AnimationRemoveScalePlayable m_NullPlayable
void UnityEngine::Animations::AnimationRemoveScalePlayable::_set_m_NullPlayable(UnityEngine::Animations::AnimationRemoveScalePlayable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationRemoveScalePlayable::_set_m_NullPlayable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Animations", "AnimationRemoveScalePlayable", "m_NullPlayable", value));
}
// Autogenerated method: UnityEngine.Animations.AnimationRemoveScalePlayable.Create
UnityEngine::Animations::AnimationRemoveScalePlayable UnityEngine::Animations::AnimationRemoveScalePlayable::Create(UnityEngine::Playables::PlayableGraph graph, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationRemoveScalePlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationRemoveScalePlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationRemoveScalePlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, inputCount);
}
// Autogenerated method: UnityEngine.Animations.AnimationRemoveScalePlayable.CreateHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationRemoveScalePlayable::CreateHandle(UnityEngine::Playables::PlayableGraph graph, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationRemoveScalePlayable::CreateHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationRemoveScalePlayable", "CreateHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, inputCount);
}
// Autogenerated method: UnityEngine.Animations.AnimationRemoveScalePlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationRemoveScalePlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationRemoveScalePlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationRemoveScalePlayable.Equals
bool UnityEngine::Animations::AnimationRemoveScalePlayable::Equals(UnityEngine::Animations::AnimationRemoveScalePlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationRemoveScalePlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Animations.AnimationRemoveScalePlayable.CreateHandleInternal
bool UnityEngine::Animations::AnimationRemoveScalePlayable::CreateHandleInternal(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationRemoveScalePlayable::CreateHandleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationRemoveScalePlayable", "CreateHandleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, handle);
}
// Autogenerated method: UnityEngine.Animations.AnimationRemoveScalePlayable..cctor
void UnityEngine::Animations::AnimationRemoveScalePlayable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationRemoveScalePlayable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationRemoveScalePlayable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationRemoveScalePlayable.CreateHandleInternal_Injected
bool UnityEngine::Animations::AnimationRemoveScalePlayable::CreateHandleInternal_Injected(UnityEngine::Playables::PlayableGraph& graph, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationRemoveScalePlayable::CreateHandleInternal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationRemoveScalePlayable", "CreateHandleInternal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, handle);
}
// Writing MetadataGetter for method: AnimationRemoveScalePlayable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationRemoveScalePlayable (*)(UnityEngine::Playables::PlayableGraph, int)>(&AnimationRemoveScalePlayable::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationRemoveScalePlayable), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationRemoveScalePlayable::CreateHandle
// Il2CppName: CreateHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (*)(UnityEngine::Playables::PlayableGraph, int)>(&AnimationRemoveScalePlayable::CreateHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationRemoveScalePlayable), "CreateHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationRemoveScalePlayable::AnimationRemoveScalePlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationRemoveScalePlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationRemoveScalePlayable::AnimationRemoveScalePlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationRemoveScalePlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationRemoveScalePlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationRemoveScalePlayable::AnimationRemoveScalePlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationRemoveScalePlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AnimationRemoveScalePlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AnimationRemoveScalePlayable::*)()>(&AnimationRemoveScalePlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationRemoveScalePlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationRemoveScalePlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationRemoveScalePlayable::*)(UnityEngine::Animations::AnimationRemoveScalePlayable)>(&AnimationRemoveScalePlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationRemoveScalePlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationRemoveScalePlayable>()});
  }
};
// Writing MetadataGetter for method: AnimationRemoveScalePlayable::CreateHandleInternal
// Il2CppName: CreateHandleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Playables::PlayableHandle&)>(&AnimationRemoveScalePlayable::CreateHandleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationRemoveScalePlayable), "CreateHandleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: AnimationRemoveScalePlayable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AnimationRemoveScalePlayable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationRemoveScalePlayable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationRemoveScalePlayable::CreateHandleInternal_Injected
// Il2CppName: CreateHandleInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, UnityEngine::Playables::PlayableHandle&)>(&AnimationRemoveScalePlayable::CreateHandleInternal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationRemoveScalePlayable), "CreateHandleInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Animations.AnimationScriptPlayable
#include "UnityEngine/Animations/AnimationScriptPlayable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Animations.AnimationScriptPlayable m_NullPlayable
UnityEngine::Animations::AnimationScriptPlayable UnityEngine::Animations::AnimationScriptPlayable::_get_m_NullPlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationScriptPlayable::_get_m_NullPlayable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Animations::AnimationScriptPlayable>("UnityEngine.Animations", "AnimationScriptPlayable", "m_NullPlayable"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Animations.AnimationScriptPlayable m_NullPlayable
void UnityEngine::Animations::AnimationScriptPlayable::_set_m_NullPlayable(UnityEngine::Animations::AnimationScriptPlayable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationScriptPlayable::_set_m_NullPlayable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Animations", "AnimationScriptPlayable", "m_NullPlayable", value));
}
// Autogenerated method: UnityEngine.Animations.AnimationScriptPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimationScriptPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationScriptPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimationScriptPlayable.Equals
bool UnityEngine::Animations::AnimationScriptPlayable::Equals(UnityEngine::Animations::AnimationScriptPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationScriptPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Animations.AnimationScriptPlayable..cctor
void UnityEngine::Animations::AnimationScriptPlayable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimationScriptPlayable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimationScriptPlayable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: AnimationScriptPlayable::AnimationScriptPlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationScriptPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationScriptPlayable::AnimationScriptPlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationScriptPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationScriptPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimationScriptPlayable::AnimationScriptPlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationScriptPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AnimationScriptPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AnimationScriptPlayable::*)()>(&AnimationScriptPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationScriptPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationScriptPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationScriptPlayable::*)(UnityEngine::Animations::AnimationScriptPlayable)>(&AnimationScriptPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationScriptPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationScriptPlayable>()});
  }
};
// Writing MetadataGetter for method: AnimationScriptPlayable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AnimationScriptPlayable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationScriptPlayable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Animations.AnimatorControllerPlayable
#include "UnityEngine/Animations/AnimatorControllerPlayable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Animations.AnimatorControllerPlayable m_NullPlayable
UnityEngine::Animations::AnimatorControllerPlayable UnityEngine::Animations::AnimatorControllerPlayable::_get_m_NullPlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimatorControllerPlayable::_get_m_NullPlayable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Animations::AnimatorControllerPlayable>("UnityEngine.Animations", "AnimatorControllerPlayable", "m_NullPlayable"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Animations.AnimatorControllerPlayable m_NullPlayable
void UnityEngine::Animations::AnimatorControllerPlayable::_set_m_NullPlayable(UnityEngine::Animations::AnimatorControllerPlayable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimatorControllerPlayable::_set_m_NullPlayable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Animations", "AnimatorControllerPlayable", "m_NullPlayable", value));
}
// Autogenerated method: UnityEngine.Animations.AnimatorControllerPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Animations::AnimatorControllerPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimatorControllerPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Animations.AnimatorControllerPlayable.SetHandle
void UnityEngine::Animations::AnimatorControllerPlayable::SetHandle(UnityEngine::Playables::PlayableHandle handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimatorControllerPlayable::SetHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, handle);
}
// Autogenerated method: UnityEngine.Animations.AnimatorControllerPlayable.Equals
bool UnityEngine::Animations::AnimatorControllerPlayable::Equals(UnityEngine::Animations::AnimatorControllerPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimatorControllerPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Animations.AnimatorControllerPlayable..cctor
void UnityEngine::Animations::AnimatorControllerPlayable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animations::AnimatorControllerPlayable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Animations", "AnimatorControllerPlayable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: AnimatorControllerPlayable::AnimatorControllerPlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimatorControllerPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimatorControllerPlayable::AnimatorControllerPlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatorControllerPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimatorControllerPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimatorControllerPlayable::AnimatorControllerPlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatorControllerPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AnimatorControllerPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AnimatorControllerPlayable::*)()>(&AnimatorControllerPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatorControllerPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimatorControllerPlayable::SetHandle
// Il2CppName: SetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimatorControllerPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AnimatorControllerPlayable::SetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatorControllerPlayable), "SetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AnimatorControllerPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimatorControllerPlayable::*)(UnityEngine::Animations::AnimatorControllerPlayable)>(&AnimatorControllerPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatorControllerPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimatorControllerPlayable>()});
  }
};
// Writing MetadataGetter for method: AnimatorControllerPlayable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AnimatorControllerPlayable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatorControllerPlayable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AssetBundle
#include "UnityEngine/AssetBundle.hpp"
// Including type: UnityEngine.AssetBundleCreateRequest
#include "UnityEngine/AssetBundleCreateRequest.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.AssetBundleRequest
#include "UnityEngine/AssetBundleRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AssetBundle.LoadFromFileAsync_Internal
UnityEngine::AssetBundleCreateRequest* UnityEngine::AssetBundle::LoadFromFileAsync_Internal(::Il2CppString* path, uint crc, uint64_t offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadFromFileAsync_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AssetBundle", "LoadFromFileAsync_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(crc), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundleCreateRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, crc, offset);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadFromFileAsync
UnityEngine::AssetBundleCreateRequest* UnityEngine::AssetBundle::LoadFromFileAsync(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadFromFileAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AssetBundle", "LoadFromFileAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundleCreateRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadFromFileAsync
UnityEngine::AssetBundleCreateRequest* UnityEngine::AssetBundle::LoadFromFileAsync(::Il2CppString* path, uint crc) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadFromFileAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AssetBundle", "LoadFromFileAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(crc)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundleCreateRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, crc);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadFromFile_Internal
UnityEngine::AssetBundle* UnityEngine::AssetBundle::LoadFromFile_Internal(::Il2CppString* path, uint crc, uint64_t offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadFromFile_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AssetBundle", "LoadFromFile_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(crc), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundle*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, crc, offset);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadFromFile
UnityEngine::AssetBundle* UnityEngine::AssetBundle::LoadFromFile(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadFromFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AssetBundle", "LoadFromFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundle*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadAsset
UnityEngine::Object* UnityEngine::AssetBundle::LoadAsset(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method, name);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadAsset
UnityEngine::Object* UnityEngine::AssetBundle::LoadAsset(::Il2CppString* name, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method, name, type);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadAsset_Internal
UnityEngine::Object* UnityEngine::AssetBundle::LoadAsset_Internal(::Il2CppString* name, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadAsset_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAsset_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method, name, type);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadAssetAsync
UnityEngine::AssetBundleRequest* UnityEngine::AssetBundle::LoadAssetAsync(::Il2CppString* name, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadAssetAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAssetAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundleRequest*, false>(this, ___internal__method, name, type);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadAssetWithSubAssetsAsync
UnityEngine::AssetBundleRequest* UnityEngine::AssetBundle::LoadAssetWithSubAssetsAsync(::Il2CppString* name, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadAssetWithSubAssetsAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAssetWithSubAssetsAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundleRequest*, false>(this, ___internal__method, name, type);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadAllAssetsAsync
UnityEngine::AssetBundleRequest* UnityEngine::AssetBundle::LoadAllAssetsAsync(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadAllAssetsAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAllAssetsAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundleRequest*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadAssetAsync_Internal
UnityEngine::AssetBundleRequest* UnityEngine::AssetBundle::LoadAssetAsync_Internal(::Il2CppString* name, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadAssetAsync_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAssetAsync_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundleRequest*, false>(this, ___internal__method, name, type);
}
// Autogenerated method: UnityEngine.AssetBundle.Unload
void UnityEngine::AssetBundle::Unload(bool unloadAllLoadedObjects) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::Unload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unloadAllLoadedObjects)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unloadAllLoadedObjects);
}
// Autogenerated method: UnityEngine.AssetBundle.GetAllAssetNames
::Array<::Il2CppString*>* UnityEngine::AssetBundle::GetAllAssetNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::GetAllAssetNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllAssetNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AssetBundle.GetAllScenePaths
::Array<::Il2CppString*>* UnityEngine::AssetBundle::GetAllScenePaths() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::GetAllScenePaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllScenePaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AssetBundle.LoadAssetWithSubAssetsAsync_Internal
UnityEngine::AssetBundleRequest* UnityEngine::AssetBundle::LoadAssetWithSubAssetsAsync_Internal(::Il2CppString* name, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundle::LoadAssetWithSubAssetsAsync_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAssetWithSubAssetsAsync_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundleRequest*, false>(this, ___internal__method, name, type);
}
// Writing MetadataGetter for method: AssetBundle::LoadFromFileAsync_Internal
// Il2CppName: LoadFromFileAsync_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundleCreateRequest* (*)(::Il2CppString*, uint, uint64_t)>(&AssetBundle::LoadFromFileAsync_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadFromFileAsync_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadFromFileAsync
// Il2CppName: LoadFromFileAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundleCreateRequest* (*)(::Il2CppString*)>(&AssetBundle::LoadFromFileAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadFromFileAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadFromFileAsync
// Il2CppName: LoadFromFileAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundleCreateRequest* (*)(::Il2CppString*, uint)>(&AssetBundle::LoadFromFileAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadFromFileAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadFromFile_Internal
// Il2CppName: LoadFromFile_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundle* (*)(::Il2CppString*, uint, uint64_t)>(&AssetBundle::LoadFromFile_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadFromFile_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadFromFile
// Il2CppName: LoadFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundle* (*)(::Il2CppString*)>(&AssetBundle::LoadFromFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadAsset
// Il2CppName: LoadAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (AssetBundle::*)(::Il2CppString*)>(&AssetBundle::LoadAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadAsset
// Il2CppName: LoadAsset
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: AssetBundle::LoadAsset
// Il2CppName: LoadAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (AssetBundle::*)(::Il2CppString*, System::Type*)>(&AssetBundle::LoadAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadAsset_Internal
// Il2CppName: LoadAsset_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (AssetBundle::*)(::Il2CppString*, System::Type*)>(&AssetBundle::LoadAsset_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadAsset_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadAssetAsync
// Il2CppName: LoadAssetAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: AssetBundle::LoadAssetAsync
// Il2CppName: LoadAssetAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundleRequest* (AssetBundle::*)(::Il2CppString*, System::Type*)>(&AssetBundle::LoadAssetAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadAssetAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadAssetWithSubAssetsAsync
// Il2CppName: LoadAssetWithSubAssetsAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundleRequest* (AssetBundle::*)(::Il2CppString*, System::Type*)>(&AssetBundle::LoadAssetWithSubAssetsAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadAssetWithSubAssetsAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadAllAssetsAsync
// Il2CppName: LoadAllAssetsAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: AssetBundle::LoadAllAssetsAsync
// Il2CppName: LoadAllAssetsAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundleRequest* (AssetBundle::*)(System::Type*)>(&AssetBundle::LoadAllAssetsAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadAllAssetsAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadAssetAsync_Internal
// Il2CppName: LoadAssetAsync_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundleRequest* (AssetBundle::*)(::Il2CppString*, System::Type*)>(&AssetBundle::LoadAssetAsync_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadAssetAsync_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::Unload
// Il2CppName: Unload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssetBundle::*)(bool)>(&AssetBundle::Unload)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "Unload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::GetAllAssetNames
// Il2CppName: GetAllAssetNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (AssetBundle::*)()>(&AssetBundle::GetAllAssetNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "GetAllAssetNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AssetBundle::GetAllScenePaths
// Il2CppName: GetAllScenePaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (AssetBundle::*)()>(&AssetBundle::GetAllScenePaths)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "GetAllScenePaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AssetBundle::LoadAssetWithSubAssetsAsync_Internal
// Il2CppName: LoadAssetWithSubAssetsAsync_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundleRequest* (AssetBundle::*)(::Il2CppString*, System::Type*)>(&AssetBundle::LoadAssetWithSubAssetsAsync_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), "LoadAssetWithSubAssetsAsync_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AssetBundle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssetBundle::*)()>(&AssetBundle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssetBundle::*)()>(&AssetBundle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.AssetBundleCreateRequest
#include "UnityEngine/AssetBundleCreateRequest.hpp"
// Including type: UnityEngine.AssetBundle
#include "UnityEngine/AssetBundle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AssetBundleCreateRequest.get_assetBundle
UnityEngine::AssetBundle* UnityEngine::AssetBundleCreateRequest::get_assetBundle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundleCreateRequest::get_assetBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_assetBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AssetBundle*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AssetBundleCreateRequest::get_assetBundle
// Il2CppName: get_assetBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AssetBundle* (AssetBundleCreateRequest::*)()>(&AssetBundleCreateRequest::get_assetBundle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundleCreateRequest*), "get_assetBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AssetBundleCreateRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssetBundleCreateRequest::*)()>(&AssetBundleCreateRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundleCreateRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssetBundleCreateRequest::*)()>(&AssetBundleCreateRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundleCreateRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AssetBundleRequest
#include "UnityEngine/AssetBundleRequest.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AssetBundleRequest.get_asset
UnityEngine::Object* UnityEngine::AssetBundleRequest::get_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundleRequest::get_asset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AssetBundleRequest.get_allAssets
::Array<UnityEngine::Object*>* UnityEngine::AssetBundleRequest::get_allAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AssetBundleRequest::get_allAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Object*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AssetBundleRequest::get_asset
// Il2CppName: get_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (AssetBundleRequest::*)()>(&AssetBundleRequest::get_asset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundleRequest*), "get_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AssetBundleRequest::get_allAssets
// Il2CppName: get_allAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (AssetBundleRequest::*)()>(&AssetBundleRequest::get_allAssets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundleRequest*), "get_allAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AssetBundleRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssetBundleRequest::*)()>(&AssetBundleRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundleRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssetBundleRequest::*)()>(&AssetBundleRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetBundleRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.AudioSpeakerMode
#include "UnityEngine/AudioSpeakerMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [ObsoleteAttribute] Offset: 0xDBC7A8
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioSpeakerMode Raw
UnityEngine::AudioSpeakerMode UnityEngine::AudioSpeakerMode::_get_Raw() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_get_Raw");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioSpeakerMode>("UnityEngine", "AudioSpeakerMode", "Raw"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioSpeakerMode Raw
void UnityEngine::AudioSpeakerMode::_set_Raw(UnityEngine::AudioSpeakerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_set_Raw");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSpeakerMode", "Raw", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioSpeakerMode Mono
UnityEngine::AudioSpeakerMode UnityEngine::AudioSpeakerMode::_get_Mono() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_get_Mono");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioSpeakerMode>("UnityEngine", "AudioSpeakerMode", "Mono"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioSpeakerMode Mono
void UnityEngine::AudioSpeakerMode::_set_Mono(UnityEngine::AudioSpeakerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_set_Mono");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSpeakerMode", "Mono", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioSpeakerMode Stereo
UnityEngine::AudioSpeakerMode UnityEngine::AudioSpeakerMode::_get_Stereo() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_get_Stereo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioSpeakerMode>("UnityEngine", "AudioSpeakerMode", "Stereo"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioSpeakerMode Stereo
void UnityEngine::AudioSpeakerMode::_set_Stereo(UnityEngine::AudioSpeakerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_set_Stereo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSpeakerMode", "Stereo", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioSpeakerMode Quad
UnityEngine::AudioSpeakerMode UnityEngine::AudioSpeakerMode::_get_Quad() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_get_Quad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioSpeakerMode>("UnityEngine", "AudioSpeakerMode", "Quad"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioSpeakerMode Quad
void UnityEngine::AudioSpeakerMode::_set_Quad(UnityEngine::AudioSpeakerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_set_Quad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSpeakerMode", "Quad", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioSpeakerMode Surround
UnityEngine::AudioSpeakerMode UnityEngine::AudioSpeakerMode::_get_Surround() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_get_Surround");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioSpeakerMode>("UnityEngine", "AudioSpeakerMode", "Surround"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioSpeakerMode Surround
void UnityEngine::AudioSpeakerMode::_set_Surround(UnityEngine::AudioSpeakerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_set_Surround");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSpeakerMode", "Surround", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioSpeakerMode Mode5point1
UnityEngine::AudioSpeakerMode UnityEngine::AudioSpeakerMode::_get_Mode5point1() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_get_Mode5point1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioSpeakerMode>("UnityEngine", "AudioSpeakerMode", "Mode5point1"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioSpeakerMode Mode5point1
void UnityEngine::AudioSpeakerMode::_set_Mode5point1(UnityEngine::AudioSpeakerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_set_Mode5point1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSpeakerMode", "Mode5point1", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioSpeakerMode Mode7point1
UnityEngine::AudioSpeakerMode UnityEngine::AudioSpeakerMode::_get_Mode7point1() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_get_Mode7point1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioSpeakerMode>("UnityEngine", "AudioSpeakerMode", "Mode7point1"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioSpeakerMode Mode7point1
void UnityEngine::AudioSpeakerMode::_set_Mode7point1(UnityEngine::AudioSpeakerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_set_Mode7point1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSpeakerMode", "Mode7point1", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioSpeakerMode Prologic
UnityEngine::AudioSpeakerMode UnityEngine::AudioSpeakerMode::_get_Prologic() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_get_Prologic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioSpeakerMode>("UnityEngine", "AudioSpeakerMode", "Prologic"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioSpeakerMode Prologic
void UnityEngine::AudioSpeakerMode::_set_Prologic(UnityEngine::AudioSpeakerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSpeakerMode::_set_Prologic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSpeakerMode", "Prologic", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.AudioDataLoadState
#include "UnityEngine/AudioDataLoadState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioDataLoadState Unloaded
UnityEngine::AudioDataLoadState UnityEngine::AudioDataLoadState::_get_Unloaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioDataLoadState::_get_Unloaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioDataLoadState>("UnityEngine", "AudioDataLoadState", "Unloaded"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioDataLoadState Unloaded
void UnityEngine::AudioDataLoadState::_set_Unloaded(UnityEngine::AudioDataLoadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioDataLoadState::_set_Unloaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioDataLoadState", "Unloaded", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioDataLoadState Loading
UnityEngine::AudioDataLoadState UnityEngine::AudioDataLoadState::_get_Loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioDataLoadState::_get_Loading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioDataLoadState>("UnityEngine", "AudioDataLoadState", "Loading"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioDataLoadState Loading
void UnityEngine::AudioDataLoadState::_set_Loading(UnityEngine::AudioDataLoadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioDataLoadState::_set_Loading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioDataLoadState", "Loading", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioDataLoadState Loaded
UnityEngine::AudioDataLoadState UnityEngine::AudioDataLoadState::_get_Loaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioDataLoadState::_get_Loaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioDataLoadState>("UnityEngine", "AudioDataLoadState", "Loaded"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioDataLoadState Loaded
void UnityEngine::AudioDataLoadState::_set_Loaded(UnityEngine::AudioDataLoadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioDataLoadState::_set_Loaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioDataLoadState", "Loaded", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.AudioDataLoadState Failed
UnityEngine::AudioDataLoadState UnityEngine::AudioDataLoadState::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioDataLoadState::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioDataLoadState>("UnityEngine", "AudioDataLoadState", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.AudioDataLoadState Failed
void UnityEngine::AudioDataLoadState::_set_Failed(UnityEngine::AudioDataLoadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioDataLoadState::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioDataLoadState", "Failed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.FFTWindow
#include "UnityEngine/FFTWindow.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.FFTWindow Rectangular
UnityEngine::FFTWindow UnityEngine::FFTWindow::_get_Rectangular() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_get_Rectangular");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::FFTWindow>("UnityEngine", "FFTWindow", "Rectangular"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.FFTWindow Rectangular
void UnityEngine::FFTWindow::_set_Rectangular(UnityEngine::FFTWindow value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_set_Rectangular");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "FFTWindow", "Rectangular", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.FFTWindow Triangle
UnityEngine::FFTWindow UnityEngine::FFTWindow::_get_Triangle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_get_Triangle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::FFTWindow>("UnityEngine", "FFTWindow", "Triangle"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.FFTWindow Triangle
void UnityEngine::FFTWindow::_set_Triangle(UnityEngine::FFTWindow value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_set_Triangle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "FFTWindow", "Triangle", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.FFTWindow Hamming
UnityEngine::FFTWindow UnityEngine::FFTWindow::_get_Hamming() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_get_Hamming");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::FFTWindow>("UnityEngine", "FFTWindow", "Hamming"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.FFTWindow Hamming
void UnityEngine::FFTWindow::_set_Hamming(UnityEngine::FFTWindow value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_set_Hamming");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "FFTWindow", "Hamming", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.FFTWindow Hanning
UnityEngine::FFTWindow UnityEngine::FFTWindow::_get_Hanning() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_get_Hanning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::FFTWindow>("UnityEngine", "FFTWindow", "Hanning"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.FFTWindow Hanning
void UnityEngine::FFTWindow::_set_Hanning(UnityEngine::FFTWindow value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_set_Hanning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "FFTWindow", "Hanning", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.FFTWindow Blackman
UnityEngine::FFTWindow UnityEngine::FFTWindow::_get_Blackman() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_get_Blackman");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::FFTWindow>("UnityEngine", "FFTWindow", "Blackman"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.FFTWindow Blackman
void UnityEngine::FFTWindow::_set_Blackman(UnityEngine::FFTWindow value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_set_Blackman");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "FFTWindow", "Blackman", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.FFTWindow BlackmanHarris
UnityEngine::FFTWindow UnityEngine::FFTWindow::_get_BlackmanHarris() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_get_BlackmanHarris");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::FFTWindow>("UnityEngine", "FFTWindow", "BlackmanHarris"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.FFTWindow BlackmanHarris
void UnityEngine::FFTWindow::_set_BlackmanHarris(UnityEngine::FFTWindow value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::FFTWindow::_set_BlackmanHarris");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "FFTWindow", "BlackmanHarris", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AudioSettings
#include "UnityEngine/AudioSettings.hpp"
// Including type: UnityEngine.AudioSettings/AudioConfigurationChangeHandler
#include "UnityEngine/AudioSettings_AudioConfigurationChangeHandler.hpp"
// Including type: UnityEngine.AudioSettings/Mobile
#include "UnityEngine/AudioSettings_Mobile.hpp"
// Including type: UnityEngine.AudioConfiguration
#include "UnityEngine/AudioConfiguration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DebuggerBrowsableAttribute] Offset: 0xDBC7E4
// [CompilerGeneratedAttribute] Offset: 0xDBC7E4
// Autogenerated static field getter
// Get static field: static private UnityEngine.AudioSettings/AudioConfigurationChangeHandler OnAudioConfigurationChanged
UnityEngine::AudioSettings::AudioConfigurationChangeHandler* UnityEngine::AudioSettings::_get_OnAudioConfigurationChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::_get_OnAudioConfigurationChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AudioSettings::AudioConfigurationChangeHandler*>("UnityEngine", "AudioSettings", "OnAudioConfigurationChanged"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.AudioSettings/AudioConfigurationChangeHandler OnAudioConfigurationChanged
void UnityEngine::AudioSettings::_set_OnAudioConfigurationChanged(UnityEngine::AudioSettings::AudioConfigurationChangeHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::_set_OnAudioConfigurationChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSettings", "OnAudioConfigurationChanged", value));
}
// Autogenerated method: UnityEngine.AudioSettings.GetSampleRate
int UnityEngine::AudioSettings::GetSampleRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::GetSampleRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings", "GetSampleRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings.get_dspTime
double UnityEngine::AudioSettings::get_dspTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::get_dspTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings", "get_dspTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings.get_outputSampleRate
int UnityEngine::AudioSettings::get_outputSampleRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::get_outputSampleRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings", "get_outputSampleRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings.GetSpatializerPluginName
::Il2CppString* UnityEngine::AudioSettings::GetSpatializerPluginName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::GetSpatializerPluginName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings", "GetSpatializerPluginName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings.GetConfiguration
UnityEngine::AudioConfiguration UnityEngine::AudioSettings::GetConfiguration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::GetConfiguration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings", "GetConfiguration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioConfiguration, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings.InvokeOnAudioConfigurationChanged
void UnityEngine::AudioSettings::InvokeOnAudioConfigurationChanged(bool deviceWasChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::InvokeOnAudioConfigurationChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings", "InvokeOnAudioConfigurationChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceWasChanged)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceWasChanged);
}
// Autogenerated method: UnityEngine.AudioSettings.StartAudioOutput
bool UnityEngine::AudioSettings::StartAudioOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::StartAudioOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings", "StartAudioOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings.StopAudioOutput
bool UnityEngine::AudioSettings::StopAudioOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::StopAudioOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings", "StopAudioOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings.GetConfiguration_Injected
void UnityEngine::AudioSettings::GetConfiguration_Injected(UnityEngine::AudioConfiguration& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::GetConfiguration_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings", "GetConfiguration_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioConfiguration&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ret);
}
// Writing MetadataGetter for method: AudioSettings::GetSampleRate
// Il2CppName: GetSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&AudioSettings::GetSampleRate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings*), "GetSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::get_dspTime
// Il2CppName: get_dspTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)()>(&AudioSettings::get_dspTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings*), "get_dspTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::get_outputSampleRate
// Il2CppName: get_outputSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&AudioSettings::get_outputSampleRate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings*), "get_outputSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::GetSpatializerPluginName
// Il2CppName: GetSpatializerPluginName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&AudioSettings::GetSpatializerPluginName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings*), "GetSpatializerPluginName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::GetConfiguration
// Il2CppName: GetConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioConfiguration (*)()>(&AudioSettings::GetConfiguration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings*), "GetConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::InvokeOnAudioConfigurationChanged
// Il2CppName: InvokeOnAudioConfigurationChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&AudioSettings::InvokeOnAudioConfigurationChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings*), "InvokeOnAudioConfigurationChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSettings::StartAudioOutput
// Il2CppName: StartAudioOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&AudioSettings::StartAudioOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings*), "StartAudioOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::StopAudioOutput
// Il2CppName: StopAudioOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&AudioSettings::StopAudioOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings*), "StopAudioOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::GetConfiguration_Injected
// Il2CppName: GetConfiguration_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::AudioConfiguration&)>(&AudioSettings::GetConfiguration_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings*), "GetConfiguration_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioConfiguration&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AudioSettings/AudioConfigurationChangeHandler
#include "UnityEngine/AudioSettings_AudioConfigurationChangeHandler.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AudioSettings/AudioConfigurationChangeHandler.Invoke
void UnityEngine::AudioSettings::AudioConfigurationChangeHandler::Invoke(bool deviceWasChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::AudioConfigurationChangeHandler::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceWasChanged)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deviceWasChanged);
}
// Autogenerated method: UnityEngine.AudioSettings/AudioConfigurationChangeHandler.BeginInvoke
System::IAsyncResult* UnityEngine::AudioSettings::AudioConfigurationChangeHandler::BeginInvoke(bool deviceWasChanged, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::AudioConfigurationChangeHandler::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceWasChanged), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, deviceWasChanged, callback, object);
}
// Autogenerated method: UnityEngine.AudioSettings/AudioConfigurationChangeHandler.EndInvoke
void UnityEngine::AudioSettings::AudioConfigurationChangeHandler::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::AudioConfigurationChangeHandler::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: AudioSettings::AudioConfigurationChangeHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSettings::AudioConfigurationChangeHandler::*)(::Il2CppObject*, System::IntPtr)>(&AudioSettings::AudioConfigurationChangeHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::AudioConfigurationChangeHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSettings::AudioConfigurationChangeHandler::*)(::Il2CppObject*, System::IntPtr)>(&AudioSettings::AudioConfigurationChangeHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::AudioConfigurationChangeHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AudioSettings::AudioConfigurationChangeHandler::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSettings::AudioConfigurationChangeHandler::*)(bool)>(&AudioSettings::AudioConfigurationChangeHandler::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::AudioConfigurationChangeHandler*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSettings::AudioConfigurationChangeHandler::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (AudioSettings::AudioConfigurationChangeHandler::*)(bool, System::AsyncCallback*, ::Il2CppObject*)>(&AudioSettings::AudioConfigurationChangeHandler::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::AudioConfigurationChangeHandler*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AudioSettings::AudioConfigurationChangeHandler::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSettings::AudioConfigurationChangeHandler::*)(System::IAsyncResult*)>(&AudioSettings::AudioConfigurationChangeHandler::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::AudioConfigurationChangeHandler*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.AudioSettings/Mobile
#include "UnityEngine/AudioSettings_Mobile.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DebuggerBrowsableAttribute] Offset: 0xDBC820
// [CompilerGeneratedAttribute] Offset: 0xDBC820
// Autogenerated static field getter
// Get static field: static private System.Boolean <muteState>k__BackingField
bool UnityEngine::AudioSettings::Mobile::_get_$muteState$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::_get_$muteState$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("UnityEngine", "AudioSettings/Mobile", "<muteState>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <muteState>k__BackingField
void UnityEngine::AudioSettings::Mobile::_set_$muteState$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::_set_$muteState$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSettings/Mobile", "<muteState>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _stopAudioOutputOnMute
bool UnityEngine::AudioSettings::Mobile::_get__stopAudioOutputOnMute() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::_get__stopAudioOutputOnMute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("UnityEngine", "AudioSettings/Mobile", "_stopAudioOutputOnMute"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _stopAudioOutputOnMute
void UnityEngine::AudioSettings::Mobile::_set__stopAudioOutputOnMute(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::_set__stopAudioOutputOnMute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSettings/Mobile", "_stopAudioOutputOnMute", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDBC85C
// [DebuggerBrowsableAttribute] Offset: 0xDBC85C
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Boolean> OnMuteStateChanged
System::Action_1<bool>* UnityEngine::AudioSettings::Mobile::_get_OnMuteStateChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::_get_OnMuteStateChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<bool>*>("UnityEngine", "AudioSettings/Mobile", "OnMuteStateChanged"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Boolean> OnMuteStateChanged
void UnityEngine::AudioSettings::Mobile::_set_OnMuteStateChanged(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::_set_OnMuteStateChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSettings/Mobile", "OnMuteStateChanged", value));
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.get_muteState
bool UnityEngine::AudioSettings::Mobile::get_muteState() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::get_muteState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings/Mobile", "get_muteState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.set_muteState
void UnityEngine::AudioSettings::Mobile::set_muteState(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::set_muteState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings/Mobile", "set_muteState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.get_stopAudioOutputOnMute
bool UnityEngine::AudioSettings::Mobile::get_stopAudioOutputOnMute() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::get_stopAudioOutputOnMute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings/Mobile", "get_stopAudioOutputOnMute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.InvokeOnMuteStateChanged
void UnityEngine::AudioSettings::Mobile::InvokeOnMuteStateChanged(bool mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::InvokeOnMuteStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings/Mobile", "InvokeOnMuteStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mute)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mute);
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.StartAudioOutput
void UnityEngine::AudioSettings::Mobile::StartAudioOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::StartAudioOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings/Mobile", "StartAudioOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.StopAudioOutput
void UnityEngine::AudioSettings::Mobile::StopAudioOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::StopAudioOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings/Mobile", "StopAudioOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile..cctor
void UnityEngine::AudioSettings::Mobile::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSettings::Mobile::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSettings/Mobile", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: AudioSettings::Mobile::get_muteState
// Il2CppName: get_muteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&AudioSettings::Mobile::get_muteState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::Mobile*), "get_muteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::Mobile::set_muteState
// Il2CppName: set_muteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&AudioSettings::Mobile::set_muteState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::Mobile*), "set_muteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSettings::Mobile::get_stopAudioOutputOnMute
// Il2CppName: get_stopAudioOutputOnMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&AudioSettings::Mobile::get_stopAudioOutputOnMute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::Mobile*), "get_stopAudioOutputOnMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::Mobile::InvokeOnMuteStateChanged
// Il2CppName: InvokeOnMuteStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&AudioSettings::Mobile::InvokeOnMuteStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::Mobile*), "InvokeOnMuteStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSettings::Mobile::StartAudioOutput
// Il2CppName: StartAudioOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AudioSettings::Mobile::StartAudioOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::Mobile*), "StartAudioOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::Mobile::StopAudioOutput
// Il2CppName: StopAudioOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AudioSettings::Mobile::StopAudioOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::Mobile*), "StopAudioOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSettings::Mobile::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AudioSettings::Mobile::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSettings::Mobile*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AudioClip/PCMReaderCallback
#include "UnityEngine/AudioClip_PCMReaderCallback.hpp"
// Including type: UnityEngine.AudioClip/PCMSetPositionCallback
#include "UnityEngine/AudioClip_PCMSetPositionCallback.hpp"
// Including type: UnityEngine.AudioDataLoadState
#include "UnityEngine/AudioDataLoadState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AudioClip.GetData
bool UnityEngine::AudioClip::GetData(UnityEngine::AudioClip* clip, ::Array<float>*& data, int numSamples, int samplesOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::GetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioClip", "GetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractIndependentType<::Array<float>*&>(), ::il2cpp_utils::ExtractType(numSamples), ::il2cpp_utils::ExtractType(samplesOffset)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip, data, numSamples, samplesOffset);
}
// Autogenerated method: UnityEngine.AudioClip.SetData
bool UnityEngine::AudioClip::SetData(UnityEngine::AudioClip* clip, ::Array<float>* data, int numsamples, int samplesOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioClip", "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(numsamples), ::il2cpp_utils::ExtractType(samplesOffset)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip, data, numsamples, samplesOffset);
}
// Autogenerated method: UnityEngine.AudioClip.Construct_Internal
UnityEngine::AudioClip* UnityEngine::AudioClip::Construct_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::Construct_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioClip", "Construct_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioClip.GetName
::Il2CppString* UnityEngine::AudioClip::GetName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::GetName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioClip.CreateUserSound
void UnityEngine::AudioClip::CreateUserSound(::Il2CppString* name, int lengthSamples, int channels, int frequency, bool stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::CreateUserSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateUserSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(lengthSamples), ::il2cpp_utils::ExtractType(channels), ::il2cpp_utils::ExtractType(frequency), ::il2cpp_utils::ExtractType(stream)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, lengthSamples, channels, frequency, stream);
}
// Autogenerated method: UnityEngine.AudioClip.get_length
float UnityEngine::AudioClip::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::get_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioClip.get_samples
int UnityEngine::AudioClip::get_samples() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::get_samples");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_samples", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioClip.get_channels
int UnityEngine::AudioClip::get_channels() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::get_channels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_channels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioClip.get_frequency
int UnityEngine::AudioClip::get_frequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::get_frequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioClip.LoadAudioData
bool UnityEngine::AudioClip::LoadAudioData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::LoadAudioData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAudioData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioClip.get_loadState
UnityEngine::AudioDataLoadState UnityEngine::AudioClip::get_loadState() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::get_loadState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_loadState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioDataLoadState, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioClip.GetData
bool UnityEngine::AudioClip::GetData(::Array<float>* data, int offsetSamples) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::GetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offsetSamples)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, offsetSamples);
}
// Autogenerated method: UnityEngine.AudioClip.SetData
bool UnityEngine::AudioClip::SetData(::Array<float>* data, int offsetSamples) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offsetSamples)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, offsetSamples);
}
// Autogenerated method: UnityEngine.AudioClip.Create
UnityEngine::AudioClip* UnityEngine::AudioClip::Create(::Il2CppString* name, int lengthSamples, int channels, int frequency, bool stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioClip", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(lengthSamples), ::il2cpp_utils::ExtractType(channels), ::il2cpp_utils::ExtractType(frequency), ::il2cpp_utils::ExtractType(stream)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, lengthSamples, channels, frequency, stream);
}
// Autogenerated method: UnityEngine.AudioClip.Create
UnityEngine::AudioClip* UnityEngine::AudioClip::Create(::Il2CppString* name, int lengthSamples, int channels, int frequency, bool stream, UnityEngine::AudioClip::PCMReaderCallback* pcmreadercallback, UnityEngine::AudioClip::PCMSetPositionCallback* pcmsetpositioncallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioClip", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(lengthSamples), ::il2cpp_utils::ExtractType(channels), ::il2cpp_utils::ExtractType(frequency), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(pcmreadercallback), ::il2cpp_utils::ExtractType(pcmsetpositioncallback)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, lengthSamples, channels, frequency, stream, pcmreadercallback, pcmsetpositioncallback);
}
// Autogenerated method: UnityEngine.AudioClip.add_m_PCMReaderCallback
void UnityEngine::AudioClip::add_m_PCMReaderCallback(UnityEngine::AudioClip::PCMReaderCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::add_m_PCMReaderCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_m_PCMReaderCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioClip.remove_m_PCMReaderCallback
void UnityEngine::AudioClip::remove_m_PCMReaderCallback(UnityEngine::AudioClip::PCMReaderCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::remove_m_PCMReaderCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_m_PCMReaderCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioClip.add_m_PCMSetPositionCallback
void UnityEngine::AudioClip::add_m_PCMSetPositionCallback(UnityEngine::AudioClip::PCMSetPositionCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::add_m_PCMSetPositionCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_m_PCMSetPositionCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioClip.remove_m_PCMSetPositionCallback
void UnityEngine::AudioClip::remove_m_PCMSetPositionCallback(UnityEngine::AudioClip::PCMSetPositionCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::remove_m_PCMSetPositionCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_m_PCMSetPositionCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioClip.InvokePCMReaderCallback_Internal
void UnityEngine::AudioClip::InvokePCMReaderCallback_Internal(::Array<float>* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::InvokePCMReaderCallback_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokePCMReaderCallback_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: UnityEngine.AudioClip.InvokePCMSetPositionCallback_Internal
void UnityEngine::AudioClip::InvokePCMSetPositionCallback_Internal(int position) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::InvokePCMSetPositionCallback_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokePCMSetPositionCallback_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Writing MetadataGetter for method: AudioClip::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::AudioClip*, ::Array<float>*&, int, int)>(&AudioClip::GetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioClip::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::AudioClip*, ::Array<float>*, int, int)>(&AudioClip::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioClip::Construct_Internal
// Il2CppName: Construct_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (*)()>(&AudioClip::Construct_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "Construct_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClip::GetName
// Il2CppName: GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AudioClip::*)()>(&AudioClip::GetName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClip::CreateUserSound
// Il2CppName: CreateUserSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::*)(::Il2CppString*, int, int, int, bool)>(&AudioClip::CreateUserSound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "CreateUserSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioClip::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioClip::*)()>(&AudioClip::get_length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClip::get_samples
// Il2CppName: get_samples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioClip::*)()>(&AudioClip::get_samples)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "get_samples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClip::get_channels
// Il2CppName: get_channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioClip::*)()>(&AudioClip::get_channels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "get_channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClip::get_frequency
// Il2CppName: get_frequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioClip::*)()>(&AudioClip::get_frequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "get_frequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClip::LoadAudioData
// Il2CppName: LoadAudioData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioClip::*)()>(&AudioClip::LoadAudioData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "LoadAudioData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClip::get_loadState
// Il2CppName: get_loadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioDataLoadState (AudioClip::*)()>(&AudioClip::get_loadState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "get_loadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClip::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioClip::*)(::Array<float>*, int)>(&AudioClip::GetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioClip::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioClip::*)(::Array<float>*, int)>(&AudioClip::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioClip::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (*)(::Il2CppString*, int, int, int, bool)>(&AudioClip::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioClip::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (*)(::Il2CppString*, int, int, int, bool, UnityEngine::AudioClip::PCMReaderCallback*, UnityEngine::AudioClip::PCMSetPositionCallback*)>(&AudioClip::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip::PCMReaderCallback*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip::PCMSetPositionCallback*>()});
  }
};
// Writing MetadataGetter for method: AudioClip::add_m_PCMReaderCallback
// Il2CppName: add_m_PCMReaderCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::*)(UnityEngine::AudioClip::PCMReaderCallback*)>(&AudioClip::add_m_PCMReaderCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "add_m_PCMReaderCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip::PCMReaderCallback*>()});
  }
};
// Writing MetadataGetter for method: AudioClip::remove_m_PCMReaderCallback
// Il2CppName: remove_m_PCMReaderCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::*)(UnityEngine::AudioClip::PCMReaderCallback*)>(&AudioClip::remove_m_PCMReaderCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "remove_m_PCMReaderCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip::PCMReaderCallback*>()});
  }
};
// Writing MetadataGetter for method: AudioClip::add_m_PCMSetPositionCallback
// Il2CppName: add_m_PCMSetPositionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::*)(UnityEngine::AudioClip::PCMSetPositionCallback*)>(&AudioClip::add_m_PCMSetPositionCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "add_m_PCMSetPositionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip::PCMSetPositionCallback*>()});
  }
};
// Writing MetadataGetter for method: AudioClip::remove_m_PCMSetPositionCallback
// Il2CppName: remove_m_PCMSetPositionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::*)(UnityEngine::AudioClip::PCMSetPositionCallback*)>(&AudioClip::remove_m_PCMSetPositionCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "remove_m_PCMSetPositionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip::PCMSetPositionCallback*>()});
  }
};
// Writing MetadataGetter for method: AudioClip::InvokePCMReaderCallback_Internal
// Il2CppName: InvokePCMReaderCallback_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::*)(::Array<float>*)>(&AudioClip::InvokePCMReaderCallback_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "InvokePCMReaderCallback_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>()});
  }
};
// Writing MetadataGetter for method: AudioClip::InvokePCMSetPositionCallback_Internal
// Il2CppName: InvokePCMSetPositionCallback_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::*)(int)>(&AudioClip::InvokePCMSetPositionCallback_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), "InvokePCMSetPositionCallback_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioClip::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::*)()>(&AudioClip::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::*)()>(&AudioClip::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AudioClip/PCMReaderCallback
#include "UnityEngine/AudioClip_PCMReaderCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AudioClip/PCMReaderCallback.Invoke
void UnityEngine::AudioClip::PCMReaderCallback::Invoke(::Array<float>* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::PCMReaderCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: UnityEngine.AudioClip/PCMReaderCallback.BeginInvoke
System::IAsyncResult* UnityEngine::AudioClip::PCMReaderCallback::BeginInvoke(::Array<float>* data, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::PCMReaderCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, data, callback, object);
}
// Autogenerated method: UnityEngine.AudioClip/PCMReaderCallback.EndInvoke
void UnityEngine::AudioClip::PCMReaderCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::PCMReaderCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: AudioClip::PCMReaderCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::PCMReaderCallback::*)(::Il2CppObject*, System::IntPtr)>(&AudioClip::PCMReaderCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip::PCMReaderCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::PCMReaderCallback::*)(::Il2CppObject*, System::IntPtr)>(&AudioClip::PCMReaderCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip::PCMReaderCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AudioClip::PCMReaderCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::PCMReaderCallback::*)(::Array<float>*)>(&AudioClip::PCMReaderCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip::PCMReaderCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>()});
  }
};
// Writing MetadataGetter for method: AudioClip::PCMReaderCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (AudioClip::PCMReaderCallback::*)(::Array<float>*, System::AsyncCallback*, ::Il2CppObject*)>(&AudioClip::PCMReaderCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip::PCMReaderCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AudioClip::PCMReaderCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::PCMReaderCallback::*)(System::IAsyncResult*)>(&AudioClip::PCMReaderCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip::PCMReaderCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AudioClip/PCMSetPositionCallback
#include "UnityEngine/AudioClip_PCMSetPositionCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AudioClip/PCMSetPositionCallback.Invoke
void UnityEngine::AudioClip::PCMSetPositionCallback::Invoke(int position) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::PCMSetPositionCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: UnityEngine.AudioClip/PCMSetPositionCallback.BeginInvoke
System::IAsyncResult* UnityEngine::AudioClip::PCMSetPositionCallback::BeginInvoke(int position, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::PCMSetPositionCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, position, callback, object);
}
// Autogenerated method: UnityEngine.AudioClip/PCMSetPositionCallback.EndInvoke
void UnityEngine::AudioClip::PCMSetPositionCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioClip::PCMSetPositionCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: AudioClip::PCMSetPositionCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::PCMSetPositionCallback::*)(::Il2CppObject*, System::IntPtr)>(&AudioClip::PCMSetPositionCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip::PCMSetPositionCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::PCMSetPositionCallback::*)(::Il2CppObject*, System::IntPtr)>(&AudioClip::PCMSetPositionCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip::PCMSetPositionCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AudioClip::PCMSetPositionCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::PCMSetPositionCallback::*)(int)>(&AudioClip::PCMSetPositionCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip::PCMSetPositionCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioClip::PCMSetPositionCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (AudioClip::PCMSetPositionCallback::*)(int, System::AsyncCallback*, ::Il2CppObject*)>(&AudioClip::PCMSetPositionCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip::PCMSetPositionCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AudioClip::PCMSetPositionCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClip::PCMSetPositionCallback::*)(System::IAsyncResult*)>(&AudioClip::PCMSetPositionCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClip::PCMSetPositionCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.AudioListener
#include "UnityEngine/AudioListener.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AudioListener.get_pause
bool UnityEngine::AudioListener::get_pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioListener::get_pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioListener", "get_pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.AudioListener.set_pause
void UnityEngine::AudioListener::set_pause(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioListener::set_pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioListener", "set_pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Writing MetadataGetter for method: AudioListener::get_pause
// Il2CppName: get_pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&AudioListener::get_pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioListener*), "get_pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioListener::set_pause
// Il2CppName: set_pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&AudioListener::set_pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioListener*), "set_pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.FFTWindow
#include "UnityEngine/FFTWindow.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AudioSource.GetPitch
float UnityEngine::AudioSource::GetPitch(UnityEngine::AudioSource* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::GetPitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSource", "GetPitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source);
}
// Autogenerated method: UnityEngine.AudioSource.SetPitch
void UnityEngine::AudioSource::SetPitch(UnityEngine::AudioSource* source, float pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::SetPitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSource", "SetPitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(pitch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source, pitch);
}
// Autogenerated method: UnityEngine.AudioSource.PlayHelper
void UnityEngine::AudioSource::PlayHelper(UnityEngine::AudioSource* source, uint64_t delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::PlayHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSource", "PlayHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source, delay);
}
// Autogenerated method: UnityEngine.AudioSource.Play
void UnityEngine::AudioSource::Play(double delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, delay);
}
// Autogenerated method: UnityEngine.AudioSource.PlayOneShotHelper
void UnityEngine::AudioSource::PlayOneShotHelper(UnityEngine::AudioSource* source, UnityEngine::AudioClip* clip, float volumeScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::PlayOneShotHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSource", "PlayOneShotHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(volumeScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source, clip, volumeScale);
}
// Autogenerated method: UnityEngine.AudioSource.Stop
void UnityEngine::AudioSource::Stop(bool stopOneShots) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stopOneShots)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, stopOneShots);
}
// Autogenerated method: UnityEngine.AudioSource.GetSpectrumDataHelper
void UnityEngine::AudioSource::GetSpectrumDataHelper(UnityEngine::AudioSource* source, ::Array<float>*& samples, int channel, UnityEngine::FFTWindow window) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::GetSpectrumDataHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AudioSource", "GetSpectrumDataHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractIndependentType<::Array<float>*&>(), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(window)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source, samples, channel, window);
}
// Autogenerated method: UnityEngine.AudioSource.get_volume
float UnityEngine::AudioSource::get_volume() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::get_volume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_volume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.set_volume
void UnityEngine::AudioSource::set_volume(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_volume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_volume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.get_pitch
float UnityEngine::AudioSource::get_pitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::get_pitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.set_pitch
void UnityEngine::AudioSource::set_pitch(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_pitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.get_time
float UnityEngine::AudioSource::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.set_time
void UnityEngine::AudioSource::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.get_timeSamples
int UnityEngine::AudioSource::get_timeSamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::get_timeSamples");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeSamples", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.get_clip
UnityEngine::AudioClip* UnityEngine::AudioSource::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.set_clip
void UnityEngine::AudioSource::set_clip(UnityEngine::AudioClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.Play
void UnityEngine::AudioSource::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.PlayScheduled
void UnityEngine::AudioSource::PlayScheduled(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::PlayScheduled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayScheduled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.AudioSource.PlayOneShot
void UnityEngine::AudioSource::PlayOneShot(UnityEngine::AudioClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::PlayOneShot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayOneShot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.AudioSource.PlayOneShot
void UnityEngine::AudioSource::PlayOneShot(UnityEngine::AudioClip* clip, float volumeScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::PlayOneShot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayOneShot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(volumeScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip, volumeScale);
}
// Autogenerated method: UnityEngine.AudioSource.Stop
void UnityEngine::AudioSource::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.Pause
void UnityEngine::AudioSource::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::Pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.UnPause
void UnityEngine::AudioSource::UnPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::UnPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.get_isPlaying
bool UnityEngine::AudioSource::get_isPlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::get_isPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.set_loop
void UnityEngine::AudioSource::set_loop(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.get_playOnAwake
bool UnityEngine::AudioSource::get_playOnAwake() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::get_playOnAwake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playOnAwake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioSource.set_playOnAwake
void UnityEngine::AudioSource::set_playOnAwake(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_playOnAwake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_playOnAwake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.set_ignoreListenerPause
void UnityEngine::AudioSource::set_ignoreListenerPause(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_ignoreListenerPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ignoreListenerPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.set_spatialBlend
void UnityEngine::AudioSource::set_spatialBlend(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_spatialBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spatialBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.set_reverbZoneMix
void UnityEngine::AudioSource::set_reverbZoneMix(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_reverbZoneMix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_reverbZoneMix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.set_bypassEffects
void UnityEngine::AudioSource::set_bypassEffects(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_bypassEffects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_bypassEffects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.set_bypassReverbZones
void UnityEngine::AudioSource::set_bypassReverbZones(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_bypassReverbZones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_bypassReverbZones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.set_dopplerLevel
void UnityEngine::AudioSource::set_dopplerLevel(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_dopplerLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dopplerLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.set_spread
void UnityEngine::AudioSource::set_spread(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_spread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.set_priority
void UnityEngine::AudioSource::set_priority(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_priority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_priority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.set_minDistance
void UnityEngine::AudioSource::set_minDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::set_minDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_minDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AudioSource.GetSpectrumData
void UnityEngine::AudioSource::GetSpectrumData(::Array<float>* samples, int channel, UnityEngine::FFTWindow window) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioSource::GetSpectrumData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpectrumData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(samples), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(window)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, samples, channel, window);
}
// Writing MetadataGetter for method: AudioSource::GetPitch
// Il2CppName: GetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::AudioSource*)>(&AudioSource::GetPitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "GetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>()});
  }
};
// Writing MetadataGetter for method: AudioSource::SetPitch
// Il2CppName: SetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::AudioSource*, float)>(&AudioSource::SetPitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "SetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::PlayHelper
// Il2CppName: PlayHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::AudioSource*, uint64_t)>(&AudioSource::PlayHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "PlayHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: AudioSource::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(double)>(&AudioSource::Play)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: AudioSource::PlayOneShotHelper
// Il2CppName: PlayOneShotHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::AudioSource*, UnityEngine::AudioClip*, float)>(&AudioSource::PlayOneShotHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "PlayOneShotHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::Stop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::GetSpectrumDataHelper
// Il2CppName: GetSpectrumDataHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::AudioSource*, ::Array<float>*&, int, UnityEngine::FFTWindow)>(&AudioSource::GetSpectrumDataHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "GetSpectrumDataHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::FFTWindow>()});
  }
};
// Writing MetadataGetter for method: AudioSource::get_volume
// Il2CppName: get_volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioSource::*)()>(&AudioSource::get_volume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_volume
// Il2CppName: set_volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_volume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::get_pitch
// Il2CppName: get_pitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioSource::*)()>(&AudioSource::get_pitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_pitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_pitch
// Il2CppName: set_pitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_pitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_pitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioSource::*)()>(&AudioSource::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::get_timeSamples
// Il2CppName: get_timeSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioSource::*)()>(&AudioSource::get_timeSamples)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_timeSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (AudioSource::*)()>(&AudioSource::get_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_clip
// Il2CppName: set_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(UnityEngine::AudioClip*)>(&AudioSource::set_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>()});
  }
};
// Writing MetadataGetter for method: AudioSource::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)()>(&AudioSource::Play)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::PlayScheduled
// Il2CppName: PlayScheduled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(double)>(&AudioSource::PlayScheduled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "PlayScheduled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: AudioSource::PlayOneShot
// Il2CppName: PlayOneShot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(UnityEngine::AudioClip*)>(&AudioSource::PlayOneShot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "PlayOneShot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>()});
  }
};
// Writing MetadataGetter for method: AudioSource::PlayOneShot
// Il2CppName: PlayOneShot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(UnityEngine::AudioClip*, float)>(&AudioSource::PlayOneShot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "PlayOneShot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)()>(&AudioSource::Stop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)()>(&AudioSource::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::UnPause
// Il2CppName: UnPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)()>(&AudioSource::UnPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "UnPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::get_isPlaying
// Il2CppName: get_isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioSource::*)()>(&AudioSource::get_isPlaying)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_loop
// Il2CppName: set_loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::set_loop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::get_playOnAwake
// Il2CppName: get_playOnAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioSource::*)()>(&AudioSource::get_playOnAwake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_playOnAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_playOnAwake
// Il2CppName: set_playOnAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::set_playOnAwake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_playOnAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_ignoreListenerPause
// Il2CppName: set_ignoreListenerPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::set_ignoreListenerPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_ignoreListenerPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_spatialBlend
// Il2CppName: set_spatialBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_spatialBlend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_spatialBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_reverbZoneMix
// Il2CppName: set_reverbZoneMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_reverbZoneMix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_reverbZoneMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_bypassEffects
// Il2CppName: set_bypassEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::set_bypassEffects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_bypassEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_bypassReverbZones
// Il2CppName: set_bypassReverbZones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::set_bypassReverbZones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_bypassReverbZones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_dopplerLevel
// Il2CppName: set_dopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_dopplerLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_dopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_spread
// Il2CppName: set_spread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_spread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_spread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_priority
// Il2CppName: set_priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(int)>(&AudioSource::set_priority)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_minDistance
// Il2CppName: set_minDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_minDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_minDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::GetSpectrumData
// Il2CppName: GetSpectrumData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(::Array<float>*, int, UnityEngine::FFTWindow)>(&AudioSource::GetSpectrumData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "GetSpectrumData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::FFTWindow>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.AudioLowPassFilter
#include "UnityEngine/AudioLowPassFilter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AudioLowPassFilter.get_cutoffFrequency
float UnityEngine::AudioLowPassFilter::get_cutoffFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioLowPassFilter::get_cutoffFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cutoffFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AudioLowPassFilter.set_cutoffFrequency
void UnityEngine::AudioLowPassFilter::set_cutoffFrequency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AudioLowPassFilter::set_cutoffFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cutoffFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AudioLowPassFilter::get_cutoffFrequency
// Il2CppName: get_cutoffFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioLowPassFilter::*)()>(&AudioLowPassFilter::get_cutoffFrequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioLowPassFilter*), "get_cutoffFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioLowPassFilter::set_cutoffFrequency
// Il2CppName: set_cutoffFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioLowPassFilter::*)(float)>(&AudioLowPassFilter::set_cutoffFrequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioLowPassFilter*), "set_cutoffFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Audio.AudioClipPlayable
#include "UnityEngine/Audio/AudioClipPlayable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.Create
UnityEngine::Audio::AudioClipPlayable UnityEngine::Audio::AudioClipPlayable::Create(UnityEngine::Playables::PlayableGraph graph, UnityEngine::AudioClip* clip, bool looping) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioClipPlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(looping)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Audio::AudioClipPlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, clip, looping);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.CreateHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Audio::AudioClipPlayable::CreateHandle(UnityEngine::Playables::PlayableGraph graph, UnityEngine::AudioClip* clip, bool looping) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::CreateHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioClipPlayable", "CreateHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(looping)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, clip, looping);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Audio::AudioClipPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.op_Explicit
UnityEngine::Audio::AudioClipPlayable::AudioClipPlayable(UnityEngine::Playables::Playable& playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioClipPlayable", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  *this = ::il2cpp_utils::RunMethodThrow<UnityEngine::Audio::AudioClipPlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.Equals
bool UnityEngine::Audio::AudioClipPlayable::Equals(UnityEngine::Audio::AudioClipPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.SetVolume
void UnityEngine::Audio::AudioClipPlayable::SetVolume(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::SetVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.SetStereoPan
void UnityEngine::Audio::AudioClipPlayable::SetStereoPan(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::SetStereoPan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStereoPan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.SetSpatialBlend
void UnityEngine::Audio::AudioClipPlayable::SetSpatialBlend(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::SetSpatialBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetSpatialBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.Seek
void UnityEngine::Audio::AudioClipPlayable::Seek(double startTime, double startDelay, double duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::Seek");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Seek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(startDelay), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, startTime, startDelay, duration);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.SetVolumeInternal
void UnityEngine::Audio::AudioClipPlayable::SetVolumeInternal(UnityEngine::Playables::PlayableHandle& hdl, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::SetVolumeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioClipPlayable", "SetVolumeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hdl), ::il2cpp_utils::ExtractType(volume)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hdl, volume);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.SetStereoPanInternal
void UnityEngine::Audio::AudioClipPlayable::SetStereoPanInternal(UnityEngine::Playables::PlayableHandle& hdl, float stereoPan) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::SetStereoPanInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioClipPlayable", "SetStereoPanInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hdl), ::il2cpp_utils::ExtractType(stereoPan)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hdl, stereoPan);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.SetSpatialBlendInternal
void UnityEngine::Audio::AudioClipPlayable::SetSpatialBlendInternal(UnityEngine::Playables::PlayableHandle& hdl, float spatialBlend) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::SetSpatialBlendInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioClipPlayable", "SetSpatialBlendInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hdl), ::il2cpp_utils::ExtractType(spatialBlend)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hdl, spatialBlend);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.SetStartDelayInternal
void UnityEngine::Audio::AudioClipPlayable::SetStartDelayInternal(UnityEngine::Playables::PlayableHandle& hdl, double delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::SetStartDelayInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioClipPlayable", "SetStartDelayInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hdl), ::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hdl, delay);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.SetPauseDelayInternal
void UnityEngine::Audio::AudioClipPlayable::SetPauseDelayInternal(UnityEngine::Playables::PlayableHandle& hdl, double delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::SetPauseDelayInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioClipPlayable", "SetPauseDelayInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hdl), ::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hdl, delay);
}
// Autogenerated method: UnityEngine.Audio.AudioClipPlayable.InternalCreateAudioClipPlayable
bool UnityEngine::Audio::AudioClipPlayable::InternalCreateAudioClipPlayable(UnityEngine::Playables::PlayableGraph& graph, UnityEngine::AudioClip* clip, bool looping, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioClipPlayable::InternalCreateAudioClipPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioClipPlayable", "InternalCreateAudioClipPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(looping), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, clip, looping, handle);
}
// Writing MetadataGetter for method: AudioClipPlayable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Audio::AudioClipPlayable (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::AudioClip*, bool)>(&AudioClipPlayable::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::CreateHandle
// Il2CppName: CreateHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::AudioClip*, bool)>(&AudioClipPlayable::CreateHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "CreateHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::AudioClipPlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AudioClipPlayable::AudioClipPlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AudioClipPlayable::AudioClipPlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AudioClipPlayable::*)()>(&AudioClipPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::AudioClipPlayable
// Il2CppName: op_Explicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Audio::AudioClipPlayable (*)(UnityEngine::Playables::Playable&)>(&AudioClipPlayable::AudioClipPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "op_Explicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable&>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioClipPlayable::*)(UnityEngine::Audio::AudioClipPlayable)>(&AudioClipPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Audio::AudioClipPlayable>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::SetVolume
// Il2CppName: SetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipPlayable::*)(float)>(&AudioClipPlayable::SetVolume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "SetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::SetStereoPan
// Il2CppName: SetStereoPan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipPlayable::*)(float)>(&AudioClipPlayable::SetStereoPan)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "SetStereoPan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::SetSpatialBlend
// Il2CppName: SetSpatialBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipPlayable::*)(float)>(&AudioClipPlayable::SetSpatialBlend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "SetSpatialBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipPlayable::*)(double, double, double)>(&AudioClipPlayable::Seek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::SetVolumeInternal
// Il2CppName: SetVolumeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, float)>(&AudioClipPlayable::SetVolumeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "SetVolumeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::SetStereoPanInternal
// Il2CppName: SetStereoPanInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, float)>(&AudioClipPlayable::SetStereoPanInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "SetStereoPanInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::SetSpatialBlendInternal
// Il2CppName: SetSpatialBlendInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, float)>(&AudioClipPlayable::SetSpatialBlendInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "SetSpatialBlendInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::SetStartDelayInternal
// Il2CppName: SetStartDelayInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, double)>(&AudioClipPlayable::SetStartDelayInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "SetStartDelayInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::SetPauseDelayInternal
// Il2CppName: SetPauseDelayInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, double)>(&AudioClipPlayable::SetPauseDelayInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "SetPauseDelayInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: AudioClipPlayable::InternalCreateAudioClipPlayable
// Il2CppName: InternalCreateAudioClipPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, UnityEngine::AudioClip*, bool, UnityEngine::Playables::PlayableHandle&)>(&AudioClipPlayable::InternalCreateAudioClipPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipPlayable), "InternalCreateAudioClipPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Audio.AudioMixerUpdateMode
#include "UnityEngine/Audio/AudioMixerUpdateMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Audio.AudioMixerUpdateMode Normal
UnityEngine::Audio::AudioMixerUpdateMode UnityEngine::Audio::AudioMixerUpdateMode::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixerUpdateMode::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Audio::AudioMixerUpdateMode>("UnityEngine.Audio", "AudioMixerUpdateMode", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Audio.AudioMixerUpdateMode Normal
void UnityEngine::Audio::AudioMixerUpdateMode::_set_Normal(UnityEngine::Audio::AudioMixerUpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixerUpdateMode::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Audio", "AudioMixerUpdateMode", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Audio.AudioMixerUpdateMode UnscaledTime
UnityEngine::Audio::AudioMixerUpdateMode UnityEngine::Audio::AudioMixerUpdateMode::_get_UnscaledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixerUpdateMode::_get_UnscaledTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Audio::AudioMixerUpdateMode>("UnityEngine.Audio", "AudioMixerUpdateMode", "UnscaledTime"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Audio.AudioMixerUpdateMode UnscaledTime
void UnityEngine::Audio::AudioMixerUpdateMode::_set_UnscaledTime(UnityEngine::Audio::AudioMixerUpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixerUpdateMode::_set_UnscaledTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Audio", "AudioMixerUpdateMode", "UnscaledTime", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Audio.AudioMixer
#include "UnityEngine/Audio/AudioMixer.hpp"
// Including type: UnityEngine.Audio.AudioMixerUpdateMode
#include "UnityEngine/Audio/AudioMixerUpdateMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Audio.AudioMixer.set_updateMode
void UnityEngine::Audio::AudioMixer::set_updateMode(UnityEngine::Audio::AudioMixerUpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixer::set_updateMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_updateMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Audio.AudioMixer.SetFloat
bool UnityEngine::Audio::AudioMixer::SetFloat(::Il2CppString* name, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixer::SetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, name, value);
}
// Autogenerated method: UnityEngine.Audio.AudioMixer.GetFloat
bool UnityEngine::Audio::AudioMixer::GetFloat(::Il2CppString* name, float& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixer::GetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, name, value);
}
// Writing MetadataGetter for method: AudioMixer::set_updateMode
// Il2CppName: set_updateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioMixer::*)(UnityEngine::Audio::AudioMixerUpdateMode)>(&AudioMixer::set_updateMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixer*), "set_updateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Audio::AudioMixerUpdateMode>()});
  }
};
// Writing MetadataGetter for method: AudioMixer::SetFloat
// Il2CppName: SetFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioMixer::*)(::Il2CppString*, float)>(&AudioMixer::SetFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixer*), "SetFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioMixer::GetFloat
// Il2CppName: GetFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioMixer::*)(::Il2CppString*, float&)>(&AudioMixer::GetFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixer*), "GetFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Audio.AudioMixerPlayable
#include "UnityEngine/Audio/AudioMixerPlayable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Audio.AudioMixerPlayable.Create
UnityEngine::Audio::AudioMixerPlayable UnityEngine::Audio::AudioMixerPlayable::Create(UnityEngine::Playables::PlayableGraph graph, int inputCount, bool normalizeInputVolumes) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixerPlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioMixerPlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount), ::il2cpp_utils::ExtractType(normalizeInputVolumes)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Audio::AudioMixerPlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, inputCount, normalizeInputVolumes);
}
// Autogenerated method: UnityEngine.Audio.AudioMixerPlayable.CreateHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Audio::AudioMixerPlayable::CreateHandle(UnityEngine::Playables::PlayableGraph graph, int inputCount, bool normalizeInputVolumes) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixerPlayable::CreateHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioMixerPlayable", "CreateHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount), ::il2cpp_utils::ExtractType(normalizeInputVolumes)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, inputCount, normalizeInputVolumes);
}
// Autogenerated method: UnityEngine.Audio.AudioMixerPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Audio::AudioMixerPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixerPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Audio.AudioMixerPlayable.Equals
bool UnityEngine::Audio::AudioMixerPlayable::Equals(UnityEngine::Audio::AudioMixerPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixerPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Audio.AudioMixerPlayable.CreateAudioMixerPlayableInternal
bool UnityEngine::Audio::AudioMixerPlayable::CreateAudioMixerPlayableInternal(UnityEngine::Playables::PlayableGraph& graph, bool normalizeInputVolumes, UnityEngine::Playables::PlayableHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioMixerPlayable::CreateAudioMixerPlayableInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioMixerPlayable", "CreateAudioMixerPlayableInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(normalizeInputVolumes), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, normalizeInputVolumes, handle);
}
// Writing MetadataGetter for method: AudioMixerPlayable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Audio::AudioMixerPlayable (*)(UnityEngine::Playables::PlayableGraph, int, bool)>(&AudioMixerPlayable::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixerPlayable), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioMixerPlayable::CreateHandle
// Il2CppName: CreateHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (*)(UnityEngine::Playables::PlayableGraph, int, bool)>(&AudioMixerPlayable::CreateHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixerPlayable), "CreateHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioMixerPlayable::AudioMixerPlayable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioMixerPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AudioMixerPlayable::AudioMixerPlayable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixerPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioMixerPlayable::*)(UnityEngine::Playables::PlayableHandle)>(&AudioMixerPlayable::AudioMixerPlayable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixerPlayable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: AudioMixerPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (AudioMixerPlayable::*)()>(&AudioMixerPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixerPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioMixerPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioMixerPlayable::*)(UnityEngine::Audio::AudioMixerPlayable)>(&AudioMixerPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixerPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Audio::AudioMixerPlayable>()});
  }
};
// Writing MetadataGetter for method: AudioMixerPlayable::CreateAudioMixerPlayableInternal
// Il2CppName: CreateAudioMixerPlayableInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, bool, UnityEngine::Playables::PlayableHandle&)>(&AudioMixerPlayable::CreateAudioMixerPlayableInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixerPlayable), "CreateAudioMixerPlayableInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Audio.AudioPlayableBinding
#include "UnityEngine/Audio/AudioPlayableBinding.hpp"
// Including type: UnityEngine.Playables.PlayableBinding
#include "UnityEngine/Playables/PlayableBinding.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Playables.PlayableOutput
#include "UnityEngine/Playables/PlayableOutput.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Audio.AudioPlayableBinding.Create
UnityEngine::Playables::PlayableBinding UnityEngine::Audio::AudioPlayableBinding::Create(::Il2CppString* name, UnityEngine::Object* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableBinding::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioPlayableBinding", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableBinding, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, key);
}
// Autogenerated method: UnityEngine.Audio.AudioPlayableBinding.CreateAudioOutput
UnityEngine::Playables::PlayableOutput UnityEngine::Audio::AudioPlayableBinding::CreateAudioOutput(UnityEngine::Playables::PlayableGraph graph, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableBinding::CreateAudioOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioPlayableBinding", "CreateAudioOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, name);
}
// Writing MetadataGetter for method: AudioPlayableBinding::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableBinding (*)(::Il2CppString*, UnityEngine::Object*)>(&AudioPlayableBinding::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableBinding*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableBinding::CreateAudioOutput
// Il2CppName: CreateAudioOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutput (*)(UnityEngine::Playables::PlayableGraph, ::Il2CppString*)>(&AudioPlayableBinding::CreateAudioOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableBinding*), "CreateAudioOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Audio.AudioPlayableGraphExtensions
#include "UnityEngine/Audio/AudioPlayableGraphExtensions.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.PlayableOutputHandle
#include "UnityEngine/Playables/PlayableOutputHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Audio.AudioPlayableGraphExtensions.InternalCreateAudioOutput
bool UnityEngine::Audio::AudioPlayableGraphExtensions::InternalCreateAudioOutput(UnityEngine::Playables::PlayableGraph& graph, ::Il2CppString* name, UnityEngine::Playables::PlayableOutputHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableGraphExtensions::InternalCreateAudioOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioPlayableGraphExtensions", "InternalCreateAudioOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, name, handle);
}
// Writing MetadataGetter for method: AudioPlayableGraphExtensions::InternalCreateAudioOutput
// Il2CppName: InternalCreateAudioOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, ::Il2CppString*, UnityEngine::Playables::PlayableOutputHandle&)>(&AudioPlayableGraphExtensions::InternalCreateAudioOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableGraphExtensions*), "InternalCreateAudioOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Audio.AudioPlayableOutput
#include "UnityEngine/Audio/AudioPlayableOutput.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Playables.PlayableOutput
#include "UnityEngine/Playables/PlayableOutput.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Audio.AudioPlayableOutput.Create
UnityEngine::Audio::AudioPlayableOutput UnityEngine::Audio::AudioPlayableOutput::Create(UnityEngine::Playables::PlayableGraph graph, ::Il2CppString* name, UnityEngine::AudioSource* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableOutput::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioPlayableOutput", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Audio::AudioPlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, name, target);
}
// Autogenerated method: UnityEngine.Audio.AudioPlayableOutput.get_Null
UnityEngine::Audio::AudioPlayableOutput UnityEngine::Audio::AudioPlayableOutput::get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableOutput::get_Null");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioPlayableOutput", "get_Null", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Audio::AudioPlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Audio.AudioPlayableOutput.GetHandle
UnityEngine::Playables::PlayableOutputHandle UnityEngine::Audio::AudioPlayableOutput::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableOutput::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutputHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Audio.AudioPlayableOutput.op_Explicit
UnityEngine::Audio::AudioPlayableOutput::AudioPlayableOutput(UnityEngine::Playables::PlayableOutput& output) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableOutput::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioPlayableOutput", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output)})));
  *this = ::il2cpp_utils::RunMethodThrow<UnityEngine::Audio::AudioPlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, output);
}
// Autogenerated method: UnityEngine.Audio.AudioPlayableOutput.SetTarget
void UnityEngine::Audio::AudioPlayableOutput::SetTarget(UnityEngine::AudioSource* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableOutput::SetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Audio.AudioPlayableOutput.SetEvaluateOnSeek
void UnityEngine::Audio::AudioPlayableOutput::SetEvaluateOnSeek(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableOutput::SetEvaluateOnSeek");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetEvaluateOnSeek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Audio.AudioPlayableOutput.InternalSetTarget
void UnityEngine::Audio::AudioPlayableOutput::InternalSetTarget(UnityEngine::Playables::PlayableOutputHandle& output, UnityEngine::AudioSource* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableOutput::InternalSetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioPlayableOutput", "InternalSetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output), ::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, output, target);
}
// Autogenerated method: UnityEngine.Audio.AudioPlayableOutput.InternalSetEvaluateOnSeek
void UnityEngine::Audio::AudioPlayableOutput::InternalSetEvaluateOnSeek(UnityEngine::Playables::PlayableOutputHandle& output, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Audio::AudioPlayableOutput::InternalSetEvaluateOnSeek");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Audio", "AudioPlayableOutput", "InternalSetEvaluateOnSeek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, output, value);
}
// Writing MetadataGetter for method: AudioPlayableOutput::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Audio::AudioPlayableOutput (*)(UnityEngine::Playables::PlayableGraph, ::Il2CppString*, UnityEngine::AudioSource*)>(&AudioPlayableOutput::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableOutput), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableOutput::AudioPlayableOutput
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableOutput::*)(UnityEngine::Playables::PlayableOutputHandle)>(&AudioPlayableOutput::AudioPlayableOutput<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableOutput), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableOutput::*)(UnityEngine::Playables::PlayableOutputHandle)>(&AudioPlayableOutput::AudioPlayableOutput<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableOutput), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableOutput::get_Null
// Il2CppName: get_Null
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Audio::AudioPlayableOutput (*)()>(&AudioPlayableOutput::get_Null)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableOutput), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableOutput::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutputHandle (AudioPlayableOutput::*)()>(&AudioPlayableOutput::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableOutput), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableOutput::AudioPlayableOutput
// Il2CppName: op_Explicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Audio::AudioPlayableOutput (*)(UnityEngine::Playables::PlayableOutput&)>(&AudioPlayableOutput::AudioPlayableOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableOutput), "op_Explicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutput&>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableOutput::SetTarget
// Il2CppName: SetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableOutput::*)(UnityEngine::AudioSource*)>(&AudioPlayableOutput::SetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableOutput), "SetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableOutput::SetEvaluateOnSeek
// Il2CppName: SetEvaluateOnSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableOutput::*)(bool)>(&AudioPlayableOutput::SetEvaluateOnSeek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableOutput), "SetEvaluateOnSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableOutput::InternalSetTarget
// Il2CppName: InternalSetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableOutputHandle&, UnityEngine::AudioSource*)>(&AudioPlayableOutput::InternalSetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableOutput), "InternalSetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableOutput::InternalSetEvaluateOnSeek
// Il2CppName: InternalSetEvaluateOnSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableOutputHandle&, bool)>(&AudioPlayableOutput::InternalSetEvaluateOnSeek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableOutput), "InternalSetEvaluateOnSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.Audio.AudioSampleProvider
#include "UnityEngine/Experimental/Audio/AudioSampleProvider.hpp"
// Including type: UnityEngine.Experimental.Audio.AudioSampleProvider/SampleFramesHandler
#include "UnityEngine/Experimental/Audio/AudioSampleProvider_SampleFramesHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.Audio.AudioSampleProvider.InvokeSampleFramesAvailable
void UnityEngine::Experimental::Audio::AudioSampleProvider::InvokeSampleFramesAvailable(int sampleFrameCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Audio::AudioSampleProvider::InvokeSampleFramesAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSampleFramesAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sampleFrameCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sampleFrameCount);
}
// Autogenerated method: UnityEngine.Experimental.Audio.AudioSampleProvider.InvokeSampleFramesOverflow
void UnityEngine::Experimental::Audio::AudioSampleProvider::InvokeSampleFramesOverflow(int droppedSampleFrameCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Audio::AudioSampleProvider::InvokeSampleFramesOverflow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSampleFramesOverflow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(droppedSampleFrameCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, droppedSampleFrameCount);
}
// Writing MetadataGetter for method: AudioSampleProvider::InvokeSampleFramesAvailable
// Il2CppName: InvokeSampleFramesAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSampleProvider::*)(int)>(&AudioSampleProvider::InvokeSampleFramesAvailable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSampleProvider*), "InvokeSampleFramesAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioSampleProvider::InvokeSampleFramesOverflow
// Il2CppName: InvokeSampleFramesOverflow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSampleProvider::*)(int)>(&AudioSampleProvider::InvokeSampleFramesOverflow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSampleProvider*), "InvokeSampleFramesOverflow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Experimental.Audio.AudioSampleProvider/SampleFramesHandler
#include "UnityEngine/Experimental/Audio/AudioSampleProvider_SampleFramesHandler.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.Audio.AudioSampleProvider/SampleFramesHandler.Invoke
void UnityEngine::Experimental::Audio::AudioSampleProvider::SampleFramesHandler::Invoke(UnityEngine::Experimental::Audio::AudioSampleProvider* provider, uint sampleFrameCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Audio::AudioSampleProvider::SampleFramesHandler::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(sampleFrameCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, provider, sampleFrameCount);
}
// Autogenerated method: UnityEngine.Experimental.Audio.AudioSampleProvider/SampleFramesHandler.BeginInvoke
System::IAsyncResult* UnityEngine::Experimental::Audio::AudioSampleProvider::SampleFramesHandler::BeginInvoke(UnityEngine::Experimental::Audio::AudioSampleProvider* provider, uint sampleFrameCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Audio::AudioSampleProvider::SampleFramesHandler::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(sampleFrameCount), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, provider, sampleFrameCount, callback, object);
}
// Autogenerated method: UnityEngine.Experimental.Audio.AudioSampleProvider/SampleFramesHandler.EndInvoke
void UnityEngine::Experimental::Audio::AudioSampleProvider::SampleFramesHandler::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Audio::AudioSampleProvider::SampleFramesHandler::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: AudioSampleProvider::SampleFramesHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSampleProvider::SampleFramesHandler::*)(::Il2CppObject*, System::IntPtr)>(&AudioSampleProvider::SampleFramesHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSampleProvider::SampleFramesHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSampleProvider::SampleFramesHandler::*)(::Il2CppObject*, System::IntPtr)>(&AudioSampleProvider::SampleFramesHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSampleProvider::SampleFramesHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AudioSampleProvider::SampleFramesHandler::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSampleProvider::SampleFramesHandler::*)(UnityEngine::Experimental::Audio::AudioSampleProvider*, uint)>(&AudioSampleProvider::SampleFramesHandler::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSampleProvider::SampleFramesHandler*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Audio::AudioSampleProvider*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: AudioSampleProvider::SampleFramesHandler::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (AudioSampleProvider::SampleFramesHandler::*)(UnityEngine::Experimental::Audio::AudioSampleProvider*, uint, System::AsyncCallback*, ::Il2CppObject*)>(&AudioSampleProvider::SampleFramesHandler::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSampleProvider::SampleFramesHandler*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Audio::AudioSampleProvider*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AudioSampleProvider::SampleFramesHandler::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSampleProvider::SampleFramesHandler::*)(System::IAsyncResult*)>(&AudioSampleProvider::SampleFramesHandler::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSampleProvider::SampleFramesHandler*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Cloth
#include "UnityEngine/Cloth.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Cloth.set_externalAcceleration
void UnityEngine::Cloth::set_externalAcceleration(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Cloth::set_externalAcceleration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_externalAcceleration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Cloth.set_externalAcceleration_Injected
void UnityEngine::Cloth::set_externalAcceleration_Injected(UnityEngine::Vector3& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Cloth::set_externalAcceleration_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_externalAcceleration_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: Cloth::set_externalAcceleration
// Il2CppName: set_externalAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cloth::*)(UnityEngine::Vector3)>(&Cloth::set_externalAcceleration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cloth*), "set_externalAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Cloth::set_externalAcceleration_Injected
// Il2CppName: set_externalAcceleration_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cloth::*)(UnityEngine::Vector3&)>(&Cloth::set_externalAcceleration_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cloth*), "set_externalAcceleration_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngineInternal.MathfInternal
#include "UnityEngineInternal/MathfInternal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single FloatMinNormal
float UnityEngineInternal::MathfInternal::_get_FloatMinNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::MathfInternal::_get_FloatMinNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngineInternal", "MathfInternal", "FloatMinNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Single FloatMinNormal
void UnityEngineInternal::MathfInternal::_set_FloatMinNormal(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::MathfInternal::_set_FloatMinNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngineInternal", "MathfInternal", "FloatMinNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single FloatMinDenormal
float UnityEngineInternal::MathfInternal::_get_FloatMinDenormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::MathfInternal::_get_FloatMinDenormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngineInternal", "MathfInternal", "FloatMinDenormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Single FloatMinDenormal
void UnityEngineInternal::MathfInternal::_set_FloatMinDenormal(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::MathfInternal::_set_FloatMinDenormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngineInternal", "MathfInternal", "FloatMinDenormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean IsFlushToZeroEnabled
bool UnityEngineInternal::MathfInternal::_get_IsFlushToZeroEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::MathfInternal::_get_IsFlushToZeroEnabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("UnityEngineInternal", "MathfInternal", "IsFlushToZeroEnabled"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean IsFlushToZeroEnabled
void UnityEngineInternal::MathfInternal::_set_IsFlushToZeroEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::MathfInternal::_set_IsFlushToZeroEnabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngineInternal", "MathfInternal", "IsFlushToZeroEnabled", value));
}
// Autogenerated method: UnityEngineInternal.MathfInternal..cctor
void UnityEngineInternal::MathfInternal::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::MathfInternal::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngineInternal", "MathfInternal", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: MathfInternal::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MathfInternal::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathfInternal), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngineInternal.TypeInferenceRules
#include "UnityEngineInternal/TypeInferenceRules.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngineInternal.TypeInferenceRules TypeReferencedByFirstArgument
UnityEngineInternal::TypeInferenceRules UnityEngineInternal::TypeInferenceRules::_get_TypeReferencedByFirstArgument() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRules::_get_TypeReferencedByFirstArgument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngineInternal::TypeInferenceRules>("UnityEngineInternal", "TypeInferenceRules", "TypeReferencedByFirstArgument"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngineInternal.TypeInferenceRules TypeReferencedByFirstArgument
void UnityEngineInternal::TypeInferenceRules::_set_TypeReferencedByFirstArgument(UnityEngineInternal::TypeInferenceRules value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRules::_set_TypeReferencedByFirstArgument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngineInternal", "TypeInferenceRules", "TypeReferencedByFirstArgument", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngineInternal.TypeInferenceRules TypeReferencedBySecondArgument
UnityEngineInternal::TypeInferenceRules UnityEngineInternal::TypeInferenceRules::_get_TypeReferencedBySecondArgument() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRules::_get_TypeReferencedBySecondArgument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngineInternal::TypeInferenceRules>("UnityEngineInternal", "TypeInferenceRules", "TypeReferencedBySecondArgument"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngineInternal.TypeInferenceRules TypeReferencedBySecondArgument
void UnityEngineInternal::TypeInferenceRules::_set_TypeReferencedBySecondArgument(UnityEngineInternal::TypeInferenceRules value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRules::_set_TypeReferencedBySecondArgument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngineInternal", "TypeInferenceRules", "TypeReferencedBySecondArgument", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngineInternal.TypeInferenceRules ArrayOfTypeReferencedByFirstArgument
UnityEngineInternal::TypeInferenceRules UnityEngineInternal::TypeInferenceRules::_get_ArrayOfTypeReferencedByFirstArgument() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRules::_get_ArrayOfTypeReferencedByFirstArgument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngineInternal::TypeInferenceRules>("UnityEngineInternal", "TypeInferenceRules", "ArrayOfTypeReferencedByFirstArgument"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngineInternal.TypeInferenceRules ArrayOfTypeReferencedByFirstArgument
void UnityEngineInternal::TypeInferenceRules::_set_ArrayOfTypeReferencedByFirstArgument(UnityEngineInternal::TypeInferenceRules value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRules::_set_ArrayOfTypeReferencedByFirstArgument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngineInternal", "TypeInferenceRules", "ArrayOfTypeReferencedByFirstArgument", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngineInternal.TypeInferenceRules TypeOfFirstArgument
UnityEngineInternal::TypeInferenceRules UnityEngineInternal::TypeInferenceRules::_get_TypeOfFirstArgument() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRules::_get_TypeOfFirstArgument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngineInternal::TypeInferenceRules>("UnityEngineInternal", "TypeInferenceRules", "TypeOfFirstArgument"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngineInternal.TypeInferenceRules TypeOfFirstArgument
void UnityEngineInternal::TypeInferenceRules::_set_TypeOfFirstArgument(UnityEngineInternal::TypeInferenceRules value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRules::_set_TypeOfFirstArgument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngineInternal", "TypeInferenceRules", "TypeOfFirstArgument", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngineInternal.TypeInferenceRuleAttribute
#include "UnityEngineInternal/TypeInferenceRuleAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngineInternal.TypeInferenceRuleAttribute.ToString
::Il2CppString* UnityEngineInternal::TypeInferenceRuleAttribute::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRuleAttribute::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TypeInferenceRuleAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeInferenceRuleAttribute::*)(UnityEngineInternal::TypeInferenceRules)>(&TypeInferenceRuleAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeInferenceRuleAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngineInternal::TypeInferenceRules>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeInferenceRuleAttribute::*)(UnityEngineInternal::TypeInferenceRules)>(&TypeInferenceRuleAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeInferenceRuleAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngineInternal::TypeInferenceRules>()});
  }
};
// Writing MetadataGetter for method: TypeInferenceRuleAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeInferenceRuleAttribute::*)(::Il2CppString*)>(&TypeInferenceRuleAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeInferenceRuleAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeInferenceRuleAttribute::*)(::Il2CppString*)>(&TypeInferenceRuleAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeInferenceRuleAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TypeInferenceRuleAttribute::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TypeInferenceRuleAttribute::*)()>(&TypeInferenceRuleAttribute::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeInferenceRuleAttribute*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngineInternal.GenericStack
#include "UnityEngineInternal/GenericStack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GenericStack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GenericStack::*)()>(&GenericStack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericStack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GenericStack::*)()>(&GenericStack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericStack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Unity.Jobs.JobHandle
#include "Unity/Jobs/JobHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Unity.Jobs.JobHandle.ScheduleBatchedJobs
void Unity::Jobs::JobHandle::ScheduleBatchedJobs() {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Jobs::JobHandle::ScheduleBatchedJobs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Jobs", "JobHandle", "ScheduleBatchedJobs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: JobHandle::ScheduleBatchedJobs
// Il2CppName: ScheduleBatchedJobs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&JobHandle::ScheduleBatchedJobs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JobHandle), "ScheduleBatchedJobs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Unity.Collections.Allocator
#include "Unity/Collections/Allocator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Unity.Collections.Allocator Invalid
Unity::Collections::Allocator Unity::Collections::Allocator::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Unity::Collections::Allocator>("Unity.Collections", "Allocator", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Unity.Collections.Allocator Invalid
void Unity::Collections::Allocator::_set_Invalid(Unity::Collections::Allocator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Unity.Collections", "Allocator", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Unity.Collections.Allocator None
Unity::Collections::Allocator Unity::Collections::Allocator::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Unity::Collections::Allocator>("Unity.Collections", "Allocator", "None"));
}
// Autogenerated static field setter
// Set static field: static public Unity.Collections.Allocator None
void Unity::Collections::Allocator::_set_None(Unity::Collections::Allocator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Unity.Collections", "Allocator", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Unity.Collections.Allocator Temp
Unity::Collections::Allocator Unity::Collections::Allocator::_get_Temp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_get_Temp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Unity::Collections::Allocator>("Unity.Collections", "Allocator", "Temp"));
}
// Autogenerated static field setter
// Set static field: static public Unity.Collections.Allocator Temp
void Unity::Collections::Allocator::_set_Temp(Unity::Collections::Allocator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_set_Temp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Unity.Collections", "Allocator", "Temp", value));
}
// Autogenerated static field getter
// Get static field: static public Unity.Collections.Allocator TempJob
Unity::Collections::Allocator Unity::Collections::Allocator::_get_TempJob() {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_get_TempJob");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Unity::Collections::Allocator>("Unity.Collections", "Allocator", "TempJob"));
}
// Autogenerated static field setter
// Set static field: static public Unity.Collections.Allocator TempJob
void Unity::Collections::Allocator::_set_TempJob(Unity::Collections::Allocator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_set_TempJob");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Unity.Collections", "Allocator", "TempJob", value));
}
// Autogenerated static field getter
// Get static field: static public Unity.Collections.Allocator Persistent
Unity::Collections::Allocator Unity::Collections::Allocator::_get_Persistent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_get_Persistent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Unity::Collections::Allocator>("Unity.Collections", "Allocator", "Persistent"));
}
// Autogenerated static field setter
// Set static field: static public Unity.Collections.Allocator Persistent
void Unity::Collections::Allocator::_set_Persistent(Unity::Collections::Allocator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_set_Persistent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Unity.Collections", "Allocator", "Persistent", value));
}
// Autogenerated static field getter
// Get static field: static public Unity.Collections.Allocator AudioKernel
Unity::Collections::Allocator Unity::Collections::Allocator::_get_AudioKernel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_get_AudioKernel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Unity::Collections::Allocator>("Unity.Collections", "Allocator", "AudioKernel"));
}
// Autogenerated static field setter
// Set static field: static public Unity.Collections.Allocator AudioKernel
void Unity::Collections::Allocator::_set_AudioKernel(Unity::Collections::Allocator value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::Allocator::_set_AudioKernel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Unity.Collections", "Allocator", "AudioKernel", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Unity.Collections.NativeLeakDetection
#include "Unity/Collections/NativeLeakDetection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 s_NativeLeakDetectionMode
int Unity::Collections::NativeLeakDetection::_get_s_NativeLeakDetectionMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::NativeLeakDetection::_get_s_NativeLeakDetectionMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Unity.Collections", "NativeLeakDetection", "s_NativeLeakDetectionMode"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 s_NativeLeakDetectionMode
void Unity::Collections::NativeLeakDetection::_set_s_NativeLeakDetectionMode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::NativeLeakDetection::_set_s_NativeLeakDetectionMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Unity.Collections", "NativeLeakDetection", "s_NativeLeakDetectionMode", value));
}
// Autogenerated method: Unity.Collections.NativeLeakDetection.Initialize
void Unity::Collections::NativeLeakDetection::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::NativeLeakDetection::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections", "NativeLeakDetection", "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: NativeLeakDetection::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&NativeLeakDetection::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeLeakDetection*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Unity.Collections.LowLevel.Unsafe.NativeContainerAttribute
#include "Unity/Collections/LowLevel/Unsafe/NativeContainerAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NativeContainerAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NativeContainerAttribute::*)()>(&NativeContainerAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeContainerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NativeContainerAttribute::*)()>(&NativeContainerAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeContainerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Unity.Collections.LowLevel.Unsafe.NativeContainerSupportsMinMaxWriteRestrictionAttribute
#include "Unity/Collections/LowLevel/Unsafe/NativeContainerSupportsMinMaxWriteRestrictionAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NativeContainerSupportsMinMaxWriteRestrictionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NativeContainerSupportsMinMaxWriteRestrictionAttribute::*)()>(&NativeContainerSupportsMinMaxWriteRestrictionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeContainerSupportsMinMaxWriteRestrictionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NativeContainerSupportsMinMaxWriteRestrictionAttribute::*)()>(&NativeContainerSupportsMinMaxWriteRestrictionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeContainerSupportsMinMaxWriteRestrictionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Unity.Collections.LowLevel.Unsafe.NativeContainerSupportsDeallocateOnJobCompletionAttribute
#include "Unity/Collections/LowLevel/Unsafe/NativeContainerSupportsDeallocateOnJobCompletionAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NativeContainerSupportsDeallocateOnJobCompletionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NativeContainerSupportsDeallocateOnJobCompletionAttribute::*)()>(&NativeContainerSupportsDeallocateOnJobCompletionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeContainerSupportsDeallocateOnJobCompletionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NativeContainerSupportsDeallocateOnJobCompletionAttribute::*)()>(&NativeContainerSupportsDeallocateOnJobCompletionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeContainerSupportsDeallocateOnJobCompletionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Unity.Collections.LowLevel.Unsafe.NativeContainerSupportsDeferredConvertListToArray
#include "Unity/Collections/LowLevel/Unsafe/NativeContainerSupportsDeferredConvertListToArray.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NativeContainerSupportsDeferredConvertListToArray::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NativeContainerSupportsDeferredConvertListToArray::*)()>(&NativeContainerSupportsDeferredConvertListToArray::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeContainerSupportsDeferredConvertListToArray*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NativeContainerSupportsDeferredConvertListToArray::*)()>(&NativeContainerSupportsDeferredConvertListToArray::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeContainerSupportsDeferredConvertListToArray*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Unity.Collections.LowLevel.Unsafe.WriteAccessRequiredAttribute
#include "Unity/Collections/LowLevel/Unsafe/WriteAccessRequiredAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: WriteAccessRequiredAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WriteAccessRequiredAttribute::*)()>(&WriteAccessRequiredAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WriteAccessRequiredAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WriteAccessRequiredAttribute::*)()>(&WriteAccessRequiredAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WriteAccessRequiredAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Unity.Collections.LowLevel.Unsafe.NativeDisableUnsafePtrRestrictionAttribute
#include "Unity/Collections/LowLevel/Unsafe/NativeDisableUnsafePtrRestrictionAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NativeDisableUnsafePtrRestrictionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NativeDisableUnsafePtrRestrictionAttribute::*)()>(&NativeDisableUnsafePtrRestrictionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeDisableUnsafePtrRestrictionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NativeDisableUnsafePtrRestrictionAttribute::*)()>(&NativeDisableUnsafePtrRestrictionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NativeDisableUnsafePtrRestrictionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility
#include "Unity/Collections/LowLevel/Unsafe/NativeArrayUnsafeUtility.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NativeArrayUnsafeUtility::ConvertExistingDataToNativeArray
// Il2CppName: ConvertExistingDataToNativeArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: NativeArrayUnsafeUtility::GetUnsafeReadOnlyPtr
// Il2CppName: GetUnsafeReadOnlyPtr
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Unity.Collections.LowLevel.Unsafe.UnsafeUtility
#include "Unity/Collections/LowLevel/Unsafe/UnsafeUtility.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.Allocator
#include "Unity/Collections/Allocator.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Array
#include "System/Array.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Unity.Collections.LowLevel.Unsafe.UnsafeUtility.Free
void Unity::Collections::LowLevel::Unsafe::UnsafeUtility::Free(void* memory, Unity::Collections::Allocator allocator) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::LowLevel::Unsafe::UnsafeUtility::Free");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "Free", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(memory), ::il2cpp_utils::ExtractType(allocator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, memory, allocator);
}
// Autogenerated method: Unity.Collections.LowLevel.Unsafe.UnsafeUtility.IsBlittable
bool Unity::Collections::LowLevel::Unsafe::UnsafeUtility::IsBlittable(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::LowLevel::Unsafe::UnsafeUtility::IsBlittable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "IsBlittable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Unity.Collections.LowLevel.Unsafe.UnsafeUtility.IsBlittableValueType
bool Unity::Collections::LowLevel::Unsafe::UnsafeUtility::IsBlittableValueType(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::LowLevel::Unsafe::UnsafeUtility::IsBlittableValueType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "IsBlittableValueType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Unity.Collections.LowLevel.Unsafe.UnsafeUtility.GetReasonForTypeNonBlittableImpl
::Il2CppString* Unity::Collections::LowLevel::Unsafe::UnsafeUtility::GetReasonForTypeNonBlittableImpl(System::Type* t, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::LowLevel::Unsafe::UnsafeUtility::GetReasonForTypeNonBlittableImpl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "GetReasonForTypeNonBlittableImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, name);
}
// Autogenerated method: Unity.Collections.LowLevel.Unsafe.UnsafeUtility.IsArrayBlittable
bool Unity::Collections::LowLevel::Unsafe::UnsafeUtility::IsArrayBlittable(System::Array* arr) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::LowLevel::Unsafe::UnsafeUtility::IsArrayBlittable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "IsArrayBlittable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arr)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, arr);
}
// Autogenerated method: Unity.Collections.LowLevel.Unsafe.UnsafeUtility.GetReasonForArrayNonBlittable
::Il2CppString* Unity::Collections::LowLevel::Unsafe::UnsafeUtility::GetReasonForArrayNonBlittable(System::Array* arr) {
  static auto ___internal__logger = ::Logger::get().WithContext("Unity::Collections::LowLevel::Unsafe::UnsafeUtility::GetReasonForArrayNonBlittable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "GetReasonForArrayNonBlittable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arr)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, arr);
}
// Writing MetadataGetter for method: UnsafeUtility::IsBlittable
// Il2CppName: IsBlittable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnsafeUtility::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, Unity::Collections::Allocator)>(&UnsafeUtility::Free)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnsafeUtility*), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<void*>(), ::il2cpp_utils::ExtractIndependentType<Unity::Collections::Allocator>()});
  }
};
// Writing MetadataGetter for method: UnsafeUtility::IsBlittable
// Il2CppName: IsBlittable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&UnsafeUtility::IsBlittable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnsafeUtility*), "IsBlittable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: UnsafeUtility::IsBlittableValueType
// Il2CppName: IsBlittableValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&UnsafeUtility::IsBlittableValueType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnsafeUtility*), "IsBlittableValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: UnsafeUtility::GetReasonForTypeNonBlittableImpl
// Il2CppName: GetReasonForTypeNonBlittableImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Type*, ::Il2CppString*)>(&UnsafeUtility::GetReasonForTypeNonBlittableImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnsafeUtility*), "GetReasonForTypeNonBlittableImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnsafeUtility::IsArrayBlittable
// Il2CppName: IsArrayBlittable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Array*)>(&UnsafeUtility::IsArrayBlittable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnsafeUtility*), "IsArrayBlittable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Array*>()});
  }
};
// Writing MetadataGetter for method: UnsafeUtility::IsGenericListBlittable
// Il2CppName: IsGenericListBlittable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnsafeUtility::GetReasonForArrayNonBlittable
// Il2CppName: GetReasonForArrayNonBlittable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Array*)>(&UnsafeUtility::GetReasonForArrayNonBlittable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnsafeUtility*), "GetReasonForArrayNonBlittable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Array*>()});
  }
};
// Writing MetadataGetter for method: UnsafeUtility::GetReasonForGenericListNonBlittable
// Il2CppName: GetReasonForGenericListNonBlittable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnsafeUtility::ReadArrayElement
// Il2CppName: ReadArrayElement
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnsafeUtility::WriteArrayElement
// Il2CppName: WriteArrayElement
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnsafeUtility::SizeOf
// Il2CppName: SizeOf
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NotNullAttribute
#include "JetBrains/Annotations/NotNullAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NotNullAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotNullAttribute::*)()>(&NotNullAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotNullAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotNullAttribute::*)()>(&NotNullAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotNullAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.UsedImplicitlyAttribute
#include "JetBrains/Annotations/UsedImplicitlyAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: UsedImplicitlyAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UsedImplicitlyAttribute::*)(JetBrains::Annotations::ImplicitUseKindFlags, JetBrains::Annotations::ImplicitUseTargetFlags)>(&UsedImplicitlyAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UsedImplicitlyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseKindFlags>(), ::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseTargetFlags>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UsedImplicitlyAttribute::*)(JetBrains::Annotations::ImplicitUseKindFlags, JetBrains::Annotations::ImplicitUseTargetFlags)>(&UsedImplicitlyAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UsedImplicitlyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseKindFlags>(), ::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseTargetFlags>()});
  }
};
// Writing MetadataGetter for method: UsedImplicitlyAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UsedImplicitlyAttribute::*)()>(&UsedImplicitlyAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UsedImplicitlyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UsedImplicitlyAttribute::*)()>(&UsedImplicitlyAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UsedImplicitlyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ImplicitUseKindFlags
#include "JetBrains/Annotations/ImplicitUseKindFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseKindFlags Default
JetBrains::Annotations::ImplicitUseKindFlags JetBrains::Annotations::ImplicitUseKindFlags::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseKindFlags::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::ImplicitUseKindFlags>("JetBrains.Annotations", "ImplicitUseKindFlags", "Default"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseKindFlags Default
void JetBrains::Annotations::ImplicitUseKindFlags::_set_Default(JetBrains::Annotations::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseKindFlags::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseKindFlags", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseKindFlags Access
JetBrains::Annotations::ImplicitUseKindFlags JetBrains::Annotations::ImplicitUseKindFlags::_get_Access() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseKindFlags::_get_Access");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::ImplicitUseKindFlags>("JetBrains.Annotations", "ImplicitUseKindFlags", "Access"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseKindFlags Access
void JetBrains::Annotations::ImplicitUseKindFlags::_set_Access(JetBrains::Annotations::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseKindFlags::_set_Access");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseKindFlags", "Access", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseKindFlags Assign
JetBrains::Annotations::ImplicitUseKindFlags JetBrains::Annotations::ImplicitUseKindFlags::_get_Assign() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseKindFlags::_get_Assign");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::ImplicitUseKindFlags>("JetBrains.Annotations", "ImplicitUseKindFlags", "Assign"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseKindFlags Assign
void JetBrains::Annotations::ImplicitUseKindFlags::_set_Assign(JetBrains::Annotations::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseKindFlags::_set_Assign");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseKindFlags", "Assign", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature
JetBrains::Annotations::ImplicitUseKindFlags JetBrains::Annotations::ImplicitUseKindFlags::_get_InstantiatedWithFixedConstructorSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseKindFlags::_get_InstantiatedWithFixedConstructorSignature");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::ImplicitUseKindFlags>("JetBrains.Annotations", "ImplicitUseKindFlags", "InstantiatedWithFixedConstructorSignature"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature
void JetBrains::Annotations::ImplicitUseKindFlags::_set_InstantiatedWithFixedConstructorSignature(JetBrains::Annotations::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseKindFlags::_set_InstantiatedWithFixedConstructorSignature");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseKindFlags", "InstantiatedWithFixedConstructorSignature", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature
JetBrains::Annotations::ImplicitUseKindFlags JetBrains::Annotations::ImplicitUseKindFlags::_get_InstantiatedNoFixedConstructorSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseKindFlags::_get_InstantiatedNoFixedConstructorSignature");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::ImplicitUseKindFlags>("JetBrains.Annotations", "ImplicitUseKindFlags", "InstantiatedNoFixedConstructorSignature"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature
void JetBrains::Annotations::ImplicitUseKindFlags::_set_InstantiatedNoFixedConstructorSignature(JetBrains::Annotations::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseKindFlags::_set_InstantiatedNoFixedConstructorSignature");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseKindFlags", "InstantiatedNoFixedConstructorSignature", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ImplicitUseTargetFlags
#include "JetBrains/Annotations/ImplicitUseTargetFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Default
JetBrains::Annotations::ImplicitUseTargetFlags JetBrains::Annotations::ImplicitUseTargetFlags::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseTargetFlags::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::ImplicitUseTargetFlags>("JetBrains.Annotations", "ImplicitUseTargetFlags", "Default"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Default
void JetBrains::Annotations::ImplicitUseTargetFlags::_set_Default(JetBrains::Annotations::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseTargetFlags::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseTargetFlags", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Itself
JetBrains::Annotations::ImplicitUseTargetFlags JetBrains::Annotations::ImplicitUseTargetFlags::_get_Itself() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseTargetFlags::_get_Itself");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::ImplicitUseTargetFlags>("JetBrains.Annotations", "ImplicitUseTargetFlags", "Itself"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Itself
void JetBrains::Annotations::ImplicitUseTargetFlags::_set_Itself(JetBrains::Annotations::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseTargetFlags::_set_Itself");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseTargetFlags", "Itself", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Members
JetBrains::Annotations::ImplicitUseTargetFlags JetBrains::Annotations::ImplicitUseTargetFlags::_get_Members() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseTargetFlags::_get_Members");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::ImplicitUseTargetFlags>("JetBrains.Annotations", "ImplicitUseTargetFlags", "Members"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseTargetFlags Members
void JetBrains::Annotations::ImplicitUseTargetFlags::_set_Members(JetBrains::Annotations::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseTargetFlags::_set_Members");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseTargetFlags", "Members", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.ImplicitUseTargetFlags WithMembers
JetBrains::Annotations::ImplicitUseTargetFlags JetBrains::Annotations::ImplicitUseTargetFlags::_get_WithMembers() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseTargetFlags::_get_WithMembers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::ImplicitUseTargetFlags>("JetBrains.Annotations", "ImplicitUseTargetFlags", "WithMembers"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.ImplicitUseTargetFlags WithMembers
void JetBrains::Annotations::ImplicitUseTargetFlags::_set_WithMembers(JetBrains::Annotations::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ImplicitUseTargetFlags::_set_WithMembers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "ImplicitUseTargetFlags", "WithMembers", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.SendMessageOptions
#include "UnityEngine/SendMessageOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.SendMessageOptions RequireReceiver
UnityEngine::SendMessageOptions UnityEngine::SendMessageOptions::_get_RequireReceiver() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SendMessageOptions::_get_RequireReceiver");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SendMessageOptions>("UnityEngine", "SendMessageOptions", "RequireReceiver"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SendMessageOptions RequireReceiver
void UnityEngine::SendMessageOptions::_set_RequireReceiver(UnityEngine::SendMessageOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SendMessageOptions::_set_RequireReceiver");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SendMessageOptions", "RequireReceiver", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SendMessageOptions DontRequireReceiver
UnityEngine::SendMessageOptions UnityEngine::SendMessageOptions::_get_DontRequireReceiver() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SendMessageOptions::_get_DontRequireReceiver");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SendMessageOptions>("UnityEngine", "SendMessageOptions", "DontRequireReceiver"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SendMessageOptions DontRequireReceiver
void UnityEngine::SendMessageOptions::_set_DontRequireReceiver(UnityEngine::SendMessageOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SendMessageOptions::_set_DontRequireReceiver");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SendMessageOptions", "DontRequireReceiver", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.PrimitiveType
#include "UnityEngine/PrimitiveType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.PrimitiveType Sphere
UnityEngine::PrimitiveType UnityEngine::PrimitiveType::_get_Sphere() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_get_Sphere");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::PrimitiveType>("UnityEngine", "PrimitiveType", "Sphere"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.PrimitiveType Sphere
void UnityEngine::PrimitiveType::_set_Sphere(UnityEngine::PrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_set_Sphere");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "PrimitiveType", "Sphere", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.PrimitiveType Capsule
UnityEngine::PrimitiveType UnityEngine::PrimitiveType::_get_Capsule() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_get_Capsule");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::PrimitiveType>("UnityEngine", "PrimitiveType", "Capsule"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.PrimitiveType Capsule
void UnityEngine::PrimitiveType::_set_Capsule(UnityEngine::PrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_set_Capsule");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "PrimitiveType", "Capsule", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.PrimitiveType Cylinder
UnityEngine::PrimitiveType UnityEngine::PrimitiveType::_get_Cylinder() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_get_Cylinder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::PrimitiveType>("UnityEngine", "PrimitiveType", "Cylinder"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.PrimitiveType Cylinder
void UnityEngine::PrimitiveType::_set_Cylinder(UnityEngine::PrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_set_Cylinder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "PrimitiveType", "Cylinder", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.PrimitiveType Cube
UnityEngine::PrimitiveType UnityEngine::PrimitiveType::_get_Cube() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_get_Cube");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::PrimitiveType>("UnityEngine", "PrimitiveType", "Cube"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.PrimitiveType Cube
void UnityEngine::PrimitiveType::_set_Cube(UnityEngine::PrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_set_Cube");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "PrimitiveType", "Cube", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.PrimitiveType Plane
UnityEngine::PrimitiveType UnityEngine::PrimitiveType::_get_Plane() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_get_Plane");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::PrimitiveType>("UnityEngine", "PrimitiveType", "Plane"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.PrimitiveType Plane
void UnityEngine::PrimitiveType::_set_Plane(UnityEngine::PrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_set_Plane");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "PrimitiveType", "Plane", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.PrimitiveType Quad
UnityEngine::PrimitiveType UnityEngine::PrimitiveType::_get_Quad() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_get_Quad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::PrimitiveType>("UnityEngine", "PrimitiveType", "Quad"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.PrimitiveType Quad
void UnityEngine::PrimitiveType::_set_Quad(UnityEngine::PrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PrimitiveType::_set_Quad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "PrimitiveType", "Quad", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Space
#include "UnityEngine/Space.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Space World
UnityEngine::Space UnityEngine::Space::_get_World() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Space::_get_World");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Space>("UnityEngine", "Space", "World"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Space World
void UnityEngine::Space::_set_World(UnityEngine::Space value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Space::_set_World");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Space", "World", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Space Self
UnityEngine::Space UnityEngine::Space::_get_Self() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Space::_get_Self");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Space>("UnityEngine", "Space", "Self"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Space Self
void UnityEngine::Space::_set_Self(UnityEngine::Space value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Space::_set_Self");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Space", "Self", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.RuntimePlatform
#include "UnityEngine/RuntimePlatform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform OSXEditor
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_OSXEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_OSXEditor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "OSXEditor"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform OSXEditor
void UnityEngine::RuntimePlatform::_set_OSXEditor(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_OSXEditor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "OSXEditor", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform OSXPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_OSXPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_OSXPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "OSXPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform OSXPlayer
void UnityEngine::RuntimePlatform::_set_OSXPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_OSXPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "OSXPlayer", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform WindowsPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_WindowsPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_WindowsPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "WindowsPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform WindowsPlayer
void UnityEngine::RuntimePlatform::_set_WindowsPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_WindowsPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "WindowsPlayer", value));
}
// [ObsoleteAttribute] Offset: 0xD929A4
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform OSXWebPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_OSXWebPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_OSXWebPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "OSXWebPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform OSXWebPlayer
void UnityEngine::RuntimePlatform::_set_OSXWebPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_OSXWebPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "OSXWebPlayer", value));
}
// [ObsoleteAttribute] Offset: 0xD929E0
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform OSXDashboardPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_OSXDashboardPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_OSXDashboardPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "OSXDashboardPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform OSXDashboardPlayer
void UnityEngine::RuntimePlatform::_set_OSXDashboardPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_OSXDashboardPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "OSXDashboardPlayer", value));
}
// [ObsoleteAttribute] Offset: 0xD92A1C
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform WindowsWebPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_WindowsWebPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_WindowsWebPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "WindowsWebPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform WindowsWebPlayer
void UnityEngine::RuntimePlatform::_set_WindowsWebPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_WindowsWebPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "WindowsWebPlayer", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform WindowsEditor
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_WindowsEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_WindowsEditor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "WindowsEditor"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform WindowsEditor
void UnityEngine::RuntimePlatform::_set_WindowsEditor(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_WindowsEditor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "WindowsEditor", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform IPhonePlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_IPhonePlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_IPhonePlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "IPhonePlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform IPhonePlayer
void UnityEngine::RuntimePlatform::_set_IPhonePlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_IPhonePlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "IPhonePlayer", value));
}
// [ObsoleteAttribute] Offset: 0xD92A58
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform XBOX360
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_XBOX360() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_XBOX360");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "XBOX360"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform XBOX360
void UnityEngine::RuntimePlatform::_set_XBOX360(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_XBOX360");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "XBOX360", value));
}
// [ObsoleteAttribute] Offset: 0xD92A90
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform PS3
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_PS3() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_PS3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "PS3"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform PS3
void UnityEngine::RuntimePlatform::_set_PS3(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_PS3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "PS3", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform Android
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_Android() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_Android");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "Android"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform Android
void UnityEngine::RuntimePlatform::_set_Android(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_Android");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "Android", value));
}
// [ObsoleteAttribute] Offset: 0xD92AC8
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform NaCl
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_NaCl() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_NaCl");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "NaCl"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform NaCl
void UnityEngine::RuntimePlatform::_set_NaCl(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_NaCl");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "NaCl", value));
}
// [ObsoleteAttribute] Offset: 0xD92B00
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform FlashPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_FlashPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_FlashPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "FlashPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform FlashPlayer
void UnityEngine::RuntimePlatform::_set_FlashPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_FlashPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "FlashPlayer", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform LinuxPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_LinuxPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_LinuxPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "LinuxPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform LinuxPlayer
void UnityEngine::RuntimePlatform::_set_LinuxPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_LinuxPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "LinuxPlayer", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform LinuxEditor
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_LinuxEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_LinuxEditor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "LinuxEditor"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform LinuxEditor
void UnityEngine::RuntimePlatform::_set_LinuxEditor(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_LinuxEditor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "LinuxEditor", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform WebGLPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_WebGLPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_WebGLPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "WebGLPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform WebGLPlayer
void UnityEngine::RuntimePlatform::_set_WebGLPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_WebGLPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "WebGLPlayer", value));
}
// [ObsoleteAttribute] Offset: 0xD92B38
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform MetroPlayerX86
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_MetroPlayerX86() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_MetroPlayerX86");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "MetroPlayerX86"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform MetroPlayerX86
void UnityEngine::RuntimePlatform::_set_MetroPlayerX86(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_MetroPlayerX86");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "MetroPlayerX86", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform WSAPlayerX86
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_WSAPlayerX86() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_WSAPlayerX86");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "WSAPlayerX86"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform WSAPlayerX86
void UnityEngine::RuntimePlatform::_set_WSAPlayerX86(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_WSAPlayerX86");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "WSAPlayerX86", value));
}
// [ObsoleteAttribute] Offset: 0xD92B70
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform MetroPlayerX64
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_MetroPlayerX64() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_MetroPlayerX64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "MetroPlayerX64"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform MetroPlayerX64
void UnityEngine::RuntimePlatform::_set_MetroPlayerX64(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_MetroPlayerX64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "MetroPlayerX64", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform WSAPlayerX64
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_WSAPlayerX64() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_WSAPlayerX64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "WSAPlayerX64"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform WSAPlayerX64
void UnityEngine::RuntimePlatform::_set_WSAPlayerX64(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_WSAPlayerX64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "WSAPlayerX64", value));
}
// [ObsoleteAttribute] Offset: 0xD92BA8
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform MetroPlayerARM
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_MetroPlayerARM() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_MetroPlayerARM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "MetroPlayerARM"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform MetroPlayerARM
void UnityEngine::RuntimePlatform::_set_MetroPlayerARM(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_MetroPlayerARM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "MetroPlayerARM", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform WSAPlayerARM
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_WSAPlayerARM() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_WSAPlayerARM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "WSAPlayerARM"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform WSAPlayerARM
void UnityEngine::RuntimePlatform::_set_WSAPlayerARM(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_WSAPlayerARM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "WSAPlayerARM", value));
}
// [ObsoleteAttribute] Offset: 0xD92BE0
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform WP8Player
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_WP8Player() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_WP8Player");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "WP8Player"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform WP8Player
void UnityEngine::RuntimePlatform::_set_WP8Player(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_WP8Player");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "WP8Player", value));
}
// [ObsoleteAttribute] Offset: 0xD92C18
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform BlackBerryPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_BlackBerryPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_BlackBerryPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "BlackBerryPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform BlackBerryPlayer
void UnityEngine::RuntimePlatform::_set_BlackBerryPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_BlackBerryPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "BlackBerryPlayer", value));
}
// [ObsoleteAttribute] Offset: 0xD92C50
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform TizenPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_TizenPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_TizenPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "TizenPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform TizenPlayer
void UnityEngine::RuntimePlatform::_set_TizenPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_TizenPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "TizenPlayer", value));
}
// [ObsoleteAttribute] Offset: 0xD92C88
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform PSP2
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_PSP2() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_PSP2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "PSP2"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform PSP2
void UnityEngine::RuntimePlatform::_set_PSP2(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_PSP2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "PSP2", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform PS4
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_PS4() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_PS4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "PS4"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform PS4
void UnityEngine::RuntimePlatform::_set_PS4(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_PS4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "PS4", value));
}
// [ObsoleteAttribute] Offset: 0xD92CC0
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform PSM
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_PSM() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_PSM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "PSM"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform PSM
void UnityEngine::RuntimePlatform::_set_PSM(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_PSM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "PSM", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform XboxOne
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_XboxOne() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_XboxOne");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "XboxOne"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform XboxOne
void UnityEngine::RuntimePlatform::_set_XboxOne(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_XboxOne");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "XboxOne", value));
}
// [ObsoleteAttribute] Offset: 0xD92CF8
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform SamsungTVPlayer
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_SamsungTVPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_SamsungTVPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "SamsungTVPlayer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform SamsungTVPlayer
void UnityEngine::RuntimePlatform::_set_SamsungTVPlayer(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_SamsungTVPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "SamsungTVPlayer", value));
}
// [ObsoleteAttribute] Offset: 0xD92D30
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform WiiU
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_WiiU() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_WiiU");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "WiiU"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform WiiU
void UnityEngine::RuntimePlatform::_set_WiiU(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_WiiU");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "WiiU", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform tvOS
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_tvOS() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_tvOS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "tvOS"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform tvOS
void UnityEngine::RuntimePlatform::_set_tvOS(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_tvOS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "tvOS", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform Switch
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_Switch() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_Switch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "Switch"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform Switch
void UnityEngine::RuntimePlatform::_set_Switch(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_Switch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "Switch", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform Lumin
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_Lumin() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_Lumin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "Lumin"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform Lumin
void UnityEngine::RuntimePlatform::_set_Lumin(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_Lumin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "Lumin", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform Stadia
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_Stadia() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_Stadia");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "Stadia"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform Stadia
void UnityEngine::RuntimePlatform::_set_Stadia(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_Stadia");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "Stadia", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimePlatform CloudRendering
UnityEngine::RuntimePlatform UnityEngine::RuntimePlatform::_get_CloudRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_get_CloudRendering");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimePlatform>("UnityEngine", "RuntimePlatform", "CloudRendering"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimePlatform CloudRendering
void UnityEngine::RuntimePlatform::_set_CloudRendering(UnityEngine::RuntimePlatform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimePlatform::_set_CloudRendering");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimePlatform", "CloudRendering", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.SystemLanguage
#include "UnityEngine/SystemLanguage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Afrikaans
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Afrikaans() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Afrikaans");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Afrikaans"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Afrikaans
void UnityEngine::SystemLanguage::_set_Afrikaans(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Afrikaans");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Afrikaans", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Arabic
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Arabic() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Arabic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Arabic"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Arabic
void UnityEngine::SystemLanguage::_set_Arabic(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Arabic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Arabic", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Basque
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Basque() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Basque");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Basque"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Basque
void UnityEngine::SystemLanguage::_set_Basque(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Basque");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Basque", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Belarusian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Belarusian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Belarusian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Belarusian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Belarusian
void UnityEngine::SystemLanguage::_set_Belarusian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Belarusian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Belarusian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Bulgarian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Bulgarian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Bulgarian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Bulgarian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Bulgarian
void UnityEngine::SystemLanguage::_set_Bulgarian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Bulgarian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Bulgarian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Catalan
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Catalan() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Catalan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Catalan"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Catalan
void UnityEngine::SystemLanguage::_set_Catalan(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Catalan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Catalan", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Chinese
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Chinese() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Chinese");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Chinese"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Chinese
void UnityEngine::SystemLanguage::_set_Chinese(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Chinese");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Chinese", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Czech
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Czech() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Czech");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Czech"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Czech
void UnityEngine::SystemLanguage::_set_Czech(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Czech");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Czech", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Danish
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Danish() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Danish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Danish"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Danish
void UnityEngine::SystemLanguage::_set_Danish(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Danish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Danish", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Dutch
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Dutch() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Dutch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Dutch"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Dutch
void UnityEngine::SystemLanguage::_set_Dutch(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Dutch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Dutch", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage English
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_English() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_English");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "English"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage English
void UnityEngine::SystemLanguage::_set_English(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_English");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "English", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Estonian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Estonian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Estonian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Estonian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Estonian
void UnityEngine::SystemLanguage::_set_Estonian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Estonian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Estonian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Faroese
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Faroese() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Faroese");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Faroese"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Faroese
void UnityEngine::SystemLanguage::_set_Faroese(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Faroese");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Faroese", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Finnish
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Finnish() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Finnish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Finnish"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Finnish
void UnityEngine::SystemLanguage::_set_Finnish(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Finnish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Finnish", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage French
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_French() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_French");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "French"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage French
void UnityEngine::SystemLanguage::_set_French(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_French");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "French", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage German
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_German() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_German");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "German"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage German
void UnityEngine::SystemLanguage::_set_German(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_German");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "German", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Greek
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Greek() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Greek");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Greek"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Greek
void UnityEngine::SystemLanguage::_set_Greek(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Greek");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Greek", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Hebrew
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Hebrew() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Hebrew");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Hebrew"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Hebrew
void UnityEngine::SystemLanguage::_set_Hebrew(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Hebrew");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Hebrew", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Icelandic
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Icelandic() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Icelandic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Icelandic"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Icelandic
void UnityEngine::SystemLanguage::_set_Icelandic(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Icelandic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Icelandic", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Indonesian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Indonesian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Indonesian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Indonesian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Indonesian
void UnityEngine::SystemLanguage::_set_Indonesian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Indonesian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Indonesian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Italian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Italian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Italian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Italian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Italian
void UnityEngine::SystemLanguage::_set_Italian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Italian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Italian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Japanese
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Japanese() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Japanese");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Japanese"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Japanese
void UnityEngine::SystemLanguage::_set_Japanese(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Japanese");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Japanese", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Korean
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Korean() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Korean");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Korean"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Korean
void UnityEngine::SystemLanguage::_set_Korean(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Korean");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Korean", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Latvian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Latvian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Latvian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Latvian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Latvian
void UnityEngine::SystemLanguage::_set_Latvian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Latvian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Latvian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Lithuanian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Lithuanian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Lithuanian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Lithuanian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Lithuanian
void UnityEngine::SystemLanguage::_set_Lithuanian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Lithuanian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Lithuanian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Norwegian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Norwegian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Norwegian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Norwegian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Norwegian
void UnityEngine::SystemLanguage::_set_Norwegian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Norwegian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Norwegian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Polish
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Polish() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Polish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Polish"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Polish
void UnityEngine::SystemLanguage::_set_Polish(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Polish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Polish", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Portuguese
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Portuguese() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Portuguese");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Portuguese"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Portuguese
void UnityEngine::SystemLanguage::_set_Portuguese(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Portuguese");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Portuguese", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Romanian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Romanian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Romanian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Romanian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Romanian
void UnityEngine::SystemLanguage::_set_Romanian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Romanian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Romanian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Russian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Russian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Russian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Russian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Russian
void UnityEngine::SystemLanguage::_set_Russian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Russian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Russian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage SerboCroatian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_SerboCroatian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_SerboCroatian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "SerboCroatian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage SerboCroatian
void UnityEngine::SystemLanguage::_set_SerboCroatian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_SerboCroatian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "SerboCroatian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Slovak
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Slovak() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Slovak");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Slovak"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Slovak
void UnityEngine::SystemLanguage::_set_Slovak(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Slovak");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Slovak", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Slovenian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Slovenian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Slovenian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Slovenian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Slovenian
void UnityEngine::SystemLanguage::_set_Slovenian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Slovenian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Slovenian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Spanish
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Spanish() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Spanish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Spanish"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Spanish
void UnityEngine::SystemLanguage::_set_Spanish(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Spanish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Spanish", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Swedish
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Swedish() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Swedish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Swedish"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Swedish
void UnityEngine::SystemLanguage::_set_Swedish(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Swedish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Swedish", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Thai
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Thai() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Thai");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Thai"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Thai
void UnityEngine::SystemLanguage::_set_Thai(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Thai");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Thai", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Turkish
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Turkish() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Turkish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Turkish"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Turkish
void UnityEngine::SystemLanguage::_set_Turkish(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Turkish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Turkish", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Ukrainian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Ukrainian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Ukrainian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Ukrainian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Ukrainian
void UnityEngine::SystemLanguage::_set_Ukrainian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Ukrainian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Ukrainian", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Vietnamese
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Vietnamese() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Vietnamese");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Vietnamese"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Vietnamese
void UnityEngine::SystemLanguage::_set_Vietnamese(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Vietnamese");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Vietnamese", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage ChineseSimplified
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_ChineseSimplified() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_ChineseSimplified");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "ChineseSimplified"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage ChineseSimplified
void UnityEngine::SystemLanguage::_set_ChineseSimplified(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_ChineseSimplified");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "ChineseSimplified", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage ChineseTraditional
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_ChineseTraditional() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_ChineseTraditional");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "ChineseTraditional"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage ChineseTraditional
void UnityEngine::SystemLanguage::_set_ChineseTraditional(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_ChineseTraditional");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "ChineseTraditional", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Unknown
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Unknown
void UnityEngine::SystemLanguage::_set_Unknown(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.SystemLanguage Hungarian
UnityEngine::SystemLanguage UnityEngine::SystemLanguage::_get_Hungarian() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_get_Hungarian");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::SystemLanguage>("UnityEngine", "SystemLanguage", "Hungarian"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.SystemLanguage Hungarian
void UnityEngine::SystemLanguage::_set_Hungarian(UnityEngine::SystemLanguage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemLanguage::_set_Hungarian");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemLanguage", "Hungarian", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.LogType
#include "UnityEngine/LogType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.LogType Error
UnityEngine::LogType UnityEngine::LogType::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogType::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LogType>("UnityEngine", "LogType", "Error"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.LogType Error
void UnityEngine::LogType::_set_Error(UnityEngine::LogType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogType::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "LogType", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.LogType Assert
UnityEngine::LogType UnityEngine::LogType::_get_Assert() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogType::_get_Assert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LogType>("UnityEngine", "LogType", "Assert"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.LogType Assert
void UnityEngine::LogType::_set_Assert(UnityEngine::LogType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogType::_set_Assert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "LogType", "Assert", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.LogType Warning
UnityEngine::LogType UnityEngine::LogType::_get_Warning() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogType::_get_Warning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LogType>("UnityEngine", "LogType", "Warning"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.LogType Warning
void UnityEngine::LogType::_set_Warning(UnityEngine::LogType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogType::_set_Warning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "LogType", "Warning", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.LogType Log
UnityEngine::LogType UnityEngine::LogType::_get_Log() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogType::_get_Log");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LogType>("UnityEngine", "LogType", "Log"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.LogType Log
void UnityEngine::LogType::_set_Log(UnityEngine::LogType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogType::_set_Log");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "LogType", "Log", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.LogType Exception
UnityEngine::LogType UnityEngine::LogType::_get_Exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogType::_get_Exception");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LogType>("UnityEngine", "LogType", "Exception"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.LogType Exception
void UnityEngine::LogType::_set_Exception(UnityEngine::LogType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogType::_set_Exception");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "LogType", "Exception", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.LogOption
#include "UnityEngine/LogOption.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.LogOption None
UnityEngine::LogOption UnityEngine::LogOption::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogOption::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LogOption>("UnityEngine", "LogOption", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.LogOption None
void UnityEngine::LogOption::_set_None(UnityEngine::LogOption value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogOption::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "LogOption", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.LogOption NoStacktrace
UnityEngine::LogOption UnityEngine::LogOption::_get_NoStacktrace() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogOption::_get_NoStacktrace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::LogOption>("UnityEngine", "LogOption", "NoStacktrace"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.LogOption NoStacktrace
void UnityEngine::LogOption::_set_NoStacktrace(UnityEngine::LogOption value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LogOption::_set_NoStacktrace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "LogOption", "NoStacktrace", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ThreadPriority
#include "UnityEngine/ThreadPriority.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.ThreadPriority Low
UnityEngine::ThreadPriority UnityEngine::ThreadPriority::_get_Low() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ThreadPriority::_get_Low");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::ThreadPriority>("UnityEngine", "ThreadPriority", "Low"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.ThreadPriority Low
void UnityEngine::ThreadPriority::_set_Low(UnityEngine::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ThreadPriority::_set_Low");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "ThreadPriority", "Low", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.ThreadPriority BelowNormal
UnityEngine::ThreadPriority UnityEngine::ThreadPriority::_get_BelowNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ThreadPriority::_get_BelowNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::ThreadPriority>("UnityEngine", "ThreadPriority", "BelowNormal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.ThreadPriority BelowNormal
void UnityEngine::ThreadPriority::_set_BelowNormal(UnityEngine::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ThreadPriority::_set_BelowNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "ThreadPriority", "BelowNormal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.ThreadPriority Normal
UnityEngine::ThreadPriority UnityEngine::ThreadPriority::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ThreadPriority::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::ThreadPriority>("UnityEngine", "ThreadPriority", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.ThreadPriority Normal
void UnityEngine::ThreadPriority::_set_Normal(UnityEngine::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ThreadPriority::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "ThreadPriority", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.ThreadPriority High
UnityEngine::ThreadPriority UnityEngine::ThreadPriority::_get_High() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ThreadPriority::_get_High");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::ThreadPriority>("UnityEngine", "ThreadPriority", "High"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.ThreadPriority High
void UnityEngine::ThreadPriority::_set_High(UnityEngine::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ThreadPriority::_set_High");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "ThreadPriority", "High", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.SortingLayer
#include "UnityEngine/SortingLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.SortingLayer.GetLayerValueFromID
int UnityEngine::SortingLayer::GetLayerValueFromID(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SortingLayer::GetLayerValueFromID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SortingLayer", "GetLayerValueFromID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, id);
}
// Writing MetadataGetter for method: SortingLayer::GetLayerValueFromID
// Il2CppName: GetLayerValueFromID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&SortingLayer::GetLayerValueFromID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SortingLayer), "GetLayerValueFromID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Keyframe
#include "UnityEngine/Keyframe.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Keyframe.get_time
float UnityEngine::Keyframe::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Keyframe::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Keyframe.set_time
void UnityEngine::Keyframe::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Keyframe::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Keyframe.get_value
float UnityEngine::Keyframe::get_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Keyframe::get_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Keyframe.set_value
void UnityEngine::Keyframe::set_value(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Keyframe::set_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Keyframe.get_inTangent
float UnityEngine::Keyframe::get_inTangent() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Keyframe::get_inTangent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_inTangent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Keyframe.set_inTangent
void UnityEngine::Keyframe::set_inTangent(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Keyframe::set_inTangent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_inTangent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Keyframe.get_outTangent
float UnityEngine::Keyframe::get_outTangent() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Keyframe::get_outTangent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_outTangent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Keyframe.set_outTangent
void UnityEngine::Keyframe::set_outTangent(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Keyframe::set_outTangent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_outTangent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: Keyframe::Keyframe
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Keyframe::*)(float, float)>(&Keyframe::Keyframe<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Keyframe::*)(float, float)>(&Keyframe::Keyframe<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Keyframe::Keyframe
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Keyframe::*)(float, float, float, float)>(&Keyframe::Keyframe<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Keyframe::*)(float, float, float, float)>(&Keyframe::Keyframe<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Keyframe::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Keyframe::*)()>(&Keyframe::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Keyframe::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Keyframe::*)(float)>(&Keyframe::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Keyframe::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Keyframe::*)()>(&Keyframe::get_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Keyframe::set_value
// Il2CppName: set_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Keyframe::*)(float)>(&Keyframe::set_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), "set_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Keyframe::get_inTangent
// Il2CppName: get_inTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Keyframe::*)()>(&Keyframe::get_inTangent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), "get_inTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Keyframe::set_inTangent
// Il2CppName: set_inTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Keyframe::*)(float)>(&Keyframe::set_inTangent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), "set_inTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Keyframe::get_outTangent
// Il2CppName: get_outTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Keyframe::*)()>(&Keyframe::get_outTangent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), "get_outTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Keyframe::set_outTangent
// Il2CppName: set_outTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Keyframe::*)(float)>(&Keyframe::set_outTangent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Keyframe), "set_outTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.WrapMode
#include "UnityEngine/WrapMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.WrapMode Once
UnityEngine::WrapMode UnityEngine::WrapMode::_get_Once() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_get_Once");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::WrapMode>("UnityEngine", "WrapMode", "Once"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.WrapMode Once
void UnityEngine::WrapMode::_set_Once(UnityEngine::WrapMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_set_Once");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WrapMode", "Once", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.WrapMode Loop
UnityEngine::WrapMode UnityEngine::WrapMode::_get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_get_Loop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::WrapMode>("UnityEngine", "WrapMode", "Loop"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.WrapMode Loop
void UnityEngine::WrapMode::_set_Loop(UnityEngine::WrapMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_set_Loop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WrapMode", "Loop", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.WrapMode PingPong
UnityEngine::WrapMode UnityEngine::WrapMode::_get_PingPong() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_get_PingPong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::WrapMode>("UnityEngine", "WrapMode", "PingPong"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.WrapMode PingPong
void UnityEngine::WrapMode::_set_PingPong(UnityEngine::WrapMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_set_PingPong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WrapMode", "PingPong", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.WrapMode Default
UnityEngine::WrapMode UnityEngine::WrapMode::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::WrapMode>("UnityEngine", "WrapMode", "Default"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.WrapMode Default
void UnityEngine::WrapMode::_set_Default(UnityEngine::WrapMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WrapMode", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.WrapMode ClampForever
UnityEngine::WrapMode UnityEngine::WrapMode::_get_ClampForever() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_get_ClampForever");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::WrapMode>("UnityEngine", "WrapMode", "ClampForever"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.WrapMode ClampForever
void UnityEngine::WrapMode::_set_ClampForever(UnityEngine::WrapMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_set_ClampForever");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WrapMode", "ClampForever", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.WrapMode Clamp
UnityEngine::WrapMode UnityEngine::WrapMode::_get_Clamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_get_Clamp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::WrapMode>("UnityEngine", "WrapMode", "Clamp"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.WrapMode Clamp
void UnityEngine::WrapMode::_set_Clamp(UnityEngine::WrapMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WrapMode::_set_Clamp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "WrapMode", "Clamp", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AnimationCurve.Internal_Destroy
void UnityEngine::AnimationCurve::Internal_Destroy(System::IntPtr ptr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::Internal_Destroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AnimationCurve", "Internal_Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ptr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ptr);
}
// Autogenerated method: UnityEngine.AnimationCurve.Internal_Create
System::IntPtr UnityEngine::AnimationCurve::Internal_Create(::Array<UnityEngine::Keyframe>* keys) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::Internal_Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AnimationCurve", "Internal_Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keys)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, keys);
}
// Autogenerated method: UnityEngine.AnimationCurve.Internal_Equals
bool UnityEngine::AnimationCurve::Internal_Equals(System::IntPtr other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::Internal_Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Internal_Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.AnimationCurve.Evaluate
float UnityEngine::AnimationCurve::Evaluate(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::Evaluate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.AnimationCurve.get_keys
::Array<UnityEngine::Keyframe>* UnityEngine::AnimationCurve::get_keys() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::get_keys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Keyframe>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AnimationCurve.set_keys
void UnityEngine::AnimationCurve::set_keys(::Array<UnityEngine::Keyframe>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::set_keys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_keys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AnimationCurve.AddKey
int UnityEngine::AnimationCurve::AddKey(float time, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::AddKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, time, value);
}
// Autogenerated method: UnityEngine.AnimationCurve.get_length
int UnityEngine::AnimationCurve::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::get_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AnimationCurve.SetKeys
void UnityEngine::AnimationCurve::SetKeys(::Array<UnityEngine::Keyframe>* keys) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::SetKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keys)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keys);
}
// Autogenerated method: UnityEngine.AnimationCurve.GetKeys
::Array<UnityEngine::Keyframe>* UnityEngine::AnimationCurve::GetKeys() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::GetKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Keyframe>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AnimationCurve.Linear
UnityEngine::AnimationCurve* UnityEngine::AnimationCurve::Linear(float timeStart, float valueStart, float timeEnd, float valueEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::Linear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AnimationCurve", "Linear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeStart), ::il2cpp_utils::ExtractType(valueStart), ::il2cpp_utils::ExtractType(timeEnd), ::il2cpp_utils::ExtractType(valueEnd)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationCurve*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, timeStart, valueStart, timeEnd, valueEnd);
}
// Autogenerated method: UnityEngine.AnimationCurve.EaseInOut
UnityEngine::AnimationCurve* UnityEngine::AnimationCurve::EaseInOut(float timeStart, float valueStart, float timeEnd, float valueEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::EaseInOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AnimationCurve", "EaseInOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeStart), ::il2cpp_utils::ExtractType(valueStart), ::il2cpp_utils::ExtractType(timeEnd), ::il2cpp_utils::ExtractType(valueEnd)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationCurve*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, timeStart, valueStart, timeEnd, valueEnd);
}
// Autogenerated method: UnityEngine.AnimationCurve.Equals
bool UnityEngine::AnimationCurve::Equals(UnityEngine::AnimationCurve* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.AnimationCurve.Finalize
void UnityEngine::AnimationCurve::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AnimationCurve.Equals
bool UnityEngine::AnimationCurve::Equals(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, o);
}
// Autogenerated method: UnityEngine.AnimationCurve.GetHashCode
int UnityEngine::AnimationCurve::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AnimationCurve::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AnimationCurve::Internal_Destroy
// Il2CppName: Internal_Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&AnimationCurve::Internal_Destroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "Internal_Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::Internal_Create
// Il2CppName: Internal_Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(::Array<UnityEngine::Keyframe>*)>(&AnimationCurve::Internal_Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "Internal_Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Keyframe>*>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::Internal_Equals
// Il2CppName: Internal_Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationCurve::*)(System::IntPtr)>(&AnimationCurve::Internal_Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "Internal_Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AnimationCurve::*)(float)>(&AnimationCurve::Evaluate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::get_keys
// Il2CppName: get_keys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Keyframe>* (AnimationCurve::*)()>(&AnimationCurve::get_keys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "get_keys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationCurve::set_keys
// Il2CppName: set_keys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationCurve::*)(::Array<UnityEngine::Keyframe>*)>(&AnimationCurve::set_keys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "set_keys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Keyframe>*>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::AddKey
// Il2CppName: AddKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AnimationCurve::*)(float, float)>(&AnimationCurve::AddKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "AddKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AnimationCurve::*)()>(&AnimationCurve::get_length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationCurve::SetKeys
// Il2CppName: SetKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationCurve::*)(::Array<UnityEngine::Keyframe>*)>(&AnimationCurve::SetKeys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "SetKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Keyframe>*>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::GetKeys
// Il2CppName: GetKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Keyframe>* (AnimationCurve::*)()>(&AnimationCurve::GetKeys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "GetKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationCurve::Linear
// Il2CppName: Linear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationCurve* (*)(float, float, float, float)>(&AnimationCurve::Linear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "Linear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::EaseInOut
// Il2CppName: EaseInOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationCurve* (*)(float, float, float, float)>(&AnimationCurve::EaseInOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "EaseInOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationCurve::*)(::Array<UnityEngine::Keyframe>*)>(&AnimationCurve::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Keyframe>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationCurve::*)(::Array<UnityEngine::Keyframe>*)>(&AnimationCurve::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Keyframe>*>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationCurve::*)(UnityEngine::AnimationCurve*)>(&AnimationCurve::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationCurve*>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationCurve::*)()>(&AnimationCurve::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationCurve::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationCurve::*)()>(&AnimationCurve::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationCurve::*)()>(&AnimationCurve::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationCurve::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationCurve::*)(::Il2CppObject*)>(&AnimationCurve::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AnimationCurve::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AnimationCurve::*)()>(&AnimationCurve::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationCurve*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Application
#include "UnityEngine/Application.hpp"
// Including type: UnityEngine.Application/LowMemoryCallback
#include "UnityEngine/Application_LowMemoryCallback.hpp"
// Including type: UnityEngine.Application/LogCallback
#include "UnityEngine/Application_LogCallback.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.ThreadPriority
#include "UnityEngine/ThreadPriority.hpp"
// Including type: UnityEngine.RuntimePlatform
#include "UnityEngine/RuntimePlatform.hpp"
// Including type: UnityEngine.SystemLanguage
#include "UnityEngine/SystemLanguage.hpp"
// Including type: UnityEngine.NetworkReachability
#include "UnityEngine/NetworkReachability.hpp"
// Including type: UnityEngine.LogType
#include "UnityEngine/LogType.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DebuggerBrowsableAttribute] Offset: 0xD92D68
// [CompilerGeneratedAttribute] Offset: 0xD92D68
// Autogenerated static field getter
// Get static field: static private UnityEngine.Application/LowMemoryCallback lowMemory
UnityEngine::Application::LowMemoryCallback* UnityEngine::Application::_get_lowMemory() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_get_lowMemory");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Application::LowMemoryCallback*>("UnityEngine", "Application", "lowMemory"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Application/LowMemoryCallback lowMemory
void UnityEngine::Application::_set_lowMemory(UnityEngine::Application::LowMemoryCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_set_lowMemory");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Application", "lowMemory", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Application/LogCallback s_LogCallbackHandler
UnityEngine::Application::LogCallback* UnityEngine::Application::_get_s_LogCallbackHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_get_s_LogCallbackHandler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Application::LogCallback*>("UnityEngine", "Application", "s_LogCallbackHandler"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Application/LogCallback s_LogCallbackHandler
void UnityEngine::Application::_set_s_LogCallbackHandler(UnityEngine::Application::LogCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_set_s_LogCallbackHandler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Application", "s_LogCallbackHandler", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Application/LogCallback s_LogCallbackHandlerThreaded
UnityEngine::Application::LogCallback* UnityEngine::Application::_get_s_LogCallbackHandlerThreaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_get_s_LogCallbackHandlerThreaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Application::LogCallback*>("UnityEngine", "Application", "s_LogCallbackHandlerThreaded"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Application/LogCallback s_LogCallbackHandlerThreaded
void UnityEngine::Application::_set_s_LogCallbackHandlerThreaded(UnityEngine::Application::LogCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_set_s_LogCallbackHandlerThreaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Application", "s_LogCallbackHandlerThreaded", value));
}
// [CompilerGeneratedAttribute] Offset: 0xD92DA4
// [DebuggerBrowsableAttribute] Offset: 0xD92DA4
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Boolean> focusChanged
System::Action_1<bool>* UnityEngine::Application::_get_focusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_get_focusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<bool>*>("UnityEngine", "Application", "focusChanged"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Boolean> focusChanged
void UnityEngine::Application::_set_focusChanged(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_set_focusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Application", "focusChanged", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xD92DE0
// [CompilerGeneratedAttribute] Offset: 0xD92DE0
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.String> deepLinkActivated
System::Action_1<::Il2CppString*>* UnityEngine::Application::_get_deepLinkActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_get_deepLinkActivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppString*>*>("UnityEngine", "Application", "deepLinkActivated"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.String> deepLinkActivated
void UnityEngine::Application::_set_deepLinkActivated(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_set_deepLinkActivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Application", "deepLinkActivated", value));
}
// [CompilerGeneratedAttribute] Offset: 0xD92E1C
// [DebuggerBrowsableAttribute] Offset: 0xD92E1C
// Autogenerated static field getter
// Get static field: static private System.Func`1<System.Boolean> wantsToQuit
System::Func_1<bool>* UnityEngine::Application::_get_wantsToQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_get_wantsToQuit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Func_1<bool>*>("UnityEngine", "Application", "wantsToQuit"));
}
// Autogenerated static field setter
// Set static field: static private System.Func`1<System.Boolean> wantsToQuit
void UnityEngine::Application::_set_wantsToQuit(System::Func_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_set_wantsToQuit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Application", "wantsToQuit", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xD92E58
// [CompilerGeneratedAttribute] Offset: 0xD92E58
// Autogenerated static field getter
// Get static field: static private System.Action quitting
System::Action* UnityEngine::Application::_get_quitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_get_quitting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action*>("UnityEngine", "Application", "quitting"));
}
// Autogenerated static field setter
// Set static field: static private System.Action quitting
void UnityEngine::Application::_set_quitting(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::_set_quitting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Application", "quitting", value));
}
// Autogenerated method: UnityEngine.Application.Quit
void UnityEngine::Application::Quit(int exitCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::Quit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "Quit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exitCode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, exitCode);
}
// Autogenerated method: UnityEngine.Application.Quit
void UnityEngine::Application::Quit() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::Quit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "Quit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.CanStreamedLevelBeLoaded
bool UnityEngine::Application::CanStreamedLevelBeLoaded(int levelIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::CanStreamedLevelBeLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "CanStreamedLevelBeLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, levelIndex);
}
// Autogenerated method: UnityEngine.Application.CanStreamedLevelBeLoaded
bool UnityEngine::Application::CanStreamedLevelBeLoaded(::Il2CppString* levelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::CanStreamedLevelBeLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "CanStreamedLevelBeLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, levelName);
}
// Autogenerated method: UnityEngine.Application.get_isPlaying
bool UnityEngine::Application::get_isPlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_isPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_isPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.set_runInBackground
void UnityEngine::Application::set_runInBackground(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::set_runInBackground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "set_runInBackground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Application.get_dataPath
::Il2CppString* UnityEngine::Application::get_dataPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_dataPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_dataPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.get_streamingAssetsPath
::Il2CppString* UnityEngine::Application::get_streamingAssetsPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_streamingAssetsPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_streamingAssetsPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.get_persistentDataPath
::Il2CppString* UnityEngine::Application::get_persistentDataPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_persistentDataPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_persistentDataPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.get_unityVersion
::Il2CppString* UnityEngine::Application::get_unityVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_unityVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_unityVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.get_version
::Il2CppString* UnityEngine::Application::get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.get_identifier
::Il2CppString* UnityEngine::Application::get_identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.get_productName
::Il2CppString* UnityEngine::Application::get_productName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_productName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_productName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.get_companyName
::Il2CppString* UnityEngine::Application::get_companyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_companyName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_companyName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.OpenURL
void UnityEngine::Application::OpenURL(::Il2CppString* url) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::OpenURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "OpenURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, url);
}
// Autogenerated method: UnityEngine.Application.set_targetFrameRate
void UnityEngine::Application::set_targetFrameRate(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::set_targetFrameRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "set_targetFrameRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Application.SetLogCallbackDefined
void UnityEngine::Application::SetLogCallbackDefined(bool defined) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::SetLogCallbackDefined");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "SetLogCallbackDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defined)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, defined);
}
// Autogenerated method: UnityEngine.Application.set_backgroundLoadingPriority
void UnityEngine::Application::set_backgroundLoadingPriority(UnityEngine::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::set_backgroundLoadingPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "set_backgroundLoadingPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Application.get_platform
UnityEngine::RuntimePlatform UnityEngine::Application::get_platform() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_platform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_platform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RuntimePlatform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.get_isMobilePlatform
bool UnityEngine::Application::get_isMobilePlatform() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_isMobilePlatform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_isMobilePlatform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.get_systemLanguage
UnityEngine::SystemLanguage UnityEngine::Application::get_systemLanguage() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_systemLanguage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_systemLanguage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::SystemLanguage, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.get_internetReachability
UnityEngine::NetworkReachability UnityEngine::Application::get_internetReachability() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_internetReachability");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_internetReachability", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::NetworkReachability, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.CallLowMemory
void UnityEngine::Application::CallLowMemory() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::CallLowMemory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "CallLowMemory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.add_logMessageReceived
void UnityEngine::Application::add_logMessageReceived(UnityEngine::Application::LogCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::add_logMessageReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "add_logMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Application.remove_logMessageReceived
void UnityEngine::Application::remove_logMessageReceived(UnityEngine::Application::LogCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::remove_logMessageReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "remove_logMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Application.add_logMessageReceivedThreaded
void UnityEngine::Application::add_logMessageReceivedThreaded(UnityEngine::Application::LogCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::add_logMessageReceivedThreaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "add_logMessageReceivedThreaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Application.remove_logMessageReceivedThreaded
void UnityEngine::Application::remove_logMessageReceivedThreaded(UnityEngine::Application::LogCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::remove_logMessageReceivedThreaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "remove_logMessageReceivedThreaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Application.CallLogCallback
void UnityEngine::Application::CallLogCallback(::Il2CppString* logString, ::Il2CppString* stackTrace, UnityEngine::LogType type, bool invokedOnMainThread) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::CallLogCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "CallLogCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(logString), ::il2cpp_utils::ExtractType(stackTrace), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(invokedOnMainThread)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, logString, stackTrace, type, invokedOnMainThread);
}
// Autogenerated method: UnityEngine.Application.add_onBeforeRender
void UnityEngine::Application::add_onBeforeRender(UnityEngine::Events::UnityAction* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::add_onBeforeRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "add_onBeforeRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Application.remove_onBeforeRender
void UnityEngine::Application::remove_onBeforeRender(UnityEngine::Events::UnityAction* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::remove_onBeforeRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "remove_onBeforeRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Application.Internal_ApplicationWantsToQuit
bool UnityEngine::Application::Internal_ApplicationWantsToQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::Internal_ApplicationWantsToQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "Internal_ApplicationWantsToQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.Internal_ApplicationQuit
void UnityEngine::Application::Internal_ApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::Internal_ApplicationQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "Internal_ApplicationQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.InvokeOnBeforeRender
void UnityEngine::Application::InvokeOnBeforeRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::InvokeOnBeforeRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "InvokeOnBeforeRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Application.InvokeFocusChanged
void UnityEngine::Application::InvokeFocusChanged(bool focus) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::InvokeFocusChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "InvokeFocusChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(focus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, focus);
}
// Autogenerated method: UnityEngine.Application.InvokeDeepLinkActivated
void UnityEngine::Application::InvokeDeepLinkActivated(::Il2CppString* url) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::InvokeDeepLinkActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "InvokeDeepLinkActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, url);
}
// Autogenerated method: UnityEngine.Application.get_isEditor
bool UnityEngine::Application::get_isEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::get_isEditor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Application", "get_isEditor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Application::Quit
// Il2CppName: Quit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Application::Quit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "Quit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Application::Quit
// Il2CppName: Quit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Application::Quit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "Quit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::CanStreamedLevelBeLoaded
// Il2CppName: CanStreamedLevelBeLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&Application::CanStreamedLevelBeLoaded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "CanStreamedLevelBeLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Application::CanStreamedLevelBeLoaded
// Il2CppName: CanStreamedLevelBeLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&Application::CanStreamedLevelBeLoaded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "CanStreamedLevelBeLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Application::get_isPlaying
// Il2CppName: get_isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Application::get_isPlaying)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::set_runInBackground
// Il2CppName: set_runInBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&Application::set_runInBackground)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "set_runInBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Application::get_dataPath
// Il2CppName: get_dataPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&Application::get_dataPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_dataPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::get_streamingAssetsPath
// Il2CppName: get_streamingAssetsPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&Application::get_streamingAssetsPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_streamingAssetsPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::get_persistentDataPath
// Il2CppName: get_persistentDataPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&Application::get_persistentDataPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_persistentDataPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::get_unityVersion
// Il2CppName: get_unityVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&Application::get_unityVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_unityVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&Application::get_version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::get_identifier
// Il2CppName: get_identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&Application::get_identifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::get_productName
// Il2CppName: get_productName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&Application::get_productName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_productName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::get_companyName
// Il2CppName: get_companyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&Application::get_companyName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_companyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::OpenURL
// Il2CppName: OpenURL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&Application::OpenURL)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "OpenURL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Application::set_targetFrameRate
// Il2CppName: set_targetFrameRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Application::set_targetFrameRate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "set_targetFrameRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Application::SetLogCallbackDefined
// Il2CppName: SetLogCallbackDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&Application::SetLogCallbackDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "SetLogCallbackDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Application::set_backgroundLoadingPriority
// Il2CppName: set_backgroundLoadingPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::ThreadPriority)>(&Application::set_backgroundLoadingPriority)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "set_backgroundLoadingPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ThreadPriority>()});
  }
};
// Writing MetadataGetter for method: Application::get_platform
// Il2CppName: get_platform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RuntimePlatform (*)()>(&Application::get_platform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_platform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::get_isMobilePlatform
// Il2CppName: get_isMobilePlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Application::get_isMobilePlatform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_isMobilePlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::get_systemLanguage
// Il2CppName: get_systemLanguage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::SystemLanguage (*)()>(&Application::get_systemLanguage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_systemLanguage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::get_internetReachability
// Il2CppName: get_internetReachability
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::NetworkReachability (*)()>(&Application::get_internetReachability)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_internetReachability", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::CallLowMemory
// Il2CppName: CallLowMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Application::CallLowMemory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "CallLowMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::add_logMessageReceived
// Il2CppName: add_logMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Application::LogCallback*)>(&Application::add_logMessageReceived)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "add_logMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Application::LogCallback*>()});
  }
};
// Writing MetadataGetter for method: Application::remove_logMessageReceived
// Il2CppName: remove_logMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Application::LogCallback*)>(&Application::remove_logMessageReceived)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "remove_logMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Application::LogCallback*>()});
  }
};
// Writing MetadataGetter for method: Application::add_logMessageReceivedThreaded
// Il2CppName: add_logMessageReceivedThreaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Application::LogCallback*)>(&Application::add_logMessageReceivedThreaded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "add_logMessageReceivedThreaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Application::LogCallback*>()});
  }
};
// Writing MetadataGetter for method: Application::remove_logMessageReceivedThreaded
// Il2CppName: remove_logMessageReceivedThreaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Application::LogCallback*)>(&Application::remove_logMessageReceivedThreaded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "remove_logMessageReceivedThreaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Application::LogCallback*>()});
  }
};
// Writing MetadataGetter for method: Application::CallLogCallback
// Il2CppName: CallLogCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, UnityEngine::LogType, bool)>(&Application::CallLogCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "CallLogCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::LogType>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Application::add_onBeforeRender
// Il2CppName: add_onBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Events::UnityAction*)>(&Application::add_onBeforeRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "add_onBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction*>()});
  }
};
// Writing MetadataGetter for method: Application::remove_onBeforeRender
// Il2CppName: remove_onBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Events::UnityAction*)>(&Application::remove_onBeforeRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "remove_onBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityAction*>()});
  }
};
// Writing MetadataGetter for method: Application::Internal_ApplicationWantsToQuit
// Il2CppName: Internal_ApplicationWantsToQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Application::Internal_ApplicationWantsToQuit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "Internal_ApplicationWantsToQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::Internal_ApplicationQuit
// Il2CppName: Internal_ApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Application::Internal_ApplicationQuit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "Internal_ApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::InvokeOnBeforeRender
// Il2CppName: InvokeOnBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Application::InvokeOnBeforeRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "InvokeOnBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::InvokeFocusChanged
// Il2CppName: InvokeFocusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&Application::InvokeFocusChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "InvokeFocusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Application::InvokeDeepLinkActivated
// Il2CppName: InvokeDeepLinkActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&Application::InvokeDeepLinkActivated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "InvokeDeepLinkActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Application::get_isEditor
// Il2CppName: get_isEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Application::get_isEditor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application*), "get_isEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Application/LowMemoryCallback
#include "UnityEngine/Application_LowMemoryCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Application/LowMemoryCallback.Invoke
void UnityEngine::Application::LowMemoryCallback::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::LowMemoryCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Application/LowMemoryCallback.BeginInvoke
System::IAsyncResult* UnityEngine::Application::LowMemoryCallback::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::LowMemoryCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: UnityEngine.Application/LowMemoryCallback.EndInvoke
void UnityEngine::Application::LowMemoryCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Application::LowMemoryCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: Application::LowMemoryCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Application::LowMemoryCallback::*)(::Il2CppObject*, System::IntPtr)>(&Application::LowMemoryCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application::LowMemoryCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Application::LowMemoryCallback::*)(::Il2CppObject*, System::IntPtr)>(&Application::LowMemoryCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application::LowMemoryCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: Application::LowMemoryCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Application::LowMemoryCallback::*)()>(&Application::LowMemoryCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application::LowMemoryCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Application::LowMemoryCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Application::LowMemoryCallback::*)(System::AsyncCallback*, ::Il2CppObject*)>(&Application::LowMemoryCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application::LowMemoryCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Application::LowMemoryCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Application::LowMemoryCallback::*)(System::IAsyncResult*)>(&Application::LowMemoryCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Application::LowMemoryCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
