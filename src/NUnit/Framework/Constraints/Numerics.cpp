// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.Numerics
#include "NUnit/Framework/Constraints/Numerics.hpp"
// Including type: NUnit.Framework.Constraints.Tolerance
#include "NUnit/Framework/Constraints/Tolerance.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.Numerics.IsNumericType
bool NUnit::Framework::Constraints::Numerics::IsNumericType(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("IsNumericType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "IsNumericType", {}, ::il2cpp_utils::ExtractTypes(obj)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.IsFloatingPointNumeric
bool NUnit::Framework::Constraints::Numerics::IsFloatingPointNumeric(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("IsFloatingPointNumeric");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "IsFloatingPointNumeric", {}, ::il2cpp_utils::ExtractTypes(obj)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.IsFixedPointNumeric
bool NUnit::Framework::Constraints::Numerics::IsFixedPointNumeric(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("IsFixedPointNumeric");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "IsFixedPointNumeric", {}, ::il2cpp_utils::ExtractTypes(obj)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(::Il2CppObject* expected, ::Il2CppObject* actual, NUnit::Framework::Constraints::Tolerance*& tolerance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("AreEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "AreEqual", {}, ::il2cpp_utils::ExtractTypes(expected, actual, tolerance)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, expected, actual, tolerance);
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(double expected, double actual, NUnit::Framework::Constraints::Tolerance*& tolerance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("AreEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "AreEqual", {}, ::il2cpp_utils::ExtractTypes(expected, actual, tolerance)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, expected, actual, tolerance);
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(float expected, float actual, NUnit::Framework::Constraints::Tolerance*& tolerance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("AreEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "AreEqual", {}, ::il2cpp_utils::ExtractTypes(expected, actual, tolerance)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, expected, actual, tolerance);
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(System::Decimal expected, System::Decimal actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("AreEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "AreEqual", {}, ::il2cpp_utils::ExtractTypes(expected, actual, tolerance)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, expected, actual, tolerance);
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(uint64_t expected, uint64_t actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("AreEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "AreEqual", {}, ::il2cpp_utils::ExtractTypes(expected, actual, tolerance)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, expected, actual, tolerance);
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(int64_t expected, int64_t actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("AreEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "AreEqual", {}, ::il2cpp_utils::ExtractTypes(expected, actual, tolerance)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, expected, actual, tolerance);
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(uint expected, uint actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("AreEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "AreEqual", {}, ::il2cpp_utils::ExtractTypes(expected, actual, tolerance)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, expected, actual, tolerance);
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(int expected, int actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("Numerics").WithContext("AreEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Numerics", il2cpp_utils::NoArgClass<bool>(), "AreEqual", {}, ::il2cpp_utils::ExtractTypes(expected, actual, tolerance)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, expected, actual, tolerance);
}
