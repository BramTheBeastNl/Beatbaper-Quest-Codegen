// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.Numerics
#include "NUnit/Framework/Constraints/Numerics.hpp"
// Including type: NUnit.Framework.Constraints.Tolerance
#include "NUnit/Framework/Constraints/Tolerance.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.Numerics.IsNumericType
bool NUnit::Framework::Constraints::Numerics::IsNumericType(::CsObject* obj) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "IsNumericType", obj));
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.IsFloatingPointNumeric
bool NUnit::Framework::Constraints::Numerics::IsFloatingPointNumeric(::CsObject* obj) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "IsFloatingPointNumeric", obj));
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.IsFixedPointNumeric
bool NUnit::Framework::Constraints::Numerics::IsFixedPointNumeric(::CsObject* obj) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "IsFixedPointNumeric", obj));
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(::CsObject* expected, ::CsObject* actual, NUnit::Framework::Constraints::Tolerance*& tolerance) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "AreEqual", expected, actual, tolerance));
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(double expected, double actual, NUnit::Framework::Constraints::Tolerance*& tolerance) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "AreEqual", expected, actual, tolerance));
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(float expected, float actual, NUnit::Framework::Constraints::Tolerance*& tolerance) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "AreEqual", expected, actual, tolerance));
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(System::Decimal expected, System::Decimal actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "AreEqual", expected, actual, tolerance));
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(uint64_t expected, uint64_t actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "AreEqual", expected, actual, tolerance));
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(int64_t expected, int64_t actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "AreEqual", expected, actual, tolerance));
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(uint expected, uint actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "AreEqual", expected, actual, tolerance));
}
// Autogenerated method: NUnit.Framework.Constraints.Numerics.AreEqual
bool NUnit::Framework::Constraints::Numerics::AreEqual(int expected, int actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("NUnit.Framework.Constraints", "Numerics", "AreEqual", expected, actual, tolerance));
}
