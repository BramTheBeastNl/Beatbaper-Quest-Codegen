// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Constraints.FloatingPointNumerics
#include "NUnit/Framework/Constraints/FloatingPointNumerics.hpp"
// Including type: NUnit.Framework.Constraints.FloatingPointNumerics/FloatIntUnion
#include "NUnit/Framework/Constraints/FloatingPointNumerics_FloatIntUnion.hpp"
// Including type: NUnit.Framework.Constraints.FloatingPointNumerics/DoubleLongUnion
#include "NUnit/Framework/Constraints/FloatingPointNumerics_DoubleLongUnion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps
bool NUnit::Framework::Constraints::FloatingPointNumerics::AreAlmostEqualUlps(float left, float right, int maxUlps) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("FloatingPointNumerics").WithContext("AreAlmostEqualUlps");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "FloatingPointNumerics", "AreAlmostEqualUlps", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(left, right, maxUlps)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, maxUlps);
}
// Autogenerated method: NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps
bool NUnit::Framework::Constraints::FloatingPointNumerics::AreAlmostEqualUlps(double left, double right, int64_t maxUlps) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Framework::Constraints").WithContext("FloatingPointNumerics").WithContext("AreAlmostEqualUlps");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "FloatingPointNumerics", "AreAlmostEqualUlps", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(left, right, maxUlps)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, maxUlps);
}
