// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Compatibility.AdditionalTypeExtensions
#include "NUnit/Compatibility/AdditionalTypeExtensions.hpp"
// Including type: NUnit.Compatibility.AdditionalTypeExtensions/<>c__DisplayClass1
#include "NUnit/Compatibility/AdditionalTypeExtensions_--c__DisplayClass1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<System.Type>> convertibleValueTypes
System::Collections::Generic::Dictionary_2<System::Type*, System::Collections::Generic::List_1<System::Type*>*>* NUnit::Compatibility::AdditionalTypeExtensions::_get_convertibleValueTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Compatibility").WithContext("AdditionalTypeExtensions").WithContext("_get_convertibleValueTypes");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, System::Collections::Generic::List_1<System::Type*>*>*>("NUnit.Compatibility", "AdditionalTypeExtensions", "convertibleValueTypes")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<System.Type>> convertibleValueTypes
void NUnit::Compatibility::AdditionalTypeExtensions::_set_convertibleValueTypes(System::Collections::Generic::Dictionary_2<System::Type*, System::Collections::Generic::List_1<System::Type*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Compatibility").WithContext("AdditionalTypeExtensions").WithContext("_set_convertibleValueTypes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Compatibility", "AdditionalTypeExtensions", "convertibleValueTypes", value));
}
// Autogenerated method: NUnit.Compatibility.AdditionalTypeExtensions.ParametersMatch
bool NUnit::Compatibility::AdditionalTypeExtensions::ParametersMatch(::Array<System::Reflection::ParameterInfo*>* pinfos, ::Array<System::Type*>* ptypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Compatibility").WithContext("AdditionalTypeExtensions").WithContext("ParametersMatch");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Compatibility", "AdditionalTypeExtensions", "ParametersMatch", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pinfos, ptypes)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pinfos, ptypes);
}
// Autogenerated method: NUnit.Compatibility.AdditionalTypeExtensions.IsCastableFrom
bool NUnit::Compatibility::AdditionalTypeExtensions::IsCastableFrom(System::Type* to, System::Type* from) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Compatibility").WithContext("AdditionalTypeExtensions").WithContext("IsCastableFrom");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Compatibility", "AdditionalTypeExtensions", "IsCastableFrom", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(to, from)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, to, from);
}
// Autogenerated method: NUnit.Compatibility.AdditionalTypeExtensions..cctor
void NUnit::Compatibility::AdditionalTypeExtensions::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("NUnit::Compatibility").WithContext("AdditionalTypeExtensions").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("NUnit.Compatibility", "AdditionalTypeExtensions", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
