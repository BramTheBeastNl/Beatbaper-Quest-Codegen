// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_5_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_5_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/SystemRegion
#include "GlobalNamespace/OVRPlugin_SystemRegion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_5_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_5_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_5_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_5_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_5_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_5_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_5_0.ovrp_GetSystemRegion
GlobalNamespace::OVRPlugin::SystemRegion GlobalNamespace::OVRPlugin::OVRP_1_5_0::ovrp_GetSystemRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_5_0::ovrp_GetSystemRegion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_5_0", "ovrp_GetSystemRegion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::SystemRegion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_5_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_5_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_5_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_5_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_5_0::ovrp_GetSystemRegion
// Il2CppName: ovrp_GetSystemRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::SystemRegion (*)()>(&OVRPlugin::OVRP_1_5_0::ovrp_GetSystemRegion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_5_0*), "ovrp_GetSystemRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_5_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_5_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_5_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_6_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_6_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/HapticsDesc
#include "GlobalNamespace/OVRPlugin_HapticsDesc.hpp"
// Including type: OVRPlugin/HapticsState
#include "GlobalNamespace/OVRPlugin_HapticsState.hpp"
// Including type: OVRPlugin/HapticsBuffer
#include "GlobalNamespace/OVRPlugin_HapticsBuffer.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_6_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_6_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_6_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_6_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetTrackingIPDEnabled
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetTrackingIPDEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetTrackingIPDEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetTrackingIPDEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_SetTrackingIPDEnabled
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetTrackingIPDEnabled(GlobalNamespace::OVRPlugin::Bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetTrackingIPDEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_SetTrackingIPDEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetControllerHapticsDesc
GlobalNamespace::OVRPlugin::HapticsDesc GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsDesc(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsDesc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetControllerHapticsDesc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::HapticsDesc, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetControllerHapticsState
GlobalNamespace::OVRPlugin::HapticsState GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsState(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetControllerHapticsState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::HapticsState, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_SetControllerHaptics
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetControllerHaptics(uint controllerMask, GlobalNamespace::OVRPlugin::HapticsBuffer hapticsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetControllerHaptics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_SetControllerHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask), ::il2cpp_utils::ExtractType(hapticsBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask, hapticsBuffer);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_SetOverlayQuad3
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetOverlayQuad3(uint flags, System::IntPtr textureLeft, System::IntPtr textureRight, System::IntPtr device, GlobalNamespace::OVRPlugin::Posef pose, GlobalNamespace::OVRPlugin::Vector3f scale, int layerIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_SetOverlayQuad3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_SetOverlayQuad3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(textureLeft), ::il2cpp_utils::ExtractType(textureRight), ::il2cpp_utils::ExtractType(device), ::il2cpp_utils::ExtractType(pose), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(layerIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, flags, textureLeft, textureRight, device, pose, scale, layerIndex);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetEyeRecommendedResolutionScale
float GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetEyeRecommendedResolutionScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetEyeRecommendedResolutionScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetEyeRecommendedResolutionScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetAppCpuStartToGpuEndTime
float GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetAppCpuStartToGpuEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetAppCpuStartToGpuEndTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetAppCpuStartToGpuEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0.ovrp_GetSystemRecommendedMSAALevel
int GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetSystemRecommendedMSAALevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::ovrp_GetSystemRecommendedMSAALevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", "ovrp_GetSystemRecommendedMSAALevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_6_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_6_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_6_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_6_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_6_0::ovrp_GetTrackingIPDEnabled
// Il2CppName: ovrp_GetTrackingIPDEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)()>(&OVRPlugin::OVRP_1_6_0::ovrp_GetTrackingIPDEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_6_0*), "ovrp_GetTrackingIPDEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_6_0::ovrp_SetTrackingIPDEnabled
// Il2CppName: ovrp_SetTrackingIPDEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(GlobalNamespace::OVRPlugin::Bool)>(&OVRPlugin::OVRP_1_6_0::ovrp_SetTrackingIPDEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_6_0*), "ovrp_SetTrackingIPDEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsDesc
// Il2CppName: ovrp_GetControllerHapticsDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::HapticsDesc (*)(uint)>(&OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsDesc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_6_0*), "ovrp_GetControllerHapticsDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsState
// Il2CppName: ovrp_GetControllerHapticsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::HapticsState (*)(uint)>(&OVRPlugin::OVRP_1_6_0::ovrp_GetControllerHapticsState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_6_0*), "ovrp_GetControllerHapticsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_6_0::ovrp_SetControllerHaptics
// Il2CppName: ovrp_SetControllerHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(uint, GlobalNamespace::OVRPlugin::HapticsBuffer)>(&OVRPlugin::OVRP_1_6_0::ovrp_SetControllerHaptics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_6_0*), "ovrp_SetControllerHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::HapticsBuffer>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_6_0::ovrp_SetOverlayQuad3
// Il2CppName: ovrp_SetOverlayQuad3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(uint, System::IntPtr, System::IntPtr, System::IntPtr, GlobalNamespace::OVRPlugin::Posef, GlobalNamespace::OVRPlugin::Vector3f, int)>(&OVRPlugin::OVRP_1_6_0::ovrp_SetOverlayQuad3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_6_0*), "ovrp_SetOverlayQuad3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Vector3f>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_6_0::ovrp_GetEyeRecommendedResolutionScale
// Il2CppName: ovrp_GetEyeRecommendedResolutionScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&OVRPlugin::OVRP_1_6_0::ovrp_GetEyeRecommendedResolutionScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_6_0*), "ovrp_GetEyeRecommendedResolutionScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_6_0::ovrp_GetAppCpuStartToGpuEndTime
// Il2CppName: ovrp_GetAppCpuStartToGpuEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&OVRPlugin::OVRP_1_6_0::ovrp_GetAppCpuStartToGpuEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_6_0*), "ovrp_GetAppCpuStartToGpuEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_6_0::ovrp_GetSystemRecommendedMSAALevel
// Il2CppName: ovrp_GetSystemRecommendedMSAALevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&OVRPlugin::OVRP_1_6_0::ovrp_GetSystemRecommendedMSAALevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_6_0*), "ovrp_GetSystemRecommendedMSAALevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_6_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_6_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_6_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_7_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_7_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_7_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_7_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_7_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_7_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_7_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_7_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_7_0.ovrp_GetAppChromaticCorrection
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_7_0::ovrp_GetAppChromaticCorrection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_7_0::ovrp_GetAppChromaticCorrection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_7_0", "ovrp_GetAppChromaticCorrection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_7_0.ovrp_SetAppChromaticCorrection
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_7_0::ovrp_SetAppChromaticCorrection(GlobalNamespace::OVRPlugin::Bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_7_0::ovrp_SetAppChromaticCorrection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_7_0", "ovrp_SetAppChromaticCorrection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_7_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_7_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_7_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_7_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_7_0::ovrp_GetAppChromaticCorrection
// Il2CppName: ovrp_GetAppChromaticCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)()>(&OVRPlugin::OVRP_1_7_0::ovrp_GetAppChromaticCorrection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_7_0*), "ovrp_GetAppChromaticCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_7_0::ovrp_SetAppChromaticCorrection
// Il2CppName: ovrp_SetAppChromaticCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(GlobalNamespace::OVRPlugin::Bool)>(&OVRPlugin::OVRP_1_7_0::ovrp_SetAppChromaticCorrection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_7_0*), "ovrp_SetAppChromaticCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_7_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_7_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_7_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_8_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_8_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/BoundaryTestResult
#include "GlobalNamespace/OVRPlugin_BoundaryTestResult.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/BoundaryType
#include "GlobalNamespace/OVRPlugin_BoundaryType.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/BoundaryGeometry
#include "GlobalNamespace/OVRPlugin_BoundaryGeometry.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_8_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_8_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_8_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_8_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetBoundaryConfigured
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryConfigured() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryConfigured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetBoundaryConfigured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_TestBoundaryNode
GlobalNamespace::OVRPlugin::BoundaryTestResult GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryNode(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_TestBoundaryNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::BoundaryTestResult, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, boundaryType);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_TestBoundaryPoint
GlobalNamespace::OVRPlugin::BoundaryTestResult GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryPoint(GlobalNamespace::OVRPlugin::Vector3f point, GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_TestBoundaryPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::BoundaryTestResult, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, point, boundaryType);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetBoundaryGeometry
GlobalNamespace::OVRPlugin::BoundaryGeometry GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryGeometry(GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetBoundaryGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::BoundaryGeometry, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boundaryType);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetBoundaryDimensions
GlobalNamespace::OVRPlugin::Vector3f GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryDimensions(GlobalNamespace::OVRPlugin::BoundaryType boundaryType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryDimensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetBoundaryDimensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boundaryType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Vector3f, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boundaryType);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetBoundaryVisible
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetBoundaryVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_SetBoundaryVisible
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_SetBoundaryVisible(GlobalNamespace::OVRPlugin::Bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_SetBoundaryVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_SetBoundaryVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_Update2
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_Update2(int stateId, int frameIndex, double predictionSeconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_Update2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_Update2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateId), ::il2cpp_utils::ExtractType(frameIndex), ::il2cpp_utils::ExtractType(predictionSeconds)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stateId, frameIndex, predictionSeconds);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetNodePose2
GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodePose2(int stateId, GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodePose2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetNodePose2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateId), ::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stateId, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetNodeVelocity2
GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodeVelocity2(int stateId, GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodeVelocity2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetNodeVelocity2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateId), ::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stateId, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0.ovrp_GetNodeAcceleration2
GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodeAcceleration2(int stateId, GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::ovrp_GetNodeAcceleration2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", "ovrp_GetNodeAcceleration2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateId), ::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Posef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stateId, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_8_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_8_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_8_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_8_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryConfigured
// Il2CppName: ovrp_GetBoundaryConfigured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)()>(&OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryConfigured)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_GetBoundaryConfigured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryNode
// Il2CppName: ovrp_TestBoundaryNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::BoundaryTestResult (*)(GlobalNamespace::OVRPlugin::Node, GlobalNamespace::OVRPlugin::BoundaryType)>(&OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_TestBoundaryNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Node>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::BoundaryType>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryPoint
// Il2CppName: ovrp_TestBoundaryPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::BoundaryTestResult (*)(GlobalNamespace::OVRPlugin::Vector3f, GlobalNamespace::OVRPlugin::BoundaryType)>(&OVRPlugin::OVRP_1_8_0::ovrp_TestBoundaryPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_TestBoundaryPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Vector3f>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::BoundaryType>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryGeometry
// Il2CppName: ovrp_GetBoundaryGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::BoundaryGeometry (*)(GlobalNamespace::OVRPlugin::BoundaryType)>(&OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryGeometry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_GetBoundaryGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::BoundaryType>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryDimensions
// Il2CppName: ovrp_GetBoundaryDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Vector3f (*)(GlobalNamespace::OVRPlugin::BoundaryType)>(&OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryDimensions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_GetBoundaryDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::BoundaryType>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryVisible
// Il2CppName: ovrp_GetBoundaryVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)()>(&OVRPlugin::OVRP_1_8_0::ovrp_GetBoundaryVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_GetBoundaryVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_SetBoundaryVisible
// Il2CppName: ovrp_SetBoundaryVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(GlobalNamespace::OVRPlugin::Bool)>(&OVRPlugin::OVRP_1_8_0::ovrp_SetBoundaryVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_SetBoundaryVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_Update2
// Il2CppName: ovrp_Update2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(int, int, double)>(&OVRPlugin::OVRP_1_8_0::ovrp_Update2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_Update2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_GetNodePose2
// Il2CppName: ovrp_GetNodePose2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Posef (*)(int, GlobalNamespace::OVRPlugin::Node)>(&OVRPlugin::OVRP_1_8_0::ovrp_GetNodePose2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_GetNodePose2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Node>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_GetNodeVelocity2
// Il2CppName: ovrp_GetNodeVelocity2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Posef (*)(int, GlobalNamespace::OVRPlugin::Node)>(&OVRPlugin::OVRP_1_8_0::ovrp_GetNodeVelocity2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_GetNodeVelocity2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Node>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::ovrp_GetNodeAcceleration2
// Il2CppName: ovrp_GetNodeAcceleration2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Posef (*)(int, GlobalNamespace::OVRPlugin::Node)>(&OVRPlugin::OVRP_1_8_0::ovrp_GetNodeAcceleration2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), "ovrp_GetNodeAcceleration2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Node>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_8_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_8_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_8_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_9_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_9_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/SystemHeadset
#include "GlobalNamespace/OVRPlugin_SystemHeadset.hpp"
// Including type: OVRPlugin/Controller
#include "GlobalNamespace/OVRPlugin_Controller.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/BoundaryType
#include "GlobalNamespace/OVRPlugin_BoundaryType.hpp"
// Including type: OVRPlugin/AppPerfStats
#include "GlobalNamespace/OVRPlugin_AppPerfStats.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_9_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_9_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_9_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_9_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_9_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_9_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_GetSystemHeadsetType
GlobalNamespace::OVRPlugin::SystemHeadset GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetSystemHeadsetType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetSystemHeadsetType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_GetSystemHeadsetType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::SystemHeadset, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_GetActiveController
GlobalNamespace::OVRPlugin::Controller GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetActiveController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetActiveController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_GetActiveController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Controller, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_GetConnectedControllers
GlobalNamespace::OVRPlugin::Controller GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetConnectedControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetConnectedControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_GetConnectedControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Controller, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_GetBoundaryGeometry2
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetBoundaryGeometry2(GlobalNamespace::OVRPlugin::BoundaryType boundaryType, System::IntPtr points, int& pointsCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetBoundaryGeometry2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_GetBoundaryGeometry2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boundaryType), ::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(pointsCount)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, boundaryType, points, pointsCount);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_GetAppPerfStats
GlobalNamespace::OVRPlugin::AppPerfStats GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetAppPerfStats() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_GetAppPerfStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_GetAppPerfStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::AppPerfStats, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0.ovrp_ResetAppPerfStats
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_ResetAppPerfStats() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_9_0::ovrp_ResetAppPerfStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", "ovrp_ResetAppPerfStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_9_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_9_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_9_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_9_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_9_0::ovrp_GetSystemHeadsetType
// Il2CppName: ovrp_GetSystemHeadsetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::SystemHeadset (*)()>(&OVRPlugin::OVRP_1_9_0::ovrp_GetSystemHeadsetType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_9_0*), "ovrp_GetSystemHeadsetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_9_0::ovrp_GetActiveController
// Il2CppName: ovrp_GetActiveController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Controller (*)()>(&OVRPlugin::OVRP_1_9_0::ovrp_GetActiveController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_9_0*), "ovrp_GetActiveController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_9_0::ovrp_GetConnectedControllers
// Il2CppName: ovrp_GetConnectedControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Controller (*)()>(&OVRPlugin::OVRP_1_9_0::ovrp_GetConnectedControllers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_9_0*), "ovrp_GetConnectedControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_9_0::ovrp_GetBoundaryGeometry2
// Il2CppName: ovrp_GetBoundaryGeometry2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(GlobalNamespace::OVRPlugin::BoundaryType, System::IntPtr, int&)>(&OVRPlugin::OVRP_1_9_0::ovrp_GetBoundaryGeometry2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_9_0*), "ovrp_GetBoundaryGeometry2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::BoundaryType>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_9_0::ovrp_GetAppPerfStats
// Il2CppName: ovrp_GetAppPerfStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::AppPerfStats (*)()>(&OVRPlugin::OVRP_1_9_0::ovrp_GetAppPerfStats)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_9_0*), "ovrp_GetAppPerfStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_9_0::ovrp_ResetAppPerfStats
// Il2CppName: ovrp_ResetAppPerfStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)()>(&OVRPlugin::OVRP_1_9_0::ovrp_ResetAppPerfStats)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_9_0*), "ovrp_ResetAppPerfStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_9_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_9_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_9_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_10_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_10_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_10_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_10_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_10_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_10_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_10_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_10_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_10_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_10_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_10_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_10_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_10_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_10_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_10_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_11_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_11_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/EyeTextureFormat
#include "GlobalNamespace/OVRPlugin_EyeTextureFormat.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_11_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_11_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_11_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_11_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_11_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_11_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_11_0.ovrp_SetDesiredEyeTextureFormat
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_11_0::ovrp_SetDesiredEyeTextureFormat(GlobalNamespace::OVRPlugin::EyeTextureFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_11_0::ovrp_SetDesiredEyeTextureFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_11_0", "ovrp_SetDesiredEyeTextureFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_11_0.ovrp_GetDesiredEyeTextureFormat
GlobalNamespace::OVRPlugin::EyeTextureFormat GlobalNamespace::OVRPlugin::OVRP_1_11_0::ovrp_GetDesiredEyeTextureFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_11_0::ovrp_GetDesiredEyeTextureFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_11_0", "ovrp_GetDesiredEyeTextureFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::EyeTextureFormat, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_11_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_11_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_11_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_11_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_11_0::ovrp_SetDesiredEyeTextureFormat
// Il2CppName: ovrp_SetDesiredEyeTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(GlobalNamespace::OVRPlugin::EyeTextureFormat)>(&OVRPlugin::OVRP_1_11_0::ovrp_SetDesiredEyeTextureFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_11_0*), "ovrp_SetDesiredEyeTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::EyeTextureFormat>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_11_0::ovrp_GetDesiredEyeTextureFormat
// Il2CppName: ovrp_GetDesiredEyeTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::EyeTextureFormat (*)()>(&OVRPlugin::OVRP_1_11_0::ovrp_GetDesiredEyeTextureFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_11_0*), "ovrp_GetDesiredEyeTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_11_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_11_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_11_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_12_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_12_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/PoseStatef
#include "GlobalNamespace/OVRPlugin_PoseStatef.hpp"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/ControllerState2
#include "GlobalNamespace/OVRPlugin_ControllerState2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_12_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_12_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_12_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_12_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_12_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_12_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_12_0.ovrp_GetAppFramerate
float GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetAppFramerate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetAppFramerate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_12_0", "ovrp_GetAppFramerate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_12_0.ovrp_GetNodePoseState
GlobalNamespace::OVRPlugin::PoseStatef GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetNodePoseState(GlobalNamespace::OVRPlugin::Step stepId, GlobalNamespace::OVRPlugin::Node nodeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetNodePoseState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_12_0", "ovrp_GetNodePoseState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stepId), ::il2cpp_utils::ExtractType(nodeId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::PoseStatef, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stepId, nodeId);
}
// Autogenerated method: OVRPlugin/OVRP_1_12_0.ovrp_GetControllerState2
GlobalNamespace::OVRPlugin::ControllerState2 GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetControllerState2(uint controllerMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_12_0::ovrp_GetControllerState2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_12_0", "ovrp_GetControllerState2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::ControllerState2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask);
}
// Autogenerated method: OVRPlugin/OVRP_1_12_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_12_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_12_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_12_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_12_0::ovrp_GetAppFramerate
// Il2CppName: ovrp_GetAppFramerate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&OVRPlugin::OVRP_1_12_0::ovrp_GetAppFramerate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_12_0*), "ovrp_GetAppFramerate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_12_0::ovrp_GetNodePoseState
// Il2CppName: ovrp_GetNodePoseState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::PoseStatef (*)(GlobalNamespace::OVRPlugin::Step, GlobalNamespace::OVRPlugin::Node)>(&OVRPlugin::OVRP_1_12_0::ovrp_GetNodePoseState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_12_0*), "ovrp_GetNodePoseState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Step>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Node>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_12_0::ovrp_GetControllerState2
// Il2CppName: ovrp_GetControllerState2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::ControllerState2 (*)(uint)>(&OVRPlugin::OVRP_1_12_0::ovrp_GetControllerState2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_12_0*), "ovrp_GetControllerState2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_12_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_12_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_12_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin/OVRP_1_15_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_15_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/CameraIntrinsics
#include "GlobalNamespace/OVRPlugin_CameraIntrinsics.hpp"
// Including type: OVRPlugin/CameraExtrinsics
#include "GlobalNamespace/OVRPlugin_CameraExtrinsics.hpp"
// Including type: OVRPlugin/OverlayShape
#include "GlobalNamespace/OVRPlugin_OverlayShape.hpp"
// Including type: OVRPlugin/LayerLayout
#include "GlobalNamespace/OVRPlugin_LayerLayout.hpp"
// Including type: OVRPlugin/Sizei
#include "GlobalNamespace/OVRPlugin_Sizei.hpp"
// Including type: OVRPlugin/EyeTextureFormat
#include "GlobalNamespace/OVRPlugin_EyeTextureFormat.hpp"
// Including type: OVRPlugin/LayerDesc
#include "GlobalNamespace/OVRPlugin_LayerDesc.hpp"
// Including type: OVRPlugin/Eye
#include "GlobalNamespace/OVRPlugin_Eye.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/Frustumf2
#include "GlobalNamespace/OVRPlugin_Frustumf2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_15_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_15_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_15_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_15_0", "version", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 OVRP_EXTERNAL_CAMERA_NAME_SIZE
int GlobalNamespace::OVRPlugin::OVRP_1_15_0::_get_OVRP_EXTERNAL_CAMERA_NAME_SIZE() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::_get_OVRP_EXTERNAL_CAMERA_NAME_SIZE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRPlugin/OVRP_1_15_0", "OVRP_EXTERNAL_CAMERA_NAME_SIZE"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 OVRP_EXTERNAL_CAMERA_NAME_SIZE
void GlobalNamespace::OVRPlugin::OVRP_1_15_0::_set_OVRP_EXTERNAL_CAMERA_NAME_SIZE(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::_set_OVRP_EXTERNAL_CAMERA_NAME_SIZE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_15_0", "OVRP_EXTERNAL_CAMERA_NAME_SIZE", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_InitializeMixedReality
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_InitializeMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_InitializeMixedReality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_InitializeMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_ShutdownMixedReality
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_ShutdownMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_ShutdownMixedReality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_ShutdownMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetMixedRealityInitialized
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetMixedRealityInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetMixedRealityInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetMixedRealityInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_UpdateExternalCamera
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_UpdateExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_UpdateExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_UpdateExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetExternalCameraCount
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraCount(int& cameraCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetExternalCameraCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraCount);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetExternalCameraName
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraName(int cameraId, ::Array<::Il2CppChar>* cameraName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetExternalCameraName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractType(cameraName)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId, cameraName);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetExternalCameraIntrinsics
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraIntrinsics(int cameraId, GlobalNamespace::OVRPlugin::CameraIntrinsics& cameraIntrinsics) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraIntrinsics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetExternalCameraIntrinsics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraIntrinsics&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId, cameraIntrinsics);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetExternalCameraExtrinsics
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraExtrinsics(int cameraId, GlobalNamespace::OVRPlugin::CameraExtrinsics& cameraExtrinsics) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraExtrinsics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetExternalCameraExtrinsics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraExtrinsics&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId, cameraExtrinsics);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_CalculateLayerDesc
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_CalculateLayerDesc(GlobalNamespace::OVRPlugin::OverlayShape shape, GlobalNamespace::OVRPlugin::LayerLayout layout, GlobalNamespace::OVRPlugin::Sizei& textureSize, int mipLevels, int sampleCount, GlobalNamespace::OVRPlugin::EyeTextureFormat format, int layerFlags, GlobalNamespace::OVRPlugin::LayerDesc& layerDesc) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_CalculateLayerDesc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_CalculateLayerDesc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shape), ::il2cpp_utils::ExtractType(layout), ::il2cpp_utils::ExtractType(textureSize), ::il2cpp_utils::ExtractType(mipLevels), ::il2cpp_utils::ExtractType(sampleCount), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(layerFlags), ::il2cpp_utils::ExtractType(layerDesc)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, shape, layout, textureSize, mipLevels, sampleCount, format, layerFlags, layerDesc);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_EnqueueSetupLayer
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSetupLayer(GlobalNamespace::OVRPlugin::LayerDesc& desc, System::IntPtr layerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSetupLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_EnqueueSetupLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(desc), ::il2cpp_utils::ExtractType(layerId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, desc, layerId);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_EnqueueDestroyLayer
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueDestroyLayer(System::IntPtr layerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueDestroyLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_EnqueueDestroyLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerId);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetLayerTextureStageCount
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTextureStageCount(int layerId, int& layerTextureStageCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTextureStageCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetLayerTextureStageCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(layerTextureStageCount)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerId, layerTextureStageCount);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetLayerTexturePtr
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTexturePtr(int layerId, int stage, GlobalNamespace::OVRPlugin::Eye eyeId, System::IntPtr& textureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTexturePtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetLayerTexturePtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(stage), ::il2cpp_utils::ExtractType(eyeId), ::il2cpp_utils::ExtractType(textureHandle)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerId, stage, eyeId, textureHandle);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_EnqueueSubmitLayer
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSubmitLayer(uint flags, System::IntPtr textureLeft, System::IntPtr textureRight, int layerId, int frameIndex, GlobalNamespace::OVRPlugin::Posef& pose, GlobalNamespace::OVRPlugin::Vector3f& scale, int layerIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSubmitLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_EnqueueSubmitLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(textureLeft), ::il2cpp_utils::ExtractType(textureRight), ::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(frameIndex), ::il2cpp_utils::ExtractType(pose), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(layerIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, flags, textureLeft, textureRight, layerId, frameIndex, pose, scale, layerIndex);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetNodeFrustum2
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetNodeFrustum2(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Frustumf2& nodeFrustum) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetNodeFrustum2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetNodeFrustum2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Frustumf2&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, nodeFrustum);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0.ovrp_GetEyeTextureArrayEnabled
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetEyeTextureArrayEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::ovrp_GetEyeTextureArrayEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", "ovrp_GetEyeTextureArrayEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_15_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_15_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_15_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_15_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_InitializeMixedReality
// Il2CppName: ovrp_InitializeMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)()>(&OVRPlugin::OVRP_1_15_0::ovrp_InitializeMixedReality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_InitializeMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_ShutdownMixedReality
// Il2CppName: ovrp_ShutdownMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)()>(&OVRPlugin::OVRP_1_15_0::ovrp_ShutdownMixedReality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_ShutdownMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_GetMixedRealityInitialized
// Il2CppName: ovrp_GetMixedRealityInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)()>(&OVRPlugin::OVRP_1_15_0::ovrp_GetMixedRealityInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_GetMixedRealityInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_UpdateExternalCamera
// Il2CppName: ovrp_UpdateExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)()>(&OVRPlugin::OVRP_1_15_0::ovrp_UpdateExternalCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_UpdateExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraCount
// Il2CppName: ovrp_GetExternalCameraCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int&)>(&OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_GetExternalCameraCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraName
// Il2CppName: ovrp_GetExternalCameraName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, ::Array<::Il2CppChar>*)>(&OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_GetExternalCameraName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraIntrinsics
// Il2CppName: ovrp_GetExternalCameraIntrinsics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, GlobalNamespace::OVRPlugin::CameraIntrinsics&)>(&OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraIntrinsics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_GetExternalCameraIntrinsics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraIntrinsics&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraExtrinsics
// Il2CppName: ovrp_GetExternalCameraExtrinsics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, GlobalNamespace::OVRPlugin::CameraExtrinsics&)>(&OVRPlugin::OVRP_1_15_0::ovrp_GetExternalCameraExtrinsics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_GetExternalCameraExtrinsics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraExtrinsics&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_CalculateLayerDesc
// Il2CppName: ovrp_CalculateLayerDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::OverlayShape, GlobalNamespace::OVRPlugin::LayerLayout, GlobalNamespace::OVRPlugin::Sizei&, int, int, GlobalNamespace::OVRPlugin::EyeTextureFormat, int, GlobalNamespace::OVRPlugin::LayerDesc&)>(&OVRPlugin::OVRP_1_15_0::ovrp_CalculateLayerDesc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_CalculateLayerDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::OverlayShape>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::LayerLayout>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Sizei&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::EyeTextureFormat>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::LayerDesc&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSetupLayer
// Il2CppName: ovrp_EnqueueSetupLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::LayerDesc&, System::IntPtr)>(&OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSetupLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_EnqueueSetupLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::LayerDesc&>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_EnqueueDestroyLayer
// Il2CppName: ovrp_EnqueueDestroyLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr)>(&OVRPlugin::OVRP_1_15_0::ovrp_EnqueueDestroyLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_EnqueueDestroyLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTextureStageCount
// Il2CppName: ovrp_GetLayerTextureStageCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, int&)>(&OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTextureStageCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_GetLayerTextureStageCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTexturePtr
// Il2CppName: ovrp_GetLayerTexturePtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, int, GlobalNamespace::OVRPlugin::Eye, System::IntPtr&)>(&OVRPlugin::OVRP_1_15_0::ovrp_GetLayerTexturePtr)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_GetLayerTexturePtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Eye>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSubmitLayer
// Il2CppName: ovrp_EnqueueSubmitLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(uint, System::IntPtr, System::IntPtr, int, int, GlobalNamespace::OVRPlugin::Posef&, GlobalNamespace::OVRPlugin::Vector3f&, int)>(&OVRPlugin::OVRP_1_15_0::ovrp_EnqueueSubmitLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_EnqueueSubmitLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Vector3f&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_GetNodeFrustum2
// Il2CppName: ovrp_GetNodeFrustum2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Node, GlobalNamespace::OVRPlugin::Frustumf2&)>(&OVRPlugin::OVRP_1_15_0::ovrp_GetNodeFrustum2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_GetNodeFrustum2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Node>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Frustumf2&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::ovrp_GetEyeTextureArrayEnabled
// Il2CppName: ovrp_GetEyeTextureArrayEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)()>(&OVRPlugin::OVRP_1_15_0::ovrp_GetEyeTextureArrayEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), "ovrp_GetEyeTextureArrayEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_15_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_15_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_15_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_16_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_16_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/CameraDevice
#include "GlobalNamespace/OVRPlugin_CameraDevice.hpp"
// Including type: OVRPlugin/Sizei
#include "GlobalNamespace/OVRPlugin_Sizei.hpp"
// Including type: OVRPlugin/ControllerState4
#include "GlobalNamespace/OVRPlugin_ControllerState4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_16_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_16_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_16_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_16_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_UpdateCameraDevices
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_UpdateCameraDevices() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_UpdateCameraDevices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_UpdateCameraDevices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_IsCameraDeviceAvailable
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceAvailable(GlobalNamespace::OVRPlugin::CameraDevice cameraDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_IsCameraDeviceAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraDevice);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_SetCameraDevicePreferredColorFrameSize
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_SetCameraDevicePreferredColorFrameSize(GlobalNamespace::OVRPlugin::CameraDevice cameraDevice, GlobalNamespace::OVRPlugin::Sizei preferredColorFrameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_SetCameraDevicePreferredColorFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_SetCameraDevicePreferredColorFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice), ::il2cpp_utils::ExtractType(preferredColorFrameSize)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraDevice, preferredColorFrameSize);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_OpenCameraDevice
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_OpenCameraDevice(GlobalNamespace::OVRPlugin::CameraDevice cameraDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_OpenCameraDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_OpenCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraDevice);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_CloseCameraDevice
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_CloseCameraDevice(GlobalNamespace::OVRPlugin::CameraDevice cameraDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_CloseCameraDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_CloseCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraDevice);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_HasCameraDeviceOpened
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_HasCameraDeviceOpened(GlobalNamespace::OVRPlugin::CameraDevice cameraDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_HasCameraDeviceOpened");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_HasCameraDeviceOpened", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraDevice);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_IsCameraDeviceColorFrameAvailable
GlobalNamespace::OVRPlugin::Bool GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceColorFrameAvailable(GlobalNamespace::OVRPlugin::CameraDevice cameraDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceColorFrameAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_IsCameraDeviceColorFrameAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraDevice);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_GetCameraDeviceColorFrameSize
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameSize(GlobalNamespace::OVRPlugin::CameraDevice cameraDevice, GlobalNamespace::OVRPlugin::Sizei& colorFrameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_GetCameraDeviceColorFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Sizei&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraDevice, colorFrameSize);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_GetCameraDeviceColorFrameBgraPixels
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameBgraPixels(GlobalNamespace::OVRPlugin::CameraDevice cameraDevice, System::IntPtr& colorFrameBgraPixels, int& colorFrameRowPitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameBgraPixels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_GetCameraDeviceColorFrameBgraPixels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraDevice), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraDevice, colorFrameBgraPixels, colorFrameRowPitch);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0.ovrp_GetControllerState4
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetControllerState4(uint controllerMask, GlobalNamespace::OVRPlugin::ControllerState4& controllerState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::ovrp_GetControllerState4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", "ovrp_GetControllerState4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerMask), ::il2cpp_utils::ExtractType(controllerState)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controllerMask, controllerState);
}
// Autogenerated method: OVRPlugin/OVRP_1_16_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_16_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_16_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_16_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::ovrp_UpdateCameraDevices
// Il2CppName: ovrp_UpdateCameraDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)()>(&OVRPlugin::OVRP_1_16_0::ovrp_UpdateCameraDevices)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), "ovrp_UpdateCameraDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceAvailable
// Il2CppName: ovrp_IsCameraDeviceAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(GlobalNamespace::OVRPlugin::CameraDevice)>(&OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceAvailable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), "ovrp_IsCameraDeviceAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraDevice>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::ovrp_SetCameraDevicePreferredColorFrameSize
// Il2CppName: ovrp_SetCameraDevicePreferredColorFrameSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::CameraDevice, GlobalNamespace::OVRPlugin::Sizei)>(&OVRPlugin::OVRP_1_16_0::ovrp_SetCameraDevicePreferredColorFrameSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), "ovrp_SetCameraDevicePreferredColorFrameSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraDevice>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Sizei>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::ovrp_OpenCameraDevice
// Il2CppName: ovrp_OpenCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::CameraDevice)>(&OVRPlugin::OVRP_1_16_0::ovrp_OpenCameraDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), "ovrp_OpenCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraDevice>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::ovrp_CloseCameraDevice
// Il2CppName: ovrp_CloseCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::CameraDevice)>(&OVRPlugin::OVRP_1_16_0::ovrp_CloseCameraDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), "ovrp_CloseCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraDevice>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::ovrp_HasCameraDeviceOpened
// Il2CppName: ovrp_HasCameraDeviceOpened
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(GlobalNamespace::OVRPlugin::CameraDevice)>(&OVRPlugin::OVRP_1_16_0::ovrp_HasCameraDeviceOpened)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), "ovrp_HasCameraDeviceOpened", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraDevice>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceColorFrameAvailable
// Il2CppName: ovrp_IsCameraDeviceColorFrameAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Bool (*)(GlobalNamespace::OVRPlugin::CameraDevice)>(&OVRPlugin::OVRP_1_16_0::ovrp_IsCameraDeviceColorFrameAvailable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), "ovrp_IsCameraDeviceColorFrameAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraDevice>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameSize
// Il2CppName: ovrp_GetCameraDeviceColorFrameSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::CameraDevice, GlobalNamespace::OVRPlugin::Sizei&)>(&OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), "ovrp_GetCameraDeviceColorFrameSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraDevice>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Sizei&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameBgraPixels
// Il2CppName: ovrp_GetCameraDeviceColorFrameBgraPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::CameraDevice, System::IntPtr&, int&)>(&OVRPlugin::OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameBgraPixels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), "ovrp_GetCameraDeviceColorFrameBgraPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraDevice>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::ovrp_GetControllerState4
// Il2CppName: ovrp_GetControllerState4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(uint, GlobalNamespace::OVRPlugin::ControllerState4&)>(&OVRPlugin::OVRP_1_16_0::ovrp_GetControllerState4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), "ovrp_GetControllerState4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::ControllerState4&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_16_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_16_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_16_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_17_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_17_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_17_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_17_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_17_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_17_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_17_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_17_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_17_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_17_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_17_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_17_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_17_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_17_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_17_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_18_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_18_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_18_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_18_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_18_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_18_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_18_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_18_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_18_0.ovrp_SetHandNodePoseStateLatency
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_SetHandNodePoseStateLatency(double latencyInSeconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_SetHandNodePoseStateLatency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_18_0", "ovrp_SetHandNodePoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(latencyInSeconds)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, latencyInSeconds);
}
// Autogenerated method: OVRPlugin/OVRP_1_18_0.ovrp_GetHandNodePoseStateLatency
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_GetHandNodePoseStateLatency(double& latencyInSeconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_GetHandNodePoseStateLatency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_18_0", "ovrp_GetHandNodePoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, latencyInSeconds);
}
// Autogenerated method: OVRPlugin/OVRP_1_18_0.ovrp_GetAppHasInputFocus
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_GetAppHasInputFocus(GlobalNamespace::OVRPlugin::Bool& appHasInputFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_18_0::ovrp_GetAppHasInputFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_18_0", "ovrp_GetAppHasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, appHasInputFocus);
}
// Autogenerated method: OVRPlugin/OVRP_1_18_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_18_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_18_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_18_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_18_0::ovrp_SetHandNodePoseStateLatency
// Il2CppName: ovrp_SetHandNodePoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(double)>(&OVRPlugin::OVRP_1_18_0::ovrp_SetHandNodePoseStateLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_18_0*), "ovrp_SetHandNodePoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_18_0::ovrp_GetHandNodePoseStateLatency
// Il2CppName: ovrp_GetHandNodePoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(double&)>(&OVRPlugin::OVRP_1_18_0::ovrp_GetHandNodePoseStateLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_18_0*), "ovrp_GetHandNodePoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_18_0::ovrp_GetAppHasInputFocus
// Il2CppName: ovrp_GetAppHasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_18_0::ovrp_GetAppHasInputFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_18_0*), "ovrp_GetAppHasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_18_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_18_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_18_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_19_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_19_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_19_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_19_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_19_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_19_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_19_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_19_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_19_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_19_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_19_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_19_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_19_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_19_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_19_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_21_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_21_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/FixedFoveatedRenderingLevel
#include "GlobalNamespace/OVRPlugin_FixedFoveatedRenderingLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_21_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_21_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_21_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_21_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetTiledMultiResSupported
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResSupported(GlobalNamespace::OVRPlugin::Bool& foveationSupported) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetTiledMultiResSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, foveationSupported);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetTiledMultiResLevel
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResLevel(GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel& level) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetTiledMultiResLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, level);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_SetTiledMultiResLevel
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_SetTiledMultiResLevel(GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel level) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_SetTiledMultiResLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_SetTiledMultiResLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, level);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetGPUUtilSupported
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilSupported(GlobalNamespace::OVRPlugin::Bool& gpuUtilSupported) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetGPUUtilSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gpuUtilSupported);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetGPUUtilLevel
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilLevel(float& gpuUtil) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetGPUUtilLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gpuUtil);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetSystemDisplayFrequency2
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayFrequency2(float& systemDisplayFrequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayFrequency2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetSystemDisplayFrequency2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, systemDisplayFrequency);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetSystemDisplayAvailableFrequencies
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayAvailableFrequencies(System::IntPtr systemDisplayAvailableFrequencies, int& numFrequencies) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayAvailableFrequencies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetSystemDisplayAvailableFrequencies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(systemDisplayAvailableFrequencies), ::il2cpp_utils::ExtractType(numFrequencies)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, systemDisplayAvailableFrequencies, numFrequencies);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_SetSystemDisplayFrequency
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_SetSystemDisplayFrequency(float requestedFrequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_SetSystemDisplayFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_SetSystemDisplayFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestedFrequency)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, requestedFrequency);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0.ovrp_GetAppAsymmetricFov
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetAppAsymmetricFov(GlobalNamespace::OVRPlugin::Bool& useAsymmetricFov) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::ovrp_GetAppAsymmetricFov");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", "ovrp_GetAppAsymmetricFov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, useAsymmetricFov);
}
// Autogenerated method: OVRPlugin/OVRP_1_21_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_21_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_21_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_21_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResSupported
// Il2CppName: ovrp_GetTiledMultiResSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResSupported)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetTiledMultiResSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResLevel
// Il2CppName: ovrp_GetTiledMultiResLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetTiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_SetTiledMultiResLevel
// Il2CppName: ovrp_SetTiledMultiResLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel)>(&OVRPlugin::OVRP_1_21_0::ovrp_SetTiledMultiResLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_SetTiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilSupported
// Il2CppName: ovrp_GetGPUUtilSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilSupported)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetGPUUtilSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilLevel
// Il2CppName: ovrp_GetGPUUtilLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(float&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetGPUUtilLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayFrequency2
// Il2CppName: ovrp_GetSystemDisplayFrequency2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(float&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayFrequency2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetSystemDisplayFrequency2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayAvailableFrequencies
// Il2CppName: ovrp_GetSystemDisplayAvailableFrequencies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, int&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayAvailableFrequencies)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetSystemDisplayAvailableFrequencies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_SetSystemDisplayFrequency
// Il2CppName: ovrp_SetSystemDisplayFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(float)>(&OVRPlugin::OVRP_1_21_0::ovrp_SetSystemDisplayFrequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_SetSystemDisplayFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetAppAsymmetricFov
// Il2CppName: ovrp_GetAppAsymmetricFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetAppAsymmetricFov)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetAppAsymmetricFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_21_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin/OVRP_1_28_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_28_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Handedness
#include "GlobalNamespace/OVRPlugin_Handedness.hpp"
// Including type: OVRPlugin/LayerDesc
#include "GlobalNamespace/OVRPlugin_LayerDesc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_28_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_28_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_28_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_28_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_28_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_28_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_28_0.ovrp_GetDominantHand
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_GetDominantHand(GlobalNamespace::OVRPlugin::Handedness& dominantHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_GetDominantHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_28_0", "ovrp_GetDominantHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Handedness&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dominantHand);
}
// Autogenerated method: OVRPlugin/OVRP_1_28_0.ovrp_SendEvent
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_SendEvent(::Il2CppString* name, ::Il2CppString* param) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_SendEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_28_0", "ovrp_SendEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(param)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, param);
}
// Autogenerated method: OVRPlugin/OVRP_1_28_0.ovrp_EnqueueSetupLayer2
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_EnqueueSetupLayer2(GlobalNamespace::OVRPlugin::LayerDesc& desc, int compositionDepth, System::IntPtr layerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_28_0::ovrp_EnqueueSetupLayer2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_28_0", "ovrp_EnqueueSetupLayer2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(desc), ::il2cpp_utils::ExtractType(compositionDepth), ::il2cpp_utils::ExtractType(layerId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, desc, compositionDepth, layerId);
}
// Autogenerated method: OVRPlugin/OVRP_1_28_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_28_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_28_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_28_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_28_0::ovrp_GetDominantHand
// Il2CppName: ovrp_GetDominantHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Handedness&)>(&OVRPlugin::OVRP_1_28_0::ovrp_GetDominantHand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_28_0*), "ovrp_GetDominantHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Handedness&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_28_0::ovrp_SendEvent
// Il2CppName: ovrp_SendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(::Il2CppString*, ::Il2CppString*)>(&OVRPlugin::OVRP_1_28_0::ovrp_SendEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_28_0*), "ovrp_SendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_28_0::ovrp_EnqueueSetupLayer2
// Il2CppName: ovrp_EnqueueSetupLayer2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::LayerDesc&, int, System::IntPtr)>(&OVRPlugin::OVRP_1_28_0::ovrp_EnqueueSetupLayer2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_28_0*), "ovrp_EnqueueSetupLayer2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::LayerDesc&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_28_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_28_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_28_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_29_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_29_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
// Including type: OVRPlugin/PoseStatef
#include "GlobalNamespace/OVRPlugin_PoseStatef.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_29_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_29_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_29_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_29_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_29_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_29_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_29_0.ovrp_GetLayerAndroidSurfaceObject
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetLayerAndroidSurfaceObject(int layerId, System::IntPtr& surfaceObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetLayerAndroidSurfaceObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_29_0", "ovrp_GetLayerAndroidSurfaceObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(surfaceObject)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerId, surfaceObject);
}
// Autogenerated method: OVRPlugin/OVRP_1_29_0.ovrp_SetHeadPoseModifier
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_SetHeadPoseModifier(GlobalNamespace::OVRPlugin::Quatf& relativeRotation, GlobalNamespace::OVRPlugin::Vector3f& relativeTranslation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_SetHeadPoseModifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_29_0", "ovrp_SetHeadPoseModifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(relativeRotation), ::il2cpp_utils::ExtractType(relativeTranslation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, relativeRotation, relativeTranslation);
}
// Autogenerated method: OVRPlugin/OVRP_1_29_0.ovrp_GetHeadPoseModifier
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetHeadPoseModifier(GlobalNamespace::OVRPlugin::Quatf& relativeRotation, GlobalNamespace::OVRPlugin::Vector3f& relativeTranslation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetHeadPoseModifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_29_0", "ovrp_GetHeadPoseModifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Quatf&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Vector3f&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, relativeRotation, relativeTranslation);
}
// Autogenerated method: OVRPlugin/OVRP_1_29_0.ovrp_GetNodePoseStateRaw
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetNodePoseStateRaw(GlobalNamespace::OVRPlugin::Step stepId, int frameIndex, GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::PoseStatef& nodePoseState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_29_0::ovrp_GetNodePoseStateRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_29_0", "ovrp_GetNodePoseStateRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stepId), ::il2cpp_utils::ExtractType(frameIndex), ::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::PoseStatef&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stepId, frameIndex, nodeId, nodePoseState);
}
// Autogenerated method: OVRPlugin/OVRP_1_29_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_29_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_29_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_29_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_29_0::ovrp_GetLayerAndroidSurfaceObject
// Il2CppName: ovrp_GetLayerAndroidSurfaceObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, System::IntPtr&)>(&OVRPlugin::OVRP_1_29_0::ovrp_GetLayerAndroidSurfaceObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_29_0*), "ovrp_GetLayerAndroidSurfaceObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_29_0::ovrp_SetHeadPoseModifier
// Il2CppName: ovrp_SetHeadPoseModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Quatf&, GlobalNamespace::OVRPlugin::Vector3f&)>(&OVRPlugin::OVRP_1_29_0::ovrp_SetHeadPoseModifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_29_0*), "ovrp_SetHeadPoseModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Quatf&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Vector3f&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_29_0::ovrp_GetHeadPoseModifier
// Il2CppName: ovrp_GetHeadPoseModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Quatf&, GlobalNamespace::OVRPlugin::Vector3f&)>(&OVRPlugin::OVRP_1_29_0::ovrp_GetHeadPoseModifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_29_0*), "ovrp_GetHeadPoseModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Quatf&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Vector3f&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_29_0::ovrp_GetNodePoseStateRaw
// Il2CppName: ovrp_GetNodePoseStateRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Step, int, GlobalNamespace::OVRPlugin::Node, GlobalNamespace::OVRPlugin::PoseStatef&)>(&OVRPlugin::OVRP_1_29_0::ovrp_GetNodePoseStateRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_29_0*), "ovrp_GetNodePoseStateRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Step>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Node>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::PoseStatef&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_29_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_29_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_29_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin/OVRP_1_30_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_30_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/PerfMetrics
#include "GlobalNamespace/OVRPlugin_PerfMetrics.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_30_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_30_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_30_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_30_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_30_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_30_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_GetCurrentTrackingTransformPose
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetCurrentTrackingTransformPose(GlobalNamespace::OVRPlugin::Posef& trackingTransformPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetCurrentTrackingTransformPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_GetCurrentTrackingTransformPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, trackingTransformPose);
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_GetTrackingTransformRawPose
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetTrackingTransformRawPose(GlobalNamespace::OVRPlugin::Posef& trackingTransformRawPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetTrackingTransformRawPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_GetTrackingTransformRawPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, trackingTransformRawPose);
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_SendEvent2
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_SendEvent2(::Il2CppString* name, ::Il2CppString* param, ::Il2CppString* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_SendEvent2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_SendEvent2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(param), ::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, param, source);
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_IsPerfMetricsSupported
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_IsPerfMetricsSupported(GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics, GlobalNamespace::OVRPlugin::Bool& isSupported) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_IsPerfMetricsSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_IsPerfMetricsSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(perfMetrics), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, perfMetrics, isSupported);
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_GetPerfMetricsFloat
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsFloat(GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics, float& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_GetPerfMetricsFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(perfMetrics), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, perfMetrics, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0.ovrp_GetPerfMetricsInt
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsInt(GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics, int& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", "ovrp_GetPerfMetricsInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(perfMetrics), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, perfMetrics, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_30_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_30_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_30_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_30_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_30_0::ovrp_GetCurrentTrackingTransformPose
// Il2CppName: ovrp_GetCurrentTrackingTransformPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Posef&)>(&OVRPlugin::OVRP_1_30_0::ovrp_GetCurrentTrackingTransformPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_30_0*), "ovrp_GetCurrentTrackingTransformPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_30_0::ovrp_GetTrackingTransformRawPose
// Il2CppName: ovrp_GetTrackingTransformRawPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Posef&)>(&OVRPlugin::OVRP_1_30_0::ovrp_GetTrackingTransformRawPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_30_0*), "ovrp_GetTrackingTransformRawPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_30_0::ovrp_SendEvent2
// Il2CppName: ovrp_SendEvent2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&OVRPlugin::OVRP_1_30_0::ovrp_SendEvent2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_30_0*), "ovrp_SendEvent2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_30_0::ovrp_IsPerfMetricsSupported
// Il2CppName: ovrp_IsPerfMetricsSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::PerfMetrics, GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_30_0::ovrp_IsPerfMetricsSupported)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_30_0*), "ovrp_IsPerfMetricsSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::PerfMetrics>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsFloat
// Il2CppName: ovrp_GetPerfMetricsFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::PerfMetrics, float&)>(&OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_30_0*), "ovrp_GetPerfMetricsFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::PerfMetrics>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsInt
// Il2CppName: ovrp_GetPerfMetricsInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::PerfMetrics, int&)>(&OVRPlugin::OVRP_1_30_0::ovrp_GetPerfMetricsInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_30_0*), "ovrp_GetPerfMetricsInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::PerfMetrics>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_30_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_30_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_30_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_31_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_31_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_31_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_31_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_31_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_31_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_31_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_31_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_31_0.ovrp_GetTimeInSeconds
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_31_0::ovrp_GetTimeInSeconds(double& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_31_0::ovrp_GetTimeInSeconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_31_0", "ovrp_GetTimeInSeconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: OVRPlugin/OVRP_1_31_0.ovrp_SetColorScaleAndOffset
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_31_0::ovrp_SetColorScaleAndOffset(UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, GlobalNamespace::OVRPlugin::Bool applyToAllLayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_31_0::ovrp_SetColorScaleAndOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_31_0", "ovrp_SetColorScaleAndOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorScale), ::il2cpp_utils::ExtractType(colorOffset), ::il2cpp_utils::ExtractType(applyToAllLayers)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, colorScale, colorOffset, applyToAllLayers);
}
// Autogenerated method: OVRPlugin/OVRP_1_31_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_31_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_31_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_31_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_31_0::ovrp_GetTimeInSeconds
// Il2CppName: ovrp_GetTimeInSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(double&)>(&OVRPlugin::OVRP_1_31_0::ovrp_GetTimeInSeconds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_31_0*), "ovrp_GetTimeInSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_31_0::ovrp_SetColorScaleAndOffset
// Il2CppName: ovrp_SetColorScaleAndOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(UnityEngine::Vector4, UnityEngine::Vector4, GlobalNamespace::OVRPlugin::Bool)>(&OVRPlugin::OVRP_1_31_0::ovrp_SetColorScaleAndOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_31_0*), "ovrp_SetColorScaleAndOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_31_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_31_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_31_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin/OVRP_1_32_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_32_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_32_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_32_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_32_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_32_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_32_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_32_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_32_0.ovrp_AddCustomMetadata
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_32_0::ovrp_AddCustomMetadata(::Il2CppString* name, ::Il2CppString* param) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_32_0::ovrp_AddCustomMetadata");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_32_0", "ovrp_AddCustomMetadata", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(param)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, param);
}
// Autogenerated method: OVRPlugin/OVRP_1_32_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_32_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_32_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_32_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_32_0::ovrp_AddCustomMetadata
// Il2CppName: ovrp_AddCustomMetadata
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(::Il2CppString*, ::Il2CppString*)>(&OVRPlugin::OVRP_1_32_0::ovrp_AddCustomMetadata)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_32_0*), "ovrp_AddCustomMetadata", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_32_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_32_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_32_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_34_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_34_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/TextureRectMatrixf
#include "GlobalNamespace/OVRPlugin_TextureRectMatrixf.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_34_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_34_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_34_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_34_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_34_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_34_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_34_0.ovrp_EnqueueSubmitLayer2
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_34_0::ovrp_EnqueueSubmitLayer2(uint flags, System::IntPtr textureLeft, System::IntPtr textureRight, int layerId, int frameIndex, GlobalNamespace::OVRPlugin::Posef& pose, GlobalNamespace::OVRPlugin::Vector3f& scale, int layerIndex, GlobalNamespace::OVRPlugin::Bool overrideTextureRectMatrix, GlobalNamespace::OVRPlugin::TextureRectMatrixf& textureRectMatrix, GlobalNamespace::OVRPlugin::Bool overridePerLayerColorScaleAndOffset, UnityEngine::Vector4& colorScale, UnityEngine::Vector4& colorOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_34_0::ovrp_EnqueueSubmitLayer2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_34_0", "ovrp_EnqueueSubmitLayer2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(textureLeft), ::il2cpp_utils::ExtractType(textureRight), ::il2cpp_utils::ExtractType(layerId), ::il2cpp_utils::ExtractType(frameIndex), ::il2cpp_utils::ExtractType(pose), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(layerIndex), ::il2cpp_utils::ExtractType(overrideTextureRectMatrix), ::il2cpp_utils::ExtractType(textureRectMatrix), ::il2cpp_utils::ExtractType(overridePerLayerColorScaleAndOffset), ::il2cpp_utils::ExtractType(colorScale), ::il2cpp_utils::ExtractType(colorOffset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, flags, textureLeft, textureRight, layerId, frameIndex, pose, scale, layerIndex, overrideTextureRectMatrix, textureRectMatrix, overridePerLayerColorScaleAndOffset, colorScale, colorOffset);
}
// Autogenerated method: OVRPlugin/OVRP_1_34_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_34_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_34_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_34_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_34_0::ovrp_EnqueueSubmitLayer2
// Il2CppName: ovrp_EnqueueSubmitLayer2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(uint, System::IntPtr, System::IntPtr, int, int, GlobalNamespace::OVRPlugin::Posef&, GlobalNamespace::OVRPlugin::Vector3f&, int, GlobalNamespace::OVRPlugin::Bool, GlobalNamespace::OVRPlugin::TextureRectMatrixf&, GlobalNamespace::OVRPlugin::Bool, UnityEngine::Vector4&, UnityEngine::Vector4&)>(&OVRPlugin::OVRP_1_34_0::ovrp_EnqueueSubmitLayer2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_34_0*), "ovrp_EnqueueSubmitLayer2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Vector3f&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::TextureRectMatrixf&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_34_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_34_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_34_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_35_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_35_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_35_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_35_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_35_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_35_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_35_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_35_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_35_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_35_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_35_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_35_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_35_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_35_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_35_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_36_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_36_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_36_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_36_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_36_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_36_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_36_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_36_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_36_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_36_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_36_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_36_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_36_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_36_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_36_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_37_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_37_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_37_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_37_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_37_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_37_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_37_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_37_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_37_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_37_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_37_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_37_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_37_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_37_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_37_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_38_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_38_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/TrackingOrigin
#include "GlobalNamespace/OVRPlugin_TrackingOrigin.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/Media/MrcActivationMode
#include "GlobalNamespace/OVRPlugin_Media_MrcActivationMode.hpp"
// Including type: OVRPlugin/Media/InputVideoBufferType
#include "GlobalNamespace/OVRPlugin_Media_InputVideoBufferType.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_38_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_38_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_38_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_38_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_GetTrackingTransformRelativePose
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetTrackingTransformRelativePose(GlobalNamespace::OVRPlugin::Posef& trackingTransformRelativePose, GlobalNamespace::OVRPlugin::TrackingOrigin trackingOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetTrackingTransformRelativePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_GetTrackingTransformRelativePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trackingTransformRelativePose), ::il2cpp_utils::ExtractType(trackingOrigin)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, trackingTransformRelativePose, trackingOrigin);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_Initialize
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_Shutdown
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Shutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Shutdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_Shutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetInitialized
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetInitialized(GlobalNamespace::OVRPlugin::Bool& initialized) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, initialized);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_Update
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetMrcActivationMode
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcActivationMode(GlobalNamespace::OVRPlugin::Media::MrcActivationMode& activationMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcActivationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetMrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::MrcActivationMode&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, activationMode);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SetMrcActivationMode
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcActivationMode(GlobalNamespace::OVRPlugin::Media::MrcActivationMode activationMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcActivationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SetMrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(activationMode)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, activationMode);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_IsMrcEnabled
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcEnabled(GlobalNamespace::OVRPlugin::Bool& mrcEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_IsMrcEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mrcEnabled);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_IsMrcActivated
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcActivated(GlobalNamespace::OVRPlugin::Bool& mrcActivated) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_IsMrcActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mrcActivated);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_UseMrcDebugCamera
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_UseMrcDebugCamera(GlobalNamespace::OVRPlugin::Bool& useMrcDebugCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_UseMrcDebugCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_UseMrcDebugCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, useMrcDebugCamera);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SetMrcInputVideoBufferType
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcInputVideoBufferType(GlobalNamespace::OVRPlugin::Media::InputVideoBufferType inputVideoBufferType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcInputVideoBufferType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SetMrcInputVideoBufferType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputVideoBufferType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inputVideoBufferType);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetMrcInputVideoBufferType
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcInputVideoBufferType(GlobalNamespace::OVRPlugin::Media::InputVideoBufferType& inputVideoBufferType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcInputVideoBufferType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetMrcInputVideoBufferType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputVideoBufferType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inputVideoBufferType);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SetMrcFrameSize
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameSize(int frameWidth, int frameHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SetMrcFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frameWidth), ::il2cpp_utils::ExtractType(frameHeight)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, frameWidth, frameHeight);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetMrcFrameSize
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameSize(int& frameWidth, int& frameHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetMrcFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frameWidth), ::il2cpp_utils::ExtractType(frameHeight)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, frameWidth, frameHeight);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SetMrcAudioSampleRate
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcAudioSampleRate(int sampleRate) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcAudioSampleRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SetMrcAudioSampleRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sampleRate)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sampleRate);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetMrcAudioSampleRate
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcAudioSampleRate(int& sampleRate) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcAudioSampleRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetMrcAudioSampleRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sampleRate)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sampleRate);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SetMrcFrameImageFlipped
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameImageFlipped(GlobalNamespace::OVRPlugin::Bool flipped) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameImageFlipped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SetMrcFrameImageFlipped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flipped)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, flipped);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_GetMrcFrameImageFlipped
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameImageFlipped(GlobalNamespace::OVRPlugin::Bool& flipped) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameImageFlipped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_GetMrcFrameImageFlipped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flipped)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, flipped);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_EncodeMrcFrame
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrame(System::IntPtr rawBuffer, System::IntPtr audioDataPtr, int audioDataLen, int audioChannels, double timestamp, int& outSyncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_EncodeMrcFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawBuffer), ::il2cpp_utils::ExtractType(audioDataPtr), ::il2cpp_utils::ExtractType(audioDataLen), ::il2cpp_utils::ExtractType(audioChannels), ::il2cpp_utils::ExtractType(timestamp), ::il2cpp_utils::ExtractType(outSyncId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rawBuffer, audioDataPtr, audioDataLen, audioChannels, timestamp, outSyncId);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_EncodeMrcFrameWithDualTextures
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrameWithDualTextures(System::IntPtr backgroundTextureHandle, System::IntPtr foregroundTextureHandle, System::IntPtr audioData, int audioDataLen, int audioChannels, double timestamp, int& outSyncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrameWithDualTextures");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_EncodeMrcFrameWithDualTextures", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(backgroundTextureHandle), ::il2cpp_utils::ExtractType(foregroundTextureHandle), ::il2cpp_utils::ExtractType(audioData), ::il2cpp_utils::ExtractType(audioDataLen), ::il2cpp_utils::ExtractType(audioChannels), ::il2cpp_utils::ExtractType(timestamp), ::il2cpp_utils::ExtractType(outSyncId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, backgroundTextureHandle, foregroundTextureHandle, audioData, audioDataLen, audioChannels, timestamp, outSyncId);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_Media_SyncMrcFrame
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SyncMrcFrame(int syncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_Media_SyncMrcFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_Media_SyncMrcFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, syncId);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_SetDeveloperMode
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_SetDeveloperMode(GlobalNamespace::OVRPlugin::Bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_SetDeveloperMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_SetDeveloperMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(active)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, active);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_GetNodeOrientationValid
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetNodeOrientationValid(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Bool& nodeOrientationValid) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetNodeOrientationValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_GetNodeOrientationValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(nodeOrientationValid)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, nodeOrientationValid);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0.ovrp_GetNodePositionValid
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetNodePositionValid(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Bool& nodePositionValid) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::ovrp_GetNodePositionValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", "ovrp_GetNodePositionValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(nodePositionValid)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, nodeId, nodePositionValid);
}
// Autogenerated method: OVRPlugin/OVRP_1_38_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_38_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_38_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_38_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_GetTrackingTransformRelativePose
// Il2CppName: ovrp_GetTrackingTransformRelativePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Posef&, GlobalNamespace::OVRPlugin::TrackingOrigin)>(&OVRPlugin::OVRP_1_38_0::ovrp_GetTrackingTransformRelativePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_GetTrackingTransformRelativePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::TrackingOrigin>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_Initialize
// Il2CppName: ovrp_Media_Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)()>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_Shutdown
// Il2CppName: ovrp_Media_Shutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)()>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_Shutdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_Shutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_GetInitialized
// Il2CppName: ovrp_Media_GetInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_GetInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_GetInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_Update
// Il2CppName: ovrp_Media_Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)()>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcActivationMode
// Il2CppName: ovrp_Media_GetMrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Media::MrcActivationMode&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcActivationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_GetMrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::MrcActivationMode&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcActivationMode
// Il2CppName: ovrp_Media_SetMrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Media::MrcActivationMode)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcActivationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_SetMrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::MrcActivationMode>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcEnabled
// Il2CppName: ovrp_Media_IsMrcEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_IsMrcEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcActivated
// Il2CppName: ovrp_Media_IsMrcActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_IsMrcActivated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_IsMrcActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_UseMrcDebugCamera
// Il2CppName: ovrp_Media_UseMrcDebugCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_UseMrcDebugCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_UseMrcDebugCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcInputVideoBufferType
// Il2CppName: ovrp_Media_SetMrcInputVideoBufferType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Media::InputVideoBufferType)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcInputVideoBufferType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_SetMrcInputVideoBufferType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::InputVideoBufferType>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcInputVideoBufferType
// Il2CppName: ovrp_Media_GetMrcInputVideoBufferType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Media::InputVideoBufferType&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcInputVideoBufferType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_GetMrcInputVideoBufferType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::InputVideoBufferType&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameSize
// Il2CppName: ovrp_Media_SetMrcFrameSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, int)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_SetMrcFrameSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameSize
// Il2CppName: ovrp_Media_GetMrcFrameSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int&, int&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_GetMrcFrameSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcAudioSampleRate
// Il2CppName: ovrp_Media_SetMrcAudioSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcAudioSampleRate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_SetMrcAudioSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcAudioSampleRate
// Il2CppName: ovrp_Media_GetMrcAudioSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcAudioSampleRate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_GetMrcAudioSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameImageFlipped
// Il2CppName: ovrp_Media_SetMrcFrameImageFlipped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_SetMrcFrameImageFlipped)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_SetMrcFrameImageFlipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameImageFlipped
// Il2CppName: ovrp_Media_GetMrcFrameImageFlipped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_GetMrcFrameImageFlipped)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_GetMrcFrameImageFlipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrame
// Il2CppName: ovrp_Media_EncodeMrcFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, System::IntPtr, int, int, double, int&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_EncodeMrcFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrameWithDualTextures
// Il2CppName: ovrp_Media_EncodeMrcFrameWithDualTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, System::IntPtr, System::IntPtr, int, int, double, int&)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_EncodeMrcFrameWithDualTextures)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_EncodeMrcFrameWithDualTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_Media_SyncMrcFrame
// Il2CppName: ovrp_Media_SyncMrcFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int)>(&OVRPlugin::OVRP_1_38_0::ovrp_Media_SyncMrcFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_Media_SyncMrcFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_SetDeveloperMode
// Il2CppName: ovrp_SetDeveloperMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool)>(&OVRPlugin::OVRP_1_38_0::ovrp_SetDeveloperMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_SetDeveloperMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_GetNodeOrientationValid
// Il2CppName: ovrp_GetNodeOrientationValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Node, GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_38_0::ovrp_GetNodeOrientationValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_GetNodeOrientationValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Node>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::ovrp_GetNodePositionValid
// Il2CppName: ovrp_GetNodePositionValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Node, GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_38_0::ovrp_GetNodePositionValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), "ovrp_GetNodePositionValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Node>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_38_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_38_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_38_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_39_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_39_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_39_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_39_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_39_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_39_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_39_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_39_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_39_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_39_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_39_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_39_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_39_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_39_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_39_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_40_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_40_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_40_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_40_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_40_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_40_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_40_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_40_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_40_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_40_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_40_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_40_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_40_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_40_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_40_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_41_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_41_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_41_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_41_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_41_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_41_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_41_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_41_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_41_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_41_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_41_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_41_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_41_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_41_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_41_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_42_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_42_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_42_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_42_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_42_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_42_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_42_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_42_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_42_0.ovrp_GetAdaptiveGpuPerformanceScale2
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_42_0::ovrp_GetAdaptiveGpuPerformanceScale2(float& adaptiveGpuPerformanceScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_42_0::ovrp_GetAdaptiveGpuPerformanceScale2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_42_0", "ovrp_GetAdaptiveGpuPerformanceScale2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(adaptiveGpuPerformanceScale)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, adaptiveGpuPerformanceScale);
}
// Autogenerated method: OVRPlugin/OVRP_1_42_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_42_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_42_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_42_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_42_0::ovrp_GetAdaptiveGpuPerformanceScale2
// Il2CppName: ovrp_GetAdaptiveGpuPerformanceScale2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(float&)>(&OVRPlugin::OVRP_1_42_0::ovrp_GetAdaptiveGpuPerformanceScale2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_42_0*), "ovrp_GetAdaptiveGpuPerformanceScale2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_42_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_42_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_42_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_43_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_43_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_43_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_43_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_43_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_43_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_43_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_43_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_43_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_43_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_43_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_43_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_43_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_43_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_43_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin/OVRP_1_44_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_44_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVRPlugin/Hand
#include "GlobalNamespace/OVRPlugin_Hand.hpp"
// Including type: OVRPlugin/MeshType
#include "GlobalNamespace/OVRPlugin_MeshType.hpp"
// Including type: OVRPlugin/Fovf
#include "GlobalNamespace/OVRPlugin_Fovf.hpp"
// Including type: OVRPlugin/CameraIntrinsics
#include "GlobalNamespace/OVRPlugin_CameraIntrinsics.hpp"
// Including type: OVRPlugin/CameraExtrinsics
#include "GlobalNamespace/OVRPlugin_CameraExtrinsics.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_44_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_44_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_44_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_44_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetHandTrackingEnabled
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetHandTrackingEnabled(GlobalNamespace::OVRPlugin::Bool& handTrackingEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetHandTrackingEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetHandTrackingEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handTrackingEnabled)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handTrackingEnabled);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetHandState
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetHandState(GlobalNamespace::OVRPlugin::Step stepId, GlobalNamespace::OVRPlugin::Hand hand, GlobalNamespace::OVRPlugin::HandStateInternal& handState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetHandState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetHandState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stepId), ::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::HandStateInternal&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stepId, hand, handState);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetSkeleton
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetSkeleton(GlobalNamespace::OVRPlugin::SkeletonType skeletonType, GlobalNamespace::OVRPlugin::Skeleton& skeleton) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetSkeleton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetSkeleton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(skeletonType), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Skeleton&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, skeletonType, skeleton);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetMesh
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetMesh(GlobalNamespace::OVRPlugin::MeshType meshType, System::IntPtr meshPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(meshType), ::il2cpp_utils::ExtractType(meshPtr)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, meshType, meshPtr);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_OverrideExternalCameraFov
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraFov(int cameraId, GlobalNamespace::OVRPlugin::Bool useOverriddenFov, GlobalNamespace::OVRPlugin::Fovf& fov) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraFov");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_OverrideExternalCameraFov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractType(useOverriddenFov), ::il2cpp_utils::ExtractType(fov)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId, useOverriddenFov, fov);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetUseOverriddenExternalCameraFov
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraFov(int cameraId, GlobalNamespace::OVRPlugin::Bool& useOverriddenFov) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraFov");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetUseOverriddenExternalCameraFov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId, useOverriddenFov);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_OverrideExternalCameraStaticPose
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraStaticPose(int cameraId, GlobalNamespace::OVRPlugin::Bool useOverriddenPose, GlobalNamespace::OVRPlugin::Posef& poseInStageOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraStaticPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_OverrideExternalCameraStaticPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractType(useOverriddenPose), ::il2cpp_utils::ExtractType(poseInStageOrigin)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId, useOverriddenPose, poseInStageOrigin);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetUseOverriddenExternalCameraStaticPose
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraStaticPose(int cameraId, GlobalNamespace::OVRPlugin::Bool& useOverriddenStaticPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraStaticPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetUseOverriddenExternalCameraStaticPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraId, useOverriddenStaticPose);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_ResetDefaultExternalCamera
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_ResetDefaultExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_ResetDefaultExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_ResetDefaultExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_SetDefaultExternalCamera
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_SetDefaultExternalCamera(::Il2CppString* cameraName, GlobalNamespace::OVRPlugin::CameraIntrinsics& cameraIntrinsics, GlobalNamespace::OVRPlugin::CameraExtrinsics& cameraExtrinsics) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_SetDefaultExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_SetDefaultExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraName), ::il2cpp_utils::ExtractType(cameraIntrinsics), ::il2cpp_utils::ExtractType(cameraExtrinsics)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraName, cameraIntrinsics, cameraExtrinsics);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0.ovrp_GetLocalTrackingSpaceRecenterCount
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetLocalTrackingSpaceRecenterCount(int& recenterCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::ovrp_GetLocalTrackingSpaceRecenterCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", "ovrp_GetLocalTrackingSpaceRecenterCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(recenterCount)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, recenterCount);
}
// Autogenerated method: OVRPlugin/OVRP_1_44_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_44_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_44_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_44_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_GetHandTrackingEnabled
// Il2CppName: ovrp_GetHandTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_44_0::ovrp_GetHandTrackingEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_GetHandTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_GetHandState
// Il2CppName: ovrp_GetHandState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Step, GlobalNamespace::OVRPlugin::Hand, GlobalNamespace::OVRPlugin::HandStateInternal&)>(&OVRPlugin::OVRP_1_44_0::ovrp_GetHandState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_GetHandState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Step>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Hand>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::HandStateInternal&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_GetSkeleton
// Il2CppName: ovrp_GetSkeleton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::SkeletonType, GlobalNamespace::OVRPlugin::Skeleton&)>(&OVRPlugin::OVRP_1_44_0::ovrp_GetSkeleton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_GetSkeleton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::SkeletonType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Skeleton&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_GetMesh
// Il2CppName: ovrp_GetMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::MeshType, System::IntPtr)>(&OVRPlugin::OVRP_1_44_0::ovrp_GetMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_GetMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::MeshType>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraFov
// Il2CppName: ovrp_OverrideExternalCameraFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, GlobalNamespace::OVRPlugin::Bool, GlobalNamespace::OVRPlugin::Fovf&)>(&OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraFov)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_OverrideExternalCameraFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Fovf&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraFov
// Il2CppName: ovrp_GetUseOverriddenExternalCameraFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraFov)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_GetUseOverriddenExternalCameraFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraStaticPose
// Il2CppName: ovrp_OverrideExternalCameraStaticPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, GlobalNamespace::OVRPlugin::Bool, GlobalNamespace::OVRPlugin::Posef&)>(&OVRPlugin::OVRP_1_44_0::ovrp_OverrideExternalCameraStaticPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_OverrideExternalCameraStaticPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraStaticPose
// Il2CppName: ovrp_GetUseOverriddenExternalCameraStaticPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int, GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraStaticPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_GetUseOverriddenExternalCameraStaticPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_ResetDefaultExternalCamera
// Il2CppName: ovrp_ResetDefaultExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)()>(&OVRPlugin::OVRP_1_44_0::ovrp_ResetDefaultExternalCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_ResetDefaultExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_SetDefaultExternalCamera
// Il2CppName: ovrp_SetDefaultExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(::Il2CppString*, GlobalNamespace::OVRPlugin::CameraIntrinsics&, GlobalNamespace::OVRPlugin::CameraExtrinsics&)>(&OVRPlugin::OVRP_1_44_0::ovrp_SetDefaultExternalCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_SetDefaultExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraIntrinsics&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraExtrinsics&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::ovrp_GetLocalTrackingSpaceRecenterCount
// Il2CppName: ovrp_GetLocalTrackingSpaceRecenterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int&)>(&OVRPlugin::OVRP_1_44_0::ovrp_GetLocalTrackingSpaceRecenterCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), "ovrp_GetLocalTrackingSpaceRecenterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_44_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_44_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_44_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_45_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_45_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_45_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_45_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_45_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_45_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_45_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_45_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_45_0.ovrp_GetSystemHmd3DofModeEnabled
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_45_0::ovrp_GetSystemHmd3DofModeEnabled(GlobalNamespace::OVRPlugin::Bool& enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_45_0::ovrp_GetSystemHmd3DofModeEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_45_0", "ovrp_GetSystemHmd3DofModeEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, enabled);
}
// Autogenerated method: OVRPlugin/OVRP_1_45_0.ovrp_Media_SetAvailableQueueIndexVulkan
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_45_0::ovrp_Media_SetAvailableQueueIndexVulkan(uint queueIndexVk) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_45_0::ovrp_Media_SetAvailableQueueIndexVulkan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_45_0", "ovrp_Media_SetAvailableQueueIndexVulkan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(queueIndexVk)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, queueIndexVk);
}
// Autogenerated method: OVRPlugin/OVRP_1_45_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_45_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_45_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_45_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_45_0::ovrp_GetSystemHmd3DofModeEnabled
// Il2CppName: ovrp_GetSystemHmd3DofModeEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_45_0::ovrp_GetSystemHmd3DofModeEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_45_0*), "ovrp_GetSystemHmd3DofModeEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_45_0::ovrp_Media_SetAvailableQueueIndexVulkan
// Il2CppName: ovrp_Media_SetAvailableQueueIndexVulkan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(uint)>(&OVRPlugin::OVRP_1_45_0::ovrp_Media_SetAvailableQueueIndexVulkan)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_45_0*), "ovrp_Media_SetAvailableQueueIndexVulkan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_45_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_45_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_45_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_46_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_46_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_46_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_46_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_46_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_46_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_46_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_46_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_46_0.ovrp_GetTiledMultiResDynamic
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_46_0::ovrp_GetTiledMultiResDynamic(GlobalNamespace::OVRPlugin::Bool& isDynamic) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_46_0::ovrp_GetTiledMultiResDynamic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_46_0", "ovrp_GetTiledMultiResDynamic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, isDynamic);
}
// Autogenerated method: OVRPlugin/OVRP_1_46_0.ovrp_SetTiledMultiResDynamic
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_46_0::ovrp_SetTiledMultiResDynamic(GlobalNamespace::OVRPlugin::Bool isDynamic) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_46_0::ovrp_SetTiledMultiResDynamic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_46_0", "ovrp_SetTiledMultiResDynamic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isDynamic)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, isDynamic);
}
// Autogenerated method: OVRPlugin/OVRP_1_46_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_46_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_46_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_46_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_46_0::ovrp_GetTiledMultiResDynamic
// Il2CppName: ovrp_GetTiledMultiResDynamic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_46_0::ovrp_GetTiledMultiResDynamic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_46_0*), "ovrp_GetTiledMultiResDynamic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_46_0::ovrp_SetTiledMultiResDynamic
// Il2CppName: ovrp_SetTiledMultiResDynamic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool)>(&OVRPlugin::OVRP_1_46_0::ovrp_SetTiledMultiResDynamic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_46_0*), "ovrp_SetTiledMultiResDynamic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_46_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_46_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_46_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_47_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_47_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_47_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_47_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_47_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_47_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_47_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_47_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_47_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_47_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_47_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_47_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_47_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_47_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_47_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin/OVRP_1_48_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_48_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/CameraIntrinsics
#include "GlobalNamespace/OVRPlugin_CameraIntrinsics.hpp"
// Including type: OVRPlugin/CameraExtrinsics
#include "GlobalNamespace/OVRPlugin_CameraExtrinsics.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_48_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_48_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_48_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_48_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_48_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_48_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_48_0.ovrp_SetExternalCameraProperties
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_48_0::ovrp_SetExternalCameraProperties(::Il2CppString* cameraName, GlobalNamespace::OVRPlugin::CameraIntrinsics& cameraIntrinsics, GlobalNamespace::OVRPlugin::CameraExtrinsics& cameraExtrinsics) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_48_0::ovrp_SetExternalCameraProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_48_0", "ovrp_SetExternalCameraProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraName), ::il2cpp_utils::ExtractType(cameraIntrinsics), ::il2cpp_utils::ExtractType(cameraExtrinsics)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cameraName, cameraIntrinsics, cameraExtrinsics);
}
// Autogenerated method: OVRPlugin/OVRP_1_48_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_48_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_48_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_48_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_48_0::ovrp_SetExternalCameraProperties
// Il2CppName: ovrp_SetExternalCameraProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(::Il2CppString*, GlobalNamespace::OVRPlugin::CameraIntrinsics&, GlobalNamespace::OVRPlugin::CameraExtrinsics&)>(&OVRPlugin::OVRP_1_48_0::ovrp_SetExternalCameraProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_48_0*), "ovrp_SetExternalCameraProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraIntrinsics&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraExtrinsics&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_48_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_48_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_48_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin/OVRP_1_49_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_49_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/ColorSpace
#include "GlobalNamespace/OVRPlugin_ColorSpace.hpp"
// Including type: OVRPlugin/CameraAnchorType
#include "GlobalNamespace/OVRPlugin_CameraAnchorType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_49_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_49_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_49_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_49_0", "version", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 OVRP_ANCHOR_NAME_SIZE
int GlobalNamespace::OVRPlugin::OVRP_1_49_0::_get_OVRP_ANCHOR_NAME_SIZE() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::_get_OVRP_ANCHOR_NAME_SIZE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRPlugin/OVRP_1_49_0", "OVRP_ANCHOR_NAME_SIZE"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 OVRP_ANCHOR_NAME_SIZE
void GlobalNamespace::OVRPlugin::OVRP_1_49_0::_set_OVRP_ANCHOR_NAME_SIZE(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::_set_OVRP_ANCHOR_NAME_SIZE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_49_0", "OVRP_ANCHOR_NAME_SIZE", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_SetClientColorDesc
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_SetClientColorDesc(GlobalNamespace::OVRPlugin::ColorSpace colorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_SetClientColorDesc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_SetClientColorDesc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorSpace)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, colorSpace);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_GetHmdColorDesc
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_GetHmdColorDesc(GlobalNamespace::OVRPlugin::ColorSpace& colorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_GetHmdColorDesc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_GetHmdColorDesc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorSpace)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, colorSpace);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_EncodeMrcFrameWithPoseTime
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameWithPoseTime(System::IntPtr rawBuffer, System::IntPtr audioDataPtr, int audioDataLen, int audioChannels, double timestamp, double poseTime, int& outSyncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameWithPoseTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_EncodeMrcFrameWithPoseTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawBuffer), ::il2cpp_utils::ExtractType(audioDataPtr), ::il2cpp_utils::ExtractType(audioDataLen), ::il2cpp_utils::ExtractType(audioChannels), ::il2cpp_utils::ExtractType(timestamp), ::il2cpp_utils::ExtractType(poseTime), ::il2cpp_utils::ExtractType(outSyncId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rawBuffer, audioDataPtr, audioDataLen, audioChannels, timestamp, poseTime, outSyncId);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime(System::IntPtr backgroundTextureHandle, System::IntPtr foregroundTextureHandle, System::IntPtr audioData, int audioDataLen, int audioChannels, double timestamp, double poseTime, int& outSyncId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(backgroundTextureHandle), ::il2cpp_utils::ExtractType(foregroundTextureHandle), ::il2cpp_utils::ExtractType(audioData), ::il2cpp_utils::ExtractType(audioDataLen), ::il2cpp_utils::ExtractType(audioChannels), ::il2cpp_utils::ExtractType(timestamp), ::il2cpp_utils::ExtractType(poseTime), ::il2cpp_utils::ExtractType(outSyncId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, backgroundTextureHandle, foregroundTextureHandle, audioData, audioDataLen, audioChannels, timestamp, poseTime, outSyncId);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_SetHeadsetControllerPose
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetHeadsetControllerPose(GlobalNamespace::OVRPlugin::Posef headsetPose, GlobalNamespace::OVRPlugin::Posef leftControllerPose, GlobalNamespace::OVRPlugin::Posef rightControllerPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetHeadsetControllerPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_SetHeadsetControllerPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headsetPose), ::il2cpp_utils::ExtractType(leftControllerPose), ::il2cpp_utils::ExtractType(rightControllerPose)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, headsetPose, leftControllerPose, rightControllerPose);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_EnumerateCameraAnchorHandles
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EnumerateCameraAnchorHandles(int& anchorCount, System::IntPtr& CameraAnchorHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_EnumerateCameraAnchorHandles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_EnumerateCameraAnchorHandles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorCount), ::il2cpp_utils::ExtractType(CameraAnchorHandle)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorCount, CameraAnchorHandle);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCurrentCameraAnchorHandle
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCurrentCameraAnchorHandle(System::IntPtr& anchorHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCurrentCameraAnchorHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCurrentCameraAnchorHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorHandle);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCameraAnchorName
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorName(System::IntPtr anchorHandle, ::Array<::Il2CppChar>* cameraName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCameraAnchorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(cameraName)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorHandle, cameraName);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCameraAnchorHandle
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorHandle(System::IntPtr anchorName, System::IntPtr& anchorHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCameraAnchorHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorName), ::il2cpp_utils::ExtractType(anchorHandle)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorName, anchorHandle);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCameraAnchorType
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorType(System::IntPtr anchorHandle, GlobalNamespace::OVRPlugin::CameraAnchorType& anchorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCameraAnchorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(anchorType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorHandle, anchorType);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_CreateCustomCameraAnchor
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_CreateCustomCameraAnchor(System::IntPtr anchorName, System::IntPtr& anchorHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_CreateCustomCameraAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_CreateCustomCameraAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorName), ::il2cpp_utils::ExtractType(anchorHandle)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorName, anchorHandle);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_DestroyCustomCameraAnchor
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_DestroyCustomCameraAnchor(System::IntPtr anchorHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_DestroyCustomCameraAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_DestroyCustomCameraAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorHandle);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCustomCameraAnchorPose
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCustomCameraAnchorPose(System::IntPtr anchorHandle, GlobalNamespace::OVRPlugin::Posef& pose) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCustomCameraAnchorPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCustomCameraAnchorPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(pose)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorHandle, pose);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_SetCustomCameraAnchorPose
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCustomCameraAnchorPose(System::IntPtr anchorHandle, GlobalNamespace::OVRPlugin::Posef pose) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCustomCameraAnchorPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_SetCustomCameraAnchorPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(pose)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorHandle, pose);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_GetCameraMinMaxDistance
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraMinMaxDistance(System::IntPtr anchorHandle, double& minDistance, double& maxDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_GetCameraMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(minDistance), ::il2cpp_utils::ExtractType(maxDistance)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorHandle, minDistance, maxDistance);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0.ovrp_Media_SetCameraMinMaxDistance
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCameraMinMaxDistance(System::IntPtr anchorHandle, double minDistance, double maxDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCameraMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", "ovrp_Media_SetCameraMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorHandle), ::il2cpp_utils::ExtractType(minDistance), ::il2cpp_utils::ExtractType(maxDistance)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, anchorHandle, minDistance, maxDistance);
}
// Autogenerated method: OVRPlugin/OVRP_1_49_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_49_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_49_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_49_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_SetClientColorDesc
// Il2CppName: ovrp_SetClientColorDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::ColorSpace)>(&OVRPlugin::OVRP_1_49_0::ovrp_SetClientColorDesc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_SetClientColorDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::ColorSpace>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_GetHmdColorDesc
// Il2CppName: ovrp_GetHmdColorDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::ColorSpace&)>(&OVRPlugin::OVRP_1_49_0::ovrp_GetHmdColorDesc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_GetHmdColorDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::ColorSpace&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameWithPoseTime
// Il2CppName: ovrp_Media_EncodeMrcFrameWithPoseTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, System::IntPtr, int, int, double, double, int&)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameWithPoseTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_EncodeMrcFrameWithPoseTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime
// Il2CppName: ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, System::IntPtr, System::IntPtr, int, int, double, double, int&)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_SetHeadsetControllerPose
// Il2CppName: ovrp_Media_SetHeadsetControllerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Posef, GlobalNamespace::OVRPlugin::Posef, GlobalNamespace::OVRPlugin::Posef)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_SetHeadsetControllerPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_SetHeadsetControllerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_EnumerateCameraAnchorHandles
// Il2CppName: ovrp_Media_EnumerateCameraAnchorHandles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(int&, System::IntPtr&)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_EnumerateCameraAnchorHandles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_EnumerateCameraAnchorHandles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCurrentCameraAnchorHandle
// Il2CppName: ovrp_Media_GetCurrentCameraAnchorHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr&)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCurrentCameraAnchorHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_GetCurrentCameraAnchorHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorName
// Il2CppName: ovrp_Media_GetCameraAnchorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, ::Array<::Il2CppChar>*)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_GetCameraAnchorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorHandle
// Il2CppName: ovrp_Media_GetCameraAnchorHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, System::IntPtr&)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_GetCameraAnchorHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorType
// Il2CppName: ovrp_Media_GetCameraAnchorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, GlobalNamespace::OVRPlugin::CameraAnchorType&)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraAnchorType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_GetCameraAnchorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::CameraAnchorType&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_CreateCustomCameraAnchor
// Il2CppName: ovrp_Media_CreateCustomCameraAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, System::IntPtr&)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_CreateCustomCameraAnchor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_CreateCustomCameraAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_DestroyCustomCameraAnchor
// Il2CppName: ovrp_Media_DestroyCustomCameraAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_DestroyCustomCameraAnchor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_DestroyCustomCameraAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCustomCameraAnchorPose
// Il2CppName: ovrp_Media_GetCustomCameraAnchorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, GlobalNamespace::OVRPlugin::Posef&)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCustomCameraAnchorPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_GetCustomCameraAnchorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCustomCameraAnchorPose
// Il2CppName: ovrp_Media_SetCustomCameraAnchorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, GlobalNamespace::OVRPlugin::Posef)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCustomCameraAnchorPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_SetCustomCameraAnchorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraMinMaxDistance
// Il2CppName: ovrp_Media_GetCameraMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, double&, double&)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_GetCameraMinMaxDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_GetCameraMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCameraMinMaxDistance
// Il2CppName: ovrp_Media_SetCameraMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, double, double)>(&OVRPlugin::OVRP_1_49_0::ovrp_Media_SetCameraMinMaxDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), "ovrp_Media_SetCameraMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_49_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_49_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_49_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_50_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_50_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_50_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_50_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_50_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_50_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_50_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_50_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_50_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_50_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_50_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_50_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_50_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_50_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_50_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_51_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_51_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_51_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_51_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_51_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_51_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_51_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_51_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_51_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_51_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_51_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_51_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_51_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_51_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_51_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_52_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_52_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_52_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_52_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_52_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_52_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_52_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_52_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_52_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_52_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_52_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_52_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_52_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_52_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_52_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_53_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_53_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_53_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_53_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_53_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_53_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_53_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_53_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_53_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_53_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_53_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_53_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_53_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_53_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_53_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_54_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_54_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_54_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_54_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_54_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_54_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_54_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_54_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_54_0.ovrp_Media_SetPlatformInitialized
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_54_0::ovrp_Media_SetPlatformInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_54_0::ovrp_Media_SetPlatformInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_54_0", "ovrp_Media_SetPlatformInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRPlugin/OVRP_1_54_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_54_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_54_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_54_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_54_0::ovrp_Media_SetPlatformInitialized
// Il2CppName: ovrp_Media_SetPlatformInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)()>(&OVRPlugin::OVRP_1_54_0::ovrp_Media_SetPlatformInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_54_0*), "ovrp_Media_SetPlatformInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_54_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_54_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_54_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_55_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_55_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/EventDataBuffer
#include "GlobalNamespace/OVRPlugin_EventDataBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_55_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_55_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_55_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_55_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_55_0.ovrp_GetSkeleton2
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetSkeleton2(GlobalNamespace::OVRPlugin::SkeletonType skeletonType, GlobalNamespace::OVRPlugin::Skeleton2Internal& skeleton) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetSkeleton2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_0", "ovrp_GetSkeleton2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(skeletonType), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Skeleton2Internal&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, skeletonType, skeleton);
}
// Autogenerated method: OVRPlugin/OVRP_1_55_0.ovrp_PollEvent
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_PollEvent(GlobalNamespace::OVRPlugin::EventDataBuffer& eventDataBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_PollEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_0", "ovrp_PollEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventDataBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, eventDataBuffer);
}
// Autogenerated method: OVRPlugin/OVRP_1_55_0.ovrp_GetNativeXrApiType
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetNativeXrApiType(GlobalNamespace::OVRPlugin::XrApi& xrApi) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetNativeXrApiType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_0", "ovrp_GetNativeXrApiType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::XrApi&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xrApi);
}
// Autogenerated method: OVRPlugin/OVRP_1_55_0.ovrp_GetNativeOpenXRHandles
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetNativeOpenXRHandles(uint64_t& xrInstance, uint64_t& xrSession) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_0::ovrp_GetNativeOpenXRHandles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_0", "ovrp_GetNativeOpenXRHandles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xrInstance, xrSession);
}
// Autogenerated method: OVRPlugin/OVRP_1_55_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_55_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_55_0::ovrp_GetSkeleton2
// Il2CppName: ovrp_GetSkeleton2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::SkeletonType, GlobalNamespace::OVRPlugin::Skeleton2Internal&)>(&OVRPlugin::OVRP_1_55_0::ovrp_GetSkeleton2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_55_0*), "ovrp_GetSkeleton2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::SkeletonType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Skeleton2Internal&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_55_0::ovrp_PollEvent
// Il2CppName: ovrp_PollEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::EventDataBuffer&)>(&OVRPlugin::OVRP_1_55_0::ovrp_PollEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_55_0*), "ovrp_PollEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::EventDataBuffer&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_55_0::ovrp_GetNativeXrApiType
// Il2CppName: ovrp_GetNativeXrApiType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::XrApi&)>(&OVRPlugin::OVRP_1_55_0::ovrp_GetNativeXrApiType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_55_0*), "ovrp_GetNativeXrApiType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::XrApi&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_55_0::ovrp_GetNativeOpenXRHandles
// Il2CppName: ovrp_GetNativeOpenXRHandles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(uint64_t&, uint64_t&)>(&OVRPlugin::OVRP_1_55_0::ovrp_GetNativeOpenXRHandles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_55_0*), "ovrp_GetNativeOpenXRHandles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_55_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_55_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_55_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_55_1
#include "GlobalNamespace/OVRPlugin_OVRP_1_55_1.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/EventType
#include "GlobalNamespace/OVRPlugin_EventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_55_1::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_1::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_55_1", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_55_1::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_1::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_55_1", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_55_1.ovrp_PollEvent2
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_55_1::ovrp_PollEvent2(GlobalNamespace::OVRPlugin::EventType& eventType, System::IntPtr& eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_1::ovrp_PollEvent2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_1", "ovrp_PollEvent2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, eventType, eventData);
}
// Autogenerated method: OVRPlugin/OVRP_1_55_1..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_55_1::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_55_1::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_55_1", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_55_1::ovrp_PollEvent2
// Il2CppName: ovrp_PollEvent2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::EventType&, System::IntPtr&)>(&OVRPlugin::OVRP_1_55_1::ovrp_PollEvent2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_55_1*), "ovrp_PollEvent2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::EventType&>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_55_1::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_55_1::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_55_1*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_56_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_56_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_56_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_56_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_56_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_56_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_56_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_56_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_56_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_56_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_56_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_56_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_56_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_56_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_56_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_57_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_57_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
// Including type: OVRPlugin/Result
#include "GlobalNamespace/OVRPlugin_Result.hpp"
// Including type: OVRPlugin/Media/PlatformCameraMode
#include "GlobalNamespace/OVRPlugin_Media_PlatformCameraMode.hpp"
// Including type: OVRPlugin/Bool
#include "GlobalNamespace/OVRPlugin_Bool.hpp"
// Including type: OVRPlugin/Vector2f
#include "GlobalNamespace/OVRPlugin_Vector2f.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_57_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_57_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_57_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_57_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_57_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_57_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0.ovrp_Media_GetPlatformCameraMode
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_Media_GetPlatformCameraMode(GlobalNamespace::OVRPlugin::Media::PlatformCameraMode& platformCameraMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_Media_GetPlatformCameraMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", "ovrp_Media_GetPlatformCameraMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::PlatformCameraMode&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, platformCameraMode);
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0.ovrp_Media_SetPlatformCameraMode
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_Media_SetPlatformCameraMode(GlobalNamespace::OVRPlugin::Media::PlatformCameraMode platformCameraMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_Media_SetPlatformCameraMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", "ovrp_Media_SetPlatformCameraMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(platformCameraMode)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, platformCameraMode);
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0.ovrp_SetEyeFovPremultipliedAlphaMode
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_SetEyeFovPremultipliedAlphaMode(GlobalNamespace::OVRPlugin::Bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_SetEyeFovPremultipliedAlphaMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", "ovrp_SetEyeFovPremultipliedAlphaMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, enabled);
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0.ovrp_GetEyeFovPremultipliedAlphaMode
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_GetEyeFovPremultipliedAlphaMode(GlobalNamespace::OVRPlugin::Bool& enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_GetEyeFovPremultipliedAlphaMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", "ovrp_GetEyeFovPremultipliedAlphaMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, enabled);
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0.ovrp_SetKeyboardOverlayUV
GlobalNamespace::OVRPlugin::Result GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_SetKeyboardOverlayUV(GlobalNamespace::OVRPlugin::Vector2f uv) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_57_0::ovrp_SetKeyboardOverlayUV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", "ovrp_SetKeyboardOverlayUV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uv)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Result, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, uv);
}
// Autogenerated method: OVRPlugin/OVRP_1_57_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_57_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_57_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_57_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_57_0::ovrp_Media_GetPlatformCameraMode
// Il2CppName: ovrp_Media_GetPlatformCameraMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Media::PlatformCameraMode&)>(&OVRPlugin::OVRP_1_57_0::ovrp_Media_GetPlatformCameraMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_57_0*), "ovrp_Media_GetPlatformCameraMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::PlatformCameraMode&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_57_0::ovrp_Media_SetPlatformCameraMode
// Il2CppName: ovrp_Media_SetPlatformCameraMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Media::PlatformCameraMode)>(&OVRPlugin::OVRP_1_57_0::ovrp_Media_SetPlatformCameraMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_57_0*), "ovrp_Media_SetPlatformCameraMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_57_0::ovrp_SetEyeFovPremultipliedAlphaMode
// Il2CppName: ovrp_SetEyeFovPremultipliedAlphaMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool)>(&OVRPlugin::OVRP_1_57_0::ovrp_SetEyeFovPremultipliedAlphaMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_57_0*), "ovrp_SetEyeFovPremultipliedAlphaMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_57_0::ovrp_GetEyeFovPremultipliedAlphaMode
// Il2CppName: ovrp_GetEyeFovPremultipliedAlphaMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_57_0::ovrp_GetEyeFovPremultipliedAlphaMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_57_0*), "ovrp_GetEyeFovPremultipliedAlphaMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_57_0::ovrp_SetKeyboardOverlayUV
// Il2CppName: ovrp_SetKeyboardOverlayUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Vector2f)>(&OVRPlugin::OVRP_1_57_0::ovrp_SetKeyboardOverlayUV)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_57_0*), "ovrp_SetKeyboardOverlayUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Vector2f>()});
  }
};
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_57_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_57_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_57_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_58_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_58_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_58_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_58_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_58_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_58_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_58_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_58_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_58_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_58_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_58_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_58_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_58_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_58_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_58_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_59_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_59_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_59_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_59_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_59_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_59_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_59_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_59_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_59_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_59_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_59_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_59_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_59_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_59_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_59_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRPlugin/OVRP_1_60_0
#include "GlobalNamespace/OVRPlugin_OVRP_1_60_0.hpp"
// Including type: System.Version
#include "System/Version.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Version version
System::Version* GlobalNamespace::OVRPlugin::OVRP_1_60_0::_get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_60_0::_get_version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Version*>("", "OVRPlugin/OVRP_1_60_0", "version"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Version version
void GlobalNamespace::OVRPlugin::OVRP_1_60_0::_set_version(System::Version* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_60_0::_set_version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRPlugin/OVRP_1_60_0", "version", value));
}
// Autogenerated method: OVRPlugin/OVRP_1_60_0..cctor
void GlobalNamespace::OVRPlugin::OVRP_1_60_0::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::OVRP_1_60_0::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPlugin/OVRP_1_60_0", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRPlugin::OVRP_1_60_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_60_0::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_60_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRProfile
#include "GlobalNamespace/OVRProfile.hpp"
// Including type: OVRProfile/State
#include "GlobalNamespace/OVRProfile_State.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRProfile.get_id
::Il2CppString* GlobalNamespace::OVRProfile::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_userName
::Il2CppString* GlobalNamespace::OVRProfile::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::get_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_locale
::Il2CppString* GlobalNamespace::OVRProfile::get_locale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::get_locale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_locale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_ipd
float GlobalNamespace::OVRProfile::get_ipd() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::get_ipd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ipd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_eyeHeight
float GlobalNamespace::OVRProfile::get_eyeHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::get_eyeHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyeHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_eyeDepth
float GlobalNamespace::OVRProfile::get_eyeDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::get_eyeDepth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyeDepth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_neckHeight
float GlobalNamespace::OVRProfile::get_neckHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::get_neckHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_neckHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRProfile.get_state
GlobalNamespace::OVRProfile::State GlobalNamespace::OVRProfile::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::get_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRProfile::State, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRProfile::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OVRProfile::*)()>(&OVRProfile::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRProfile*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRProfile::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OVRProfile::*)()>(&OVRProfile::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRProfile*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRProfile::get_locale
// Il2CppName: get_locale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OVRProfile::*)()>(&OVRProfile::get_locale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRProfile*), "get_locale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRProfile::get_ipd
// Il2CppName: get_ipd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRProfile::*)()>(&OVRProfile::get_ipd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRProfile*), "get_ipd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRProfile::get_eyeHeight
// Il2CppName: get_eyeHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRProfile::*)()>(&OVRProfile::get_eyeHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRProfile*), "get_eyeHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRProfile::get_eyeDepth
// Il2CppName: get_eyeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRProfile::*)()>(&OVRProfile::get_eyeDepth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRProfile*), "get_eyeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRProfile::get_neckHeight
// Il2CppName: get_neckHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRProfile::*)()>(&OVRProfile::get_neckHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRProfile*), "get_neckHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRProfile::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRProfile::State (OVRProfile::*)()>(&OVRProfile::get_state)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRProfile*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRProfile::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRProfile::*)()>(&OVRProfile::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRProfile*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRProfile::*)()>(&OVRProfile::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRProfile*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRProfile/State
#include "GlobalNamespace/OVRProfile_State.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRProfile/State NOT_TRIGGERED
GlobalNamespace::OVRProfile::State GlobalNamespace::OVRProfile::State::_get_NOT_TRIGGERED() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::State::_get_NOT_TRIGGERED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRProfile::State>("", "OVRProfile/State", "NOT_TRIGGERED"));
}
// Autogenerated static field setter
// Set static field: static public OVRProfile/State NOT_TRIGGERED
void GlobalNamespace::OVRProfile::State::_set_NOT_TRIGGERED(GlobalNamespace::OVRProfile::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::State::_set_NOT_TRIGGERED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRProfile/State", "NOT_TRIGGERED", value));
}
// Autogenerated static field getter
// Get static field: static public OVRProfile/State LOADING
GlobalNamespace::OVRProfile::State GlobalNamespace::OVRProfile::State::_get_LOADING() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::State::_get_LOADING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRProfile::State>("", "OVRProfile/State", "LOADING"));
}
// Autogenerated static field setter
// Set static field: static public OVRProfile/State LOADING
void GlobalNamespace::OVRProfile::State::_set_LOADING(GlobalNamespace::OVRProfile::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::State::_set_LOADING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRProfile/State", "LOADING", value));
}
// Autogenerated static field getter
// Get static field: static public OVRProfile/State READY
GlobalNamespace::OVRProfile::State GlobalNamespace::OVRProfile::State::_get_READY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::State::_get_READY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRProfile::State>("", "OVRProfile/State", "READY"));
}
// Autogenerated static field setter
// Set static field: static public OVRProfile/State READY
void GlobalNamespace::OVRProfile::State::_set_READY(GlobalNamespace::OVRProfile::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::State::_set_READY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRProfile/State", "READY", value));
}
// Autogenerated static field getter
// Get static field: static public OVRProfile/State ERROR
GlobalNamespace::OVRProfile::State GlobalNamespace::OVRProfile::State::_get_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::State::_get_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRProfile::State>("", "OVRProfile/State", "ERROR"));
}
// Autogenerated static field setter
// Set static field: static public OVRProfile/State ERROR
void GlobalNamespace::OVRProfile::State::_set_ERROR(GlobalNamespace::OVRProfile::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRProfile::State::_set_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRProfile/State", "ERROR", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRResources
#include "GlobalNamespace/OVRResources.hpp"
// Including type: OVRResources/<>c__DisplayClass2_0
#include "GlobalNamespace/OVRResources_--c__DisplayClass2_0.hpp"
// Including type: OVRResources/<>c__DisplayClass3_0`1
#include "GlobalNamespace/OVRResources_--c__DisplayClass3_0_1.hpp"
// Including type: UnityEngine.AssetBundle
#include "UnityEngine/AssetBundle.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.AssetBundle resourceBundle
UnityEngine::AssetBundle* GlobalNamespace::OVRResources::_get_resourceBundle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRResources::_get_resourceBundle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::AssetBundle*>("", "OVRResources", "resourceBundle"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.AssetBundle resourceBundle
void GlobalNamespace::OVRResources::_set_resourceBundle(UnityEngine::AssetBundle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRResources::_set_resourceBundle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRResources", "resourceBundle", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.String> assetNames
System::Collections::Generic::List_1<::Il2CppString*>* GlobalNamespace::OVRResources::_get_assetNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRResources::_get_assetNames");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<::Il2CppString*>*>("", "OVRResources", "assetNames"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.String> assetNames
void GlobalNamespace::OVRResources::_set_assetNames(System::Collections::Generic::List_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRResources::_set_assetNames");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRResources", "assetNames", value));
}
// Autogenerated method: OVRResources.Load
UnityEngine::Object* GlobalNamespace::OVRResources::Load(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRResources::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRResources", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: OVRResources.SetResourceBundle
void GlobalNamespace::OVRResources::SetResourceBundle(UnityEngine::AssetBundle* bundle) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRResources::SetResourceBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRResources", "SetResourceBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bundle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bundle);
}
// Writing MetadataGetter for method: OVRResources::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(::Il2CppString*)>(&OVRResources::Load)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRResources*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRResources::Load
// Il2CppName: Load
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: OVRResources::SetResourceBundle
// Il2CppName: SetResourceBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::AssetBundle*)>(&OVRResources::SetResourceBundle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRResources*), "SetResourceBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AssetBundle*>()});
  }
};
// Writing MetadataGetter for method: OVRResources::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRResources::*)()>(&OVRResources::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRResources*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRResources::*)()>(&OVRResources::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRResources*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRResources/<>c__DisplayClass2_0
#include "GlobalNamespace/OVRResources_--c__DisplayClass2_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRResources/<>c__DisplayClass2_0.<Load>b__0
bool GlobalNamespace::OVRResources::$$c__DisplayClass2_0::$Load$b__0(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRResources::$$c__DisplayClass2_0::<Load>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Load>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, s);
}
// Writing MetadataGetter for method: OVRResources::$$c__DisplayClass2_0::$Load$b__0
// Il2CppName: <Load>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRResources::$$c__DisplayClass2_0::*)(::Il2CppString*)>(&OVRResources::$$c__DisplayClass2_0::$Load$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRResources::$$c__DisplayClass2_0*), "<Load>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRResources::$$c__DisplayClass2_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRResources::$$c__DisplayClass2_0::*)()>(&OVRResources::$$c__DisplayClass2_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRResources::$$c__DisplayClass2_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRResources::$$c__DisplayClass2_0::*)()>(&OVRResources::$$c__DisplayClass2_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRResources::$$c__DisplayClass2_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRSceneLoader
#include "GlobalNamespace/OVRSceneLoader.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: OVRSceneLoader/<DelayCanvasPosUpdate>d__24
#include "GlobalNamespace/OVRSceneLoader_-DelayCanvasPosUpdate-d__24.hpp"
// Including type: OVRSceneLoader/<onCheckSceneCoroutine>d__25
#include "GlobalNamespace/OVRSceneLoader_-onCheckSceneCoroutine-d__25.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.AssetBundle
#include "UnityEngine/AssetBundle.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String externalStoragePath
::Il2CppString* GlobalNamespace::OVRSceneLoader::_get_externalStoragePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::_get_externalStoragePath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OVRSceneLoader", "externalStoragePath"));
}
// Autogenerated static field setter
// Set static field: static public System.String externalStoragePath
void GlobalNamespace::OVRSceneLoader::_set_externalStoragePath(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::_set_externalStoragePath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSceneLoader", "externalStoragePath", value));
}
// Autogenerated static field getter
// Get static field: static public System.String sceneLoadDataName
::Il2CppString* GlobalNamespace::OVRSceneLoader::_get_sceneLoadDataName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::_get_sceneLoadDataName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OVRSceneLoader", "sceneLoadDataName"));
}
// Autogenerated static field setter
// Set static field: static public System.String sceneLoadDataName
void GlobalNamespace::OVRSceneLoader::_set_sceneLoadDataName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::_set_sceneLoadDataName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSceneLoader", "sceneLoadDataName", value));
}
// Autogenerated static field getter
// Get static field: static public System.String resourceBundleName
::Il2CppString* GlobalNamespace::OVRSceneLoader::_get_resourceBundleName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::_get_resourceBundleName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OVRSceneLoader", "resourceBundleName"));
}
// Autogenerated static field setter
// Set static field: static public System.String resourceBundleName
void GlobalNamespace::OVRSceneLoader::_set_resourceBundleName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::_set_resourceBundleName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSceneLoader", "resourceBundleName", value));
}
// Autogenerated method: OVRSceneLoader.Awake
void GlobalNamespace::OVRSceneLoader::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.Start
void GlobalNamespace::OVRSceneLoader::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.LoadScene
void GlobalNamespace::OVRSceneLoader::LoadScene(GlobalNamespace::OVRSceneLoader::SceneInfo sceneInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::LoadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sceneInfo);
}
// Autogenerated method: OVRSceneLoader.LoadSceneOperation_completed
void GlobalNamespace::OVRSceneLoader::LoadSceneOperation_completed(UnityEngine::AsyncOperation* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::LoadSceneOperation_completed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSceneOperation_completed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: OVRSceneLoader.Update
void GlobalNamespace::OVRSceneLoader::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.UpdateCanvasPosition
void GlobalNamespace::OVRSceneLoader::UpdateCanvasPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::UpdateCanvasPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCanvasPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.GetSceneInfo
GlobalNamespace::OVRSceneLoader::SceneInfo GlobalNamespace::OVRSceneLoader::GetSceneInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::GetSceneInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSceneInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSceneLoader::SceneInfo, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.DelayCanvasPosUpdate
System::Collections::IEnumerator* GlobalNamespace::OVRSceneLoader::DelayCanvasPosUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::DelayCanvasPosUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DelayCanvasPosUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.onCheckSceneCoroutine
System::Collections::IEnumerator* GlobalNamespace::OVRSceneLoader::onCheckSceneCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::onCheckSceneCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "onCheckSceneCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader.DestroyAllGameObjects
void GlobalNamespace::OVRSceneLoader::DestroyAllGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::DestroyAllGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyAllGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRSceneLoader::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::*)()>(&OVRSceneLoader::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::*)()>(&OVRSceneLoader::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::LoadScene
// Il2CppName: LoadScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::*)(GlobalNamespace::OVRSceneLoader::SceneInfo)>(&OVRSceneLoader::LoadScene)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), "LoadScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRSceneLoader::SceneInfo>()});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::LoadSceneOperation_completed
// Il2CppName: LoadSceneOperation_completed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::*)(UnityEngine::AsyncOperation*)>(&OVRSceneLoader::LoadSceneOperation_completed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), "LoadSceneOperation_completed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AsyncOperation*>()});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::*)()>(&OVRSceneLoader::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::UpdateCanvasPosition
// Il2CppName: UpdateCanvasPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::*)()>(&OVRSceneLoader::UpdateCanvasPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), "UpdateCanvasPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::GetSceneInfo
// Il2CppName: GetSceneInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRSceneLoader::SceneInfo (OVRSceneLoader::*)()>(&OVRSceneLoader::GetSceneInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), "GetSceneInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::DelayCanvasPosUpdate
// Il2CppName: DelayCanvasPosUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (OVRSceneLoader::*)()>(&OVRSceneLoader::DelayCanvasPosUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), "DelayCanvasPosUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::onCheckSceneCoroutine
// Il2CppName: onCheckSceneCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (OVRSceneLoader::*)()>(&OVRSceneLoader::onCheckSceneCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), "onCheckSceneCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::DestroyAllGameObjects
// Il2CppName: DestroyAllGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::*)()>(&OVRSceneLoader::DestroyAllGameObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), "DestroyAllGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::*)()>(&OVRSceneLoader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::*)()>(&OVRSceneLoader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRSceneLoader/SceneInfo
#include "GlobalNamespace/OVRSceneLoader.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: OVRSceneLoader::SceneInfo::SceneInfo
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::SceneInfo::*)(System::Collections::Generic::List_1<::Il2CppString*>*, int64_t)>(&OVRSceneLoader::SceneInfo::SceneInfo<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::SceneInfo), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::SceneInfo::*)(System::Collections::Generic::List_1<::Il2CppString*>*, int64_t)>(&OVRSceneLoader::SceneInfo::SceneInfo<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::SceneInfo), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRSceneLoader/<DelayCanvasPosUpdate>d__24
#include "GlobalNamespace/OVRSceneLoader_-DelayCanvasPosUpdate-d__24.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSceneLoader/<DelayCanvasPosUpdate>d__24.System.IDisposable.Dispose
void GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<DelayCanvasPosUpdate>d__24.MoveNext
bool GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<DelayCanvasPosUpdate>d__24.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<DelayCanvasPosUpdate>d__24.System.Collections.IEnumerator.Reset
void GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<DelayCanvasPosUpdate>d__24.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRSceneLoader::$DelayCanvasPosUpdate$d__24::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::$DelayCanvasPosUpdate$d__24::*)(int)>(&OVRSceneLoader::$DelayCanvasPosUpdate$d__24::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::$DelayCanvasPosUpdate$d__24::*)(int)>(&OVRSceneLoader::$DelayCanvasPosUpdate$d__24::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::$DelayCanvasPosUpdate$d__24::*)()>(&OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::$DelayCanvasPosUpdate$d__24::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRSceneLoader::$DelayCanvasPosUpdate$d__24::*)()>(&OVRSceneLoader::$DelayCanvasPosUpdate$d__24::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (OVRSceneLoader::$DelayCanvasPosUpdate$d__24::*)()>(&OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::$DelayCanvasPosUpdate$d__24::*)()>(&OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (OVRSceneLoader::$DelayCanvasPosUpdate$d__24::*)()>(&OVRSceneLoader::$DelayCanvasPosUpdate$d__24::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$DelayCanvasPosUpdate$d__24*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRSceneLoader/<onCheckSceneCoroutine>d__25
#include "GlobalNamespace/OVRSceneLoader_-onCheckSceneCoroutine-d__25.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSceneLoader/<onCheckSceneCoroutine>d__25.System.IDisposable.Dispose
void GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<onCheckSceneCoroutine>d__25.MoveNext
bool GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<onCheckSceneCoroutine>d__25.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<onCheckSceneCoroutine>d__25.System.Collections.IEnumerator.Reset
void GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSceneLoader/<onCheckSceneCoroutine>d__25.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRSceneLoader::$onCheckSceneCoroutine$d__25::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::$onCheckSceneCoroutine$d__25::*)(int)>(&OVRSceneLoader::$onCheckSceneCoroutine$d__25::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$onCheckSceneCoroutine$d__25*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::$onCheckSceneCoroutine$d__25::*)(int)>(&OVRSceneLoader::$onCheckSceneCoroutine$d__25::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$onCheckSceneCoroutine$d__25*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::$onCheckSceneCoroutine$d__25::*)()>(&OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$onCheckSceneCoroutine$d__25*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::$onCheckSceneCoroutine$d__25::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRSceneLoader::$onCheckSceneCoroutine$d__25::*)()>(&OVRSceneLoader::$onCheckSceneCoroutine$d__25::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$onCheckSceneCoroutine$d__25*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (OVRSceneLoader::$onCheckSceneCoroutine$d__25::*)()>(&OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$onCheckSceneCoroutine$d__25*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRSceneLoader::$onCheckSceneCoroutine$d__25::*)()>(&OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$onCheckSceneCoroutine$d__25*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (OVRSceneLoader::$onCheckSceneCoroutine$d__25::*)()>(&OVRSceneLoader::$onCheckSceneCoroutine$d__25::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRSceneLoader::$onCheckSceneCoroutine$d__25*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRTracker
#include "GlobalNamespace/OVRTracker.hpp"
// Including type: OVRTracker/Frustum
#include "GlobalNamespace/OVRTracker_Frustum.hpp"
// Including type: OVRPose
#include "GlobalNamespace/OVRPose.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRTracker.get_isPresent
bool GlobalNamespace::OVRTracker::get_isPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRTracker::get_isPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRTracker.get_isPositionTracked
bool GlobalNamespace::OVRTracker::get_isPositionTracked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRTracker::get_isPositionTracked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPositionTracked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRTracker.get_isEnabled
bool GlobalNamespace::OVRTracker::get_isEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRTracker::get_isEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRTracker.set_isEnabled
void GlobalNamespace::OVRTracker::set_isEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRTracker::set_isEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRTracker.get_count
int GlobalNamespace::OVRTracker::get_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRTracker::get_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRTracker.GetFrustum
GlobalNamespace::OVRTracker::Frustum GlobalNamespace::OVRTracker::GetFrustum(int tracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRTracker::GetFrustum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrustum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tracker)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRTracker::Frustum, false>(this, ___internal__method, tracker);
}
// Autogenerated method: OVRTracker.GetPose
GlobalNamespace::OVRPose GlobalNamespace::OVRTracker::GetPose(int tracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRTracker::GetPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tracker)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPose, false>(this, ___internal__method, tracker);
}
// Autogenerated method: OVRTracker.GetPoseValid
bool GlobalNamespace::OVRTracker::GetPoseValid(int tracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRTracker::GetPoseValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoseValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tracker)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, tracker);
}
// Autogenerated method: OVRTracker.GetPresent
bool GlobalNamespace::OVRTracker::GetPresent(int tracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRTracker::GetPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tracker)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, tracker);
}
// Writing MetadataGetter for method: OVRTracker::get_isPresent
// Il2CppName: get_isPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRTracker::*)()>(&OVRTracker::get_isPresent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), "get_isPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRTracker::get_isPositionTracked
// Il2CppName: get_isPositionTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRTracker::*)()>(&OVRTracker::get_isPositionTracked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), "get_isPositionTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRTracker::get_isEnabled
// Il2CppName: get_isEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRTracker::*)()>(&OVRTracker::get_isEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), "get_isEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRTracker::set_isEnabled
// Il2CppName: set_isEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRTracker::*)(bool)>(&OVRTracker::set_isEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), "set_isEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRTracker::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OVRTracker::*)()>(&OVRTracker::get_count)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRTracker::GetFrustum
// Il2CppName: GetFrustum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRTracker::Frustum (OVRTracker::*)(int)>(&OVRTracker::GetFrustum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), "GetFrustum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRTracker::GetPose
// Il2CppName: GetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPose (OVRTracker::*)(int)>(&OVRTracker::GetPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), "GetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRTracker::GetPoseValid
// Il2CppName: GetPoseValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRTracker::*)(int)>(&OVRTracker::GetPoseValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), "GetPoseValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRTracker::GetPresent
// Il2CppName: GetPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRTracker::*)(int)>(&OVRTracker::GetPresent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), "GetPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRTracker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRTracker::*)()>(&OVRTracker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRTracker::*)()>(&OVRTracker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTracker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRAudioSourceTest
#include "GlobalNamespace/OVRAudioSourceTest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRAudioSourceTest.Start
void GlobalNamespace::OVRAudioSourceTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRAudioSourceTest::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRAudioSourceTest.Update
void GlobalNamespace::OVRAudioSourceTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRAudioSourceTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRAudioSourceTest::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRAudioSourceTest::*)()>(&OVRAudioSourceTest::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRAudioSourceTest*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRAudioSourceTest::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRAudioSourceTest::*)()>(&OVRAudioSourceTest::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRAudioSourceTest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRAudioSourceTest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRAudioSourceTest::*)()>(&OVRAudioSourceTest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRAudioSourceTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRAudioSourceTest::*)()>(&OVRAudioSourceTest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRAudioSourceTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRAutoDestroyInMRC
#include "GlobalNamespace/OVRAutoDestroyInMRC.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRAutoDestroyInMRC.Start
void GlobalNamespace::OVRAutoDestroyInMRC::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRAutoDestroyInMRC::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRAutoDestroyInMRC.Update
void GlobalNamespace::OVRAutoDestroyInMRC::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRAutoDestroyInMRC::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRAutoDestroyInMRC::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRAutoDestroyInMRC::*)()>(&OVRAutoDestroyInMRC::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRAutoDestroyInMRC*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRAutoDestroyInMRC::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRAutoDestroyInMRC::*)()>(&OVRAutoDestroyInMRC::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRAutoDestroyInMRC*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRAutoDestroyInMRC::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRAutoDestroyInMRC::*)()>(&OVRAutoDestroyInMRC::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRAutoDestroyInMRC*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRAutoDestroyInMRC::*)()>(&OVRAutoDestroyInMRC::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRAutoDestroyInMRC*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRChromaticAberration
#include "GlobalNamespace/OVRChromaticAberration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRChromaticAberration.Start
void GlobalNamespace::OVRChromaticAberration::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRChromaticAberration::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRChromaticAberration.Update
void GlobalNamespace::OVRChromaticAberration::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRChromaticAberration::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRChromaticAberration::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRChromaticAberration::*)()>(&OVRChromaticAberration::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRChromaticAberration*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRChromaticAberration::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRChromaticAberration::*)()>(&OVRChromaticAberration::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRChromaticAberration*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRChromaticAberration::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRChromaticAberration::*)()>(&OVRChromaticAberration::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRChromaticAberration*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRChromaticAberration::*)()>(&OVRChromaticAberration::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRChromaticAberration*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRControllerHelper
#include "GlobalNamespace/OVRControllerHelper.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRControllerHelper.Start
void GlobalNamespace::OVRControllerHelper::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerHelper::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerHelper.Update
void GlobalNamespace::OVRControllerHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRControllerHelper::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerHelper::*)()>(&OVRControllerHelper::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerHelper*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerHelper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerHelper::*)()>(&OVRControllerHelper::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerHelper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerHelper::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerHelper::*)()>(&OVRControllerHelper::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerHelper::*)()>(&OVRControllerHelper::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRControllerHelper/ControllerType
#include "GlobalNamespace/OVRControllerHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRControllerHelper/ControllerType QuestAndRiftS
GlobalNamespace::OVRControllerHelper::ControllerType GlobalNamespace::OVRControllerHelper::ControllerType::_get_QuestAndRiftS() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerHelper::ControllerType::_get_QuestAndRiftS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerHelper::ControllerType>("", "OVRControllerHelper/ControllerType", "QuestAndRiftS"));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerHelper/ControllerType QuestAndRiftS
void GlobalNamespace::OVRControllerHelper::ControllerType::_set_QuestAndRiftS(GlobalNamespace::OVRControllerHelper::ControllerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerHelper::ControllerType::_set_QuestAndRiftS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRControllerHelper/ControllerType", "QuestAndRiftS", value));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerHelper/ControllerType Rift
GlobalNamespace::OVRControllerHelper::ControllerType GlobalNamespace::OVRControllerHelper::ControllerType::_get_Rift() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerHelper::ControllerType::_get_Rift");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerHelper::ControllerType>("", "OVRControllerHelper/ControllerType", "Rift"));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerHelper/ControllerType Rift
void GlobalNamespace::OVRControllerHelper::ControllerType::_set_Rift(GlobalNamespace::OVRControllerHelper::ControllerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerHelper::ControllerType::_set_Rift");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRControllerHelper/ControllerType", "Rift", value));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerHelper/ControllerType Quest2
GlobalNamespace::OVRControllerHelper::ControllerType GlobalNamespace::OVRControllerHelper::ControllerType::_get_Quest2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerHelper::ControllerType::_get_Quest2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerHelper::ControllerType>("", "OVRControllerHelper/ControllerType", "Quest2"));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerHelper/ControllerType Quest2
void GlobalNamespace::OVRControllerHelper::ControllerType::_set_Quest2(GlobalNamespace::OVRControllerHelper::ControllerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerHelper::ControllerType::_set_Quest2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRControllerHelper/ControllerType", "Quest2", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRControllerTest
#include "GlobalNamespace/OVRControllerTest.hpp"
// Including type: OVRControllerTest/BoolMonitor
#include "GlobalNamespace/OVRControllerTest_BoolMonitor.hpp"
// Including type: OVRControllerTest/<>c
#include "GlobalNamespace/OVRControllerTest_--c.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String prevConnected
::Il2CppString* GlobalNamespace::OVRControllerTest::_get_prevConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::_get_prevConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OVRControllerTest", "prevConnected"));
}
// Autogenerated static field setter
// Set static field: static private System.String prevConnected
void GlobalNamespace::OVRControllerTest::_set_prevConnected(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::_set_prevConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRControllerTest", "prevConnected", value));
}
// Autogenerated static field getter
// Get static field: static private OVRControllerTest/BoolMonitor controllers
GlobalNamespace::OVRControllerTest::BoolMonitor* GlobalNamespace::OVRControllerTest::_get_controllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::_get_controllers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor*>("", "OVRControllerTest", "controllers"));
}
// Autogenerated static field setter
// Set static field: static private OVRControllerTest/BoolMonitor controllers
void GlobalNamespace::OVRControllerTest::_set_controllers(GlobalNamespace::OVRControllerTest::BoolMonitor* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::_set_controllers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRControllerTest", "controllers", value));
}
// Autogenerated method: OVRControllerTest.Start
void GlobalNamespace::OVRControllerTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest.Update
void GlobalNamespace::OVRControllerTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest..cctor
void GlobalNamespace::OVRControllerTest::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRControllerTest", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRControllerTest::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::*)()>(&OVRControllerTest::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::*)()>(&OVRControllerTest::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::*)()>(&OVRControllerTest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::*)()>(&OVRControllerTest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRControllerTest::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRControllerTest/BoolMonitor
#include "GlobalNamespace/OVRControllerTest_BoolMonitor.hpp"
// Including type: OVRControllerTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRControllerTest_BoolMonitor_BoolGenerator.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRControllerTest/BoolMonitor.Update
void GlobalNamespace::OVRControllerTest::BoolMonitor::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::BoolMonitor::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/BoolMonitor.AppendToStringBuilder
void GlobalNamespace::OVRControllerTest::BoolMonitor::AppendToStringBuilder(System::Text::StringBuilder*& sb) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::BoolMonitor::AppendToStringBuilder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendToStringBuilder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sb);
}
// Writing MetadataGetter for method: OVRControllerTest::BoolMonitor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::BoolMonitor::*)(::Il2CppString*, GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*, float)>(&OVRControllerTest::BoolMonitor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::BoolMonitor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::BoolMonitor::*)(::Il2CppString*, GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*, float)>(&OVRControllerTest::BoolMonitor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::BoolMonitor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::BoolMonitor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::BoolMonitor::*)()>(&OVRControllerTest::BoolMonitor::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::BoolMonitor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::BoolMonitor::AppendToStringBuilder
// Il2CppName: AppendToStringBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::BoolMonitor::*)(System::Text::StringBuilder*&)>(&OVRControllerTest::BoolMonitor::AppendToStringBuilder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::BoolMonitor*), "AppendToStringBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRControllerTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRControllerTest_BoolMonitor_BoolGenerator.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRControllerTest/BoolMonitor/BoolGenerator.Invoke
bool GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/BoolMonitor/BoolGenerator.BeginInvoke
System::IAsyncResult* GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVRControllerTest/BoolMonitor/BoolGenerator.EndInvoke
bool GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: OVRControllerTest::BoolMonitor::BoolGenerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::BoolMonitor::BoolGenerator::*)(::Il2CppObject*, System::IntPtr)>(&OVRControllerTest::BoolMonitor::BoolGenerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::BoolMonitor::BoolGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::BoolMonitor::BoolGenerator::*)(::Il2CppObject*, System::IntPtr)>(&OVRControllerTest::BoolMonitor::BoolGenerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::BoolMonitor::BoolGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::BoolMonitor::BoolGenerator::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::BoolMonitor::BoolGenerator::*)()>(&OVRControllerTest::BoolMonitor::BoolGenerator::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::BoolMonitor::BoolGenerator*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::BoolMonitor::BoolGenerator::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (OVRControllerTest::BoolMonitor::BoolGenerator::*)(System::AsyncCallback*, ::Il2CppObject*)>(&OVRControllerTest::BoolMonitor::BoolGenerator::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::BoolMonitor::BoolGenerator*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::BoolMonitor::BoolGenerator::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::BoolMonitor::BoolGenerator::*)(System::IAsyncResult*)>(&OVRControllerTest::BoolMonitor::BoolGenerator::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::BoolMonitor::BoolGenerator*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRControllerTest/<>c
#include "GlobalNamespace/OVRControllerTest_--c.hpp"
// Including type: OVRControllerTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRControllerTest_BoolMonitor_BoolGenerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly OVRControllerTest/<>c <>9
GlobalNamespace::OVRControllerTest::$$c* GlobalNamespace::OVRControllerTest::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::$$c*>("", "OVRControllerTest/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly OVRControllerTest/<>c <>9
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9(GlobalNamespace::OVRControllerTest::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_0
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_0")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_0
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_0(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_0", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_1
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_1")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_1
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_1(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_1", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_2
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_2")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_2
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_2(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_2", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_3
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_3")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_3
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_3(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_3", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_4
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_4");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_4")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_4
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_4(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_4");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_4", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_5
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_5");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_5")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_5
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_5(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_5");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_5", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_6
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_6() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_6");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_6")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_6
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_6(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_6");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_6", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_7
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_7() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_7");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_7")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_7
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_7(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_7");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_7", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_8
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_8() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_8");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_8")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_8
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_8(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_8");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_8", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_9
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_9")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_9
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_9(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_9", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_10
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_10() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_10");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_10")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_10
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_10(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_10");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_10", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_11
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_11() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_11");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_11")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_11
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_11(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_11");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_11", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_12
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_12() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_12");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_12")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_12
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_12(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_12");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_12", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_13
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_13() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_13");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_13")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_13
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_13(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_13");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_13", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_14
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_14() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_14");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_14")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_14
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_14(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_14");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_14", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_15
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_15() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_15");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_15")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_15
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_15(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_15");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_15", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_16
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_16() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_16");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_16")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_16
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_16(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_16");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_16", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_17
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_17() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_17");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_17")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_17
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_17(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_17");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_17", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_18
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_18() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_18");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_18")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_18
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_18(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_18");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_18", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_19
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_19() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_19");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_19")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_19
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_19(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_19");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_19", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_20
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_20() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_20");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_20")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_20
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_20(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_20");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_20", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_21
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_21() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_21");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_21")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_21
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_21(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_21");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_21", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_22
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_22() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_22");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_22")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_22
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_22(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_22");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_22", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_23
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_23() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_23");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_23")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_23
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_23(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_23");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_23", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_24
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_24() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_24");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_24")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_24
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_24(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_24");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_24", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_25
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_25() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_25");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_25")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_25
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_25(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_25");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_25", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_26
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_26() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_26");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_26")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_26
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_26(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_26");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_26", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_27
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_27() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_27");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_27")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_27
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_27(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_27");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_27", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_28
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_28() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_28");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_28")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_28
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_28(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_28");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_28", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_29
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_29() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_29");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_29")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_29
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_29(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_29");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_29", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_30
GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_30() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_get_$$9__4_30");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator*>("", "OVRControllerTest/<>c", "<>9__4_30")));
}
// Autogenerated static field setter
// Set static field: static public OVRControllerTest/BoolMonitor/BoolGenerator <>9__4_30
void GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_30(GlobalNamespace::OVRControllerTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::_set_$$9__4_30");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRControllerTest/<>c", "<>9__4_30", value)));
}
// Autogenerated method: OVRControllerTest/<>c..cctor
void GlobalNamespace::OVRControllerTest::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRControllerTest/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_0
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_1
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_2
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_3
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_4
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_5
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_6
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_6() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_6");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_6", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_7
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_7() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_7");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_7", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_8
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_8() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_8");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_8", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_9
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_9");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_9", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_10
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_10() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_10");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_10", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_11
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_11() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_12
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_12() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_12");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_12", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_13
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_13() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_13");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_13", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_14
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_14() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_14");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_14", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_15
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_15() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_15");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_15", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_16
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_16() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_16");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_17
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_17() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_17");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_17", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_18
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_18() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_18");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_18", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_19
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_19() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_19");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_19", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_20
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_20() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_20");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_20", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_21
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_21() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_21");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_21", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_22
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_22() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_22");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_22", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_23
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_23() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_23");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_23", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_24
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_24() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_24");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_24", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_25
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_25() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_25");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_25", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_26
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_26() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_26");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_26", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_27
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_27() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_27");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_27", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_28
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_28() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_28");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_28", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_29
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_29() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_29");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_29", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<Start>b__4_30
bool GlobalNamespace::OVRControllerTest::$$c::$Start$b__4_30() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<Start>b__4_30");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__4_30", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRControllerTest/<>c.<.cctor>b__9_0
bool GlobalNamespace::OVRControllerTest::$$c::$_cctor$b__9_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRControllerTest::$$c::<.cctor>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRControllerTest::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRControllerTest::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_0
// Il2CppName: <Start>b__4_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_1
// Il2CppName: <Start>b__4_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_2
// Il2CppName: <Start>b__4_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_3
// Il2CppName: <Start>b__4_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_4
// Il2CppName: <Start>b__4_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_5
// Il2CppName: <Start>b__4_5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_5)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_6
// Il2CppName: <Start>b__4_6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_6)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_7
// Il2CppName: <Start>b__4_7
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_7)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_7", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_8
// Il2CppName: <Start>b__4_8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_8)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_9
// Il2CppName: <Start>b__4_9
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_9)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_9", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_10
// Il2CppName: <Start>b__4_10
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_10)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_10", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_11
// Il2CppName: <Start>b__4_11
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_11)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_11", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_12
// Il2CppName: <Start>b__4_12
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_12)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_12", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_13
// Il2CppName: <Start>b__4_13
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_13)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_13", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_14
// Il2CppName: <Start>b__4_14
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_14)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_14", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_15
// Il2CppName: <Start>b__4_15
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_15)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_15", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_16
// Il2CppName: <Start>b__4_16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_17
// Il2CppName: <Start>b__4_17
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_17)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_17", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_18
// Il2CppName: <Start>b__4_18
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_18)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_18", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_19
// Il2CppName: <Start>b__4_19
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_19)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_19", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_20
// Il2CppName: <Start>b__4_20
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_20)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_20", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_21
// Il2CppName: <Start>b__4_21
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_21)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_21", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_22
// Il2CppName: <Start>b__4_22
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_22)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_22", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_23
// Il2CppName: <Start>b__4_23
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_23)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_23", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_24
// Il2CppName: <Start>b__4_24
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_24)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_24", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_25
// Il2CppName: <Start>b__4_25
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_25)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_25", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_26
// Il2CppName: <Start>b__4_26
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_26)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_26", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_27
// Il2CppName: <Start>b__4_27
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_27)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_27", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_28
// Il2CppName: <Start>b__4_28
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_28)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_28", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_29
// Il2CppName: <Start>b__4_29
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_29)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_29", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$Start$b__4_30
// Il2CppName: <Start>b__4_30
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$Start$b__4_30)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<Start>b__4_30", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::$_cctor$b__9_0
// Il2CppName: <.cctor>b__9_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::$_cctor$b__9_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), "<.cctor>b__9_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRControllerTest::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRControllerTest::$$c::*)()>(&OVRControllerTest::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRControllerTest::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRCubemapCapture
#include "GlobalNamespace/OVRCubemapCapture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Cubemap
#include "UnityEngine/Cubemap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRCubemapCapture.Update
void GlobalNamespace::OVRCubemapCapture::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRCubemapCapture::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRCubemapCapture.TriggerCubemapCapture
void GlobalNamespace::OVRCubemapCapture::TriggerCubemapCapture(UnityEngine::Vector3 capturePos, int cubemapSize, ::Il2CppString* pathName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRCubemapCapture::TriggerCubemapCapture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRCubemapCapture", "TriggerCubemapCapture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capturePos), ::il2cpp_utils::ExtractType(cubemapSize), ::il2cpp_utils::ExtractType(pathName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, capturePos, cubemapSize, pathName);
}
// Autogenerated method: OVRCubemapCapture.RenderIntoCubemap
void GlobalNamespace::OVRCubemapCapture::RenderIntoCubemap(UnityEngine::Camera* ownerCamera, UnityEngine::Cubemap* outCubemap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRCubemapCapture::RenderIntoCubemap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRCubemapCapture", "RenderIntoCubemap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ownerCamera), ::il2cpp_utils::ExtractType(outCubemap)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ownerCamera, outCubemap);
}
// Autogenerated method: OVRCubemapCapture.SaveCubemapCapture
bool GlobalNamespace::OVRCubemapCapture::SaveCubemapCapture(UnityEngine::Cubemap* cubemap, ::Il2CppString* pathName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRCubemapCapture::SaveCubemapCapture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRCubemapCapture", "SaveCubemapCapture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cubemap), ::il2cpp_utils::ExtractType(pathName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cubemap, pathName);
}
// Writing MetadataGetter for method: OVRCubemapCapture::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRCubemapCapture::*)()>(&OVRCubemapCapture::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCubemapCapture*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRCubemapCapture::TriggerCubemapCapture
// Il2CppName: TriggerCubemapCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3, int, ::Il2CppString*)>(&OVRCubemapCapture::TriggerCubemapCapture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCubemapCapture*), "TriggerCubemapCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRCubemapCapture::RenderIntoCubemap
// Il2CppName: RenderIntoCubemap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Camera*, UnityEngine::Cubemap*)>(&OVRCubemapCapture::RenderIntoCubemap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCubemapCapture*), "RenderIntoCubemap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Cubemap*>()});
  }
};
// Writing MetadataGetter for method: OVRCubemapCapture::SaveCubemapCapture
// Il2CppName: SaveCubemapCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Cubemap*, ::Il2CppString*)>(&OVRCubemapCapture::SaveCubemapCapture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCubemapCapture*), "SaveCubemapCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Cubemap*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRCubemapCapture::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRCubemapCapture::*)()>(&OVRCubemapCapture::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCubemapCapture*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRCubemapCapture::*)()>(&OVRCubemapCapture::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCubemapCapture*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRCursor
#include "GlobalNamespace/OVRCursor.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRCursor.SetCursorRay
void GlobalNamespace::OVRCursor::SetCursorRay(UnityEngine::Transform* ray) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRCursor::SetCursorRay");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCursorRay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ray);
}
// Autogenerated method: OVRCursor.SetCursorStartDest
void GlobalNamespace::OVRCursor::SetCursorStartDest(UnityEngine::Vector3 start, UnityEngine::Vector3 dest, UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRCursor::SetCursorStartDest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCursorStartDest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(normal)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, start, dest, normal);
}
// Writing MetadataGetter for method: OVRCursor::SetCursorRay
// Il2CppName: SetCursorRay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRCursor::*)(UnityEngine::Transform*)>(&OVRCursor::SetCursorRay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCursor*), "SetCursorRay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: OVRCursor::SetCursorStartDest
// Il2CppName: SetCursorStartDest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRCursor::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3)>(&OVRCursor::SetCursorStartDest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCursor*), "SetCursorStartDest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: OVRCursor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRCursor::*)()>(&OVRCursor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCursor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRCursor::*)()>(&OVRCursor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCursor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRCustomSkeleton
#include "GlobalNamespace/OVRCustomSkeleton.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRCustomSkeleton.get_CustomBones
System::Collections::Generic::List_1<UnityEngine::Transform*>* GlobalNamespace::OVRCustomSkeleton::get_CustomBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRCustomSkeleton::get_CustomBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CustomBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: OVRCustomSkeleton.InitializeBones
void GlobalNamespace::OVRCustomSkeleton::InitializeBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRCustomSkeleton::InitializeBones");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRCustomSkeleton::get_CustomBones
// Il2CppName: get_CustomBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::Transform*>* (OVRCustomSkeleton::*)()>(&OVRCustomSkeleton::get_CustomBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCustomSkeleton*), "get_CustomBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRCustomSkeleton::InitializeBones
// Il2CppName: InitializeBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRCustomSkeleton::*)()>(&OVRCustomSkeleton::InitializeBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCustomSkeleton*), "InitializeBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRCustomSkeleton::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRCustomSkeleton::*)()>(&OVRCustomSkeleton::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCustomSkeleton*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRCustomSkeleton::*)()>(&OVRCustomSkeleton::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRCustomSkeleton*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRDebugInfo
#include "GlobalNamespace/OVRDebugInfo.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRDebugInfo.Awake
void GlobalNamespace::OVRDebugInfo::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.Update
void GlobalNamespace::OVRDebugInfo::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.OnDestroy
void GlobalNamespace::OVRDebugInfo::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.InitUIComponents
void GlobalNamespace::OVRDebugInfo::InitUIComponents() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::InitUIComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitUIComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateVariable
void GlobalNamespace::OVRDebugInfo::UpdateVariable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::UpdateVariable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVariable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateStrings
void GlobalNamespace::OVRDebugInfo::UpdateStrings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::UpdateStrings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStrings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.RiftPresentGUI
void GlobalNamespace::OVRDebugInfo::RiftPresentGUI(UnityEngine::GameObject* guiMainOBj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::RiftPresentGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RiftPresentGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(guiMainOBj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, guiMainOBj);
}
// Autogenerated method: OVRDebugInfo.UpdateDeviceDetection
void GlobalNamespace::OVRDebugInfo::UpdateDeviceDetection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::UpdateDeviceDetection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDeviceDetection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.VariableObjectManager
UnityEngine::GameObject* GlobalNamespace::OVRDebugInfo::VariableObjectManager(UnityEngine::GameObject* gameObject, ::Il2CppString* name, float posY, ::Il2CppString* str, int fontSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::VariableObjectManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VariableObjectManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(posY), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(fontSize)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, gameObject, name, posY, str, fontSize);
}
// Autogenerated method: OVRDebugInfo.ComponentComposition
UnityEngine::GameObject* GlobalNamespace::OVRDebugInfo::ComponentComposition(UnityEngine::GameObject* GO) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::ComponentComposition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComponentComposition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(GO)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, GO);
}
// Autogenerated method: OVRDebugInfo.UpdateIPD
void GlobalNamespace::OVRDebugInfo::UpdateIPD() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::UpdateIPD");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateIPD", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateEyeHeightOffset
void GlobalNamespace::OVRDebugInfo::UpdateEyeHeightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::UpdateEyeHeightOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEyeHeightOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateEyeDepthOffset
void GlobalNamespace::OVRDebugInfo::UpdateEyeDepthOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::UpdateEyeDepthOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEyeDepthOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateFOV
void GlobalNamespace::OVRDebugInfo::UpdateFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::UpdateFOV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFOV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateResolutionEyeTexture
void GlobalNamespace::OVRDebugInfo::UpdateResolutionEyeTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::UpdateResolutionEyeTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateResolutionEyeTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateLatencyValues
void GlobalNamespace::OVRDebugInfo::UpdateLatencyValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::UpdateLatencyValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLatencyValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRDebugInfo.UpdateFPS
void GlobalNamespace::OVRDebugInfo::UpdateFPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDebugInfo::UpdateFPS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFPS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRDebugInfo::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::InitUIComponents
// Il2CppName: InitUIComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::InitUIComponents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "InitUIComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::UpdateVariable
// Il2CppName: UpdateVariable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::UpdateVariable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "UpdateVariable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::UpdateStrings
// Il2CppName: UpdateStrings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::UpdateStrings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "UpdateStrings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::RiftPresentGUI
// Il2CppName: RiftPresentGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)(UnityEngine::GameObject*)>(&OVRDebugInfo::RiftPresentGUI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "RiftPresentGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::UpdateDeviceDetection
// Il2CppName: UpdateDeviceDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::UpdateDeviceDetection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "UpdateDeviceDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::VariableObjectManager
// Il2CppName: VariableObjectManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (OVRDebugInfo::*)(UnityEngine::GameObject*, ::Il2CppString*, float, ::Il2CppString*, int)>(&OVRDebugInfo::VariableObjectManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "VariableObjectManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::ComponentComposition
// Il2CppName: ComponentComposition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (OVRDebugInfo::*)(UnityEngine::GameObject*)>(&OVRDebugInfo::ComponentComposition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "ComponentComposition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::UpdateIPD
// Il2CppName: UpdateIPD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::UpdateIPD)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "UpdateIPD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::UpdateEyeHeightOffset
// Il2CppName: UpdateEyeHeightOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::UpdateEyeHeightOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "UpdateEyeHeightOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::UpdateEyeDepthOffset
// Il2CppName: UpdateEyeDepthOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::UpdateEyeDepthOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "UpdateEyeDepthOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::UpdateFOV
// Il2CppName: UpdateFOV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::UpdateFOV)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "UpdateFOV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::UpdateResolutionEyeTexture
// Il2CppName: UpdateResolutionEyeTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::UpdateResolutionEyeTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "UpdateResolutionEyeTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::UpdateLatencyValues
// Il2CppName: UpdateLatencyValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::UpdateLatencyValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "UpdateLatencyValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::UpdateFPS
// Il2CppName: UpdateFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::UpdateFPS)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), "UpdateFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRDebugInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRDebugInfo::*)()>(&OVRDebugInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRDebugInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRGazePointer
#include "GlobalNamespace/OVRGazePointer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: OVRProgressIndicator
#include "GlobalNamespace/OVRProgressIndicator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private OVRGazePointer _instance
GlobalNamespace::OVRGazePointer* GlobalNamespace::OVRGazePointer::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRGazePointer*>("", "OVRGazePointer", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private OVRGazePointer _instance
void GlobalNamespace::OVRGazePointer::_set__instance(GlobalNamespace::OVRGazePointer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRGazePointer", "_instance", value));
}
// Autogenerated method: OVRGazePointer.get_hidden
bool GlobalNamespace::OVRGazePointer::get_hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::get_hidden");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hidden", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.set_hidden
void GlobalNamespace::OVRGazePointer::set_hidden(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::set_hidden");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hidden", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRGazePointer.get_currentScale
float GlobalNamespace::OVRGazePointer::get_currentScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::get_currentScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.set_currentScale
void GlobalNamespace::OVRGazePointer::set_currentScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::set_currentScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_currentScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRGazePointer.get_instance
GlobalNamespace::OVRGazePointer* GlobalNamespace::OVRGazePointer::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRGazePointer", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRGazePointer*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRGazePointer.get_visibilityStrength
float GlobalNamespace::OVRGazePointer::get_visibilityStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::get_visibilityStrength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_visibilityStrength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.get_SelectionProgress
float GlobalNamespace::OVRGazePointer::get_SelectionProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::get_SelectionProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SelectionProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.set_SelectionProgress
void GlobalNamespace::OVRGazePointer::set_SelectionProgress(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::set_SelectionProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SelectionProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRGazePointer.Awake
void GlobalNamespace::OVRGazePointer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.Update
void GlobalNamespace::OVRGazePointer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.LateUpdate
void GlobalNamespace::OVRGazePointer::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.RequestHide
void GlobalNamespace::OVRGazePointer::RequestHide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::RequestHide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestHide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.RequestShow
void GlobalNamespace::OVRGazePointer::RequestShow() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::RequestShow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestShow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.Hide
void GlobalNamespace::OVRGazePointer::Hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.Show
void GlobalNamespace::OVRGazePointer::Show() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGazePointer.SetCursorStartDest
void GlobalNamespace::OVRGazePointer::SetCursorStartDest(UnityEngine::Vector3 _, UnityEngine::Vector3 pos, UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::SetCursorStartDest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCursorStartDest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(normal)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, _, pos, normal);
}
// Autogenerated method: OVRGazePointer.SetCursorRay
void GlobalNamespace::OVRGazePointer::SetCursorRay(UnityEngine::Transform* ray) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGazePointer::SetCursorRay");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCursorRay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ray);
}
// Writing MetadataGetter for method: OVRGazePointer::get_hidden
// Il2CppName: get_hidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRGazePointer::*)()>(&OVRGazePointer::get_hidden)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "get_hidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::set_hidden
// Il2CppName: set_hidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)(bool)>(&OVRGazePointer::set_hidden)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "set_hidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::get_currentScale
// Il2CppName: get_currentScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRGazePointer::*)()>(&OVRGazePointer::get_currentScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "get_currentScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::set_currentScale
// Il2CppName: set_currentScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)(float)>(&OVRGazePointer::set_currentScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "set_currentScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRGazePointer* (*)()>(&OVRGazePointer::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::get_visibilityStrength
// Il2CppName: get_visibilityStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRGazePointer::*)()>(&OVRGazePointer::get_visibilityStrength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "get_visibilityStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::get_SelectionProgress
// Il2CppName: get_SelectionProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRGazePointer::*)()>(&OVRGazePointer::get_SelectionProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "get_SelectionProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::set_SelectionProgress
// Il2CppName: set_SelectionProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)(float)>(&OVRGazePointer::set_SelectionProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "set_SelectionProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)()>(&OVRGazePointer::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)()>(&OVRGazePointer::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)()>(&OVRGazePointer::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::RequestHide
// Il2CppName: RequestHide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)()>(&OVRGazePointer::RequestHide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "RequestHide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::RequestShow
// Il2CppName: RequestShow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)()>(&OVRGazePointer::RequestShow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "RequestShow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)()>(&OVRGazePointer::Hide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::Show
// Il2CppName: Show
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)()>(&OVRGazePointer::Show)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "Show", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::SetCursorStartDest
// Il2CppName: SetCursorStartDest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3)>(&OVRGazePointer::SetCursorStartDest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "SetCursorStartDest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::SetCursorRay
// Il2CppName: SetCursorRay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)(UnityEngine::Transform*)>(&OVRGazePointer::SetCursorRay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), "SetCursorRay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: OVRGazePointer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)()>(&OVRGazePointer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGazePointer::*)()>(&OVRGazePointer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGazePointer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRGearVrControllerTest
#include "GlobalNamespace/OVRGearVrControllerTest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: OVRGearVrControllerTest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGearVrControllerTest::*)()>(&OVRGearVrControllerTest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGearVrControllerTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGearVrControllerTest::*)()>(&OVRGearVrControllerTest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGearVrControllerTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRGrabbable
#include "GlobalNamespace/OVRGrabbable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: OVRGrabber
#include "GlobalNamespace/OVRGrabber.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRGrabbable.get_allowOffhandGrab
bool GlobalNamespace::OVRGrabbable::get_allowOffhandGrab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::get_allowOffhandGrab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allowOffhandGrab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_isGrabbed
bool GlobalNamespace::OVRGrabbable::get_isGrabbed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::get_isGrabbed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isGrabbed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_snapPosition
bool GlobalNamespace::OVRGrabbable::get_snapPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::get_snapPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_snapPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_snapOrientation
bool GlobalNamespace::OVRGrabbable::get_snapOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::get_snapOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_snapOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_snapOffset
UnityEngine::Transform* GlobalNamespace::OVRGrabbable::get_snapOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::get_snapOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_snapOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_grabbedBy
GlobalNamespace::OVRGrabber* GlobalNamespace::OVRGrabbable::get_grabbedBy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::get_grabbedBy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_grabbedBy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRGrabber*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_grabbedTransform
UnityEngine::Transform* GlobalNamespace::OVRGrabbable::get_grabbedTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::get_grabbedTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_grabbedTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_grabbedRigidbody
UnityEngine::Rigidbody* GlobalNamespace::OVRGrabbable::get_grabbedRigidbody() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::get_grabbedRigidbody");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_grabbedRigidbody", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rigidbody*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.get_grabPoints
::Array<UnityEngine::Collider*>* GlobalNamespace::OVRGrabbable::get_grabPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::get_grabPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_grabPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Collider*>*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.GrabBegin
void GlobalNamespace::OVRGrabbable::GrabBegin(GlobalNamespace::OVRGrabber* hand, UnityEngine::Collider* grabPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::GrabBegin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(grabPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hand, grabPoint);
}
// Autogenerated method: OVRGrabbable.GrabEnd
void GlobalNamespace::OVRGrabbable::GrabEnd(UnityEngine::Vector3 linearVelocity, UnityEngine::Vector3 angularVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::GrabEnd");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(linearVelocity), ::il2cpp_utils::ExtractType(angularVelocity)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, linearVelocity, angularVelocity);
}
// Autogenerated method: OVRGrabbable.Awake
void GlobalNamespace::OVRGrabbable::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.Start
void GlobalNamespace::OVRGrabbable::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabbable.OnDestroy
void GlobalNamespace::OVRGrabbable::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRGrabbable::get_allowOffhandGrab
// Il2CppName: get_allowOffhandGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRGrabbable::*)()>(&OVRGrabbable::get_allowOffhandGrab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "get_allowOffhandGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::get_isGrabbed
// Il2CppName: get_isGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRGrabbable::*)()>(&OVRGrabbable::get_isGrabbed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "get_isGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::get_snapPosition
// Il2CppName: get_snapPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRGrabbable::*)()>(&OVRGrabbable::get_snapPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "get_snapPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::get_snapOrientation
// Il2CppName: get_snapOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRGrabbable::*)()>(&OVRGrabbable::get_snapOrientation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "get_snapOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::get_snapOffset
// Il2CppName: get_snapOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (OVRGrabbable::*)()>(&OVRGrabbable::get_snapOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "get_snapOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::get_grabbedBy
// Il2CppName: get_grabbedBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRGrabber* (OVRGrabbable::*)()>(&OVRGrabbable::get_grabbedBy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "get_grabbedBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::get_grabbedTransform
// Il2CppName: get_grabbedTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (OVRGrabbable::*)()>(&OVRGrabbable::get_grabbedTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "get_grabbedTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::get_grabbedRigidbody
// Il2CppName: get_grabbedRigidbody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rigidbody* (OVRGrabbable::*)()>(&OVRGrabbable::get_grabbedRigidbody)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "get_grabbedRigidbody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::get_grabPoints
// Il2CppName: get_grabPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Collider*>* (OVRGrabbable::*)()>(&OVRGrabbable::get_grabPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "get_grabPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::GrabBegin
// Il2CppName: GrabBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabbable::*)(GlobalNamespace::OVRGrabber*, UnityEngine::Collider*)>(&OVRGrabbable::GrabBegin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "GrabBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRGrabber*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::GrabEnd
// Il2CppName: GrabEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabbable::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&OVRGrabbable::GrabEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "GrabEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabbable::*)()>(&OVRGrabbable::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabbable::*)()>(&OVRGrabbable::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabbable::*)()>(&OVRGrabbable::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabbable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabbable::*)()>(&OVRGrabbable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabbable::*)()>(&OVRGrabbable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabbable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRGrabber
#include "GlobalNamespace/OVRGrabber.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRGrabbable
#include "GlobalNamespace/OVRGrabbable.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: OVRCameraRig
#include "GlobalNamespace/OVRCameraRig.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRGrabber.get_grabbedObject
GlobalNamespace::OVRGrabbable* GlobalNamespace::OVRGrabber::get_grabbedObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::get_grabbedObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_grabbedObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRGrabbable*, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.ForceRelease
void GlobalNamespace::OVRGrabber::ForceRelease(GlobalNamespace::OVRGrabbable* grabbable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::ForceRelease");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceRelease", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grabbable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, grabbable);
}
// Autogenerated method: OVRGrabber.Awake
void GlobalNamespace::OVRGrabber::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.Start
void GlobalNamespace::OVRGrabber::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.Update
void GlobalNamespace::OVRGrabber::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::Update");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.OnUpdatedAnchors
void GlobalNamespace::OVRGrabber::OnUpdatedAnchors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::OnUpdatedAnchors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdatedAnchors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.OnDestroy
void GlobalNamespace::OVRGrabber::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.OnTriggerEnter
void GlobalNamespace::OVRGrabber::OnTriggerEnter(UnityEngine::Collider* otherCollider) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(otherCollider)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, otherCollider);
}
// Autogenerated method: OVRGrabber.OnTriggerExit
void GlobalNamespace::OVRGrabber::OnTriggerExit(UnityEngine::Collider* otherCollider) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(otherCollider)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, otherCollider);
}
// Autogenerated method: OVRGrabber.CheckForGrabOrRelease
void GlobalNamespace::OVRGrabber::CheckForGrabOrRelease(float prevFlex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::CheckForGrabOrRelease");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckForGrabOrRelease", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prevFlex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prevFlex);
}
// Autogenerated method: OVRGrabber.GrabBegin
void GlobalNamespace::OVRGrabber::GrabBegin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::GrabBegin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.MoveGrabbedObject
void GlobalNamespace::OVRGrabber::MoveGrabbedObject(UnityEngine::Vector3 pos, UnityEngine::Quaternion rot, bool forceTeleport) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::MoveGrabbedObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveGrabbedObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot), ::il2cpp_utils::ExtractType(forceTeleport)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos, rot, forceTeleport);
}
// Autogenerated method: OVRGrabber.GrabEnd
void GlobalNamespace::OVRGrabber::GrabEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::GrabEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGrabber.GrabbableRelease
void GlobalNamespace::OVRGrabber::GrabbableRelease(UnityEngine::Vector3 linearVelocity, UnityEngine::Vector3 angularVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::GrabbableRelease");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabbableRelease", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(linearVelocity), ::il2cpp_utils::ExtractType(angularVelocity)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, linearVelocity, angularVelocity);
}
// Autogenerated method: OVRGrabber.GrabVolumeEnable
void GlobalNamespace::OVRGrabber::GrabVolumeEnable(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::GrabVolumeEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabVolumeEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated method: OVRGrabber.OffhandGrabbed
void GlobalNamespace::OVRGrabber::OffhandGrabbed(GlobalNamespace::OVRGrabbable* grabbable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::OffhandGrabbed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OffhandGrabbed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grabbable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, grabbable);
}
// Autogenerated method: OVRGrabber.SetPlayerIgnoreCollision
void GlobalNamespace::OVRGrabber::SetPlayerIgnoreCollision(UnityEngine::GameObject* grabbable, bool ignore) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::SetPlayerIgnoreCollision");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerIgnoreCollision", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grabbable), ::il2cpp_utils::ExtractType(ignore)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, grabbable, ignore);
}
// Autogenerated method: OVRGrabber.<Awake>b__23_0
void GlobalNamespace::OVRGrabber::$Awake$b__23_0(GlobalNamespace::OVRCameraRig* r) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabber::<Awake>b__23_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__23_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, r);
}
// Writing MetadataGetter for method: OVRGrabber::get_grabbedObject
// Il2CppName: get_grabbedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRGrabbable* (OVRGrabber::*)()>(&OVRGrabber::get_grabbedObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "get_grabbedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabber::ForceRelease
// Il2CppName: ForceRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)(GlobalNamespace::OVRGrabbable*)>(&OVRGrabber::ForceRelease)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "ForceRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRGrabbable*>()});
  }
};
// Writing MetadataGetter for method: OVRGrabber::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)()>(&OVRGrabber::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabber::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)()>(&OVRGrabber::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabber::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)()>(&OVRGrabber::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabber::OnUpdatedAnchors
// Il2CppName: OnUpdatedAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)()>(&OVRGrabber::OnUpdatedAnchors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "OnUpdatedAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabber::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)()>(&OVRGrabber::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabber::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)(UnityEngine::Collider*)>(&OVRGrabber::OnTriggerEnter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: OVRGrabber::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)(UnityEngine::Collider*)>(&OVRGrabber::OnTriggerExit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: OVRGrabber::CheckForGrabOrRelease
// Il2CppName: CheckForGrabOrRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)(float)>(&OVRGrabber::CheckForGrabOrRelease)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "CheckForGrabOrRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRGrabber::GrabBegin
// Il2CppName: GrabBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)()>(&OVRGrabber::GrabBegin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "GrabBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabber::MoveGrabbedObject
// Il2CppName: MoveGrabbedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)(UnityEngine::Vector3, UnityEngine::Quaternion, bool)>(&OVRGrabber::MoveGrabbedObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "MoveGrabbedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRGrabber::GrabEnd
// Il2CppName: GrabEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)()>(&OVRGrabber::GrabEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "GrabEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGrabber::GrabbableRelease
// Il2CppName: GrabbableRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&OVRGrabber::GrabbableRelease)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "GrabbableRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: OVRGrabber::GrabVolumeEnable
// Il2CppName: GrabVolumeEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)(bool)>(&OVRGrabber::GrabVolumeEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "GrabVolumeEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRGrabber::OffhandGrabbed
// Il2CppName: OffhandGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)(GlobalNamespace::OVRGrabbable*)>(&OVRGrabber::OffhandGrabbed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "OffhandGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRGrabbable*>()});
  }
};
// Writing MetadataGetter for method: OVRGrabber::SetPlayerIgnoreCollision
// Il2CppName: SetPlayerIgnoreCollision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)(UnityEngine::GameObject*, bool)>(&OVRGrabber::SetPlayerIgnoreCollision)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "SetPlayerIgnoreCollision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRGrabber::$Awake$b__23_0
// Il2CppName: <Awake>b__23_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)(GlobalNamespace::OVRCameraRig*)>(&OVRGrabber::$Awake$b__23_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), "<Awake>b__23_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRCameraRig*>()});
  }
};
// Writing MetadataGetter for method: OVRGrabber::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)()>(&OVRGrabber::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGrabber::*)()>(&OVRGrabber::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGrabber*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRGridCube
#include "GlobalNamespace/OVRGridCube.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRCameraRig
#include "GlobalNamespace/OVRCameraRig.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRGridCube.Update
void GlobalNamespace::OVRGridCube::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGridCube::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGridCube.SetOVRCameraController
void GlobalNamespace::OVRGridCube::SetOVRCameraController(GlobalNamespace::OVRCameraRig*& cameraController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGridCube::SetOVRCameraController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOVRCameraController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cameraController);
}
// Autogenerated method: OVRGridCube.UpdateCubeGrid
void GlobalNamespace::OVRGridCube::UpdateCubeGrid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGridCube::UpdateCubeGrid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCubeGrid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGridCube.CreateCubeGrid
void GlobalNamespace::OVRGridCube::CreateCubeGrid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGridCube::CreateCubeGrid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCubeGrid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRGridCube.CubeGridSwitchColor
void GlobalNamespace::OVRGridCube::CubeGridSwitchColor(bool CubeSwitchColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGridCube::CubeGridSwitchColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CubeGridSwitchColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(CubeSwitchColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, CubeSwitchColor);
}
// Writing MetadataGetter for method: OVRGridCube::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGridCube::*)()>(&OVRGridCube::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGridCube*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGridCube::SetOVRCameraController
// Il2CppName: SetOVRCameraController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGridCube::*)(GlobalNamespace::OVRCameraRig*&)>(&OVRGridCube::SetOVRCameraController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGridCube*), "SetOVRCameraController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRCameraRig*&>()});
  }
};
// Writing MetadataGetter for method: OVRGridCube::UpdateCubeGrid
// Il2CppName: UpdateCubeGrid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGridCube::*)()>(&OVRGridCube::UpdateCubeGrid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGridCube*), "UpdateCubeGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGridCube::CreateCubeGrid
// Il2CppName: CreateCubeGrid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGridCube::*)()>(&OVRGridCube::CreateCubeGrid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGridCube*), "CreateCubeGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRGridCube::CubeGridSwitchColor
// Il2CppName: CubeGridSwitchColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGridCube::*)(bool)>(&OVRGridCube::CubeGridSwitchColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGridCube*), "CubeGridSwitchColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRGridCube::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGridCube::*)()>(&OVRGridCube::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGridCube*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRGridCube::*)()>(&OVRGridCube::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRGridCube*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHand
#include "GlobalNamespace/OVRHand.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: OVRHand/HandFinger
#include "GlobalNamespace/OVRHand_HandFinger.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVRSkeleton/SkeletonPoseData
#include "GlobalNamespace/OVRSkeleton_SkeletonPoseData.hpp"
// Including type: OVRSkeletonRenderer/SkeletonRendererData
#include "GlobalNamespace/OVRSkeletonRenderer_SkeletonRendererData.hpp"
// Including type: OVRMeshRenderer/MeshRendererData
#include "GlobalNamespace/OVRMeshRenderer_MeshRendererData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRHand.get_IsDataValid
bool GlobalNamespace::OVRHand::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsDataValid
void GlobalNamespace::OVRHand::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsDataHighConfidence
bool GlobalNamespace::OVRHand::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsDataHighConfidence
void GlobalNamespace::OVRHand::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsTracked
bool GlobalNamespace::OVRHand::get_IsTracked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::get_IsTracked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsTracked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsTracked
void GlobalNamespace::OVRHand::set_IsTracked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::set_IsTracked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsTracked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsSystemGestureInProgress
bool GlobalNamespace::OVRHand::get_IsSystemGestureInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::get_IsSystemGestureInProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSystemGestureInProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsSystemGestureInProgress
void GlobalNamespace::OVRHand::set_IsSystemGestureInProgress(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::set_IsSystemGestureInProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsSystemGestureInProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsPointerPoseValid
bool GlobalNamespace::OVRHand::get_IsPointerPoseValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::get_IsPointerPoseValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPointerPoseValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsPointerPoseValid
void GlobalNamespace::OVRHand::set_IsPointerPoseValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::set_IsPointerPoseValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsPointerPoseValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_PointerPose
UnityEngine::Transform* GlobalNamespace::OVRHand::get_PointerPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::get_PointerPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PointerPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_PointerPose
void GlobalNamespace::OVRHand::set_PointerPose(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::set_PointerPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PointerPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_HandScale
float GlobalNamespace::OVRHand::get_HandScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::get_HandScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HandScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_HandScale
void GlobalNamespace::OVRHand::set_HandScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::set_HandScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HandScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_HandConfidence
GlobalNamespace::OVRHand::TrackingConfidence GlobalNamespace::OVRHand::get_HandConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::get_HandConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HandConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRHand::TrackingConfidence, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_HandConfidence
void GlobalNamespace::OVRHand::set_HandConfidence(GlobalNamespace::OVRHand::TrackingConfidence value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::set_HandConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HandConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.get_IsDominantHand
bool GlobalNamespace::OVRHand::get_IsDominantHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::get_IsDominantHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDominantHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.set_IsDominantHand
void GlobalNamespace::OVRHand::set_IsDominantHand(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::set_IsDominantHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDominantHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRHand.Awake
void GlobalNamespace::OVRHand::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.Update
void GlobalNamespace::OVRHand::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.FixedUpdate
void GlobalNamespace::OVRHand::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.GetHandState
void GlobalNamespace::OVRHand::GetHandState(GlobalNamespace::OVRPlugin::Step step) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::GetHandState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHandState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(step)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, step);
}
// Autogenerated method: OVRHand.GetFingerIsPinching
bool GlobalNamespace::OVRHand::GetFingerIsPinching(GlobalNamespace::OVRHand::HandFinger finger) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::GetFingerIsPinching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFingerIsPinching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finger)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, finger);
}
// Autogenerated method: OVRHand.GetFingerPinchStrength
float GlobalNamespace::OVRHand::GetFingerPinchStrength(GlobalNamespace::OVRHand::HandFinger finger) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::GetFingerPinchStrength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFingerPinchStrength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finger)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, finger);
}
// Autogenerated method: OVRHand.GetFingerConfidence
GlobalNamespace::OVRHand::TrackingConfidence GlobalNamespace::OVRHand::GetFingerConfidence(GlobalNamespace::OVRHand::HandFinger finger) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::GetFingerConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFingerConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finger)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRHand::TrackingConfidence, false>(this, ___internal__method, finger);
}
// Autogenerated method: OVRHand.OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType
GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRHand::OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::SkeletonType, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData
GlobalNamespace::OVRSkeleton::SkeletonPoseData GlobalNamespace::OVRHand::OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonPoseData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::SkeletonPoseData, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData
GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData GlobalNamespace::OVRHand::OVRSkeletonRenderer_IOVRSkeletonRendererDataProvider_GetSkeletonRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRMesh.IOVRMeshDataProvider.GetMeshType
GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRHand::OVRMesh_IOVRMeshDataProvider_GetMeshType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::OVRMesh.IOVRMeshDataProvider.GetMeshType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMesh.IOVRMeshDataProvider.GetMeshType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRMesh::MeshType, false>(this, ___internal__method);
}
// Autogenerated method: OVRHand.OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData
GlobalNamespace::OVRMeshRenderer::MeshRendererData GlobalNamespace::OVRHand::OVRMeshRenderer_IOVRMeshRendererDataProvider_GetMeshRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRMeshRenderer::MeshRendererData, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRHand::get_IsDataValid
// Il2CppName: get_IsDataValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHand::*)()>(&OVRHand::get_IsDataValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "get_IsDataValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::set_IsDataValid
// Il2CppName: set_IsDataValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)(bool)>(&OVRHand::set_IsDataValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "set_IsDataValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRHand::get_IsDataHighConfidence
// Il2CppName: get_IsDataHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHand::*)()>(&OVRHand::get_IsDataHighConfidence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "get_IsDataHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::set_IsDataHighConfidence
// Il2CppName: set_IsDataHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)(bool)>(&OVRHand::set_IsDataHighConfidence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "set_IsDataHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRHand::get_IsTracked
// Il2CppName: get_IsTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHand::*)()>(&OVRHand::get_IsTracked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "get_IsTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::set_IsTracked
// Il2CppName: set_IsTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)(bool)>(&OVRHand::set_IsTracked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "set_IsTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRHand::get_IsSystemGestureInProgress
// Il2CppName: get_IsSystemGestureInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHand::*)()>(&OVRHand::get_IsSystemGestureInProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "get_IsSystemGestureInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::set_IsSystemGestureInProgress
// Il2CppName: set_IsSystemGestureInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)(bool)>(&OVRHand::set_IsSystemGestureInProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "set_IsSystemGestureInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRHand::get_IsPointerPoseValid
// Il2CppName: get_IsPointerPoseValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHand::*)()>(&OVRHand::get_IsPointerPoseValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "get_IsPointerPoseValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::set_IsPointerPoseValid
// Il2CppName: set_IsPointerPoseValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)(bool)>(&OVRHand::set_IsPointerPoseValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "set_IsPointerPoseValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRHand::get_PointerPose
// Il2CppName: get_PointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (OVRHand::*)()>(&OVRHand::get_PointerPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "get_PointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::set_PointerPose
// Il2CppName: set_PointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)(UnityEngine::Transform*)>(&OVRHand::set_PointerPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "set_PointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: OVRHand::get_HandScale
// Il2CppName: get_HandScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRHand::*)()>(&OVRHand::get_HandScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "get_HandScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::set_HandScale
// Il2CppName: set_HandScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)(float)>(&OVRHand::set_HandScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "set_HandScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRHand::get_HandConfidence
// Il2CppName: get_HandConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRHand::TrackingConfidence (OVRHand::*)()>(&OVRHand::get_HandConfidence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "get_HandConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::set_HandConfidence
// Il2CppName: set_HandConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)(GlobalNamespace::OVRHand::TrackingConfidence)>(&OVRHand::set_HandConfidence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "set_HandConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRHand::TrackingConfidence>()});
  }
};
// Writing MetadataGetter for method: OVRHand::get_IsDominantHand
// Il2CppName: get_IsDominantHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHand::*)()>(&OVRHand::get_IsDominantHand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "get_IsDominantHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::set_IsDominantHand
// Il2CppName: set_IsDominantHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)(bool)>(&OVRHand::set_IsDominantHand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "set_IsDominantHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRHand::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)()>(&OVRHand::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)()>(&OVRHand::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)()>(&OVRHand::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::GetHandState
// Il2CppName: GetHandState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)(GlobalNamespace::OVRPlugin::Step)>(&OVRHand::GetHandState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "GetHandState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Step>()});
  }
};
// Writing MetadataGetter for method: OVRHand::GetFingerIsPinching
// Il2CppName: GetFingerIsPinching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHand::*)(GlobalNamespace::OVRHand::HandFinger)>(&OVRHand::GetFingerIsPinching)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "GetFingerIsPinching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRHand::HandFinger>()});
  }
};
// Writing MetadataGetter for method: OVRHand::GetFingerPinchStrength
// Il2CppName: GetFingerPinchStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRHand::*)(GlobalNamespace::OVRHand::HandFinger)>(&OVRHand::GetFingerPinchStrength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "GetFingerPinchStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRHand::HandFinger>()});
  }
};
// Writing MetadataGetter for method: OVRHand::GetFingerConfidence
// Il2CppName: GetFingerConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRHand::TrackingConfidence (OVRHand::*)(GlobalNamespace::OVRHand::HandFinger)>(&OVRHand::GetFingerConfidence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "GetFingerConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRHand::HandFinger>()});
  }
};
// Writing MetadataGetter for method: OVRHand::OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonType
// Il2CppName: OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRSkeleton::SkeletonType (OVRHand::*)()>(&OVRHand::OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonPoseData
// Il2CppName: OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRSkeleton::SkeletonPoseData (OVRHand::*)()>(&OVRHand::OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonPoseData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::OVRSkeletonRenderer_IOVRSkeletonRendererDataProvider_GetSkeletonRendererData
// Il2CppName: OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData (OVRHand::*)()>(&OVRHand::OVRSkeletonRenderer_IOVRSkeletonRendererDataProvider_GetSkeletonRendererData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::OVRMesh_IOVRMeshDataProvider_GetMeshType
// Il2CppName: OVRMesh.IOVRMeshDataProvider.GetMeshType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRMesh::MeshType (OVRHand::*)()>(&OVRHand::OVRMesh_IOVRMeshDataProvider_GetMeshType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "OVRMesh.IOVRMeshDataProvider.GetMeshType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::OVRMeshRenderer_IOVRMeshRendererDataProvider_GetMeshRendererData
// Il2CppName: OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRMeshRenderer::MeshRendererData (OVRHand::*)()>(&OVRHand::OVRMeshRenderer_IOVRMeshRendererDataProvider_GetMeshRendererData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), "OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHand::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)()>(&OVRHand::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHand::*)()>(&OVRHand::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHand/Hand
#include "GlobalNamespace/OVRHand.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRHand/Hand None
GlobalNamespace::OVRHand::Hand GlobalNamespace::OVRHand::Hand::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::Hand::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::Hand>("", "OVRHand/Hand", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/Hand None
void GlobalNamespace::OVRHand::Hand::_set_None(GlobalNamespace::OVRHand::Hand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::Hand::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/Hand", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/Hand HandLeft
GlobalNamespace::OVRHand::Hand GlobalNamespace::OVRHand::Hand::_get_HandLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::Hand::_get_HandLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::Hand>("", "OVRHand/Hand", "HandLeft"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/Hand HandLeft
void GlobalNamespace::OVRHand::Hand::_set_HandLeft(GlobalNamespace::OVRHand::Hand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::Hand::_set_HandLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/Hand", "HandLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/Hand HandRight
GlobalNamespace::OVRHand::Hand GlobalNamespace::OVRHand::Hand::_get_HandRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::Hand::_get_HandRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::Hand>("", "OVRHand/Hand", "HandRight"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/Hand HandRight
void GlobalNamespace::OVRHand::Hand::_set_HandRight(GlobalNamespace::OVRHand::Hand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::Hand::_set_HandRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/Hand", "HandRight", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHand/HandFinger
#include "GlobalNamespace/OVRHand_HandFinger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Thumb
GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Thumb() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_get_Thumb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Thumb"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Thumb
void GlobalNamespace::OVRHand::HandFinger::_set_Thumb(GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_set_Thumb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Thumb", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Index
GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_get_Index");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Index"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Index
void GlobalNamespace::OVRHand::HandFinger::_set_Index(GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_set_Index");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Index", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Middle
GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Middle
void GlobalNamespace::OVRHand::HandFinger::_set_Middle(GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Middle", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Ring
GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Ring() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_get_Ring");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Ring"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Ring
void GlobalNamespace::OVRHand::HandFinger::_set_Ring(GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_set_Ring");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Ring", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Pinky
GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Pinky() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_get_Pinky");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Pinky"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Pinky
void GlobalNamespace::OVRHand::HandFinger::_set_Pinky(GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_set_Pinky");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Pinky", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/HandFinger Max
GlobalNamespace::OVRHand::HandFinger GlobalNamespace::OVRHand::HandFinger::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::HandFinger>("", "OVRHand/HandFinger", "Max"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/HandFinger Max
void GlobalNamespace::OVRHand::HandFinger::_set_Max(GlobalNamespace::OVRHand::HandFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::HandFinger::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/HandFinger", "Max", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHand/TrackingConfidence
#include "GlobalNamespace/OVRHand.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRHand/TrackingConfidence Low
GlobalNamespace::OVRHand::TrackingConfidence GlobalNamespace::OVRHand::TrackingConfidence::_get_Low() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::TrackingConfidence::_get_Low");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::TrackingConfidence>("", "OVRHand/TrackingConfidence", "Low"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/TrackingConfidence Low
void GlobalNamespace::OVRHand::TrackingConfidence::_set_Low(GlobalNamespace::OVRHand::TrackingConfidence value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::TrackingConfidence::_set_Low");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/TrackingConfidence", "Low", value));
}
// Autogenerated static field getter
// Get static field: static public OVRHand/TrackingConfidence High
GlobalNamespace::OVRHand::TrackingConfidence GlobalNamespace::OVRHand::TrackingConfidence::_get_High() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::TrackingConfidence::_get_High");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHand::TrackingConfidence>("", "OVRHand/TrackingConfidence", "High"));
}
// Autogenerated static field setter
// Set static field: static public OVRHand/TrackingConfidence High
void GlobalNamespace::OVRHand::TrackingConfidence::_set_High(GlobalNamespace::OVRHand::TrackingConfidence value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHand::TrackingConfidence::_set_High");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHand/TrackingConfidence", "High", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRHandTest
#include "GlobalNamespace/OVRHandTest.hpp"
// Including type: OVRHandTest/BoolMonitor
#include "GlobalNamespace/OVRHandTest_BoolMonitor.hpp"
// Including type: OVRHandTest/<>c
#include "GlobalNamespace/OVRHandTest_--c.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVRPlugin/Mesh
#include "GlobalNamespace/OVRPlugin_Mesh.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String prevConnected
::Il2CppString* GlobalNamespace::OVRHandTest::_get_prevConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::_get_prevConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OVRHandTest", "prevConnected"));
}
// Autogenerated static field setter
// Set static field: static private System.String prevConnected
void GlobalNamespace::OVRHandTest::_set_prevConnected(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::_set_prevConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHandTest", "prevConnected", value));
}
// Autogenerated static field getter
// Get static field: static private OVRHandTest/BoolMonitor controllers
GlobalNamespace::OVRHandTest::BoolMonitor* GlobalNamespace::OVRHandTest::_get_controllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::_get_controllers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHandTest::BoolMonitor*>("", "OVRHandTest", "controllers"));
}
// Autogenerated static field setter
// Set static field: static private OVRHandTest/BoolMonitor controllers
void GlobalNamespace::OVRHandTest::_set_controllers(GlobalNamespace::OVRHandTest::BoolMonitor* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::_set_controllers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRHandTest", "controllers", value));
}
// Autogenerated method: OVRHandTest.Start
void GlobalNamespace::OVRHandTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHandTest.Update
void GlobalNamespace::OVRHandTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHandTest..cctor
void GlobalNamespace::OVRHandTest::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRHandTest", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OVRHandTest::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::*)()>(&OVRHandTest::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHandTest::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::*)()>(&OVRHandTest::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHandTest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::*)()>(&OVRHandTest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::*)()>(&OVRHandTest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHandTest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRHandTest::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRHandTest/BoolMonitor
#include "GlobalNamespace/OVRHandTest_BoolMonitor.hpp"
// Including type: OVRHandTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRHandTest_BoolMonitor_BoolGenerator.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRHandTest/BoolMonitor.Update
void GlobalNamespace::OVRHandTest::BoolMonitor::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::BoolMonitor::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRHandTest/BoolMonitor.AppendToStringBuilder
void GlobalNamespace::OVRHandTest::BoolMonitor::AppendToStringBuilder(System::Text::StringBuilder*& sb) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::BoolMonitor::AppendToStringBuilder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendToStringBuilder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sb);
}
// Writing MetadataGetter for method: OVRHandTest::BoolMonitor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::BoolMonitor::*)(::Il2CppString*, GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator*, float)>(&OVRHandTest::BoolMonitor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::BoolMonitor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::BoolMonitor::*)(::Il2CppString*, GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator*, float)>(&OVRHandTest::BoolMonitor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::BoolMonitor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRHandTest::BoolMonitor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::BoolMonitor::*)()>(&OVRHandTest::BoolMonitor::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::BoolMonitor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHandTest::BoolMonitor::AppendToStringBuilder
// Il2CppName: AppendToStringBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::BoolMonitor::*)(System::Text::StringBuilder*&)>(&OVRHandTest::BoolMonitor::AppendToStringBuilder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::BoolMonitor*), "AppendToStringBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRHandTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRHandTest_BoolMonitor_BoolGenerator.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRHandTest/BoolMonitor/BoolGenerator.Invoke
bool GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHandTest/BoolMonitor/BoolGenerator.BeginInvoke
System::IAsyncResult* GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVRHandTest/BoolMonitor/BoolGenerator.EndInvoke
bool GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: OVRHandTest::BoolMonitor::BoolGenerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::BoolMonitor::BoolGenerator::*)(::Il2CppObject*, System::IntPtr)>(&OVRHandTest::BoolMonitor::BoolGenerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::BoolMonitor::BoolGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::BoolMonitor::BoolGenerator::*)(::Il2CppObject*, System::IntPtr)>(&OVRHandTest::BoolMonitor::BoolGenerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::BoolMonitor::BoolGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OVRHandTest::BoolMonitor::BoolGenerator::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHandTest::BoolMonitor::BoolGenerator::*)()>(&OVRHandTest::BoolMonitor::BoolGenerator::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::BoolMonitor::BoolGenerator*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHandTest::BoolMonitor::BoolGenerator::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (OVRHandTest::BoolMonitor::BoolGenerator::*)(System::AsyncCallback*, ::Il2CppObject*)>(&OVRHandTest::BoolMonitor::BoolGenerator::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::BoolMonitor::BoolGenerator*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: OVRHandTest::BoolMonitor::BoolGenerator::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHandTest::BoolMonitor::BoolGenerator::*)(System::IAsyncResult*)>(&OVRHandTest::BoolMonitor::BoolGenerator::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::BoolMonitor::BoolGenerator*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRHandTest/<>c
#include "GlobalNamespace/OVRHandTest_--c.hpp"
// Including type: OVRHandTest/BoolMonitor/BoolGenerator
#include "GlobalNamespace/OVRHandTest_BoolMonitor_BoolGenerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly OVRHandTest/<>c <>9
GlobalNamespace::OVRHandTest::$$c* GlobalNamespace::OVRHandTest::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHandTest::$$c*>("", "OVRHandTest/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly OVRHandTest/<>c <>9
void GlobalNamespace::OVRHandTest::$$c::_set_$$9(GlobalNamespace::OVRHandTest::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRHandTest/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public OVRHandTest/BoolMonitor/BoolGenerator <>9__14_0
GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator* GlobalNamespace::OVRHandTest::$$c::_get_$$9__14_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::$$c::_get_$$9__14_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator*>("", "OVRHandTest/<>c", "<>9__14_0")));
}
// Autogenerated static field setter
// Set static field: static public OVRHandTest/BoolMonitor/BoolGenerator <>9__14_0
void GlobalNamespace::OVRHandTest::$$c::_set_$$9__14_0(GlobalNamespace::OVRHandTest::BoolMonitor::BoolGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::$$c::_set_$$9__14_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "OVRHandTest/<>c", "<>9__14_0", value)));
}
// Autogenerated method: OVRHandTest/<>c..cctor
void GlobalNamespace::OVRHandTest::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRHandTest/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVRHandTest/<>c.<Start>b__14_0
bool GlobalNamespace::OVRHandTest::$$c::$Start$b__14_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::$$c::<Start>b__14_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__14_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRHandTest/<>c.<.cctor>b__19_0
bool GlobalNamespace::OVRHandTest::$$c::$_cctor$b__19_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::$$c::<.cctor>b__19_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__19_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRHandTest::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRHandTest::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHandTest::$$c::$Start$b__14_0
// Il2CppName: <Start>b__14_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHandTest::$$c::*)()>(&OVRHandTest::$$c::$Start$b__14_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::$$c*), "<Start>b__14_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHandTest::$$c::$_cctor$b__19_0
// Il2CppName: <.cctor>b__19_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRHandTest::$$c::*)()>(&OVRHandTest::$$c::$_cctor$b__19_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::$$c*), "<.cctor>b__19_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRHandTest::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::$$c::*)()>(&OVRHandTest::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRHandTest::$$c::*)()>(&OVRHandTest::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRHandTest::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMesh
#include "GlobalNamespace/OVRMesh.hpp"
// Including type: OVRMesh/IOVRMeshDataProvider
#include "GlobalNamespace/OVRMesh_IOVRMeshDataProvider.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMesh.get_IsInitialized
bool GlobalNamespace::OVRMesh::get_IsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::get_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMesh.set_IsInitialized
void GlobalNamespace::OVRMesh::set_IsInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::set_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMesh.get_Mesh
UnityEngine::Mesh* GlobalNamespace::OVRMesh::get_Mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::get_Mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: OVRMesh.Awake
void GlobalNamespace::OVRMesh::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMesh.ShouldInitialize
bool GlobalNamespace::OVRMesh::ShouldInitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::ShouldInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMesh.Initialize
void GlobalNamespace::OVRMesh::Initialize(GlobalNamespace::OVRMesh::MeshType meshType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(meshType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, meshType);
}
// Writing MetadataGetter for method: OVRMesh::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMesh::*)()>(&OVRMesh::get_IsInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMesh*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMesh::set_IsInitialized
// Il2CppName: set_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMesh::*)(bool)>(&OVRMesh::set_IsInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMesh*), "set_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMesh::get_Mesh
// Il2CppName: get_Mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (OVRMesh::*)()>(&OVRMesh::get_Mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMesh*), "get_Mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMesh::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMesh::*)()>(&OVRMesh::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMesh*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMesh::ShouldInitialize
// Il2CppName: ShouldInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMesh::*)()>(&OVRMesh::ShouldInitialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMesh*), "ShouldInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMesh::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMesh::*)(GlobalNamespace::OVRMesh::MeshType)>(&OVRMesh::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMesh*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRMesh::MeshType>()});
  }
};
// Writing MetadataGetter for method: OVRMesh::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMesh::*)()>(&OVRMesh::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMesh*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMesh::*)()>(&OVRMesh::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMesh*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMesh/IOVRMeshDataProvider
#include "GlobalNamespace/OVRMesh_IOVRMeshDataProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMesh/IOVRMeshDataProvider.GetMeshType
GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRMesh::IOVRMeshDataProvider::GetMeshType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::IOVRMeshDataProvider::GetMeshType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMeshType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRMesh::MeshType, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRMesh::IOVRMeshDataProvider::GetMeshType
// Il2CppName: GetMeshType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRMesh::MeshType (OVRMesh::IOVRMeshDataProvider::*)()>(&OVRMesh::IOVRMeshDataProvider::GetMeshType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMesh::IOVRMeshDataProvider*), "GetMeshType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMesh/MeshType
#include "GlobalNamespace/OVRMesh.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRMesh/MeshType None
GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRMesh::MeshType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::MeshType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRMesh::MeshType>("", "OVRMesh/MeshType", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRMesh/MeshType None
void GlobalNamespace::OVRMesh::MeshType::_set_None(GlobalNamespace::OVRMesh::MeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::MeshType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMesh/MeshType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMesh/MeshType HandLeft
GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRMesh::MeshType::_get_HandLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::MeshType::_get_HandLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRMesh::MeshType>("", "OVRMesh/MeshType", "HandLeft"));
}
// Autogenerated static field setter
// Set static field: static public OVRMesh/MeshType HandLeft
void GlobalNamespace::OVRMesh::MeshType::_set_HandLeft(GlobalNamespace::OVRMesh::MeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::MeshType::_set_HandLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMesh/MeshType", "HandLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMesh/MeshType HandRight
GlobalNamespace::OVRMesh::MeshType GlobalNamespace::OVRMesh::MeshType::_get_HandRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::MeshType::_get_HandRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRMesh::MeshType>("", "OVRMesh/MeshType", "HandRight"));
}
// Autogenerated static field setter
// Set static field: static public OVRMesh/MeshType HandRight
void GlobalNamespace::OVRMesh::MeshType::_set_HandRight(GlobalNamespace::OVRMesh::MeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMesh::MeshType::_set_HandRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMesh/MeshType", "HandRight", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer
#include "GlobalNamespace/OVRMeshRenderer.hpp"
// Including type: OVRMeshRenderer/IOVRMeshRendererDataProvider
#include "GlobalNamespace/OVRMeshRenderer_IOVRMeshRendererDataProvider.hpp"
// Including type: OVRMeshRenderer/MeshRendererData
#include "GlobalNamespace/OVRMeshRenderer_MeshRendererData.hpp"
// Including type: UnityEngine.SkinnedMeshRenderer
#include "UnityEngine/SkinnedMeshRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: OVRMesh
#include "GlobalNamespace/OVRMesh.hpp"
// Including type: OVRSkeleton
#include "GlobalNamespace/OVRSkeleton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMeshRenderer.get_IsInitialized
bool GlobalNamespace::OVRMeshRenderer::get_IsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::get_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.set_IsInitialized
void GlobalNamespace::OVRMeshRenderer::set_IsInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::set_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer.get_IsDataValid
bool GlobalNamespace::OVRMeshRenderer::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.set_IsDataValid
void GlobalNamespace::OVRMeshRenderer::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer.get_IsDataHighConfidence
bool GlobalNamespace::OVRMeshRenderer::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.set_IsDataHighConfidence
void GlobalNamespace::OVRMeshRenderer::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer.get_ShouldUseSystemGestureMaterial
bool GlobalNamespace::OVRMeshRenderer::get_ShouldUseSystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::get_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.set_ShouldUseSystemGestureMaterial
void GlobalNamespace::OVRMeshRenderer::set_ShouldUseSystemGestureMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::set_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer.Awake
void GlobalNamespace::OVRMeshRenderer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.Start
void GlobalNamespace::OVRMeshRenderer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.ShouldInitialize
bool GlobalNamespace::OVRMeshRenderer::ShouldInitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::ShouldInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.Initialize
void GlobalNamespace::OVRMeshRenderer::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer.Update
void GlobalNamespace::OVRMeshRenderer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRMeshRenderer::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMeshRenderer::*)()>(&OVRMeshRenderer::get_IsInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::set_IsInitialized
// Il2CppName: set_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::*)(bool)>(&OVRMeshRenderer::set_IsInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "set_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::get_IsDataValid
// Il2CppName: get_IsDataValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMeshRenderer::*)()>(&OVRMeshRenderer::get_IsDataValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "get_IsDataValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::set_IsDataValid
// Il2CppName: set_IsDataValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::*)(bool)>(&OVRMeshRenderer::set_IsDataValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "set_IsDataValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::get_IsDataHighConfidence
// Il2CppName: get_IsDataHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMeshRenderer::*)()>(&OVRMeshRenderer::get_IsDataHighConfidence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "get_IsDataHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::set_IsDataHighConfidence
// Il2CppName: set_IsDataHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::*)(bool)>(&OVRMeshRenderer::set_IsDataHighConfidence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "set_IsDataHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::get_ShouldUseSystemGestureMaterial
// Il2CppName: get_ShouldUseSystemGestureMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMeshRenderer::*)()>(&OVRMeshRenderer::get_ShouldUseSystemGestureMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::set_ShouldUseSystemGestureMaterial
// Il2CppName: set_ShouldUseSystemGestureMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::*)(bool)>(&OVRMeshRenderer::set_ShouldUseSystemGestureMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::*)()>(&OVRMeshRenderer::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::*)()>(&OVRMeshRenderer::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::ShouldInitialize
// Il2CppName: ShouldInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMeshRenderer::*)()>(&OVRMeshRenderer::ShouldInitialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "ShouldInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::*)()>(&OVRMeshRenderer::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::*)()>(&OVRMeshRenderer::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::*)()>(&OVRMeshRenderer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::*)()>(&OVRMeshRenderer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer/IOVRMeshRendererDataProvider
#include "GlobalNamespace/OVRMeshRenderer_IOVRMeshRendererDataProvider.hpp"
// Including type: OVRMeshRenderer/MeshRendererData
#include "GlobalNamespace/OVRMeshRenderer_MeshRendererData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMeshRenderer/IOVRMeshRendererDataProvider.GetMeshRendererData
GlobalNamespace::OVRMeshRenderer::MeshRendererData GlobalNamespace::OVRMeshRenderer::IOVRMeshRendererDataProvider::GetMeshRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::IOVRMeshRendererDataProvider::GetMeshRendererData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMeshRendererData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRMeshRenderer::MeshRendererData, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRMeshRenderer::IOVRMeshRendererDataProvider::GetMeshRendererData
// Il2CppName: GetMeshRendererData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRMeshRenderer::MeshRendererData (OVRMeshRenderer::IOVRMeshRendererDataProvider::*)()>(&OVRMeshRenderer::IOVRMeshRendererDataProvider::GetMeshRendererData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer::IOVRMeshRendererDataProvider*), "GetMeshRendererData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer/MeshRendererData
#include "GlobalNamespace/OVRMeshRenderer_MeshRendererData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMeshRenderer/MeshRendererData.get_IsDataValid
bool GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.set_IsDataValid
void GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.get_IsDataHighConfidence
bool GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.set_IsDataHighConfidence
void GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.get_ShouldUseSystemGestureMaterial
bool GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_ShouldUseSystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::MeshRendererData::get_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRMeshRenderer/MeshRendererData.set_ShouldUseSystemGestureMaterial
void GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_ShouldUseSystemGestureMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::MeshRendererData::set_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: OVRMeshRenderer::MeshRendererData::get_IsDataValid
// Il2CppName: get_IsDataValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMeshRenderer::MeshRendererData::*)()>(&OVRMeshRenderer::MeshRendererData::get_IsDataValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer::MeshRendererData), "get_IsDataValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::MeshRendererData::set_IsDataValid
// Il2CppName: set_IsDataValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::MeshRendererData::*)(bool)>(&OVRMeshRenderer::MeshRendererData::set_IsDataValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer::MeshRendererData), "set_IsDataValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::MeshRendererData::get_IsDataHighConfidence
// Il2CppName: get_IsDataHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMeshRenderer::MeshRendererData::*)()>(&OVRMeshRenderer::MeshRendererData::get_IsDataHighConfidence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer::MeshRendererData), "get_IsDataHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::MeshRendererData::set_IsDataHighConfidence
// Il2CppName: set_IsDataHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::MeshRendererData::*)(bool)>(&OVRMeshRenderer::MeshRendererData::set_IsDataHighConfidence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer::MeshRendererData), "set_IsDataHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::MeshRendererData::get_ShouldUseSystemGestureMaterial
// Il2CppName: get_ShouldUseSystemGestureMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMeshRenderer::MeshRendererData::*)()>(&OVRMeshRenderer::MeshRendererData::get_ShouldUseSystemGestureMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer::MeshRendererData), "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMeshRenderer::MeshRendererData::set_ShouldUseSystemGestureMaterial
// Il2CppName: set_ShouldUseSystemGestureMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMeshRenderer::MeshRendererData::*)(bool)>(&OVRMeshRenderer::MeshRendererData::set_ShouldUseSystemGestureMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMeshRenderer::MeshRendererData), "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer/ConfidenceBehavior
#include "GlobalNamespace/OVRMeshRenderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRMeshRenderer/ConfidenceBehavior None
GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior>("", "OVRMeshRenderer/ConfidenceBehavior", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRMeshRenderer/ConfidenceBehavior None
void GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_set_None(GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMeshRenderer/ConfidenceBehavior", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMeshRenderer/ConfidenceBehavior ToggleRenderer
GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_get_ToggleRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_get_ToggleRenderer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior>("", "OVRMeshRenderer/ConfidenceBehavior", "ToggleRenderer"));
}
// Autogenerated static field setter
// Set static field: static public OVRMeshRenderer/ConfidenceBehavior ToggleRenderer
void GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_set_ToggleRenderer(GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::ConfidenceBehavior::_set_ToggleRenderer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMeshRenderer/ConfidenceBehavior", "ToggleRenderer", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMeshRenderer/SystemGestureBehavior
#include "GlobalNamespace/OVRMeshRenderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRMeshRenderer/SystemGestureBehavior None
GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior>("", "OVRMeshRenderer/SystemGestureBehavior", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRMeshRenderer/SystemGestureBehavior None
void GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_set_None(GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMeshRenderer/SystemGestureBehavior", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMeshRenderer/SystemGestureBehavior SwapMaterial
GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_get_SwapMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_get_SwapMaterial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior>("", "OVRMeshRenderer/SystemGestureBehavior", "SwapMaterial"));
}
// Autogenerated static field setter
// Set static field: static public OVRMeshRenderer/SystemGestureBehavior SwapMaterial
void GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_set_SwapMaterial(GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMeshRenderer::SystemGestureBehavior::_set_SwapMaterial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMeshRenderer/SystemGestureBehavior", "SwapMaterial", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMixedRealityCaptureConfiguration
#include "GlobalNamespace/OVRMixedRealityCaptureConfiguration.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: OVRManager/CompositionMethod
#include "GlobalNamespace/OVRManager_CompositionMethod.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: OVRManager/CameraDevice
#include "GlobalNamespace/OVRManager_CameraDevice.hpp"
// Including type: OVRManager/DepthQuality
#include "GlobalNamespace/OVRManager_DepthQuality.hpp"
// Including type: OVRManager/VirtualGreenScreenType
#include "GlobalNamespace/OVRManager_VirtualGreenScreenType.hpp"
// Including type: OVRManager/MrcActivationMode
#include "GlobalNamespace/OVRManager_MrcActivationMode.hpp"
// Including type: OVRManager/InstantiateMrcCameraDelegate
#include "GlobalNamespace/OVRManager_InstantiateMrcCameraDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_enableMixedReality
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_enableMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_enableMixedReality
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_enableMixedReality(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers
UnityEngine::LayerMask GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_extraHiddenLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extraHiddenLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_extraHiddenLayers(UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_extraHiddenLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers
UnityEngine::LayerMask GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_extraVisibleLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extraVisibleLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_extraVisibleLayers(UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_extraVisibleLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicCullingMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dynamicCullingMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicCullingMask(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dynamicCullingMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_compositionMethod
GlobalNamespace::OVRManager_CompositionMethod GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_compositionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_compositionMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_compositionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_CompositionMethod, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_compositionMethod
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_compositionMethod(GlobalNamespace::OVRManager_CompositionMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_compositionMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_compositionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift
UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorRift(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest
UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorQuest(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice
GlobalNamespace::OVRManager_CameraDevice GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_capturingCameraDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_capturingCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_CameraDevice, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_capturingCameraDevice(GlobalNamespace::OVRManager_CameraDevice value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_capturingCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_flipCameraFrameHorizontally() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flipCameraFrameHorizontally", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_flipCameraFrameHorizontally(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flipCameraFrameHorizontally", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_flipCameraFrameVertically() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flipCameraFrameVertically", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_flipCameraFrameVertically(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flipCameraFrameVertically", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_handPoseStateLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handPoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_handPoseStateLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handPoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_sandwichCompositionRenderLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_sandwichCompositionRenderLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames
int GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_sandwichCompositionBufferedFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_sandwichCompositionBufferedFrames(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_chromaKeyColor
UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeyColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeyColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_chromaKeyColor
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeyColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeyColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySimilarity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeySimilarity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySimilarity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeySimilarity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySmoothRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeySmoothRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySmoothRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeySmoothRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySpillRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chromaKeySpillRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySpillRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_chromaKeySpillRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_useDynamicLighting
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_useDynamicLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useDynamicLighting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_useDynamicLighting
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_useDynamicLighting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useDynamicLighting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_depthQuality
GlobalNamespace::OVRManager_DepthQuality GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_depthQuality() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_depthQuality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_depthQuality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_DepthQuality, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_depthQuality
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_depthQuality(GlobalNamespace::OVRManager_DepthQuality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_depthQuality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_depthQuality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicLightingSmoothFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicLightingSmoothFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicLightingDepthVariationClampingValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicLightingDepthVariationClampingValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType
GlobalNamespace::OVRManager_VirtualGreenScreenType GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_VirtualGreenScreenType, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenType(GlobalNamespace::OVRManager_VirtualGreenScreenType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenTopY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenTopY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenTopY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenTopY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenBottomY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenBottomY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenBottomY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenBottomY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling
bool GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenApplyDepthCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenApplyDepthCulling(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance
float GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenDepthTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenDepthTolerance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_mrcActivationMode
GlobalNamespace::OVRManager_MrcActivationMode GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_mrcActivationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_MrcActivationMode, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_mrcActivationMode
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_mrcActivationMode(GlobalNamespace::OVRManager_MrcActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject
GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_instantiateMixedRealityCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::get_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject
void GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_instantiateMixedRealityCameraGameObject(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfiguration::set_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_enableMixedReality
// Il2CppName: get_enableMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_enableMixedReality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_enableMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_enableMixedReality
// Il2CppName: set_enableMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_enableMixedReality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_enableMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_extraHiddenLayers
// Il2CppName: get_extraHiddenLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_extraHiddenLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_extraHiddenLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_extraHiddenLayers
// Il2CppName: set_extraHiddenLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(UnityEngine::LayerMask)>(&OVRMixedRealityCaptureConfiguration::set_extraHiddenLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_extraHiddenLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LayerMask>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_extraVisibleLayers
// Il2CppName: get_extraVisibleLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_extraVisibleLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_extraVisibleLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_extraVisibleLayers
// Il2CppName: set_extraVisibleLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(UnityEngine::LayerMask)>(&OVRMixedRealityCaptureConfiguration::set_extraVisibleLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_extraVisibleLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LayerMask>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_dynamicCullingMask
// Il2CppName: get_dynamicCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_dynamicCullingMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_dynamicCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_dynamicCullingMask
// Il2CppName: set_dynamicCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_dynamicCullingMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_dynamicCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_compositionMethod
// Il2CppName: get_compositionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_CompositionMethod (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_compositionMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_compositionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_compositionMethod
// Il2CppName: set_compositionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_CompositionMethod)>(&OVRMixedRealityCaptureConfiguration::set_compositionMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_compositionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_CompositionMethod>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorRift
// Il2CppName: get_externalCompositionBackdropColorRift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorRift)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorRift
// Il2CppName: set_externalCompositionBackdropColorRift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(UnityEngine::Color)>(&OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorRift)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorQuest
// Il2CppName: get_externalCompositionBackdropColorQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorQuest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorQuest
// Il2CppName: set_externalCompositionBackdropColorQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(UnityEngine::Color)>(&OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorQuest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_capturingCameraDevice
// Il2CppName: get_capturingCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_CameraDevice (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_capturingCameraDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_capturingCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_capturingCameraDevice
// Il2CppName: set_capturingCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_CameraDevice)>(&OVRMixedRealityCaptureConfiguration::set_capturingCameraDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_capturingCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_CameraDevice>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_flipCameraFrameHorizontally
// Il2CppName: get_flipCameraFrameHorizontally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_flipCameraFrameHorizontally)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_flipCameraFrameHorizontally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_flipCameraFrameHorizontally
// Il2CppName: set_flipCameraFrameHorizontally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_flipCameraFrameHorizontally)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_flipCameraFrameHorizontally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_flipCameraFrameVertically
// Il2CppName: get_flipCameraFrameVertically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_flipCameraFrameVertically)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_flipCameraFrameVertically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_flipCameraFrameVertically
// Il2CppName: set_flipCameraFrameVertically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_flipCameraFrameVertically)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_flipCameraFrameVertically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_handPoseStateLatency
// Il2CppName: get_handPoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_handPoseStateLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_handPoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_handPoseStateLatency
// Il2CppName: set_handPoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_handPoseStateLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_handPoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_sandwichCompositionRenderLatency
// Il2CppName: get_sandwichCompositionRenderLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_sandwichCompositionRenderLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_sandwichCompositionRenderLatency
// Il2CppName: set_sandwichCompositionRenderLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_sandwichCompositionRenderLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_sandwichCompositionBufferedFrames
// Il2CppName: get_sandwichCompositionBufferedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_sandwichCompositionBufferedFrames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_sandwichCompositionBufferedFrames
// Il2CppName: set_sandwichCompositionBufferedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(int)>(&OVRMixedRealityCaptureConfiguration::set_sandwichCompositionBufferedFrames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_chromaKeyColor
// Il2CppName: get_chromaKeyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_chromaKeyColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_chromaKeyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_chromaKeyColor
// Il2CppName: set_chromaKeyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(UnityEngine::Color)>(&OVRMixedRealityCaptureConfiguration::set_chromaKeyColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_chromaKeyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_chromaKeySimilarity
// Il2CppName: get_chromaKeySimilarity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_chromaKeySimilarity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_chromaKeySimilarity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_chromaKeySimilarity
// Il2CppName: set_chromaKeySimilarity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_chromaKeySimilarity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_chromaKeySimilarity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_chromaKeySmoothRange
// Il2CppName: get_chromaKeySmoothRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_chromaKeySmoothRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_chromaKeySmoothRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_chromaKeySmoothRange
// Il2CppName: set_chromaKeySmoothRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_chromaKeySmoothRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_chromaKeySmoothRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_chromaKeySpillRange
// Il2CppName: get_chromaKeySpillRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_chromaKeySpillRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_chromaKeySpillRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_chromaKeySpillRange
// Il2CppName: set_chromaKeySpillRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_chromaKeySpillRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_chromaKeySpillRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_useDynamicLighting
// Il2CppName: get_useDynamicLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_useDynamicLighting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_useDynamicLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_useDynamicLighting
// Il2CppName: set_useDynamicLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_useDynamicLighting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_useDynamicLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_depthQuality
// Il2CppName: get_depthQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_DepthQuality (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_depthQuality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_depthQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_depthQuality
// Il2CppName: set_depthQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_DepthQuality)>(&OVRMixedRealityCaptureConfiguration::set_depthQuality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_depthQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_DepthQuality>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_dynamicLightingSmoothFactor
// Il2CppName: get_dynamicLightingSmoothFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_dynamicLightingSmoothFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_dynamicLightingSmoothFactor
// Il2CppName: set_dynamicLightingSmoothFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_dynamicLightingSmoothFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_dynamicLightingDepthVariationClampingValue
// Il2CppName: get_dynamicLightingDepthVariationClampingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_dynamicLightingDepthVariationClampingValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_dynamicLightingDepthVariationClampingValue
// Il2CppName: set_dynamicLightingDepthVariationClampingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_dynamicLightingDepthVariationClampingValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenType
// Il2CppName: get_virtualGreenScreenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_VirtualGreenScreenType (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_virtualGreenScreenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenType
// Il2CppName: set_virtualGreenScreenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_VirtualGreenScreenType)>(&OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_virtualGreenScreenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_VirtualGreenScreenType>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenTopY
// Il2CppName: get_virtualGreenScreenTopY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenTopY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_virtualGreenScreenTopY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenTopY
// Il2CppName: set_virtualGreenScreenTopY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenTopY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_virtualGreenScreenTopY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenBottomY
// Il2CppName: get_virtualGreenScreenBottomY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenBottomY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_virtualGreenScreenBottomY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenBottomY
// Il2CppName: set_virtualGreenScreenBottomY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenBottomY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_virtualGreenScreenBottomY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenApplyDepthCulling
// Il2CppName: get_virtualGreenScreenApplyDepthCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenApplyDepthCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenApplyDepthCulling
// Il2CppName: set_virtualGreenScreenApplyDepthCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenApplyDepthCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenDepthTolerance
// Il2CppName: get_virtualGreenScreenDepthTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenDepthTolerance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenDepthTolerance
// Il2CppName: set_virtualGreenScreenDepthTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenDepthTolerance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_mrcActivationMode
// Il2CppName: get_mrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_MrcActivationMode (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_mrcActivationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_mrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_mrcActivationMode
// Il2CppName: set_mrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_MrcActivationMode)>(&OVRMixedRealityCaptureConfiguration::set_mrcActivationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_mrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_MrcActivationMode>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_instantiateMixedRealityCameraGameObject
// Il2CppName: get_instantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_instantiateMixedRealityCameraGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_instantiateMixedRealityCameraGameObject
// Il2CppName: set_instantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*)>(&OVRMixedRealityCaptureConfiguration::set_instantiateMixedRealityCameraGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMixedRealityCaptureConfigurationExtensions
#include "GlobalNamespace/OVRMixedRealityCaptureConfigurationExtensions.hpp"
// Including type: OVRMixedRealityCaptureConfiguration
#include "GlobalNamespace/OVRMixedRealityCaptureConfiguration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMixedRealityCaptureConfigurationExtensions.ApplyTo
void GlobalNamespace::OVRMixedRealityCaptureConfigurationExtensions::ApplyTo(GlobalNamespace::OVRMixedRealityCaptureConfiguration* dest, GlobalNamespace::OVRMixedRealityCaptureConfiguration* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfigurationExtensions::ApplyTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMixedRealityCaptureConfigurationExtensions", "ApplyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dest, source);
}
// Autogenerated method: OVRMixedRealityCaptureConfigurationExtensions.ReadFrom
void GlobalNamespace::OVRMixedRealityCaptureConfigurationExtensions::ReadFrom(GlobalNamespace::OVRMixedRealityCaptureConfiguration* dest, GlobalNamespace::OVRMixedRealityCaptureConfiguration* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureConfigurationExtensions::ReadFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRMixedRealityCaptureConfigurationExtensions", "ReadFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dest, source);
}
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfigurationExtensions::ApplyTo
// Il2CppName: ApplyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::OVRMixedRealityCaptureConfiguration*, GlobalNamespace::OVRMixedRealityCaptureConfiguration*)>(&OVRMixedRealityCaptureConfigurationExtensions::ApplyTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfigurationExtensions*), "ApplyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRMixedRealityCaptureConfiguration*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRMixedRealityCaptureConfiguration*>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfigurationExtensions::ReadFrom
// Il2CppName: ReadFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::OVRMixedRealityCaptureConfiguration*, GlobalNamespace::OVRMixedRealityCaptureConfiguration*)>(&OVRMixedRealityCaptureConfigurationExtensions::ReadFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfigurationExtensions*), "ReadFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRMixedRealityCaptureConfiguration*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRMixedRealityCaptureConfiguration*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMixedRealityCaptureSettings
#include "GlobalNamespace/OVRMixedRealityCaptureSettings.hpp"
// Including type: OVRManager/InstantiateMrcCameraDelegate
#include "GlobalNamespace/OVRManager_InstantiateMrcCameraDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_enableMixedReality
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_enableMixedReality() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_enableMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_enableMixedReality
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_enableMixedReality(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_enableMixedReality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_enableMixedReality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers
UnityEngine::LayerMask GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_extraHiddenLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_extraHiddenLayers(UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers
UnityEngine::LayerMask GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_extraVisibleLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LayerMask, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_extraVisibleLayers(UnityEngine::LayerMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicCullingMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicCullingMask(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_compositionMethod
GlobalNamespace::OVRManager_CompositionMethod GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_compositionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_compositionMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_compositionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_CompositionMethod, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_compositionMethod
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_compositionMethod(GlobalNamespace::OVRManager_CompositionMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_compositionMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_compositionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift
UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorRift(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest
UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorQuest(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice
GlobalNamespace::OVRManager_CameraDevice GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_capturingCameraDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_CameraDevice, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_capturingCameraDevice(GlobalNamespace::OVRManager_CameraDevice value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameHorizontally() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameHorizontally(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameVertically() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameVertically(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_handPoseStateLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_handPoseStateLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionRenderLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionRenderLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames
int GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionBufferedFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionBufferedFrames(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_chromaKeyColor
UnityEngine::Color GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeyColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_chromaKeyColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_chromaKeyColor
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeyColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_chromaKeyColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_chromaKeyColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySimilarity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySimilarity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySmoothRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySmoothRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySpillRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySpillRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_useDynamicLighting
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_useDynamicLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_useDynamicLighting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_useDynamicLighting
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_useDynamicLighting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_useDynamicLighting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_useDynamicLighting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_depthQuality
GlobalNamespace::OVRManager_DepthQuality GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_depthQuality() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_depthQuality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_depthQuality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_DepthQuality, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_depthQuality
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_depthQuality(GlobalNamespace::OVRManager_DepthQuality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_depthQuality");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_depthQuality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicLightingSmoothFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicLightingSmoothFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicLightingDepthVariationClampingValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicLightingDepthVariationClampingValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType
GlobalNamespace::OVRManager_VirtualGreenScreenType GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_VirtualGreenScreenType, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenType(GlobalNamespace::OVRManager_VirtualGreenScreenType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenTopY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenTopY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenBottomY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenBottomY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling
bool GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenApplyDepthCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenApplyDepthCulling(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance
float GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenDepthTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenDepthTolerance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_mrcActivationMode
GlobalNamespace::OVRManager_MrcActivationMode GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_mrcActivationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_mrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_MrcActivationMode, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_mrcActivationMode
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_mrcActivationMode(GlobalNamespace::OVRManager_MrcActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_mrcActivationMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_mrcActivationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject
GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_instantiateMixedRealityCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureSettings.OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject
void GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_instantiateMixedRealityCameraGameObject(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_enableMixedReality
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_enableMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_enableMixedReality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_enableMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_enableMixedReality
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_enableMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(bool)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_enableMixedReality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_enableMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_extraHiddenLayers
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_extraHiddenLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_extraHiddenLayers
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(UnityEngine::LayerMask)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_extraHiddenLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LayerMask>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_extraVisibleLayers
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_extraVisibleLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_extraVisibleLayers
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(UnityEngine::LayerMask)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_extraVisibleLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LayerMask>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicCullingMask
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicCullingMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicCullingMask
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(bool)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicCullingMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_compositionMethod
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_compositionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_CompositionMethod (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_compositionMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_compositionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_compositionMethod
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_compositionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(GlobalNamespace::OVRManager_CompositionMethod)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_compositionMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_compositionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_CompositionMethod>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorRift
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorRift)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorRift
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(UnityEngine::Color)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorRift)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorQuest
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorQuest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorQuest
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(UnityEngine::Color)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorQuest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_capturingCameraDevice
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_CameraDevice (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_capturingCameraDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_capturingCameraDevice
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(GlobalNamespace::OVRManager_CameraDevice)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_capturingCameraDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_CameraDevice>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameHorizontally
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameHorizontally)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameHorizontally
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(bool)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameHorizontally)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameVertically
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameVertically)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameVertically
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(bool)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameVertically)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_handPoseStateLatency
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_handPoseStateLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_handPoseStateLatency
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(float)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_handPoseStateLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionRenderLatency
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionRenderLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionRenderLatency
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(float)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionRenderLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionBufferedFrames
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionBufferedFrames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionBufferedFrames
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(int)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionBufferedFrames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeyColor
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_chromaKeyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeyColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_chromaKeyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeyColor
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_chromaKeyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(UnityEngine::Color)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeyColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_chromaKeyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySimilarity
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySimilarity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySimilarity
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(float)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySimilarity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySmoothRange
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySmoothRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySmoothRange
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(float)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySmoothRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySpillRange
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_chromaKeySpillRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySpillRange
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(float)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_chromaKeySpillRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_useDynamicLighting
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_useDynamicLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_useDynamicLighting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_useDynamicLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_useDynamicLighting
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_useDynamicLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(bool)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_useDynamicLighting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_useDynamicLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_depthQuality
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_depthQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_DepthQuality (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_depthQuality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_depthQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_depthQuality
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_depthQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(GlobalNamespace::OVRManager_DepthQuality)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_depthQuality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_depthQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_DepthQuality>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicLightingSmoothFactor
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicLightingSmoothFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicLightingSmoothFactor
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(float)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicLightingSmoothFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicLightingDepthVariationClampingValue
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_dynamicLightingDepthVariationClampingValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicLightingDepthVariationClampingValue
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(float)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_dynamicLightingDepthVariationClampingValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenType
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_VirtualGreenScreenType (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenType
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(GlobalNamespace::OVRManager_VirtualGreenScreenType)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_VirtualGreenScreenType>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenTopY
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenTopY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenTopY
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(float)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenTopY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenBottomY
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenBottomY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenBottomY
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(float)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenBottomY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenApplyDepthCulling
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenApplyDepthCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenApplyDepthCulling
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(bool)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenApplyDepthCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenDepthTolerance
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenDepthTolerance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenDepthTolerance
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(float)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenDepthTolerance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_mrcActivationMode
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_mrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_MrcActivationMode (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_mrcActivationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_mrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_mrcActivationMode
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_mrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(GlobalNamespace::OVRManager_MrcActivationMode)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_mrcActivationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_mrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_MrcActivationMode>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_instantiateMixedRealityCameraGameObject
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_get_instantiateMixedRealityCameraGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_instantiateMixedRealityCameraGameObject
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*)>(&OVRMixedRealityCaptureSettings::OVRMixedRealityCaptureConfiguration_set_instantiateMixedRealityCameraGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), "OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureSettings::*)()>(&OVRMixedRealityCaptureSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMixedRealityCaptureTest
#include "GlobalNamespace/OVRMixedRealityCaptureTest.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMixedRealityCaptureTest.Start
void GlobalNamespace::OVRMixedRealityCaptureTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureTest::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureTest.Initialize
void GlobalNamespace::OVRMixedRealityCaptureTest::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureTest::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureTest.UpdateDefaultExternalCamera
void GlobalNamespace::OVRMixedRealityCaptureTest::UpdateDefaultExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureTest::UpdateDefaultExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDefaultExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRMixedRealityCaptureTest.Update
void GlobalNamespace::OVRMixedRealityCaptureTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRMixedRealityCaptureTest::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureTest::*)()>(&OVRMixedRealityCaptureTest::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureTest*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureTest::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureTest::*)()>(&OVRMixedRealityCaptureTest::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureTest*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureTest::UpdateDefaultExternalCamera
// Il2CppName: UpdateDefaultExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureTest::*)()>(&OVRMixedRealityCaptureTest::UpdateDefaultExternalCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureTest*), "UpdateDefaultExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureTest::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureTest::*)()>(&OVRMixedRealityCaptureTest::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureTest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureTest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureTest::*)()>(&OVRMixedRealityCaptureTest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureTest::*)()>(&OVRMixedRealityCaptureTest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMixedRealityCaptureTest/CameraMode
#include "GlobalNamespace/OVRMixedRealityCaptureTest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRMixedRealityCaptureTest/CameraMode Normal
GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode>("", "OVRMixedRealityCaptureTest/CameraMode", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public OVRMixedRealityCaptureTest/CameraMode Normal
void GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_Normal(GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMixedRealityCaptureTest/CameraMode", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMixedRealityCaptureTest/CameraMode OverrideFov
GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_OverrideFov() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_OverrideFov");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode>("", "OVRMixedRealityCaptureTest/CameraMode", "OverrideFov"));
}
// Autogenerated static field setter
// Set static field: static public OVRMixedRealityCaptureTest/CameraMode OverrideFov
void GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_OverrideFov(GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_OverrideFov");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMixedRealityCaptureTest/CameraMode", "OverrideFov", value));
}
// Autogenerated static field getter
// Get static field: static public OVRMixedRealityCaptureTest/CameraMode ThirdPerson
GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_ThirdPerson() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_get_ThirdPerson");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode>("", "OVRMixedRealityCaptureTest/CameraMode", "ThirdPerson"));
}
// Autogenerated static field setter
// Set static field: static public OVRMixedRealityCaptureTest/CameraMode ThirdPerson
void GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_ThirdPerson(GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureTest::CameraMode::_set_ThirdPerson");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRMixedRealityCaptureTest/CameraMode", "ThirdPerson", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRModeParms
#include "GlobalNamespace/OVRModeParms.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRModeParms.Start
void GlobalNamespace::OVRModeParms::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRModeParms::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRModeParms.Update
void GlobalNamespace::OVRModeParms::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRModeParms::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRModeParms.TestPowerStateMode
void GlobalNamespace::OVRModeParms::TestPowerStateMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRModeParms::TestPowerStateMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestPowerStateMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRModeParms::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRModeParms::*)()>(&OVRModeParms::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRModeParms*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRModeParms::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRModeParms::*)()>(&OVRModeParms::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRModeParms*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRModeParms::TestPowerStateMode
// Il2CppName: TestPowerStateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRModeParms::*)()>(&OVRModeParms::TestPowerStateMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRModeParms*), "TestPowerStateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRModeParms::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRModeParms::*)()>(&OVRModeParms::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRModeParms*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRModeParms::*)()>(&OVRModeParms::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRModeParms*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRMonoscopic
#include "GlobalNamespace/OVRMonoscopic.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRMonoscopic.Update
void GlobalNamespace::OVRMonoscopic::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMonoscopic::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OVRMonoscopic::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMonoscopic::*)()>(&OVRMonoscopic::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMonoscopic*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMonoscopic::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMonoscopic::*)()>(&OVRMonoscopic::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMonoscopic*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMonoscopic::*)()>(&OVRMonoscopic::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMonoscopic*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRNetwork
#include "GlobalNamespace/OVRNetwork.hpp"
// Including type: OVRNetwork/FrameHeader
#include "GlobalNamespace/OVRNetwork_FrameHeader.hpp"
// Including type: OVRNetwork/OVRNetworkTcpServer
#include "GlobalNamespace/OVRNetwork_OVRNetworkTcpServer.hpp"
// Including type: OVRNetwork/OVRNetworkTcpClient
#include "GlobalNamespace/OVRNetwork_OVRNetworkTcpClient.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxBufferLength
int GlobalNamespace::OVRNetwork::_get_MaxBufferLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRNetwork::_get_MaxBufferLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRNetwork", "MaxBufferLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxBufferLength
void GlobalNamespace::OVRNetwork::_set_MaxBufferLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRNetwork::_set_MaxBufferLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRNetwork", "MaxBufferLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxPayloadLength
int GlobalNamespace::OVRNetwork::_get_MaxPayloadLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRNetwork::_get_MaxPayloadLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRNetwork", "MaxPayloadLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxPayloadLength
void GlobalNamespace::OVRNetwork::_set_MaxPayloadLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRNetwork::_set_MaxPayloadLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRNetwork", "MaxPayloadLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 FrameHeaderMagicIdentifier
uint GlobalNamespace::OVRNetwork::_get_FrameHeaderMagicIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRNetwork::_get_FrameHeaderMagicIdentifier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("", "OVRNetwork", "FrameHeaderMagicIdentifier"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 FrameHeaderMagicIdentifier
void GlobalNamespace::OVRNetwork::_set_FrameHeaderMagicIdentifier(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRNetwork::_set_FrameHeaderMagicIdentifier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRNetwork", "FrameHeaderMagicIdentifier", value));
}
// Writing MetadataGetter for method: OVRNetwork::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRNetwork::*)()>(&OVRNetwork::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRNetwork*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRNetwork::*)()>(&OVRNetwork::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRNetwork*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
