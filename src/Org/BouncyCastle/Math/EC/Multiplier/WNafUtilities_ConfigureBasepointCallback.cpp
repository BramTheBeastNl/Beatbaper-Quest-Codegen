// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities/ConfigureBasepointCallback
#include "Org/BouncyCastle/Math/EC/Multiplier/WNafUtilities_ConfigureBasepointCallback.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECCurve
#include "Org/BouncyCastle/Math/EC/ECCurve.hpp"
// Including type: Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
#include "Org/BouncyCastle/Math/EC/Multiplier/PreCompInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities/ConfigureBasepointCallback..ctor
Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::ConfigureBasepointCallback* Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::ConfigureBasepointCallback::New_ctor(Org::BouncyCastle::Math::EC::ECCurve* curve, int confWidth) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ConfigureBasepointCallback").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<WNafUtilities::ConfigureBasepointCallback*>(curve, confWidth));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities/ConfigureBasepointCallback.Precompute
Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo* Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::ConfigureBasepointCallback::Precompute(Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo* existing) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ConfigureBasepointCallback").WithContext("Precompute");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo*>(), "Precompute", {}, ::il2cpp_utils::ExtractTypes(existing)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo*, false>(this, ___internal__method, existing);
}
