// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Math.EC.Multiplier.ValidityPreCompInfo
#include "Org/BouncyCastle/Math/EC/Multiplier/ValidityPreCompInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.String PRECOMP_NAME
::Il2CppString* Org::BouncyCastle::Math::EC::Multiplier::ValidityPreCompInfo::_get_PRECOMP_NAME() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ValidityPreCompInfo").WithContext("_get_PRECOMP_NAME");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Org.BouncyCastle.Math.EC.Multiplier", "ValidityPreCompInfo", "PRECOMP_NAME"));
}
// Autogenerated static field setter
// Set static field: static readonly System.String PRECOMP_NAME
void Org::BouncyCastle::Math::EC::Multiplier::ValidityPreCompInfo::_set_PRECOMP_NAME(::Il2CppString* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ValidityPreCompInfo").WithContext("_set_PRECOMP_NAME");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Org.BouncyCastle.Math.EC.Multiplier", "ValidityPreCompInfo", "PRECOMP_NAME", value));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.ValidityPreCompInfo.HasFailed
bool Org::BouncyCastle::Math::EC::Multiplier::ValidityPreCompInfo::HasFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ValidityPreCompInfo").WithContext("HasFailed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HasFailed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.ValidityPreCompInfo.ReportFailed
void Org::BouncyCastle::Math::EC::Multiplier::ValidityPreCompInfo::ReportFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ValidityPreCompInfo").WithContext("ReportFailed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReportFailed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.ValidityPreCompInfo.HasCurveEquationPassed
bool Org::BouncyCastle::Math::EC::Multiplier::ValidityPreCompInfo::HasCurveEquationPassed() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ValidityPreCompInfo").WithContext("HasCurveEquationPassed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HasCurveEquationPassed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.ValidityPreCompInfo.ReportCurveEquationPassed
void Org::BouncyCastle::Math::EC::Multiplier::ValidityPreCompInfo::ReportCurveEquationPassed() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ValidityPreCompInfo").WithContext("ReportCurveEquationPassed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReportCurveEquationPassed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.ValidityPreCompInfo.HasOrderPassed
bool Org::BouncyCastle::Math::EC::Multiplier::ValidityPreCompInfo::HasOrderPassed() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ValidityPreCompInfo").WithContext("HasOrderPassed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HasOrderPassed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.ValidityPreCompInfo.ReportOrderPassed
void Org::BouncyCastle::Math::EC::Multiplier::ValidityPreCompInfo::ReportOrderPassed() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ValidityPreCompInfo").WithContext("ReportOrderPassed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReportOrderPassed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.ValidityPreCompInfo..cctor
void Org::BouncyCastle::Math::EC::Multiplier::ValidityPreCompInfo::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("ValidityPreCompInfo").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.Math.EC.Multiplier", "ValidityPreCompInfo", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
