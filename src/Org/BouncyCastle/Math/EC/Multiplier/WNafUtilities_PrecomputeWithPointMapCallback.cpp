// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities/PrecomputeWithPointMapCallback
#include "Org/BouncyCastle/Math/EC/Multiplier/WNafUtilities_PrecomputeWithPointMapCallback.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECPoint
#include "Org/BouncyCastle/Math/EC/ECPoint.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECPointMap
#include "Org/BouncyCastle/Math/EC/ECPointMap.hpp"
// Including type: Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo
#include "Org/BouncyCastle/Math/EC/Multiplier/WNafPreCompInfo.hpp"
// Including type: Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
#include "Org/BouncyCastle/Math/EC/Multiplier/PreCompInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities/PrecomputeWithPointMapCallback..ctor
Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::PrecomputeWithPointMapCallback* Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::PrecomputeWithPointMapCallback::New_ctor(Org::BouncyCastle::Math::EC::ECPoint* point, Org::BouncyCastle::Math::EC::ECPointMap* pointMap, Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo* fromWNaf, bool includeNegated) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("PrecomputeWithPointMapCallback").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<WNafUtilities::PrecomputeWithPointMapCallback*>(point, pointMap, fromWNaf, includeNegated));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities/PrecomputeWithPointMapCallback.CheckExisting
bool Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::PrecomputeWithPointMapCallback::CheckExisting(Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo* existingWNaf, int width, int reqPreCompLen, bool includeNegated) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("PrecomputeWithPointMapCallback").WithContext("CheckExisting");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "CheckExisting", {}, ::il2cpp_utils::ExtractTypes(existingWNaf, width, reqPreCompLen, includeNegated)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, existingWNaf, width, reqPreCompLen, includeNegated);
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities/PrecomputeWithPointMapCallback.CheckTable
bool Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::PrecomputeWithPointMapCallback::CheckTable(::Array<Org::BouncyCastle::Math::EC::ECPoint*>* table, int reqLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("PrecomputeWithPointMapCallback").WithContext("CheckTable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "CheckTable", {}, ::il2cpp_utils::ExtractTypes(table, reqLen)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, table, reqLen);
}
// Autogenerated method: Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities/PrecomputeWithPointMapCallback.Precompute
Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo* Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::PrecomputeWithPointMapCallback::Precompute(Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo* existing) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Math::EC::Multiplier").WithContext("PrecomputeWithPointMapCallback").WithContext("Precompute");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo*>(), "Precompute", {}, ::il2cpp_utils::ExtractTypes(existing)));
  return ::il2cpp_utils::RunMethodThrow<Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo*, false>(this, ___internal__method, existing);
}
