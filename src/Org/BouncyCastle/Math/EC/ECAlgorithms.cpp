// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Math.EC.ECAlgorithms
#include "Org/BouncyCastle/Math/EC/ECAlgorithms.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECCurve
#include "Org/BouncyCastle/Math/EC/ECCurve.hpp"
// Including type: Org.BouncyCastle.Math.Field.IFiniteField
#include "Org/BouncyCastle/Math/Field/IFiniteField.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECPoint
#include "Org/BouncyCastle/Math/EC/ECPoint.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECFieldElement
#include "Org/BouncyCastle/Math/EC/ECFieldElement.hpp"
// Including type: Org.BouncyCastle.Math.BigInteger
#include "Org/BouncyCastle/Math/BigInteger.hpp"
// Including type: Org.BouncyCastle.Math.EC.Endo.ECEndomorphism
#include "Org/BouncyCastle/Math/EC/Endo/ECEndomorphism.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mCurve
bool Org::BouncyCastle::Math::EC::ECAlgorithms::IsF2mCurve(Org::BouncyCastle::Math::EC::ECCurve* c) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "IsF2mCurve", c));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.IsF2mField
bool Org::BouncyCastle::Math::EC::ECAlgorithms::IsF2mField(Org::BouncyCastle::Math::Field::IFiniteField* field) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "IsF2mField", field));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpCurve
bool Org::BouncyCastle::Math::EC::ECAlgorithms::IsFpCurve(Org::BouncyCastle::Math::EC::ECCurve* c) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "IsFpCurve", c));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.IsFpField
bool Org::BouncyCastle::Math::EC::ECAlgorithms::IsFpField(Org::BouncyCastle::Math::Field::IFiniteField* field) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "IsFpField", field));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.ImportPoint
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::ECAlgorithms::ImportPoint(Org::BouncyCastle::Math::EC::ECCurve* c, Org::BouncyCastle::Math::EC::ECPoint* p) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "ImportPoint", c, p));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.MontgomeryTrick
void Org::BouncyCastle::Math::EC::ECAlgorithms::MontgomeryTrick(::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* zs, int off, int len, Org::BouncyCastle::Math::EC::ECFieldElement* scale) {
  THROW_UNLESS(il2cpp_utils::RunMethod("Org.BouncyCastle.Math.EC", "ECAlgorithms", "MontgomeryTrick", zs, off, len, scale));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::ECAlgorithms::ReferenceMultiply(Org::BouncyCastle::Math::EC::ECPoint* p, Org::BouncyCastle::Math::BigInteger* k) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "ReferenceMultiply", p, k));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.CleanPoint
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::ECAlgorithms::CleanPoint(Org::BouncyCastle::Math::EC::ECCurve* c, Org::BouncyCastle::Math::EC::ECPoint* p) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "CleanPoint", c, p));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.ImplCheckResult
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::ECAlgorithms::ImplCheckResult(Org::BouncyCastle::Math::EC::ECPoint* p) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "ImplCheckResult", p));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.ImplShamirsTrickWNaf
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::ECAlgorithms::ImplShamirsTrickWNaf(Org::BouncyCastle::Math::EC::ECPoint* P, Org::BouncyCastle::Math::BigInteger* k, Org::BouncyCastle::Math::EC::ECPoint* Q, Org::BouncyCastle::Math::BigInteger* l) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "ImplShamirsTrickWNaf", P, k, Q, l));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.ImplShamirsTrickWNaf
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::ECAlgorithms::ImplShamirsTrickWNaf(Org::BouncyCastle::Math::EC::Endo::ECEndomorphism* endomorphism, Org::BouncyCastle::Math::EC::ECPoint* P, Org::BouncyCastle::Math::BigInteger* k, Org::BouncyCastle::Math::BigInteger* l) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "ImplShamirsTrickWNaf", endomorphism, P, k, l));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.ImplShamirsTrickWNaf
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::ECAlgorithms::ImplShamirsTrickWNaf(::Array<Org::BouncyCastle::Math::EC::ECPoint*>* preCompP, ::Array<Org::BouncyCastle::Math::EC::ECPoint*>* preCompNegP, ::Array<uint8_t>* wnafP, ::Array<Org::BouncyCastle::Math::EC::ECPoint*>* preCompQ, ::Array<Org::BouncyCastle::Math::EC::ECPoint*>* preCompNegQ, ::Array<uint8_t>* wnafQ) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "ImplShamirsTrickWNaf", preCompP, preCompNegP, wnafP, preCompQ, preCompNegQ, wnafQ));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECAlgorithms.ImplShamirsTrickFixedPoint
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::ECAlgorithms::ImplShamirsTrickFixedPoint(Org::BouncyCastle::Math::EC::ECPoint* p, Org::BouncyCastle::Math::BigInteger* k, Org::BouncyCastle::Math::EC::ECPoint* q, Org::BouncyCastle::Math::BigInteger* l) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>("Org.BouncyCastle.Math.EC", "ECAlgorithms", "ImplShamirsTrickFixedPoint", p, k, q, l));
}
