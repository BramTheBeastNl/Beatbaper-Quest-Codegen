// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Math.EC.AbstractFpPoint
#include "Org/BouncyCastle/Math/EC/AbstractFpPoint.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECCurve
#include "Org/BouncyCastle/Math/EC/ECCurve.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECFieldElement
#include "Org/BouncyCastle/Math/EC/ECFieldElement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractFpPoint..ctor
Org::BouncyCastle::Math::EC::AbstractFpPoint* Org::BouncyCastle::Math::EC::AbstractFpPoint::New_ctor(Org::BouncyCastle::Math::EC::ECCurve* curve, Org::BouncyCastle::Math::EC::ECFieldElement* x, Org::BouncyCastle::Math::EC::ECFieldElement* y, bool withCompression) {
  return THROW_UNLESS(il2cpp_utils::New<AbstractFpPoint*>(curve, x, y, withCompression));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractFpPoint..ctor
Org::BouncyCastle::Math::EC::AbstractFpPoint* Org::BouncyCastle::Math::EC::AbstractFpPoint::New_ctor(Org::BouncyCastle::Math::EC::ECCurve* curve, Org::BouncyCastle::Math::EC::ECFieldElement* x, Org::BouncyCastle::Math::EC::ECFieldElement* y, ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* zs, bool withCompression) {
  return THROW_UNLESS(il2cpp_utils::New<AbstractFpPoint*>(curve, x, y, zs, withCompression));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractFpPoint.get_CompressionYTilde
bool Org::BouncyCastle::Math::EC::AbstractFpPoint::get_CompressionYTilde() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_CompressionYTilde"));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractFpPoint.SatisfiesCurveEquation
bool Org::BouncyCastle::Math::EC::AbstractFpPoint::SatisfiesCurveEquation() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SatisfiesCurveEquation"));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractFpPoint.Subtract
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::AbstractFpPoint::Subtract(Org::BouncyCastle::Math::EC::ECPoint* b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>(this, "Subtract", b));
}
