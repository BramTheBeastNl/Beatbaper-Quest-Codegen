// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Math.EC.ECPointBase
#include "Org/BouncyCastle/Math/EC/ECPointBase.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECCurve
#include "Org/BouncyCastle/Math/EC/ECCurve.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECFieldElement
#include "Org/BouncyCastle/Math/EC/ECFieldElement.hpp"
// Including type: Org.BouncyCastle.Math.BigInteger
#include "Org/BouncyCastle/Math/BigInteger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.Math.EC.ECPointBase..ctor
Org::BouncyCastle::Math::EC::ECPointBase* Org::BouncyCastle::Math::EC::ECPointBase::New_ctor(Org::BouncyCastle::Math::EC::ECCurve* curve, Org::BouncyCastle::Math::EC::ECFieldElement* x, Org::BouncyCastle::Math::EC::ECFieldElement* y, bool withCompression) {
  return THROW_UNLESS(il2cpp_utils::New<ECPointBase*>(curve, x, y, withCompression));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECPointBase..ctor
Org::BouncyCastle::Math::EC::ECPointBase* Org::BouncyCastle::Math::EC::ECPointBase::New_ctor(Org::BouncyCastle::Math::EC::ECCurve* curve, Org::BouncyCastle::Math::EC::ECFieldElement* x, Org::BouncyCastle::Math::EC::ECFieldElement* y, ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* zs, bool withCompression) {
  return THROW_UNLESS(il2cpp_utils::New<ECPointBase*>(curve, x, y, zs, withCompression));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECPointBase.GetEncoded
::Array<uint8_t>* Org::BouncyCastle::Math::EC::ECPointBase::GetEncoded(bool compressed) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "GetEncoded", compressed));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.ECPointBase.Multiply
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::ECPointBase::Multiply(Org::BouncyCastle::Math::BigInteger* k) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>(this, "Multiply", k));
}
