// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Math.EC.AbstractF2mCurve
#include "Org/BouncyCastle/Math/EC/AbstractF2mCurve.hpp"
// Including type: Org.BouncyCastle.Math.BigInteger
#include "Org/BouncyCastle/Math/BigInteger.hpp"
// Including type: Org.BouncyCastle.Math.Field.IFiniteField
#include "Org/BouncyCastle/Math/Field/IFiniteField.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECFieldElement
#include "Org/BouncyCastle/Math/EC/ECFieldElement.hpp"
// Including type: Org.BouncyCastle.Security.SecureRandom
#include "Org/BouncyCastle/Security/SecureRandom.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECPoint
#include "Org/BouncyCastle/Math/EC/ECPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractF2mCurve.BuildField
Org::BouncyCastle::Math::Field::IFiniteField* Org::BouncyCastle::Math::EC::AbstractF2mCurve::BuildField(int m, int k1, int k2, int k3) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::Field::IFiniteField*>("Org.BouncyCastle.Math.EC", "AbstractF2mCurve", "BuildField", m, k1, k2, k3));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractF2mCurve..ctor
Org::BouncyCastle::Math::EC::AbstractF2mCurve* Org::BouncyCastle::Math::EC::AbstractF2mCurve::New_ctor(int m, int k1, int k2, int k3) {
  return THROW_UNLESS(il2cpp_utils::New<AbstractF2mCurve*>(m, k1, k2, k3));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractF2mCurve.SolveQuadraticEquation
Org::BouncyCastle::Math::EC::ECFieldElement* Org::BouncyCastle::Math::EC::AbstractF2mCurve::SolveQuadraticEquation(Org::BouncyCastle::Math::EC::ECFieldElement* beta) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECFieldElement*>(this, "SolveQuadraticEquation", beta));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractF2mCurve.GetSi
::Array<Org::BouncyCastle::Math::BigInteger*>* Org::BouncyCastle::Math::EC::AbstractF2mCurve::GetSi() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<Org::BouncyCastle::Math::BigInteger*>*>(this, "GetSi"));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractF2mCurve.get_IsKoblitz
bool Org::BouncyCastle::Math::EC::AbstractF2mCurve::get_IsKoblitz() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsKoblitz"));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractF2mCurve.ImplRandomFieldElementMult
Org::BouncyCastle::Math::BigInteger* Org::BouncyCastle::Math::EC::AbstractF2mCurve::ImplRandomFieldElementMult(Org::BouncyCastle::Security::SecureRandom* r, int m) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::BigInteger*>("Org.BouncyCastle.Math.EC", "AbstractF2mCurve", "ImplRandomFieldElementMult", r, m));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractF2mCurve.CreatePoint
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::AbstractF2mCurve::CreatePoint(Org::BouncyCastle::Math::BigInteger* x, Org::BouncyCastle::Math::BigInteger* y, bool withCompression) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>(this, "CreatePoint", x, y, withCompression));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractF2mCurve.RandomFieldElementMult
Org::BouncyCastle::Math::EC::ECFieldElement* Org::BouncyCastle::Math::EC::AbstractF2mCurve::RandomFieldElementMult(Org::BouncyCastle::Security::SecureRandom* r) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECFieldElement*>(this, "RandomFieldElementMult", r));
}
// Autogenerated method: Org.BouncyCastle.Math.EC.AbstractF2mCurve.DecompressPoint
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Math::EC::AbstractF2mCurve::DecompressPoint(int yTilde, Org::BouncyCastle::Math::BigInteger* X1) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>(this, "DecompressPoint", yTilde, X1));
}
