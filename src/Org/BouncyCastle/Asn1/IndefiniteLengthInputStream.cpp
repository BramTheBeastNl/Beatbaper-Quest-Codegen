// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Asn1.IndefiniteLengthInputStream
#include "Org/BouncyCastle/Asn1/IndefiniteLengthInputStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.Asn1.IndefiniteLengthInputStream.SetEofOn00
void Org::BouncyCastle::Asn1::IndefiniteLengthInputStream::SetEofOn00(bool eofOn00) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetEofOn00", eofOn00));
}
// Autogenerated method: Org.BouncyCastle.Asn1.IndefiniteLengthInputStream.CheckForEof
bool Org::BouncyCastle::Asn1::IndefiniteLengthInputStream::CheckForEof() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "CheckForEof"));
}
// Autogenerated method: Org.BouncyCastle.Asn1.IndefiniteLengthInputStream.RequireByte
int Org::BouncyCastle::Asn1::IndefiniteLengthInputStream::RequireByte() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "RequireByte"));
}
// Autogenerated method: Org.BouncyCastle.Asn1.IndefiniteLengthInputStream..ctor
Org::BouncyCastle::Asn1::IndefiniteLengthInputStream* Org::BouncyCastle::Asn1::IndefiniteLengthInputStream::New_ctor(System::IO::Stream* inStream, int limit) {
  return THROW_UNLESS(il2cpp_utils::New<IndefiniteLengthInputStream*>(inStream, limit));
}
// Autogenerated method: Org.BouncyCastle.Asn1.IndefiniteLengthInputStream.Read
int Org::BouncyCastle::Asn1::IndefiniteLengthInputStream::Read(::Array<uint8_t>* buffer, int offset, int count) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "Read", buffer, offset, count));
}
// Autogenerated method: Org.BouncyCastle.Asn1.IndefiniteLengthInputStream.ReadByte
int Org::BouncyCastle::Asn1::IndefiniteLengthInputStream::ReadByte() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "ReadByte"));
}
