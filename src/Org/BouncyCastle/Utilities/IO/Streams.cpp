// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Utilities.IO.Streams
#include "Org/BouncyCastle/Utilities/IO/Streams.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.IO.MemoryStream
#include "System/IO/MemoryStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.Utilities.IO.Streams.ReadAll
::Array<uint8_t>* Org::BouncyCastle::Utilities::IO::Streams::ReadAll(System::IO::Stream* inStr) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Utilities::IO").WithContext("Streams").WithContext("ReadAll");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.Utilities.IO", "Streams", "ReadAll", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStr)));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inStr);
}
// Autogenerated method: Org.BouncyCastle.Utilities.IO.Streams.ReadFully
int Org::BouncyCastle::Utilities::IO::Streams::ReadFully(System::IO::Stream* inStr, ::Array<uint8_t>* buf) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Utilities::IO").WithContext("Streams").WithContext("ReadFully");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.Utilities.IO", "Streams", "ReadFully", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStr, buf)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inStr, buf);
}
// Autogenerated method: Org.BouncyCastle.Utilities.IO.Streams.ReadFully
int Org::BouncyCastle::Utilities::IO::Streams::ReadFully(System::IO::Stream* inStr, ::Array<uint8_t>* buf, int off, int len) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Utilities::IO").WithContext("Streams").WithContext("ReadFully");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.Utilities.IO", "Streams", "ReadFully", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStr, buf, off, len)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inStr, buf, off, len);
}
// Autogenerated method: Org.BouncyCastle.Utilities.IO.Streams.PipeAll
void Org::BouncyCastle::Utilities::IO::Streams::PipeAll(System::IO::Stream* inStr, System::IO::Stream* outStr) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Utilities::IO").WithContext("Streams").WithContext("PipeAll");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.Utilities.IO", "Streams", "PipeAll", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inStr, outStr)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inStr, outStr);
}
// Autogenerated method: Org.BouncyCastle.Utilities.IO.Streams.WriteBufTo
int Org::BouncyCastle::Utilities::IO::Streams::WriteBufTo(System::IO::MemoryStream* buf, ::Array<uint8_t>* output, int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Org::BouncyCastle::Utilities::IO").WithContext("Streams").WithContext("WriteBufTo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Org.BouncyCastle.Utilities.IO", "Streams", "WriteBufTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buf, output, offset)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, buf, output, offset);
}
