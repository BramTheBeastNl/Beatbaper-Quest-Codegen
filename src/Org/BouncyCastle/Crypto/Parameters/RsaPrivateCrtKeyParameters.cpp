// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters
#include "Org/BouncyCastle/Crypto/Parameters/RsaPrivateCrtKeyParameters.hpp"
// Including type: Org.BouncyCastle.Math.BigInteger
#include "Org/BouncyCastle/Math/BigInteger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters..ctor
Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters* Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters::New_ctor(Org::BouncyCastle::Math::BigInteger* modulus, Org::BouncyCastle::Math::BigInteger* publicExponent, Org::BouncyCastle::Math::BigInteger* privateExponent, Org::BouncyCastle::Math::BigInteger* p, Org::BouncyCastle::Math::BigInteger* q, Org::BouncyCastle::Math::BigInteger* dP, Org::BouncyCastle::Math::BigInteger* dQ, Org::BouncyCastle::Math::BigInteger* qInv) {
  return THROW_UNLESS(il2cpp_utils::New<RsaPrivateCrtKeyParameters*>(modulus, publicExponent, privateExponent, p, q, dP, dQ, qInv));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.get_PublicExponent
Org::BouncyCastle::Math::BigInteger* Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters::get_PublicExponent() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::BigInteger*>(this, "get_PublicExponent"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.get_P
Org::BouncyCastle::Math::BigInteger* Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters::get_P() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::BigInteger*>(this, "get_P"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.get_Q
Org::BouncyCastle::Math::BigInteger* Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters::get_Q() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::BigInteger*>(this, "get_Q"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.get_DP
Org::BouncyCastle::Math::BigInteger* Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters::get_DP() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::BigInteger*>(this, "get_DP"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.get_DQ
Org::BouncyCastle::Math::BigInteger* Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters::get_DQ() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::BigInteger*>(this, "get_DQ"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.get_QInv
Org::BouncyCastle::Math::BigInteger* Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters::get_QInv() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::BigInteger*>(this, "get_QInv"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.ValidateValue
void Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters::ValidateValue(Org::BouncyCastle::Math::BigInteger* x, ::Il2CppString* name, ::Il2CppString* desc) {
  THROW_UNLESS(il2cpp_utils::RunMethod("Org.BouncyCastle.Crypto.Parameters", "RsaPrivateCrtKeyParameters", "ValidateValue", x, name, desc));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.Equals
bool Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters::Equals(::Il2CppObject* obj) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Equals", obj));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters.GetHashCode
int Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters::GetHashCode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetHashCode"));
}
