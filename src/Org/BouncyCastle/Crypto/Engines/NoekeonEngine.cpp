// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Engines.NoekeonEngine
#include "Org/BouncyCastle/Crypto/Engines/NoekeonEngine.hpp"
// Including type: Org.BouncyCastle.Crypto.ICipherParameters
#include "Org/BouncyCastle/Crypto/ICipherParameters.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Byte[] RoundConstants
::Array<uint8_t>* Org::BouncyCastle::Crypto::Engines::NoekeonEngine::_get_RoundConstants() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("Org.BouncyCastle.Crypto.Engines", "NoekeonEngine", "RoundConstants"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Byte[] RoundConstants
void Org::BouncyCastle::Crypto::Engines::NoekeonEngine::_set_RoundConstants(::Array<uint8_t>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Org.BouncyCastle.Crypto.Engines", "NoekeonEngine", "RoundConstants", value));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.NoekeonEngine.EncryptBlock
int Org::BouncyCastle::Crypto::Engines::NoekeonEngine::EncryptBlock(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "EncryptBlock", input, inOff, output, outOff));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.NoekeonEngine.DecryptBlock
int Org::BouncyCastle::Crypto::Engines::NoekeonEngine::DecryptBlock(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "DecryptBlock", input, inOff, output, outOff));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.NoekeonEngine..cctor
void Org::BouncyCastle::Crypto::Engines::NoekeonEngine::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("Org.BouncyCastle.Crypto.Engines", "NoekeonEngine", ".cctor"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.NoekeonEngine..ctor
Org::BouncyCastle::Crypto::Engines::NoekeonEngine* Org::BouncyCastle::Crypto::Engines::NoekeonEngine::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<NoekeonEngine*>());
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.NoekeonEngine.get_AlgorithmName
::Il2CppString* Org::BouncyCastle::Crypto::Engines::NoekeonEngine::get_AlgorithmName() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_AlgorithmName"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.NoekeonEngine.get_IsPartialBlockOkay
bool Org::BouncyCastle::Crypto::Engines::NoekeonEngine::get_IsPartialBlockOkay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsPartialBlockOkay"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.NoekeonEngine.GetBlockSize
int Org::BouncyCastle::Crypto::Engines::NoekeonEngine::GetBlockSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetBlockSize"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.NoekeonEngine.Init
void Org::BouncyCastle::Crypto::Engines::NoekeonEngine::Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Init", forEncryption, parameters));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.NoekeonEngine.ProcessBlock
int Org::BouncyCastle::Crypto::Engines::NoekeonEngine::ProcessBlock(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "ProcessBlock", input, inOff, output, outOff));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.NoekeonEngine.Reset
void Org::BouncyCastle::Crypto::Engines::NoekeonEngine::Reset() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Reset"));
}
