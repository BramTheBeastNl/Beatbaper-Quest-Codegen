// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Engines.IdeaEngine
#include "Org/BouncyCastle/Crypto/Engines/IdeaEngine.hpp"
// Including type: Org.BouncyCastle.Crypto.ICipherParameters
#include "Org/BouncyCastle/Crypto/ICipherParameters.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 MASK
int Org::BouncyCastle::Crypto::Engines::IdeaEngine::_get_MASK() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Org.BouncyCastle.Crypto.Engines", "IdeaEngine", "MASK"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 MASK
void Org::BouncyCastle::Crypto::Engines::IdeaEngine::_set_MASK(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Org.BouncyCastle.Crypto.Engines", "IdeaEngine", "MASK", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 BASE
int Org::BouncyCastle::Crypto::Engines::IdeaEngine::_get_BASE() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Org.BouncyCastle.Crypto.Engines", "IdeaEngine", "BASE"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 BASE
void Org::BouncyCastle::Crypto::Engines::IdeaEngine::_set_BASE(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Org.BouncyCastle.Crypto.Engines", "IdeaEngine", "BASE", value));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.BytesToWord
int Org::BouncyCastle::Crypto::Engines::IdeaEngine::BytesToWord(::Array<uint8_t>* input, int inOff) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "BytesToWord", input, inOff));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.WordToBytes
void Org::BouncyCastle::Crypto::Engines::IdeaEngine::WordToBytes(int word, ::Array<uint8_t>* outBytes, int outOff) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "WordToBytes", word, outBytes, outOff));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.Mul
int Org::BouncyCastle::Crypto::Engines::IdeaEngine::Mul(int x, int y) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "Mul", x, y));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.IdeaFunc
void Org::BouncyCastle::Crypto::Engines::IdeaEngine::IdeaFunc(::Array<int>* workingKey, ::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* outBytes, int outOff) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "IdeaFunc", workingKey, input, inOff, outBytes, outOff));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.ExpandKey
::Array<int>* Org::BouncyCastle::Crypto::Engines::IdeaEngine::ExpandKey(::Array<uint8_t>* uKey) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<int>*>(this, "ExpandKey", uKey));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.MulInv
int Org::BouncyCastle::Crypto::Engines::IdeaEngine::MulInv(int x) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "MulInv", x));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.AddInv
int Org::BouncyCastle::Crypto::Engines::IdeaEngine::AddInv(int x) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "AddInv", x));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.InvertKey
::Array<int>* Org::BouncyCastle::Crypto::Engines::IdeaEngine::InvertKey(::Array<int>* inKey) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<int>*>(this, "InvertKey", inKey));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.GenerateWorkingKey
::Array<int>* Org::BouncyCastle::Crypto::Engines::IdeaEngine::GenerateWorkingKey(bool forEncryption, ::Array<uint8_t>* userKey) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<int>*>(this, "GenerateWorkingKey", forEncryption, userKey));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine..cctor
void Org::BouncyCastle::Crypto::Engines::IdeaEngine::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("Org.BouncyCastle.Crypto.Engines", "IdeaEngine", ".cctor"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine..ctor
Org::BouncyCastle::Crypto::Engines::IdeaEngine* Org::BouncyCastle::Crypto::Engines::IdeaEngine::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<IdeaEngine*>());
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.Init
void Org::BouncyCastle::Crypto::Engines::IdeaEngine::Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Init", forEncryption, parameters));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.get_AlgorithmName
::Il2CppString* Org::BouncyCastle::Crypto::Engines::IdeaEngine::get_AlgorithmName() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "get_AlgorithmName"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.get_IsPartialBlockOkay
bool Org::BouncyCastle::Crypto::Engines::IdeaEngine::get_IsPartialBlockOkay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsPartialBlockOkay"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.GetBlockSize
int Org::BouncyCastle::Crypto::Engines::IdeaEngine::GetBlockSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetBlockSize"));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.ProcessBlock
int Org::BouncyCastle::Crypto::Engines::IdeaEngine::ProcessBlock(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "ProcessBlock", input, inOff, output, outOff));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Engines.IdeaEngine.Reset
void Org::BouncyCastle::Crypto::Engines::IdeaEngine::Reset() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Reset"));
}
