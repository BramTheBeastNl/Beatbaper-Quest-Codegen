// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities
#include "Org/BouncyCastle/Crypto/Tls/TlsEccUtilities.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.ECDomainParameters
#include "Org/BouncyCastle/Crypto/Parameters/ECDomainParameters.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECPoint
#include "Org/BouncyCastle/Math/EC/ECPoint.hpp"
// Including type: Org.BouncyCastle.Math.EC.ECCurve
#include "Org/BouncyCastle/Math/EC/ECCurve.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters
#include "Org/BouncyCastle/Crypto/Parameters/ECPublicKeyParameters.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters
#include "Org/BouncyCastle/Crypto/Parameters/ECPrivateKeyParameters.hpp"
// Including type: Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair
#include "Org/BouncyCastle/Crypto/AsymmetricCipherKeyPair.hpp"
// Including type: Org.BouncyCastle.Security.SecureRandom
#include "Org/BouncyCastle/Security/SecureRandom.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.String[] CurveNames
::Array<::Il2CppString*>* Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::_get_CurveNames() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "CurveNames"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String[] CurveNames
void Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::_set_CurveNames(::Array<::Il2CppString*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "CurveNames", value));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.GetNameOfNamedCurve
::Il2CppString* Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::GetNameOfNamedCurve(int namedCurve) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "GetNameOfNamedCurve", namedCurve));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.GetParametersForNamedCurve
Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::GetParametersForNamedCurve(int namedCurve) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Crypto::Parameters::ECDomainParameters*>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "GetParametersForNamedCurve", namedCurve));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.IsSupportedNamedCurve
bool Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::IsSupportedNamedCurve(int namedCurve) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "IsSupportedNamedCurve", namedCurve));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.IsCompressionPreferred
bool Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::IsCompressionPreferred(::Array<uint8_t>* ecPointFormats, uint8_t compressionFormat) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "IsCompressionPreferred", ecPointFormats, compressionFormat));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.SerializeECPoint
::Array<uint8_t>* Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::SerializeECPoint(::Array<uint8_t>* ecPointFormats, Org::BouncyCastle::Math::EC::ECPoint* point) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "SerializeECPoint", ecPointFormats, point));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.DeserializeECPoint
Org::BouncyCastle::Math::EC::ECPoint* Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::DeserializeECPoint(::Array<uint8_t>* ecPointFormats, Org::BouncyCastle::Math::EC::ECCurve* curve, ::Array<uint8_t>* encoding) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Math::EC::ECPoint*>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "DeserializeECPoint", ecPointFormats, curve, encoding));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.DeserializeECPublicKey
Org::BouncyCastle::Crypto::Parameters::ECPublicKeyParameters* Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::DeserializeECPublicKey(::Array<uint8_t>* ecPointFormats, Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* curve_params, ::Array<uint8_t>* encoding) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Crypto::Parameters::ECPublicKeyParameters*>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "DeserializeECPublicKey", ecPointFormats, curve_params, encoding));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.CalculateECDHBasicAgreement
::Array<uint8_t>* Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::CalculateECDHBasicAgreement(Org::BouncyCastle::Crypto::Parameters::ECPublicKeyParameters* publicKey, Org::BouncyCastle::Crypto::Parameters::ECPrivateKeyParameters* privateKey) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "CalculateECDHBasicAgreement", publicKey, privateKey));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.GenerateECKeyPair
Org::BouncyCastle::Crypto::AsymmetricCipherKeyPair* Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::GenerateECKeyPair(Org::BouncyCastle::Security::SecureRandom* random, Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* ecParams) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Crypto::AsymmetricCipherKeyPair*>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "GenerateECKeyPair", random, ecParams));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.GenerateEphemeralClientKeyExchange
Org::BouncyCastle::Crypto::Parameters::ECPrivateKeyParameters* Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::GenerateEphemeralClientKeyExchange(Org::BouncyCastle::Security::SecureRandom* random, ::Array<uint8_t>* ecPointFormats, Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* ecParams, System::IO::Stream* output) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Crypto::Parameters::ECPrivateKeyParameters*>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "GenerateEphemeralClientKeyExchange", random, ecPointFormats, ecParams, output));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.ValidateECPublicKey
Org::BouncyCastle::Crypto::Parameters::ECPublicKeyParameters* Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::ValidateECPublicKey(Org::BouncyCastle::Crypto::Parameters::ECPublicKeyParameters* key) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Org::BouncyCastle::Crypto::Parameters::ECPublicKeyParameters*>("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "ValidateECPublicKey", key));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities.WriteECPoint
void Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::WriteECPoint(::Array<uint8_t>* ecPointFormats, Org::BouncyCastle::Math::EC::ECPoint* point, System::IO::Stream* output) {
  THROW_UNLESS(il2cpp_utils::RunMethod("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", "WriteECPoint", ecPointFormats, point, output));
}
// Autogenerated method: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities..cctor
void Org::BouncyCastle::Crypto::Tls::TlsEccUtilities::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("Org.BouncyCastle.Crypto.Tls", "TlsEccUtilities", ".cctor"));
}
