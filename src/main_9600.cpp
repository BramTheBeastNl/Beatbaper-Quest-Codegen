// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents/<>c__DisplayClass8_0
#include "UnityEngine/Networking/PlayerConnection/PlayerEditorConnectionEvents_--c__DisplayClass8_0.hpp"
// Including type: UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents/MessageTypeSubscribers
#include "UnityEngine/Networking/PlayerConnection/PlayerEditorConnectionEvents_MessageTypeSubscribers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents/<>c__DisplayClass8_0.<UnregisterManagedCallback>b__0
bool UnityEngine::Networking::PlayerConnection::PlayerEditorConnectionEvents::$$c__DisplayClass8_0::$UnregisterManagedCallback$b__0(UnityEngine::Networking::PlayerConnection::PlayerEditorConnectionEvents::MessageTypeSubscribers* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Networking::PlayerConnection::PlayerEditorConnectionEvents::$$c__DisplayClass8_0::<UnregisterManagedCallback>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<UnregisterManagedCallback>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: PlayerEditorConnectionEvents::$$c__DisplayClass8_0::$UnregisterManagedCallback$b__0
// Il2CppName: <UnregisterManagedCallback>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerEditorConnectionEvents::$$c__DisplayClass8_0::*)(UnityEngine::Networking::PlayerConnection::PlayerEditorConnectionEvents::MessageTypeSubscribers*)>(&PlayerEditorConnectionEvents::$$c__DisplayClass8_0::$UnregisterManagedCallback$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerEditorConnectionEvents::$$c__DisplayClass8_0*), "<UnregisterManagedCallback>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Networking::PlayerConnection::PlayerEditorConnectionEvents::MessageTypeSubscribers*>()});
  }
};
// Writing MetadataGetter for method: PlayerEditorConnectionEvents::$$c__DisplayClass8_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerEditorConnectionEvents::$$c__DisplayClass8_0::*)()>(&PlayerEditorConnectionEvents::$$c__DisplayClass8_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerEditorConnectionEvents::$$c__DisplayClass8_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerEditorConnectionEvents::$$c__DisplayClass8_0::*)()>(&PlayerEditorConnectionEvents::$$c__DisplayClass8_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerEditorConnectionEvents::$$c__DisplayClass8_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Internal.DefaultValueAttribute
#include "UnityEngine/Internal/DefaultValueAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Internal.DefaultValueAttribute.get_Value
::Il2CppObject* UnityEngine::Internal::DefaultValueAttribute::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Internal::DefaultValueAttribute::get_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Internal.DefaultValueAttribute.Equals
bool UnityEngine::Internal::DefaultValueAttribute::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Internal::DefaultValueAttribute::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Internal.DefaultValueAttribute.GetHashCode
int UnityEngine::Internal::DefaultValueAttribute::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Internal::DefaultValueAttribute::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DefaultValueAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultValueAttribute::*)(::Il2CppString*)>(&DefaultValueAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultValueAttribute::*)(::Il2CppString*)>(&DefaultValueAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DefaultValueAttribute::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DefaultValueAttribute::*)()>(&DefaultValueAttribute::get_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultValueAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DefaultValueAttribute::*)(::Il2CppObject*)>(&DefaultValueAttribute::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DefaultValueAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DefaultValueAttribute::*)()>(&DefaultValueAttribute::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultValueAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Internal.ExcludeFromDocsAttribute
#include "UnityEngine/Internal/ExcludeFromDocsAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ExcludeFromDocsAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExcludeFromDocsAttribute::*)()>(&ExcludeFromDocsAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExcludeFromDocsAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExcludeFromDocsAttribute::*)()>(&ExcludeFromDocsAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExcludeFromDocsAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.ShaderHardwareTier
#include "UnityEngine/Rendering/ShaderHardwareTier.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderHardwareTier Tier1
UnityEngine::Rendering::ShaderHardwareTier UnityEngine::Rendering::ShaderHardwareTier::_get_Tier1() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderHardwareTier::_get_Tier1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderHardwareTier>("UnityEngine.Rendering", "ShaderHardwareTier", "Tier1"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderHardwareTier Tier1
void UnityEngine::Rendering::ShaderHardwareTier::_set_Tier1(UnityEngine::Rendering::ShaderHardwareTier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderHardwareTier::_set_Tier1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderHardwareTier", "Tier1", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderHardwareTier Tier2
UnityEngine::Rendering::ShaderHardwareTier UnityEngine::Rendering::ShaderHardwareTier::_get_Tier2() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderHardwareTier::_get_Tier2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderHardwareTier>("UnityEngine.Rendering", "ShaderHardwareTier", "Tier2"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderHardwareTier Tier2
void UnityEngine::Rendering::ShaderHardwareTier::_set_Tier2(UnityEngine::Rendering::ShaderHardwareTier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderHardwareTier::_set_Tier2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderHardwareTier", "Tier2", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderHardwareTier Tier3
UnityEngine::Rendering::ShaderHardwareTier UnityEngine::Rendering::ShaderHardwareTier::_get_Tier3() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderHardwareTier::_get_Tier3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderHardwareTier>("UnityEngine.Rendering", "ShaderHardwareTier", "Tier3"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderHardwareTier Tier3
void UnityEngine::Rendering::ShaderHardwareTier::_set_Tier3(UnityEngine::Rendering::ShaderHardwareTier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderHardwareTier::_set_Tier3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderHardwareTier", "Tier3", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.IndexFormat
#include "UnityEngine/Rendering/IndexFormat.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.IndexFormat UInt16
UnityEngine::Rendering::IndexFormat UnityEngine::Rendering::IndexFormat::_get_UInt16() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::IndexFormat::_get_UInt16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::IndexFormat>("UnityEngine.Rendering", "IndexFormat", "UInt16"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.IndexFormat UInt16
void UnityEngine::Rendering::IndexFormat::_set_UInt16(UnityEngine::Rendering::IndexFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::IndexFormat::_set_UInt16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "IndexFormat", "UInt16", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.IndexFormat UInt32
UnityEngine::Rendering::IndexFormat UnityEngine::Rendering::IndexFormat::_get_UInt32() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::IndexFormat::_get_UInt32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::IndexFormat>("UnityEngine.Rendering", "IndexFormat", "UInt32"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.IndexFormat UInt32
void UnityEngine::Rendering::IndexFormat::_set_UInt32(UnityEngine::Rendering::IndexFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::IndexFormat::_set_UInt32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "IndexFormat", "UInt32", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.MeshUpdateFlags
#include "UnityEngine/Rendering/MeshUpdateFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.MeshUpdateFlags Default
UnityEngine::Rendering::MeshUpdateFlags UnityEngine::Rendering::MeshUpdateFlags::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::MeshUpdateFlags::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::MeshUpdateFlags>("UnityEngine.Rendering", "MeshUpdateFlags", "Default"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.MeshUpdateFlags Default
void UnityEngine::Rendering::MeshUpdateFlags::_set_Default(UnityEngine::Rendering::MeshUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::MeshUpdateFlags::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "MeshUpdateFlags", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.MeshUpdateFlags DontValidateIndices
UnityEngine::Rendering::MeshUpdateFlags UnityEngine::Rendering::MeshUpdateFlags::_get_DontValidateIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::MeshUpdateFlags::_get_DontValidateIndices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::MeshUpdateFlags>("UnityEngine.Rendering", "MeshUpdateFlags", "DontValidateIndices"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.MeshUpdateFlags DontValidateIndices
void UnityEngine::Rendering::MeshUpdateFlags::_set_DontValidateIndices(UnityEngine::Rendering::MeshUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::MeshUpdateFlags::_set_DontValidateIndices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "MeshUpdateFlags", "DontValidateIndices", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.MeshUpdateFlags DontResetBoneBounds
UnityEngine::Rendering::MeshUpdateFlags UnityEngine::Rendering::MeshUpdateFlags::_get_DontResetBoneBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::MeshUpdateFlags::_get_DontResetBoneBounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::MeshUpdateFlags>("UnityEngine.Rendering", "MeshUpdateFlags", "DontResetBoneBounds"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.MeshUpdateFlags DontResetBoneBounds
void UnityEngine::Rendering::MeshUpdateFlags::_set_DontResetBoneBounds(UnityEngine::Rendering::MeshUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::MeshUpdateFlags::_set_DontResetBoneBounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "MeshUpdateFlags", "DontResetBoneBounds", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.MeshUpdateFlags DontNotifyMeshUsers
UnityEngine::Rendering::MeshUpdateFlags UnityEngine::Rendering::MeshUpdateFlags::_get_DontNotifyMeshUsers() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::MeshUpdateFlags::_get_DontNotifyMeshUsers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::MeshUpdateFlags>("UnityEngine.Rendering", "MeshUpdateFlags", "DontNotifyMeshUsers"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.MeshUpdateFlags DontNotifyMeshUsers
void UnityEngine::Rendering::MeshUpdateFlags::_set_DontNotifyMeshUsers(UnityEngine::Rendering::MeshUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::MeshUpdateFlags::_set_DontNotifyMeshUsers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "MeshUpdateFlags", "DontNotifyMeshUsers", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.MeshUpdateFlags DontRecalculateBounds
UnityEngine::Rendering::MeshUpdateFlags UnityEngine::Rendering::MeshUpdateFlags::_get_DontRecalculateBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::MeshUpdateFlags::_get_DontRecalculateBounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::MeshUpdateFlags>("UnityEngine.Rendering", "MeshUpdateFlags", "DontRecalculateBounds"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.MeshUpdateFlags DontRecalculateBounds
void UnityEngine::Rendering::MeshUpdateFlags::_set_DontRecalculateBounds(UnityEngine::Rendering::MeshUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::MeshUpdateFlags::_set_DontRecalculateBounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "MeshUpdateFlags", "DontRecalculateBounds", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.VertexAttributeFormat
#include "UnityEngine/Rendering/VertexAttributeFormat.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat Float32
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_Float32() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_Float32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "Float32"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat Float32
void UnityEngine::Rendering::VertexAttributeFormat::_set_Float32(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_Float32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "Float32", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat Float16
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_Float16() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_Float16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "Float16"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat Float16
void UnityEngine::Rendering::VertexAttributeFormat::_set_Float16(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_Float16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "Float16", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat UNorm8
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_UNorm8() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_UNorm8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "UNorm8"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat UNorm8
void UnityEngine::Rendering::VertexAttributeFormat::_set_UNorm8(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_UNorm8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "UNorm8", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat SNorm8
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_SNorm8() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_SNorm8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "SNorm8"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat SNorm8
void UnityEngine::Rendering::VertexAttributeFormat::_set_SNorm8(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_SNorm8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "SNorm8", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat UNorm16
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_UNorm16() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_UNorm16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "UNorm16"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat UNorm16
void UnityEngine::Rendering::VertexAttributeFormat::_set_UNorm16(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_UNorm16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "UNorm16", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat SNorm16
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_SNorm16() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_SNorm16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "SNorm16"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat SNorm16
void UnityEngine::Rendering::VertexAttributeFormat::_set_SNorm16(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_SNorm16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "SNorm16", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat UInt8
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_UInt8() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_UInt8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "UInt8"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat UInt8
void UnityEngine::Rendering::VertexAttributeFormat::_set_UInt8(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_UInt8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "UInt8", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat SInt8
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_SInt8() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_SInt8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "SInt8"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat SInt8
void UnityEngine::Rendering::VertexAttributeFormat::_set_SInt8(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_SInt8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "SInt8", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat UInt16
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_UInt16() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_UInt16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "UInt16"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat UInt16
void UnityEngine::Rendering::VertexAttributeFormat::_set_UInt16(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_UInt16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "UInt16", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat SInt16
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_SInt16() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_SInt16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "SInt16"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat SInt16
void UnityEngine::Rendering::VertexAttributeFormat::_set_SInt16(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_SInt16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "SInt16", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat UInt32
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_UInt32() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_UInt32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "UInt32"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat UInt32
void UnityEngine::Rendering::VertexAttributeFormat::_set_UInt32(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_UInt32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "UInt32", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttributeFormat SInt32
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeFormat::_get_SInt32() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_get_SInt32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttributeFormat>("UnityEngine.Rendering", "VertexAttributeFormat", "SInt32"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttributeFormat SInt32
void UnityEngine::Rendering::VertexAttributeFormat::_set_SInt32(UnityEngine::Rendering::VertexAttributeFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeFormat::_set_SInt32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttributeFormat", "SInt32", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.VertexAttribute
#include "UnityEngine/Rendering/VertexAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute Position
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_Position");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "Position"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute Position
void UnityEngine::Rendering::VertexAttribute::_set_Position(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_Position");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "Position", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute Normal
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute Normal
void UnityEngine::Rendering::VertexAttribute::_set_Normal(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute Tangent
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_Tangent() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_Tangent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "Tangent"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute Tangent
void UnityEngine::Rendering::VertexAttribute::_set_Tangent(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_Tangent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "Tangent", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute Color
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_Color");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "Color"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute Color
void UnityEngine::Rendering::VertexAttribute::_set_Color(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_Color");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "Color", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute TexCoord0
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_TexCoord0() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_TexCoord0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "TexCoord0"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute TexCoord0
void UnityEngine::Rendering::VertexAttribute::_set_TexCoord0(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_TexCoord0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "TexCoord0", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute TexCoord1
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_TexCoord1() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_TexCoord1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "TexCoord1"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute TexCoord1
void UnityEngine::Rendering::VertexAttribute::_set_TexCoord1(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_TexCoord1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "TexCoord1", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute TexCoord2
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_TexCoord2() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_TexCoord2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "TexCoord2"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute TexCoord2
void UnityEngine::Rendering::VertexAttribute::_set_TexCoord2(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_TexCoord2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "TexCoord2", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute TexCoord3
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_TexCoord3() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_TexCoord3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "TexCoord3"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute TexCoord3
void UnityEngine::Rendering::VertexAttribute::_set_TexCoord3(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_TexCoord3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "TexCoord3", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute TexCoord4
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_TexCoord4() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_TexCoord4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "TexCoord4"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute TexCoord4
void UnityEngine::Rendering::VertexAttribute::_set_TexCoord4(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_TexCoord4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "TexCoord4", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute TexCoord5
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_TexCoord5() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_TexCoord5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "TexCoord5"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute TexCoord5
void UnityEngine::Rendering::VertexAttribute::_set_TexCoord5(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_TexCoord5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "TexCoord5", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute TexCoord6
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_TexCoord6() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_TexCoord6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "TexCoord6"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute TexCoord6
void UnityEngine::Rendering::VertexAttribute::_set_TexCoord6(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_TexCoord6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "TexCoord6", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute TexCoord7
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_TexCoord7() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_TexCoord7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "TexCoord7"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute TexCoord7
void UnityEngine::Rendering::VertexAttribute::_set_TexCoord7(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_TexCoord7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "TexCoord7", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute BlendWeight
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_BlendWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_BlendWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "BlendWeight"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute BlendWeight
void UnityEngine::Rendering::VertexAttribute::_set_BlendWeight(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_BlendWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "BlendWeight", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.VertexAttribute BlendIndices
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttribute::_get_BlendIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_get_BlendIndices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::VertexAttribute>("UnityEngine.Rendering", "VertexAttribute", "BlendIndices"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.VertexAttribute BlendIndices
void UnityEngine::Rendering::VertexAttribute::_set_BlendIndices(UnityEngine::Rendering::VertexAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttribute::_set_BlendIndices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "VertexAttribute", "BlendIndices", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.RenderBufferLoadAction
#include "UnityEngine/Rendering/RenderBufferLoadAction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderBufferLoadAction Load
UnityEngine::Rendering::RenderBufferLoadAction UnityEngine::Rendering::RenderBufferLoadAction::_get_Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferLoadAction::_get_Load");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderBufferLoadAction>("UnityEngine.Rendering", "RenderBufferLoadAction", "Load"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderBufferLoadAction Load
void UnityEngine::Rendering::RenderBufferLoadAction::_set_Load(UnityEngine::Rendering::RenderBufferLoadAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferLoadAction::_set_Load");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderBufferLoadAction", "Load", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderBufferLoadAction Clear
UnityEngine::Rendering::RenderBufferLoadAction UnityEngine::Rendering::RenderBufferLoadAction::_get_Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferLoadAction::_get_Clear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderBufferLoadAction>("UnityEngine.Rendering", "RenderBufferLoadAction", "Clear"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderBufferLoadAction Clear
void UnityEngine::Rendering::RenderBufferLoadAction::_set_Clear(UnityEngine::Rendering::RenderBufferLoadAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferLoadAction::_set_Clear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderBufferLoadAction", "Clear", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderBufferLoadAction DontCare
UnityEngine::Rendering::RenderBufferLoadAction UnityEngine::Rendering::RenderBufferLoadAction::_get_DontCare() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferLoadAction::_get_DontCare");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderBufferLoadAction>("UnityEngine.Rendering", "RenderBufferLoadAction", "DontCare"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderBufferLoadAction DontCare
void UnityEngine::Rendering::RenderBufferLoadAction::_set_DontCare(UnityEngine::Rendering::RenderBufferLoadAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferLoadAction::_set_DontCare");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderBufferLoadAction", "DontCare", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.RenderBufferStoreAction
#include "UnityEngine/Rendering/RenderBufferStoreAction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderBufferStoreAction Store
UnityEngine::Rendering::RenderBufferStoreAction UnityEngine::Rendering::RenderBufferStoreAction::_get_Store() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferStoreAction::_get_Store");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderBufferStoreAction>("UnityEngine.Rendering", "RenderBufferStoreAction", "Store"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderBufferStoreAction Store
void UnityEngine::Rendering::RenderBufferStoreAction::_set_Store(UnityEngine::Rendering::RenderBufferStoreAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferStoreAction::_set_Store");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderBufferStoreAction", "Store", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderBufferStoreAction Resolve
UnityEngine::Rendering::RenderBufferStoreAction UnityEngine::Rendering::RenderBufferStoreAction::_get_Resolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferStoreAction::_get_Resolve");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderBufferStoreAction>("UnityEngine.Rendering", "RenderBufferStoreAction", "Resolve"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderBufferStoreAction Resolve
void UnityEngine::Rendering::RenderBufferStoreAction::_set_Resolve(UnityEngine::Rendering::RenderBufferStoreAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferStoreAction::_set_Resolve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderBufferStoreAction", "Resolve", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderBufferStoreAction StoreAndResolve
UnityEngine::Rendering::RenderBufferStoreAction UnityEngine::Rendering::RenderBufferStoreAction::_get_StoreAndResolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferStoreAction::_get_StoreAndResolve");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderBufferStoreAction>("UnityEngine.Rendering", "RenderBufferStoreAction", "StoreAndResolve"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderBufferStoreAction StoreAndResolve
void UnityEngine::Rendering::RenderBufferStoreAction::_set_StoreAndResolve(UnityEngine::Rendering::RenderBufferStoreAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferStoreAction::_set_StoreAndResolve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderBufferStoreAction", "StoreAndResolve", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderBufferStoreAction DontCare
UnityEngine::Rendering::RenderBufferStoreAction UnityEngine::Rendering::RenderBufferStoreAction::_get_DontCare() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferStoreAction::_get_DontCare");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderBufferStoreAction>("UnityEngine.Rendering", "RenderBufferStoreAction", "DontCare"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderBufferStoreAction DontCare
void UnityEngine::Rendering::RenderBufferStoreAction::_set_DontCare(UnityEngine::Rendering::RenderBufferStoreAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderBufferStoreAction::_set_DontCare");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderBufferStoreAction", "DontCare", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.CompareFunction
#include "UnityEngine/Rendering/CompareFunction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CompareFunction Disabled
UnityEngine::Rendering::CompareFunction UnityEngine::Rendering::CompareFunction::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CompareFunction>("UnityEngine.Rendering", "CompareFunction", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CompareFunction Disabled
void UnityEngine::Rendering::CompareFunction::_set_Disabled(UnityEngine::Rendering::CompareFunction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CompareFunction", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CompareFunction Never
UnityEngine::Rendering::CompareFunction UnityEngine::Rendering::CompareFunction::_get_Never() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_get_Never");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CompareFunction>("UnityEngine.Rendering", "CompareFunction", "Never"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CompareFunction Never
void UnityEngine::Rendering::CompareFunction::_set_Never(UnityEngine::Rendering::CompareFunction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_set_Never");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CompareFunction", "Never", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CompareFunction Less
UnityEngine::Rendering::CompareFunction UnityEngine::Rendering::CompareFunction::_get_Less() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_get_Less");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CompareFunction>("UnityEngine.Rendering", "CompareFunction", "Less"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CompareFunction Less
void UnityEngine::Rendering::CompareFunction::_set_Less(UnityEngine::Rendering::CompareFunction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_set_Less");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CompareFunction", "Less", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CompareFunction Equal
UnityEngine::Rendering::CompareFunction UnityEngine::Rendering::CompareFunction::_get_Equal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_get_Equal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CompareFunction>("UnityEngine.Rendering", "CompareFunction", "Equal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CompareFunction Equal
void UnityEngine::Rendering::CompareFunction::_set_Equal(UnityEngine::Rendering::CompareFunction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_set_Equal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CompareFunction", "Equal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CompareFunction LessEqual
UnityEngine::Rendering::CompareFunction UnityEngine::Rendering::CompareFunction::_get_LessEqual() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_get_LessEqual");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CompareFunction>("UnityEngine.Rendering", "CompareFunction", "LessEqual"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CompareFunction LessEqual
void UnityEngine::Rendering::CompareFunction::_set_LessEqual(UnityEngine::Rendering::CompareFunction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_set_LessEqual");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CompareFunction", "LessEqual", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CompareFunction Greater
UnityEngine::Rendering::CompareFunction UnityEngine::Rendering::CompareFunction::_get_Greater() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_get_Greater");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CompareFunction>("UnityEngine.Rendering", "CompareFunction", "Greater"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CompareFunction Greater
void UnityEngine::Rendering::CompareFunction::_set_Greater(UnityEngine::Rendering::CompareFunction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_set_Greater");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CompareFunction", "Greater", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CompareFunction NotEqual
UnityEngine::Rendering::CompareFunction UnityEngine::Rendering::CompareFunction::_get_NotEqual() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_get_NotEqual");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CompareFunction>("UnityEngine.Rendering", "CompareFunction", "NotEqual"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CompareFunction NotEqual
void UnityEngine::Rendering::CompareFunction::_set_NotEqual(UnityEngine::Rendering::CompareFunction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_set_NotEqual");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CompareFunction", "NotEqual", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CompareFunction GreaterEqual
UnityEngine::Rendering::CompareFunction UnityEngine::Rendering::CompareFunction::_get_GreaterEqual() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_get_GreaterEqual");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CompareFunction>("UnityEngine.Rendering", "CompareFunction", "GreaterEqual"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CompareFunction GreaterEqual
void UnityEngine::Rendering::CompareFunction::_set_GreaterEqual(UnityEngine::Rendering::CompareFunction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_set_GreaterEqual");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CompareFunction", "GreaterEqual", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CompareFunction Always
UnityEngine::Rendering::CompareFunction UnityEngine::Rendering::CompareFunction::_get_Always() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_get_Always");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CompareFunction>("UnityEngine.Rendering", "CompareFunction", "Always"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CompareFunction Always
void UnityEngine::Rendering::CompareFunction::_set_Always(UnityEngine::Rendering::CompareFunction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CompareFunction::_set_Always");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CompareFunction", "Always", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.ColorWriteMask
#include "UnityEngine/Rendering/ColorWriteMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ColorWriteMask Alpha
UnityEngine::Rendering::ColorWriteMask UnityEngine::Rendering::ColorWriteMask::_get_Alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ColorWriteMask::_get_Alpha");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ColorWriteMask>("UnityEngine.Rendering", "ColorWriteMask", "Alpha"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ColorWriteMask Alpha
void UnityEngine::Rendering::ColorWriteMask::_set_Alpha(UnityEngine::Rendering::ColorWriteMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ColorWriteMask::_set_Alpha");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ColorWriteMask", "Alpha", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ColorWriteMask Blue
UnityEngine::Rendering::ColorWriteMask UnityEngine::Rendering::ColorWriteMask::_get_Blue() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ColorWriteMask::_get_Blue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ColorWriteMask>("UnityEngine.Rendering", "ColorWriteMask", "Blue"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ColorWriteMask Blue
void UnityEngine::Rendering::ColorWriteMask::_set_Blue(UnityEngine::Rendering::ColorWriteMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ColorWriteMask::_set_Blue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ColorWriteMask", "Blue", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ColorWriteMask Green
UnityEngine::Rendering::ColorWriteMask UnityEngine::Rendering::ColorWriteMask::_get_Green() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ColorWriteMask::_get_Green");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ColorWriteMask>("UnityEngine.Rendering", "ColorWriteMask", "Green"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ColorWriteMask Green
void UnityEngine::Rendering::ColorWriteMask::_set_Green(UnityEngine::Rendering::ColorWriteMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ColorWriteMask::_set_Green");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ColorWriteMask", "Green", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ColorWriteMask Red
UnityEngine::Rendering::ColorWriteMask UnityEngine::Rendering::ColorWriteMask::_get_Red() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ColorWriteMask::_get_Red");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ColorWriteMask>("UnityEngine.Rendering", "ColorWriteMask", "Red"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ColorWriteMask Red
void UnityEngine::Rendering::ColorWriteMask::_set_Red(UnityEngine::Rendering::ColorWriteMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ColorWriteMask::_set_Red");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ColorWriteMask", "Red", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ColorWriteMask All
UnityEngine::Rendering::ColorWriteMask UnityEngine::Rendering::ColorWriteMask::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ColorWriteMask::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ColorWriteMask>("UnityEngine.Rendering", "ColorWriteMask", "All"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ColorWriteMask All
void UnityEngine::Rendering::ColorWriteMask::_set_All(UnityEngine::Rendering::ColorWriteMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ColorWriteMask::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ColorWriteMask", "All", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.StencilOp
#include "UnityEngine/Rendering/StencilOp.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.StencilOp Keep
UnityEngine::Rendering::StencilOp UnityEngine::Rendering::StencilOp::_get_Keep() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_get_Keep");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::StencilOp>("UnityEngine.Rendering", "StencilOp", "Keep"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.StencilOp Keep
void UnityEngine::Rendering::StencilOp::_set_Keep(UnityEngine::Rendering::StencilOp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_set_Keep");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "StencilOp", "Keep", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.StencilOp Zero
UnityEngine::Rendering::StencilOp UnityEngine::Rendering::StencilOp::_get_Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_get_Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::StencilOp>("UnityEngine.Rendering", "StencilOp", "Zero"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.StencilOp Zero
void UnityEngine::Rendering::StencilOp::_set_Zero(UnityEngine::Rendering::StencilOp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_set_Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "StencilOp", "Zero", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.StencilOp Replace
UnityEngine::Rendering::StencilOp UnityEngine::Rendering::StencilOp::_get_Replace() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_get_Replace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::StencilOp>("UnityEngine.Rendering", "StencilOp", "Replace"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.StencilOp Replace
void UnityEngine::Rendering::StencilOp::_set_Replace(UnityEngine::Rendering::StencilOp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_set_Replace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "StencilOp", "Replace", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.StencilOp IncrementSaturate
UnityEngine::Rendering::StencilOp UnityEngine::Rendering::StencilOp::_get_IncrementSaturate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_get_IncrementSaturate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::StencilOp>("UnityEngine.Rendering", "StencilOp", "IncrementSaturate"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.StencilOp IncrementSaturate
void UnityEngine::Rendering::StencilOp::_set_IncrementSaturate(UnityEngine::Rendering::StencilOp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_set_IncrementSaturate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "StencilOp", "IncrementSaturate", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.StencilOp DecrementSaturate
UnityEngine::Rendering::StencilOp UnityEngine::Rendering::StencilOp::_get_DecrementSaturate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_get_DecrementSaturate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::StencilOp>("UnityEngine.Rendering", "StencilOp", "DecrementSaturate"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.StencilOp DecrementSaturate
void UnityEngine::Rendering::StencilOp::_set_DecrementSaturate(UnityEngine::Rendering::StencilOp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_set_DecrementSaturate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "StencilOp", "DecrementSaturate", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.StencilOp Invert
UnityEngine::Rendering::StencilOp UnityEngine::Rendering::StencilOp::_get_Invert() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_get_Invert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::StencilOp>("UnityEngine.Rendering", "StencilOp", "Invert"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.StencilOp Invert
void UnityEngine::Rendering::StencilOp::_set_Invert(UnityEngine::Rendering::StencilOp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_set_Invert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "StencilOp", "Invert", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.StencilOp IncrementWrap
UnityEngine::Rendering::StencilOp UnityEngine::Rendering::StencilOp::_get_IncrementWrap() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_get_IncrementWrap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::StencilOp>("UnityEngine.Rendering", "StencilOp", "IncrementWrap"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.StencilOp IncrementWrap
void UnityEngine::Rendering::StencilOp::_set_IncrementWrap(UnityEngine::Rendering::StencilOp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_set_IncrementWrap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "StencilOp", "IncrementWrap", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.StencilOp DecrementWrap
UnityEngine::Rendering::StencilOp UnityEngine::Rendering::StencilOp::_get_DecrementWrap() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_get_DecrementWrap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::StencilOp>("UnityEngine.Rendering", "StencilOp", "DecrementWrap"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.StencilOp DecrementWrap
void UnityEngine::Rendering::StencilOp::_set_DecrementWrap(UnityEngine::Rendering::StencilOp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::StencilOp::_set_DecrementWrap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "StencilOp", "DecrementWrap", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.CameraEvent
#include "UnityEngine/Rendering/CameraEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeDepthTexture
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeDepthTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeDepthTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeDepthTexture"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeDepthTexture
void UnityEngine::Rendering::CameraEvent::_set_BeforeDepthTexture(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeDepthTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeDepthTexture", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterDepthTexture
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterDepthTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterDepthTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterDepthTexture"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterDepthTexture
void UnityEngine::Rendering::CameraEvent::_set_AfterDepthTexture(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterDepthTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterDepthTexture", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeDepthNormalsTexture
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeDepthNormalsTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeDepthNormalsTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeDepthNormalsTexture"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeDepthNormalsTexture
void UnityEngine::Rendering::CameraEvent::_set_BeforeDepthNormalsTexture(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeDepthNormalsTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeDepthNormalsTexture", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterDepthNormalsTexture
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterDepthNormalsTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterDepthNormalsTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterDepthNormalsTexture"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterDepthNormalsTexture
void UnityEngine::Rendering::CameraEvent::_set_AfterDepthNormalsTexture(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterDepthNormalsTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterDepthNormalsTexture", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeGBuffer
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeGBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeGBuffer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeGBuffer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeGBuffer
void UnityEngine::Rendering::CameraEvent::_set_BeforeGBuffer(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeGBuffer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeGBuffer", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterGBuffer
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterGBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterGBuffer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterGBuffer"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterGBuffer
void UnityEngine::Rendering::CameraEvent::_set_AfterGBuffer(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterGBuffer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterGBuffer", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeLighting
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeLighting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeLighting"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeLighting
void UnityEngine::Rendering::CameraEvent::_set_BeforeLighting(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeLighting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeLighting", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterLighting
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterLighting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterLighting"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterLighting
void UnityEngine::Rendering::CameraEvent::_set_AfterLighting(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterLighting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterLighting", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeFinalPass
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeFinalPass() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeFinalPass");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeFinalPass"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeFinalPass
void UnityEngine::Rendering::CameraEvent::_set_BeforeFinalPass(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeFinalPass");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeFinalPass", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterFinalPass
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterFinalPass() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterFinalPass");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterFinalPass"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterFinalPass
void UnityEngine::Rendering::CameraEvent::_set_AfterFinalPass(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterFinalPass");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterFinalPass", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeForwardOpaque
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeForwardOpaque() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeForwardOpaque");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeForwardOpaque"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeForwardOpaque
void UnityEngine::Rendering::CameraEvent::_set_BeforeForwardOpaque(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeForwardOpaque");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeForwardOpaque", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterForwardOpaque
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterForwardOpaque() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterForwardOpaque");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterForwardOpaque"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterForwardOpaque
void UnityEngine::Rendering::CameraEvent::_set_AfterForwardOpaque(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterForwardOpaque");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterForwardOpaque", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeImageEffectsOpaque
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeImageEffectsOpaque() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeImageEffectsOpaque");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeImageEffectsOpaque"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeImageEffectsOpaque
void UnityEngine::Rendering::CameraEvent::_set_BeforeImageEffectsOpaque(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeImageEffectsOpaque");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeImageEffectsOpaque", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterImageEffectsOpaque
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterImageEffectsOpaque() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterImageEffectsOpaque");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterImageEffectsOpaque"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterImageEffectsOpaque
void UnityEngine::Rendering::CameraEvent::_set_AfterImageEffectsOpaque(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterImageEffectsOpaque");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterImageEffectsOpaque", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeSkybox
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeSkybox() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeSkybox");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeSkybox"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeSkybox
void UnityEngine::Rendering::CameraEvent::_set_BeforeSkybox(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeSkybox");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeSkybox", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterSkybox
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterSkybox() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterSkybox");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterSkybox"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterSkybox
void UnityEngine::Rendering::CameraEvent::_set_AfterSkybox(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterSkybox");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterSkybox", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeForwardAlpha
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeForwardAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeForwardAlpha");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeForwardAlpha"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeForwardAlpha
void UnityEngine::Rendering::CameraEvent::_set_BeforeForwardAlpha(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeForwardAlpha");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeForwardAlpha", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterForwardAlpha
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterForwardAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterForwardAlpha");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterForwardAlpha"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterForwardAlpha
void UnityEngine::Rendering::CameraEvent::_set_AfterForwardAlpha(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterForwardAlpha");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterForwardAlpha", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeImageEffects
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeImageEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeImageEffects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeImageEffects"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeImageEffects
void UnityEngine::Rendering::CameraEvent::_set_BeforeImageEffects(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeImageEffects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeImageEffects", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterImageEffects
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterImageEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterImageEffects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterImageEffects"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterImageEffects
void UnityEngine::Rendering::CameraEvent::_set_AfterImageEffects(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterImageEffects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterImageEffects", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterEverything
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterEverything() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterEverything");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterEverything"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterEverything
void UnityEngine::Rendering::CameraEvent::_set_AfterEverything(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterEverything");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterEverything", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeReflections
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeReflections() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeReflections");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeReflections"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeReflections
void UnityEngine::Rendering::CameraEvent::_set_BeforeReflections(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeReflections");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeReflections", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterReflections
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterReflections() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterReflections");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterReflections"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterReflections
void UnityEngine::Rendering::CameraEvent::_set_AfterReflections(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterReflections");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterReflections", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent BeforeHaloAndLensFlares
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_BeforeHaloAndLensFlares() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_BeforeHaloAndLensFlares");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "BeforeHaloAndLensFlares"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent BeforeHaloAndLensFlares
void UnityEngine::Rendering::CameraEvent::_set_BeforeHaloAndLensFlares(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_BeforeHaloAndLensFlares");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "BeforeHaloAndLensFlares", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CameraEvent AfterHaloAndLensFlares
UnityEngine::Rendering::CameraEvent UnityEngine::Rendering::CameraEvent::_get_AfterHaloAndLensFlares() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_get_AfterHaloAndLensFlares");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CameraEvent>("UnityEngine.Rendering", "CameraEvent", "AfterHaloAndLensFlares"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CameraEvent AfterHaloAndLensFlares
void UnityEngine::Rendering::CameraEvent::_set_AfterHaloAndLensFlares(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEvent::_set_AfterHaloAndLensFlares");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CameraEvent", "AfterHaloAndLensFlares", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.CameraEventUtils
#include "UnityEngine/Rendering/CameraEventUtils.hpp"
// Including type: UnityEngine.Rendering.CameraEvent
#include "UnityEngine/Rendering/CameraEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.CameraEventUtils.IsValid
bool UnityEngine::Rendering::CameraEventUtils::IsValid(UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CameraEventUtils::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "CameraEventUtils", "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Writing MetadataGetter for method: CameraEventUtils::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Rendering::CameraEvent)>(&CameraEventUtils::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraEventUtils*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CameraEvent>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.LightEvent
#include "UnityEngine/Rendering/LightEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.LightEvent BeforeShadowMap
UnityEngine::Rendering::LightEvent UnityEngine::Rendering::LightEvent::_get_BeforeShadowMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_get_BeforeShadowMap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::LightEvent>("UnityEngine.Rendering", "LightEvent", "BeforeShadowMap"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.LightEvent BeforeShadowMap
void UnityEngine::Rendering::LightEvent::_set_BeforeShadowMap(UnityEngine::Rendering::LightEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_set_BeforeShadowMap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "LightEvent", "BeforeShadowMap", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.LightEvent AfterShadowMap
UnityEngine::Rendering::LightEvent UnityEngine::Rendering::LightEvent::_get_AfterShadowMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_get_AfterShadowMap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::LightEvent>("UnityEngine.Rendering", "LightEvent", "AfterShadowMap"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.LightEvent AfterShadowMap
void UnityEngine::Rendering::LightEvent::_set_AfterShadowMap(UnityEngine::Rendering::LightEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_set_AfterShadowMap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "LightEvent", "AfterShadowMap", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.LightEvent BeforeScreenspaceMask
UnityEngine::Rendering::LightEvent UnityEngine::Rendering::LightEvent::_get_BeforeScreenspaceMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_get_BeforeScreenspaceMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::LightEvent>("UnityEngine.Rendering", "LightEvent", "BeforeScreenspaceMask"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.LightEvent BeforeScreenspaceMask
void UnityEngine::Rendering::LightEvent::_set_BeforeScreenspaceMask(UnityEngine::Rendering::LightEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_set_BeforeScreenspaceMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "LightEvent", "BeforeScreenspaceMask", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.LightEvent AfterScreenspaceMask
UnityEngine::Rendering::LightEvent UnityEngine::Rendering::LightEvent::_get_AfterScreenspaceMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_get_AfterScreenspaceMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::LightEvent>("UnityEngine.Rendering", "LightEvent", "AfterScreenspaceMask"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.LightEvent AfterScreenspaceMask
void UnityEngine::Rendering::LightEvent::_set_AfterScreenspaceMask(UnityEngine::Rendering::LightEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_set_AfterScreenspaceMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "LightEvent", "AfterScreenspaceMask", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.LightEvent BeforeShadowMapPass
UnityEngine::Rendering::LightEvent UnityEngine::Rendering::LightEvent::_get_BeforeShadowMapPass() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_get_BeforeShadowMapPass");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::LightEvent>("UnityEngine.Rendering", "LightEvent", "BeforeShadowMapPass"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.LightEvent BeforeShadowMapPass
void UnityEngine::Rendering::LightEvent::_set_BeforeShadowMapPass(UnityEngine::Rendering::LightEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_set_BeforeShadowMapPass");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "LightEvent", "BeforeShadowMapPass", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.LightEvent AfterShadowMapPass
UnityEngine::Rendering::LightEvent UnityEngine::Rendering::LightEvent::_get_AfterShadowMapPass() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_get_AfterShadowMapPass");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::LightEvent>("UnityEngine.Rendering", "LightEvent", "AfterShadowMapPass"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.LightEvent AfterShadowMapPass
void UnityEngine::Rendering::LightEvent::_set_AfterShadowMapPass(UnityEngine::Rendering::LightEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightEvent::_set_AfterShadowMapPass");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "LightEvent", "AfterShadowMapPass", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.ShadowMapPass
#include "UnityEngine/Rendering/ShadowMapPass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass PointlightPositiveX
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_PointlightPositiveX() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_PointlightPositiveX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "PointlightPositiveX"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass PointlightPositiveX
void UnityEngine::Rendering::ShadowMapPass::_set_PointlightPositiveX(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_PointlightPositiveX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "PointlightPositiveX", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass PointlightNegativeX
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_PointlightNegativeX() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_PointlightNegativeX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "PointlightNegativeX"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass PointlightNegativeX
void UnityEngine::Rendering::ShadowMapPass::_set_PointlightNegativeX(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_PointlightNegativeX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "PointlightNegativeX", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass PointlightPositiveY
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_PointlightPositiveY() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_PointlightPositiveY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "PointlightPositiveY"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass PointlightPositiveY
void UnityEngine::Rendering::ShadowMapPass::_set_PointlightPositiveY(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_PointlightPositiveY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "PointlightPositiveY", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass PointlightNegativeY
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_PointlightNegativeY() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_PointlightNegativeY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "PointlightNegativeY"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass PointlightNegativeY
void UnityEngine::Rendering::ShadowMapPass::_set_PointlightNegativeY(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_PointlightNegativeY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "PointlightNegativeY", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass PointlightPositiveZ
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_PointlightPositiveZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_PointlightPositiveZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "PointlightPositiveZ"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass PointlightPositiveZ
void UnityEngine::Rendering::ShadowMapPass::_set_PointlightPositiveZ(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_PointlightPositiveZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "PointlightPositiveZ", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass PointlightNegativeZ
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_PointlightNegativeZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_PointlightNegativeZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "PointlightNegativeZ"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass PointlightNegativeZ
void UnityEngine::Rendering::ShadowMapPass::_set_PointlightNegativeZ(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_PointlightNegativeZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "PointlightNegativeZ", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass DirectionalCascade0
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_DirectionalCascade0() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_DirectionalCascade0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "DirectionalCascade0"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass DirectionalCascade0
void UnityEngine::Rendering::ShadowMapPass::_set_DirectionalCascade0(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_DirectionalCascade0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "DirectionalCascade0", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass DirectionalCascade1
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_DirectionalCascade1() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_DirectionalCascade1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "DirectionalCascade1"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass DirectionalCascade1
void UnityEngine::Rendering::ShadowMapPass::_set_DirectionalCascade1(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_DirectionalCascade1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "DirectionalCascade1", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass DirectionalCascade2
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_DirectionalCascade2() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_DirectionalCascade2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "DirectionalCascade2"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass DirectionalCascade2
void UnityEngine::Rendering::ShadowMapPass::_set_DirectionalCascade2(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_DirectionalCascade2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "DirectionalCascade2", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass DirectionalCascade3
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_DirectionalCascade3() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_DirectionalCascade3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "DirectionalCascade3"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass DirectionalCascade3
void UnityEngine::Rendering::ShadowMapPass::_set_DirectionalCascade3(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_DirectionalCascade3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "DirectionalCascade3", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass Spotlight
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_Spotlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_Spotlight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "Spotlight"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass Spotlight
void UnityEngine::Rendering::ShadowMapPass::_set_Spotlight(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_Spotlight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "Spotlight", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass Pointlight
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_Pointlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_Pointlight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "Pointlight"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass Pointlight
void UnityEngine::Rendering::ShadowMapPass::_set_Pointlight(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_Pointlight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "Pointlight", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass Directional
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_Directional() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_Directional");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "Directional"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass Directional
void UnityEngine::Rendering::ShadowMapPass::_set_Directional(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_Directional");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "Directional", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowMapPass All
UnityEngine::Rendering::ShadowMapPass UnityEngine::Rendering::ShadowMapPass::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowMapPass>("UnityEngine.Rendering", "ShadowMapPass", "All"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowMapPass All
void UnityEngine::Rendering::ShadowMapPass::_set_All(UnityEngine::Rendering::ShadowMapPass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowMapPass::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowMapPass", "All", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.BuiltinRenderTextureType
#include "UnityEngine/Rendering/BuiltinRenderTextureType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType PropertyName
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_PropertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_PropertyName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "PropertyName"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType PropertyName
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_PropertyName(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_PropertyName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "PropertyName", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType BufferPtr
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_BufferPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_BufferPtr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "BufferPtr"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType BufferPtr
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_BufferPtr(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_BufferPtr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "BufferPtr", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType RenderTexture
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_RenderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_RenderTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "RenderTexture"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType RenderTexture
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_RenderTexture(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_RenderTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "RenderTexture", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType BindableTexture
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_BindableTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_BindableTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "BindableTexture"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType BindableTexture
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_BindableTexture(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_BindableTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "BindableTexture", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType None
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType None
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_None(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType CurrentActive
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_CurrentActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_CurrentActive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "CurrentActive"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType CurrentActive
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_CurrentActive(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_CurrentActive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "CurrentActive", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType CameraTarget
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_CameraTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_CameraTarget");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "CameraTarget"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType CameraTarget
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_CameraTarget(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_CameraTarget");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "CameraTarget", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType Depth
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_Depth() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_Depth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "Depth"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType Depth
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_Depth(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_Depth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "Depth", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType DepthNormals
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_DepthNormals() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_DepthNormals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "DepthNormals"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType DepthNormals
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_DepthNormals(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_DepthNormals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "DepthNormals", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType ResolvedDepth
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_ResolvedDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_ResolvedDepth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "ResolvedDepth"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType ResolvedDepth
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_ResolvedDepth(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_ResolvedDepth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "ResolvedDepth", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType PrepassNormalsSpec
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_PrepassNormalsSpec() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_PrepassNormalsSpec");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "PrepassNormalsSpec"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType PrepassNormalsSpec
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_PrepassNormalsSpec(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_PrepassNormalsSpec");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "PrepassNormalsSpec", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType PrepassLight
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_PrepassLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_PrepassLight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "PrepassLight"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType PrepassLight
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_PrepassLight(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_PrepassLight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "PrepassLight", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType PrepassLightSpec
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_PrepassLightSpec() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_PrepassLightSpec");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "PrepassLightSpec"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType PrepassLightSpec
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_PrepassLightSpec(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_PrepassLightSpec");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "PrepassLightSpec", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer0
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer0() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer0"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer0
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer0(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer0", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer1
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer1() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer1"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer1
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer1(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer1", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer2
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer2() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer2"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer2
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer2(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer2", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer3
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer3() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer3"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer3
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer3(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer3", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType Reflections
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_Reflections() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_Reflections");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "Reflections"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType Reflections
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_Reflections(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_Reflections");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "Reflections", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType MotionVectors
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_MotionVectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_MotionVectors");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "MotionVectors"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType MotionVectors
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_MotionVectors(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_MotionVectors");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "MotionVectors", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer4
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer4() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer4"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer4
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer4(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer4", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer5
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer5() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer5"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer5
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer5(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer5", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer6
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer6() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer6"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer6
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer6(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer6", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer7
UnityEngine::Rendering::BuiltinRenderTextureType UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer7() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_get_GBuffer7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinRenderTextureType>("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer7"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinRenderTextureType GBuffer7
void UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer7(UnityEngine::Rendering::BuiltinRenderTextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinRenderTextureType::_set_GBuffer7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinRenderTextureType", "GBuffer7", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.PassType
#include "UnityEngine/Rendering/PassType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType Normal
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType Normal
void UnityEngine::Rendering::PassType::_set_Normal(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType Vertex
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_Vertex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_Vertex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "Vertex"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType Vertex
void UnityEngine::Rendering::PassType::_set_Vertex(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_Vertex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "Vertex", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType VertexLM
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_VertexLM() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_VertexLM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "VertexLM"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType VertexLM
void UnityEngine::Rendering::PassType::_set_VertexLM(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_VertexLM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "VertexLM", value));
}
// [ObsoleteAttribute] Offset: 0xD946D4
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType VertexLMRGBM
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_VertexLMRGBM() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_VertexLMRGBM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "VertexLMRGBM"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType VertexLMRGBM
void UnityEngine::Rendering::PassType::_set_VertexLMRGBM(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_VertexLMRGBM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "VertexLMRGBM", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType ForwardBase
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_ForwardBase() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_ForwardBase");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "ForwardBase"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType ForwardBase
void UnityEngine::Rendering::PassType::_set_ForwardBase(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_ForwardBase");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "ForwardBase", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType ForwardAdd
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_ForwardAdd() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_ForwardAdd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "ForwardAdd"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType ForwardAdd
void UnityEngine::Rendering::PassType::_set_ForwardAdd(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_ForwardAdd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "ForwardAdd", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType LightPrePassBase
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_LightPrePassBase() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_LightPrePassBase");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "LightPrePassBase"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType LightPrePassBase
void UnityEngine::Rendering::PassType::_set_LightPrePassBase(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_LightPrePassBase");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "LightPrePassBase", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType LightPrePassFinal
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_LightPrePassFinal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_LightPrePassFinal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "LightPrePassFinal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType LightPrePassFinal
void UnityEngine::Rendering::PassType::_set_LightPrePassFinal(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_LightPrePassFinal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "LightPrePassFinal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType ShadowCaster
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_ShadowCaster() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_ShadowCaster");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "ShadowCaster"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType ShadowCaster
void UnityEngine::Rendering::PassType::_set_ShadowCaster(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_ShadowCaster");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "ShadowCaster", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType Deferred
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_Deferred() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_Deferred");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "Deferred"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType Deferred
void UnityEngine::Rendering::PassType::_set_Deferred(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_Deferred");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "Deferred", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType Meta
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_Meta() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_Meta");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "Meta"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType Meta
void UnityEngine::Rendering::PassType::_set_Meta(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_Meta");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "Meta", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType MotionVectors
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_MotionVectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_MotionVectors");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "MotionVectors"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType MotionVectors
void UnityEngine::Rendering::PassType::_set_MotionVectors(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_MotionVectors");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "MotionVectors", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType ScriptableRenderPipeline
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_ScriptableRenderPipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_ScriptableRenderPipeline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "ScriptableRenderPipeline"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType ScriptableRenderPipeline
void UnityEngine::Rendering::PassType::_set_ScriptableRenderPipeline(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_ScriptableRenderPipeline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "ScriptableRenderPipeline", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.PassType ScriptableRenderPipelineDefaultUnlit
UnityEngine::Rendering::PassType UnityEngine::Rendering::PassType::_get_ScriptableRenderPipelineDefaultUnlit() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_get_ScriptableRenderPipelineDefaultUnlit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::PassType>("UnityEngine.Rendering", "PassType", "ScriptableRenderPipelineDefaultUnlit"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.PassType ScriptableRenderPipelineDefaultUnlit
void UnityEngine::Rendering::PassType::_set_ScriptableRenderPipelineDefaultUnlit(UnityEngine::Rendering::PassType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::PassType::_set_ScriptableRenderPipelineDefaultUnlit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "PassType", "ScriptableRenderPipelineDefaultUnlit", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.ShadowCastingMode
#include "UnityEngine/Rendering/ShadowCastingMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowCastingMode Off
UnityEngine::Rendering::ShadowCastingMode UnityEngine::Rendering::ShadowCastingMode::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowCastingMode::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowCastingMode>("UnityEngine.Rendering", "ShadowCastingMode", "Off"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowCastingMode Off
void UnityEngine::Rendering::ShadowCastingMode::_set_Off(UnityEngine::Rendering::ShadowCastingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowCastingMode::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowCastingMode", "Off", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowCastingMode On
UnityEngine::Rendering::ShadowCastingMode UnityEngine::Rendering::ShadowCastingMode::_get_On() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowCastingMode::_get_On");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowCastingMode>("UnityEngine.Rendering", "ShadowCastingMode", "On"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowCastingMode On
void UnityEngine::Rendering::ShadowCastingMode::_set_On(UnityEngine::Rendering::ShadowCastingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowCastingMode::_set_On");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowCastingMode", "On", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowCastingMode TwoSided
UnityEngine::Rendering::ShadowCastingMode UnityEngine::Rendering::ShadowCastingMode::_get_TwoSided() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowCastingMode::_get_TwoSided");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowCastingMode>("UnityEngine.Rendering", "ShadowCastingMode", "TwoSided"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowCastingMode TwoSided
void UnityEngine::Rendering::ShadowCastingMode::_set_TwoSided(UnityEngine::Rendering::ShadowCastingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowCastingMode::_set_TwoSided");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowCastingMode", "TwoSided", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowCastingMode ShadowsOnly
UnityEngine::Rendering::ShadowCastingMode UnityEngine::Rendering::ShadowCastingMode::_get_ShadowsOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowCastingMode::_get_ShadowsOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowCastingMode>("UnityEngine.Rendering", "ShadowCastingMode", "ShadowsOnly"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowCastingMode ShadowsOnly
void UnityEngine::Rendering::ShadowCastingMode::_set_ShadowsOnly(UnityEngine::Rendering::ShadowCastingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowCastingMode::_set_ShadowsOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowCastingMode", "ShadowsOnly", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.GraphicsDeviceType
#include "UnityEngine/Rendering/GraphicsDeviceType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [ObsoleteAttribute] Offset: 0xD9470C
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType OpenGL2
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_OpenGL2() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_OpenGL2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "OpenGL2"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType OpenGL2
void UnityEngine::Rendering::GraphicsDeviceType::_set_OpenGL2(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_OpenGL2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "OpenGL2", value));
}
// [ObsoleteAttribute] Offset: 0xD94744
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType Direct3D9
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_Direct3D9() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_Direct3D9");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "Direct3D9"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType Direct3D9
void UnityEngine::Rendering::GraphicsDeviceType::_set_Direct3D9(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_Direct3D9");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "Direct3D9", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType Direct3D11
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_Direct3D11() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_Direct3D11");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "Direct3D11"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType Direct3D11
void UnityEngine::Rendering::GraphicsDeviceType::_set_Direct3D11(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_Direct3D11");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "Direct3D11", value));
}
// [ObsoleteAttribute] Offset: 0xD9477C
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType PlayStation3
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_PlayStation3() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_PlayStation3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "PlayStation3"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType PlayStation3
void UnityEngine::Rendering::GraphicsDeviceType::_set_PlayStation3(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_PlayStation3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "PlayStation3", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType Null
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "Null"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType Null
void UnityEngine::Rendering::GraphicsDeviceType::_set_Null(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "Null", value));
}
// [ObsoleteAttribute] Offset: 0xD947B4
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType Xbox360
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_Xbox360() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_Xbox360");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "Xbox360"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType Xbox360
void UnityEngine::Rendering::GraphicsDeviceType::_set_Xbox360(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_Xbox360");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "Xbox360", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType OpenGLES2
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_OpenGLES2() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_OpenGLES2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "OpenGLES2"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType OpenGLES2
void UnityEngine::Rendering::GraphicsDeviceType::_set_OpenGLES2(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_OpenGLES2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "OpenGLES2", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType OpenGLES3
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_OpenGLES3() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_OpenGLES3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "OpenGLES3"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType OpenGLES3
void UnityEngine::Rendering::GraphicsDeviceType::_set_OpenGLES3(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_OpenGLES3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "OpenGLES3", value));
}
// [ObsoleteAttribute] Offset: 0xD947EC
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType PlayStationVita
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_PlayStationVita() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_PlayStationVita");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "PlayStationVita"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType PlayStationVita
void UnityEngine::Rendering::GraphicsDeviceType::_set_PlayStationVita(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_PlayStationVita");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "PlayStationVita", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType PlayStation4
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_PlayStation4() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_PlayStation4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "PlayStation4"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType PlayStation4
void UnityEngine::Rendering::GraphicsDeviceType::_set_PlayStation4(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_PlayStation4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "PlayStation4", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType XboxOne
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_XboxOne() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_XboxOne");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "XboxOne"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType XboxOne
void UnityEngine::Rendering::GraphicsDeviceType::_set_XboxOne(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_XboxOne");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "XboxOne", value));
}
// [ObsoleteAttribute] Offset: 0xD94824
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType PlayStationMobile
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_PlayStationMobile() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_PlayStationMobile");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "PlayStationMobile"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType PlayStationMobile
void UnityEngine::Rendering::GraphicsDeviceType::_set_PlayStationMobile(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_PlayStationMobile");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "PlayStationMobile", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType Metal
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_Metal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_Metal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "Metal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType Metal
void UnityEngine::Rendering::GraphicsDeviceType::_set_Metal(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_Metal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "Metal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType OpenGLCore
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_OpenGLCore() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_OpenGLCore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "OpenGLCore"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType OpenGLCore
void UnityEngine::Rendering::GraphicsDeviceType::_set_OpenGLCore(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_OpenGLCore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "OpenGLCore", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType Direct3D12
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_Direct3D12() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_Direct3D12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "Direct3D12"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType Direct3D12
void UnityEngine::Rendering::GraphicsDeviceType::_set_Direct3D12(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_Direct3D12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "Direct3D12", value));
}
// [ObsoleteAttribute] Offset: 0xD9485C
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType N3DS
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_N3DS() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_N3DS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "N3DS"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType N3DS
void UnityEngine::Rendering::GraphicsDeviceType::_set_N3DS(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_N3DS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "N3DS", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType Vulkan
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_Vulkan() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_Vulkan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "Vulkan"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType Vulkan
void UnityEngine::Rendering::GraphicsDeviceType::_set_Vulkan(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_Vulkan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "Vulkan", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType Switch
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_Switch() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_Switch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "Switch"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType Switch
void UnityEngine::Rendering::GraphicsDeviceType::_set_Switch(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_Switch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "Switch", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsDeviceType XboxOneD3D12
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::Rendering::GraphicsDeviceType::_get_XboxOneD3D12() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_get_XboxOneD3D12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsDeviceType>("UnityEngine.Rendering", "GraphicsDeviceType", "XboxOneD3D12"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsDeviceType XboxOneD3D12
void UnityEngine::Rendering::GraphicsDeviceType::_set_XboxOneD3D12(UnityEngine::Rendering::GraphicsDeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsDeviceType::_set_XboxOneD3D12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsDeviceType", "XboxOneD3D12", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.GraphicsTier
#include "UnityEngine/Rendering/GraphicsTier.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsTier Tier1
UnityEngine::Rendering::GraphicsTier UnityEngine::Rendering::GraphicsTier::_get_Tier1() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsTier::_get_Tier1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsTier>("UnityEngine.Rendering", "GraphicsTier", "Tier1"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsTier Tier1
void UnityEngine::Rendering::GraphicsTier::_set_Tier1(UnityEngine::Rendering::GraphicsTier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsTier::_set_Tier1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsTier", "Tier1", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsTier Tier2
UnityEngine::Rendering::GraphicsTier UnityEngine::Rendering::GraphicsTier::_get_Tier2() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsTier::_get_Tier2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsTier>("UnityEngine.Rendering", "GraphicsTier", "Tier2"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsTier Tier2
void UnityEngine::Rendering::GraphicsTier::_set_Tier2(UnityEngine::Rendering::GraphicsTier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsTier::_set_Tier2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsTier", "Tier2", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.GraphicsTier Tier3
UnityEngine::Rendering::GraphicsTier UnityEngine::Rendering::GraphicsTier::_get_Tier3() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsTier::_get_Tier3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::GraphicsTier>("UnityEngine.Rendering", "GraphicsTier", "Tier3"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.GraphicsTier Tier3
void UnityEngine::Rendering::GraphicsTier::_set_Tier3(UnityEngine::Rendering::GraphicsTier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsTier::_set_Tier3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "GraphicsTier", "Tier3", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.SubMeshDescriptor
#include "UnityEngine/Rendering/SubMeshDescriptor.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.SubMeshDescriptor.get_bounds
UnityEngine::Bounds UnityEngine::Rendering::SubMeshDescriptor::get_bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SubMeshDescriptor::get_bounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_bounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Bounds, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SubMeshDescriptor.get_topology
UnityEngine::MeshTopology UnityEngine::Rendering::SubMeshDescriptor::get_topology() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SubMeshDescriptor::get_topology");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_topology", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::MeshTopology, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SubMeshDescriptor.get_indexStart
int UnityEngine::Rendering::SubMeshDescriptor::get_indexStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SubMeshDescriptor::get_indexStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_indexStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SubMeshDescriptor.get_indexCount
int UnityEngine::Rendering::SubMeshDescriptor::get_indexCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SubMeshDescriptor::get_indexCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_indexCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SubMeshDescriptor.get_baseVertex
int UnityEngine::Rendering::SubMeshDescriptor::get_baseVertex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SubMeshDescriptor::get_baseVertex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_baseVertex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SubMeshDescriptor.get_firstVertex
int UnityEngine::Rendering::SubMeshDescriptor::get_firstVertex() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SubMeshDescriptor::get_firstVertex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_firstVertex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SubMeshDescriptor.get_vertexCount
int UnityEngine::Rendering::SubMeshDescriptor::get_vertexCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SubMeshDescriptor::get_vertexCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_vertexCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SubMeshDescriptor.ToString
::Il2CppString* UnityEngine::Rendering::SubMeshDescriptor::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SubMeshDescriptor::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: SubMeshDescriptor::get_bounds
// Il2CppName: get_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Bounds (SubMeshDescriptor::*)()>(&SubMeshDescriptor::get_bounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubMeshDescriptor), "get_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SubMeshDescriptor::get_topology
// Il2CppName: get_topology
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::MeshTopology (SubMeshDescriptor::*)()>(&SubMeshDescriptor::get_topology)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubMeshDescriptor), "get_topology", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SubMeshDescriptor::get_indexStart
// Il2CppName: get_indexStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SubMeshDescriptor::*)()>(&SubMeshDescriptor::get_indexStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubMeshDescriptor), "get_indexStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SubMeshDescriptor::get_indexCount
// Il2CppName: get_indexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SubMeshDescriptor::*)()>(&SubMeshDescriptor::get_indexCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubMeshDescriptor), "get_indexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SubMeshDescriptor::get_baseVertex
// Il2CppName: get_baseVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SubMeshDescriptor::*)()>(&SubMeshDescriptor::get_baseVertex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubMeshDescriptor), "get_baseVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SubMeshDescriptor::get_firstVertex
// Il2CppName: get_firstVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SubMeshDescriptor::*)()>(&SubMeshDescriptor::get_firstVertex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubMeshDescriptor), "get_firstVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SubMeshDescriptor::get_vertexCount
// Il2CppName: get_vertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SubMeshDescriptor::*)()>(&SubMeshDescriptor::get_vertexCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubMeshDescriptor), "get_vertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SubMeshDescriptor::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SubMeshDescriptor::*)()>(&SubMeshDescriptor::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubMeshDescriptor), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.VertexAttributeDescriptor
#include "UnityEngine/Rendering/VertexAttributeDescriptor.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.VertexAttributeDescriptor.get_attribute
UnityEngine::Rendering::VertexAttribute UnityEngine::Rendering::VertexAttributeDescriptor::get_attribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeDescriptor::get_attribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_attribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::VertexAttribute, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.VertexAttributeDescriptor.get_format
UnityEngine::Rendering::VertexAttributeFormat UnityEngine::Rendering::VertexAttributeDescriptor::get_format() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeDescriptor::get_format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::VertexAttributeFormat, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.VertexAttributeDescriptor.get_dimension
int UnityEngine::Rendering::VertexAttributeDescriptor::get_dimension() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeDescriptor::get_dimension");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_dimension", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.VertexAttributeDescriptor.get_stream
int UnityEngine::Rendering::VertexAttributeDescriptor::get_stream() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeDescriptor::get_stream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_stream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.VertexAttributeDescriptor.Equals
bool UnityEngine::Rendering::VertexAttributeDescriptor::Equals(UnityEngine::Rendering::VertexAttributeDescriptor other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeDescriptor::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Rendering.VertexAttributeDescriptor.ToString
::Il2CppString* UnityEngine::Rendering::VertexAttributeDescriptor::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeDescriptor::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.VertexAttributeDescriptor.GetHashCode
int UnityEngine::Rendering::VertexAttributeDescriptor::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeDescriptor::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.VertexAttributeDescriptor.Equals
bool UnityEngine::Rendering::VertexAttributeDescriptor::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::VertexAttributeDescriptor::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Writing MetadataGetter for method: VertexAttributeDescriptor::get_attribute
// Il2CppName: get_attribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::VertexAttribute (VertexAttributeDescriptor::*)()>(&VertexAttributeDescriptor::get_attribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexAttributeDescriptor), "get_attribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VertexAttributeDescriptor::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::VertexAttributeFormat (VertexAttributeDescriptor::*)()>(&VertexAttributeDescriptor::get_format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexAttributeDescriptor), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VertexAttributeDescriptor::get_dimension
// Il2CppName: get_dimension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VertexAttributeDescriptor::*)()>(&VertexAttributeDescriptor::get_dimension)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexAttributeDescriptor), "get_dimension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VertexAttributeDescriptor::get_stream
// Il2CppName: get_stream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VertexAttributeDescriptor::*)()>(&VertexAttributeDescriptor::get_stream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexAttributeDescriptor), "get_stream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VertexAttributeDescriptor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VertexAttributeDescriptor::*)(UnityEngine::Rendering::VertexAttributeDescriptor)>(&VertexAttributeDescriptor::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexAttributeDescriptor), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::VertexAttributeDescriptor>()});
  }
};
// Writing MetadataGetter for method: VertexAttributeDescriptor::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (VertexAttributeDescriptor::*)()>(&VertexAttributeDescriptor::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexAttributeDescriptor), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VertexAttributeDescriptor::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VertexAttributeDescriptor::*)()>(&VertexAttributeDescriptor::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexAttributeDescriptor), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VertexAttributeDescriptor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VertexAttributeDescriptor::*)(::Il2CppObject*)>(&VertexAttributeDescriptor::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexAttributeDescriptor), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.RenderTargetIdentifier
#include "UnityEngine/Rendering/RenderTargetIdentifier.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.RenderTargetIdentifier.Equals
bool UnityEngine::Rendering::RenderTargetIdentifier::Equals(UnityEngine::Rendering::RenderTargetIdentifier rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTargetIdentifier::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, rhs);
}
// Autogenerated method: UnityEngine.Rendering.RenderTargetIdentifier.ToString
::Il2CppString* UnityEngine::Rendering::RenderTargetIdentifier::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTargetIdentifier::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderTargetIdentifier.GetHashCode
int UnityEngine::Rendering::RenderTargetIdentifier::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTargetIdentifier::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderTargetIdentifier.Equals
bool UnityEngine::Rendering::RenderTargetIdentifier::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTargetIdentifier::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Writing MetadataGetter for method: RenderTargetIdentifier::RenderTargetIdentifier
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(UnityEngine::Rendering::BuiltinRenderTextureType)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BuiltinRenderTextureType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(UnityEngine::Rendering::BuiltinRenderTextureType)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BuiltinRenderTextureType>()});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::RenderTargetIdentifier
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(int)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(int)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::RenderTargetIdentifier
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(UnityEngine::Texture*)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(UnityEngine::Texture*)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>()});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RenderTargetIdentifier::*)(UnityEngine::Rendering::RenderTargetIdentifier)>(&RenderTargetIdentifier::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>()});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RenderTargetIdentifier::*)()>(&RenderTargetIdentifier::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RenderTargetIdentifier::*)()>(&RenderTargetIdentifier::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RenderTargetIdentifier::*)(::Il2CppObject*)>(&RenderTargetIdentifier::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.ReflectionProbeUsage
#include "UnityEngine/Rendering/ReflectionProbeUsage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ReflectionProbeUsage Off
UnityEngine::Rendering::ReflectionProbeUsage UnityEngine::Rendering::ReflectionProbeUsage::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ReflectionProbeUsage::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ReflectionProbeUsage>("UnityEngine.Rendering", "ReflectionProbeUsage", "Off"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ReflectionProbeUsage Off
void UnityEngine::Rendering::ReflectionProbeUsage::_set_Off(UnityEngine::Rendering::ReflectionProbeUsage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ReflectionProbeUsage::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ReflectionProbeUsage", "Off", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ReflectionProbeUsage BlendProbes
UnityEngine::Rendering::ReflectionProbeUsage UnityEngine::Rendering::ReflectionProbeUsage::_get_BlendProbes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ReflectionProbeUsage::_get_BlendProbes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ReflectionProbeUsage>("UnityEngine.Rendering", "ReflectionProbeUsage", "BlendProbes"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ReflectionProbeUsage BlendProbes
void UnityEngine::Rendering::ReflectionProbeUsage::_set_BlendProbes(UnityEngine::Rendering::ReflectionProbeUsage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ReflectionProbeUsage::_set_BlendProbes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ReflectionProbeUsage", "BlendProbes", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ReflectionProbeUsage BlendProbesAndSkybox
UnityEngine::Rendering::ReflectionProbeUsage UnityEngine::Rendering::ReflectionProbeUsage::_get_BlendProbesAndSkybox() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ReflectionProbeUsage::_get_BlendProbesAndSkybox");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ReflectionProbeUsage>("UnityEngine.Rendering", "ReflectionProbeUsage", "BlendProbesAndSkybox"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ReflectionProbeUsage BlendProbesAndSkybox
void UnityEngine::Rendering::ReflectionProbeUsage::_set_BlendProbesAndSkybox(UnityEngine::Rendering::ReflectionProbeUsage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ReflectionProbeUsage::_set_BlendProbesAndSkybox");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ReflectionProbeUsage", "BlendProbesAndSkybox", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ReflectionProbeUsage Simple
UnityEngine::Rendering::ReflectionProbeUsage UnityEngine::Rendering::ReflectionProbeUsage::_get_Simple() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ReflectionProbeUsage::_get_Simple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ReflectionProbeUsage>("UnityEngine.Rendering", "ReflectionProbeUsage", "Simple"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ReflectionProbeUsage Simple
void UnityEngine::Rendering::ReflectionProbeUsage::_set_Simple(UnityEngine::Rendering::ReflectionProbeUsage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ReflectionProbeUsage::_set_Simple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ReflectionProbeUsage", "Simple", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.ShadowSamplingMode
#include "UnityEngine/Rendering/ShadowSamplingMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowSamplingMode CompareDepths
UnityEngine::Rendering::ShadowSamplingMode UnityEngine::Rendering::ShadowSamplingMode::_get_CompareDepths() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowSamplingMode::_get_CompareDepths");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowSamplingMode>("UnityEngine.Rendering", "ShadowSamplingMode", "CompareDepths"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowSamplingMode CompareDepths
void UnityEngine::Rendering::ShadowSamplingMode::_set_CompareDepths(UnityEngine::Rendering::ShadowSamplingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowSamplingMode::_set_CompareDepths");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowSamplingMode", "CompareDepths", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowSamplingMode RawDepth
UnityEngine::Rendering::ShadowSamplingMode UnityEngine::Rendering::ShadowSamplingMode::_get_RawDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowSamplingMode::_get_RawDepth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowSamplingMode>("UnityEngine.Rendering", "ShadowSamplingMode", "RawDepth"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowSamplingMode RawDepth
void UnityEngine::Rendering::ShadowSamplingMode::_set_RawDepth(UnityEngine::Rendering::ShadowSamplingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowSamplingMode::_set_RawDepth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowSamplingMode", "RawDepth", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShadowSamplingMode None
UnityEngine::Rendering::ShadowSamplingMode UnityEngine::Rendering::ShadowSamplingMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowSamplingMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShadowSamplingMode>("UnityEngine.Rendering", "ShadowSamplingMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShadowSamplingMode None
void UnityEngine::Rendering::ShadowSamplingMode::_set_None(UnityEngine::Rendering::ShadowSamplingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShadowSamplingMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShadowSamplingMode", "None", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.LightProbeUsage
#include "UnityEngine/Rendering/LightProbeUsage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.LightProbeUsage Off
UnityEngine::Rendering::LightProbeUsage UnityEngine::Rendering::LightProbeUsage::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightProbeUsage::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::LightProbeUsage>("UnityEngine.Rendering", "LightProbeUsage", "Off"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.LightProbeUsage Off
void UnityEngine::Rendering::LightProbeUsage::_set_Off(UnityEngine::Rendering::LightProbeUsage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightProbeUsage::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "LightProbeUsage", "Off", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.LightProbeUsage BlendProbes
UnityEngine::Rendering::LightProbeUsage UnityEngine::Rendering::LightProbeUsage::_get_BlendProbes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightProbeUsage::_get_BlendProbes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::LightProbeUsage>("UnityEngine.Rendering", "LightProbeUsage", "BlendProbes"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.LightProbeUsage BlendProbes
void UnityEngine::Rendering::LightProbeUsage::_set_BlendProbes(UnityEngine::Rendering::LightProbeUsage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightProbeUsage::_set_BlendProbes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "LightProbeUsage", "BlendProbes", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.LightProbeUsage UseProxyVolume
UnityEngine::Rendering::LightProbeUsage UnityEngine::Rendering::LightProbeUsage::_get_UseProxyVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightProbeUsage::_get_UseProxyVolume");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::LightProbeUsage>("UnityEngine.Rendering", "LightProbeUsage", "UseProxyVolume"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.LightProbeUsage UseProxyVolume
void UnityEngine::Rendering::LightProbeUsage::_set_UseProxyVolume(UnityEngine::Rendering::LightProbeUsage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightProbeUsage::_set_UseProxyVolume");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "LightProbeUsage", "UseProxyVolume", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.LightProbeUsage CustomProvided
UnityEngine::Rendering::LightProbeUsage UnityEngine::Rendering::LightProbeUsage::_get_CustomProvided() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightProbeUsage::_get_CustomProvided");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::LightProbeUsage>("UnityEngine.Rendering", "LightProbeUsage", "CustomProvided"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.LightProbeUsage CustomProvided
void UnityEngine::Rendering::LightProbeUsage::_set_CustomProvided(UnityEngine::Rendering::LightProbeUsage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LightProbeUsage::_set_CustomProvided");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "LightProbeUsage", "CustomProvided", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.BuiltinShaderType
#include "UnityEngine/Rendering/BuiltinShaderType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderType DeferredShading
UnityEngine::Rendering::BuiltinShaderType UnityEngine::Rendering::BuiltinShaderType::_get_DeferredShading() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_get_DeferredShading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderType>("UnityEngine.Rendering", "BuiltinShaderType", "DeferredShading"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderType DeferredShading
void UnityEngine::Rendering::BuiltinShaderType::_set_DeferredShading(UnityEngine::Rendering::BuiltinShaderType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_set_DeferredShading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderType", "DeferredShading", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderType DeferredReflections
UnityEngine::Rendering::BuiltinShaderType UnityEngine::Rendering::BuiltinShaderType::_get_DeferredReflections() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_get_DeferredReflections");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderType>("UnityEngine.Rendering", "BuiltinShaderType", "DeferredReflections"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderType DeferredReflections
void UnityEngine::Rendering::BuiltinShaderType::_set_DeferredReflections(UnityEngine::Rendering::BuiltinShaderType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_set_DeferredReflections");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderType", "DeferredReflections", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderType LegacyDeferredLighting
UnityEngine::Rendering::BuiltinShaderType UnityEngine::Rendering::BuiltinShaderType::_get_LegacyDeferredLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_get_LegacyDeferredLighting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderType>("UnityEngine.Rendering", "BuiltinShaderType", "LegacyDeferredLighting"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderType LegacyDeferredLighting
void UnityEngine::Rendering::BuiltinShaderType::_set_LegacyDeferredLighting(UnityEngine::Rendering::BuiltinShaderType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_set_LegacyDeferredLighting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderType", "LegacyDeferredLighting", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderType ScreenSpaceShadows
UnityEngine::Rendering::BuiltinShaderType UnityEngine::Rendering::BuiltinShaderType::_get_ScreenSpaceShadows() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_get_ScreenSpaceShadows");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderType>("UnityEngine.Rendering", "BuiltinShaderType", "ScreenSpaceShadows"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderType ScreenSpaceShadows
void UnityEngine::Rendering::BuiltinShaderType::_set_ScreenSpaceShadows(UnityEngine::Rendering::BuiltinShaderType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_set_ScreenSpaceShadows");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderType", "ScreenSpaceShadows", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderType DepthNormals
UnityEngine::Rendering::BuiltinShaderType UnityEngine::Rendering::BuiltinShaderType::_get_DepthNormals() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_get_DepthNormals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderType>("UnityEngine.Rendering", "BuiltinShaderType", "DepthNormals"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderType DepthNormals
void UnityEngine::Rendering::BuiltinShaderType::_set_DepthNormals(UnityEngine::Rendering::BuiltinShaderType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_set_DepthNormals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderType", "DepthNormals", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderType MotionVectors
UnityEngine::Rendering::BuiltinShaderType UnityEngine::Rendering::BuiltinShaderType::_get_MotionVectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_get_MotionVectors");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderType>("UnityEngine.Rendering", "BuiltinShaderType", "MotionVectors"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderType MotionVectors
void UnityEngine::Rendering::BuiltinShaderType::_set_MotionVectors(UnityEngine::Rendering::BuiltinShaderType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_set_MotionVectors");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderType", "MotionVectors", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderType LightHalo
UnityEngine::Rendering::BuiltinShaderType UnityEngine::Rendering::BuiltinShaderType::_get_LightHalo() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_get_LightHalo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderType>("UnityEngine.Rendering", "BuiltinShaderType", "LightHalo"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderType LightHalo
void UnityEngine::Rendering::BuiltinShaderType::_set_LightHalo(UnityEngine::Rendering::BuiltinShaderType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_set_LightHalo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderType", "LightHalo", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderType LensFlare
UnityEngine::Rendering::BuiltinShaderType UnityEngine::Rendering::BuiltinShaderType::_get_LensFlare() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_get_LensFlare");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderType>("UnityEngine.Rendering", "BuiltinShaderType", "LensFlare"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderType LensFlare
void UnityEngine::Rendering::BuiltinShaderType::_set_LensFlare(UnityEngine::Rendering::BuiltinShaderType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderType::_set_LensFlare");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderType", "LensFlare", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.BuiltinShaderMode
#include "UnityEngine/Rendering/BuiltinShaderMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderMode Disabled
UnityEngine::Rendering::BuiltinShaderMode UnityEngine::Rendering::BuiltinShaderMode::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderMode::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderMode>("UnityEngine.Rendering", "BuiltinShaderMode", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderMode Disabled
void UnityEngine::Rendering::BuiltinShaderMode::_set_Disabled(UnityEngine::Rendering::BuiltinShaderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderMode::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderMode", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderMode UseBuiltin
UnityEngine::Rendering::BuiltinShaderMode UnityEngine::Rendering::BuiltinShaderMode::_get_UseBuiltin() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderMode::_get_UseBuiltin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderMode>("UnityEngine.Rendering", "BuiltinShaderMode", "UseBuiltin"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderMode UseBuiltin
void UnityEngine::Rendering::BuiltinShaderMode::_set_UseBuiltin(UnityEngine::Rendering::BuiltinShaderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderMode::_set_UseBuiltin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderMode", "UseBuiltin", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.BuiltinShaderMode UseCustom
UnityEngine::Rendering::BuiltinShaderMode UnityEngine::Rendering::BuiltinShaderMode::_get_UseCustom() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderMode::_get_UseCustom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::BuiltinShaderMode>("UnityEngine.Rendering", "BuiltinShaderMode", "UseCustom"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.BuiltinShaderMode UseCustom
void UnityEngine::Rendering::BuiltinShaderMode::_set_UseCustom(UnityEngine::Rendering::BuiltinShaderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BuiltinShaderMode::_set_UseCustom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "BuiltinShaderMode", "UseCustom", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.TextureDimension
#include "UnityEngine/Rendering/TextureDimension.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.TextureDimension Unknown
UnityEngine::Rendering::TextureDimension UnityEngine::Rendering::TextureDimension::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::TextureDimension>("UnityEngine.Rendering", "TextureDimension", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.TextureDimension Unknown
void UnityEngine::Rendering::TextureDimension::_set_Unknown(UnityEngine::Rendering::TextureDimension value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "TextureDimension", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.TextureDimension None
UnityEngine::Rendering::TextureDimension UnityEngine::Rendering::TextureDimension::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::TextureDimension>("UnityEngine.Rendering", "TextureDimension", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.TextureDimension None
void UnityEngine::Rendering::TextureDimension::_set_None(UnityEngine::Rendering::TextureDimension value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "TextureDimension", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.TextureDimension Any
UnityEngine::Rendering::TextureDimension UnityEngine::Rendering::TextureDimension::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::TextureDimension>("UnityEngine.Rendering", "TextureDimension", "Any"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.TextureDimension Any
void UnityEngine::Rendering::TextureDimension::_set_Any(UnityEngine::Rendering::TextureDimension value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "TextureDimension", "Any", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.TextureDimension Tex2D
UnityEngine::Rendering::TextureDimension UnityEngine::Rendering::TextureDimension::_get_Tex2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_get_Tex2D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::TextureDimension>("UnityEngine.Rendering", "TextureDimension", "Tex2D"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.TextureDimension Tex2D
void UnityEngine::Rendering::TextureDimension::_set_Tex2D(UnityEngine::Rendering::TextureDimension value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_set_Tex2D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "TextureDimension", "Tex2D", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.TextureDimension Tex3D
UnityEngine::Rendering::TextureDimension UnityEngine::Rendering::TextureDimension::_get_Tex3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_get_Tex3D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::TextureDimension>("UnityEngine.Rendering", "TextureDimension", "Tex3D"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.TextureDimension Tex3D
void UnityEngine::Rendering::TextureDimension::_set_Tex3D(UnityEngine::Rendering::TextureDimension value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_set_Tex3D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "TextureDimension", "Tex3D", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.TextureDimension Cube
UnityEngine::Rendering::TextureDimension UnityEngine::Rendering::TextureDimension::_get_Cube() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_get_Cube");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::TextureDimension>("UnityEngine.Rendering", "TextureDimension", "Cube"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.TextureDimension Cube
void UnityEngine::Rendering::TextureDimension::_set_Cube(UnityEngine::Rendering::TextureDimension value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_set_Cube");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "TextureDimension", "Cube", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.TextureDimension Tex2DArray
UnityEngine::Rendering::TextureDimension UnityEngine::Rendering::TextureDimension::_get_Tex2DArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_get_Tex2DArray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::TextureDimension>("UnityEngine.Rendering", "TextureDimension", "Tex2DArray"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.TextureDimension Tex2DArray
void UnityEngine::Rendering::TextureDimension::_set_Tex2DArray(UnityEngine::Rendering::TextureDimension value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_set_Tex2DArray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "TextureDimension", "Tex2DArray", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.TextureDimension CubeArray
UnityEngine::Rendering::TextureDimension UnityEngine::Rendering::TextureDimension::_get_CubeArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_get_CubeArray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::TextureDimension>("UnityEngine.Rendering", "TextureDimension", "CubeArray"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.TextureDimension CubeArray
void UnityEngine::Rendering::TextureDimension::_set_CubeArray(UnityEngine::Rendering::TextureDimension value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::TextureDimension::_set_CubeArray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "TextureDimension", "CubeArray", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.CommandBufferExecutionFlags
#include "UnityEngine/Rendering/CommandBufferExecutionFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CommandBufferExecutionFlags None
UnityEngine::Rendering::CommandBufferExecutionFlags UnityEngine::Rendering::CommandBufferExecutionFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBufferExecutionFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CommandBufferExecutionFlags>("UnityEngine.Rendering", "CommandBufferExecutionFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CommandBufferExecutionFlags None
void UnityEngine::Rendering::CommandBufferExecutionFlags::_set_None(UnityEngine::Rendering::CommandBufferExecutionFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBufferExecutionFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CommandBufferExecutionFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.CommandBufferExecutionFlags AsyncCompute
UnityEngine::Rendering::CommandBufferExecutionFlags UnityEngine::Rendering::CommandBufferExecutionFlags::_get_AsyncCompute() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBufferExecutionFlags::_get_AsyncCompute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::CommandBufferExecutionFlags>("UnityEngine.Rendering", "CommandBufferExecutionFlags", "AsyncCompute"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.CommandBufferExecutionFlags AsyncCompute
void UnityEngine::Rendering::CommandBufferExecutionFlags::_set_AsyncCompute(UnityEngine::Rendering::CommandBufferExecutionFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBufferExecutionFlags::_set_AsyncCompute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "CommandBufferExecutionFlags", "AsyncCompute", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.RenderTextureSubElement
#include "UnityEngine/Rendering/RenderTextureSubElement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderTextureSubElement Color
UnityEngine::Rendering::RenderTextureSubElement UnityEngine::Rendering::RenderTextureSubElement::_get_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTextureSubElement::_get_Color");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderTextureSubElement>("UnityEngine.Rendering", "RenderTextureSubElement", "Color"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderTextureSubElement Color
void UnityEngine::Rendering::RenderTextureSubElement::_set_Color(UnityEngine::Rendering::RenderTextureSubElement value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTextureSubElement::_set_Color");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderTextureSubElement", "Color", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderTextureSubElement Depth
UnityEngine::Rendering::RenderTextureSubElement UnityEngine::Rendering::RenderTextureSubElement::_get_Depth() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTextureSubElement::_get_Depth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderTextureSubElement>("UnityEngine.Rendering", "RenderTextureSubElement", "Depth"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderTextureSubElement Depth
void UnityEngine::Rendering::RenderTextureSubElement::_set_Depth(UnityEngine::Rendering::RenderTextureSubElement value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTextureSubElement::_set_Depth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderTextureSubElement", "Depth", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderTextureSubElement Stencil
UnityEngine::Rendering::RenderTextureSubElement UnityEngine::Rendering::RenderTextureSubElement::_get_Stencil() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTextureSubElement::_get_Stencil");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderTextureSubElement>("UnityEngine.Rendering", "RenderTextureSubElement", "Stencil"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderTextureSubElement Stencil
void UnityEngine::Rendering::RenderTextureSubElement::_set_Stencil(UnityEngine::Rendering::RenderTextureSubElement value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTextureSubElement::_set_Stencil");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderTextureSubElement", "Stencil", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.RenderTextureSubElement Default
UnityEngine::Rendering::RenderTextureSubElement UnityEngine::Rendering::RenderTextureSubElement::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTextureSubElement::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderTextureSubElement>("UnityEngine.Rendering", "RenderTextureSubElement", "Default"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.RenderTextureSubElement Default
void UnityEngine::Rendering::RenderTextureSubElement::_set_Default(UnityEngine::Rendering::RenderTextureSubElement value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTextureSubElement::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderTextureSubElement", "Default", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.GraphicsSettings
#include "UnityEngine/Rendering/GraphicsSettings.hpp"
// Including type: UnityEngine.Rendering.RenderPipelineAsset
#include "UnityEngine/Rendering/RenderPipelineAsset.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Rendering.BuiltinShaderType
#include "UnityEngine/Rendering/BuiltinShaderType.hpp"
// Including type: UnityEngine.Rendering.BuiltinShaderMode
#include "UnityEngine/Rendering/BuiltinShaderMode.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.GraphicsSettings.get_lightsUseLinearIntensity
bool UnityEngine::Rendering::GraphicsSettings::get_lightsUseLinearIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsSettings::get_lightsUseLinearIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "GraphicsSettings", "get_lightsUseLinearIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.GraphicsSettings.AllowEnlightenSupportForUpgradedProject
bool UnityEngine::Rendering::GraphicsSettings::AllowEnlightenSupportForUpgradedProject() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsSettings::AllowEnlightenSupportForUpgradedProject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "GraphicsSettings", "AllowEnlightenSupportForUpgradedProject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.GraphicsSettings.get_renderPipelineAsset
UnityEngine::Rendering::RenderPipelineAsset* UnityEngine::Rendering::GraphicsSettings::get_renderPipelineAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsSettings::get_renderPipelineAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "GraphicsSettings", "get_renderPipelineAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::RenderPipelineAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.GraphicsSettings.get_INTERNAL_defaultRenderPipeline
UnityEngine::ScriptableObject* UnityEngine::Rendering::GraphicsSettings::get_INTERNAL_defaultRenderPipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsSettings::get_INTERNAL_defaultRenderPipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "GraphicsSettings", "get_INTERNAL_defaultRenderPipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::ScriptableObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.GraphicsSettings.get_defaultRenderPipeline
UnityEngine::Rendering::RenderPipelineAsset* UnityEngine::Rendering::GraphicsSettings::get_defaultRenderPipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsSettings::get_defaultRenderPipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "GraphicsSettings", "get_defaultRenderPipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::RenderPipelineAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.GraphicsSettings.SetShaderMode
void UnityEngine::Rendering::GraphicsSettings::SetShaderMode(UnityEngine::Rendering::BuiltinShaderType type, UnityEngine::Rendering::BuiltinShaderMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsSettings::SetShaderMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "GraphicsSettings", "SetShaderMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type, mode);
}
// Autogenerated method: UnityEngine.Rendering.GraphicsSettings.SetCustomShader
void UnityEngine::Rendering::GraphicsSettings::SetCustomShader(UnityEngine::Rendering::BuiltinShaderType type, UnityEngine::Shader* shader) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::GraphicsSettings::SetCustomShader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "GraphicsSettings", "SetCustomShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(shader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type, shader);
}
// Writing MetadataGetter for method: GraphicsSettings::get_lightsUseLinearIntensity
// Il2CppName: get_lightsUseLinearIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GraphicsSettings::get_lightsUseLinearIntensity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GraphicsSettings*), "get_lightsUseLinearIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GraphicsSettings::AllowEnlightenSupportForUpgradedProject
// Il2CppName: AllowEnlightenSupportForUpgradedProject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GraphicsSettings::AllowEnlightenSupportForUpgradedProject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GraphicsSettings*), "AllowEnlightenSupportForUpgradedProject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GraphicsSettings::get_renderPipelineAsset
// Il2CppName: get_renderPipelineAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::RenderPipelineAsset* (*)()>(&GraphicsSettings::get_renderPipelineAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GraphicsSettings*), "get_renderPipelineAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GraphicsSettings::get_INTERNAL_defaultRenderPipeline
// Il2CppName: get_INTERNAL_defaultRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ScriptableObject* (*)()>(&GraphicsSettings::get_INTERNAL_defaultRenderPipeline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GraphicsSettings*), "get_INTERNAL_defaultRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GraphicsSettings::get_defaultRenderPipeline
// Il2CppName: get_defaultRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::RenderPipelineAsset* (*)()>(&GraphicsSettings::get_defaultRenderPipeline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GraphicsSettings*), "get_defaultRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GraphicsSettings::SetShaderMode
// Il2CppName: SetShaderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Rendering::BuiltinShaderType, UnityEngine::Rendering::BuiltinShaderMode)>(&GraphicsSettings::SetShaderMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GraphicsSettings*), "SetShaderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BuiltinShaderType>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BuiltinShaderMode>()});
  }
};
// Writing MetadataGetter for method: GraphicsSettings::SetCustomShader
// Il2CppName: SetCustomShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Rendering::BuiltinShaderType, UnityEngine::Shader*)>(&GraphicsSettings::SetCustomShader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GraphicsSettings*), "SetCustomShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BuiltinShaderType>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Shader*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.OnDemandRendering
#include "UnityEngine/Rendering/OnDemandRendering.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 m_RenderFrameInterval
int UnityEngine::Rendering::OnDemandRendering::_get_m_RenderFrameInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::OnDemandRendering::_get_m_RenderFrameInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Rendering", "OnDemandRendering", "m_RenderFrameInterval"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 m_RenderFrameInterval
void UnityEngine::Rendering::OnDemandRendering::_set_m_RenderFrameInterval(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::OnDemandRendering::_set_m_RenderFrameInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "OnDemandRendering", "m_RenderFrameInterval", value));
}
// Autogenerated method: UnityEngine.Rendering.OnDemandRendering.get_renderFrameInterval
int UnityEngine::Rendering::OnDemandRendering::get_renderFrameInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::OnDemandRendering::get_renderFrameInterval");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "OnDemandRendering", "get_renderFrameInterval", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.OnDemandRendering.GetRenderFrameInterval
void UnityEngine::Rendering::OnDemandRendering::GetRenderFrameInterval(int& frameInterval) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::OnDemandRendering::GetRenderFrameInterval");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "OnDemandRendering", "GetRenderFrameInterval", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, frameInterval);
}
// Autogenerated method: UnityEngine.Rendering.OnDemandRendering..cctor
void UnityEngine::Rendering::OnDemandRendering::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::OnDemandRendering::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "OnDemandRendering", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OnDemandRendering::get_renderFrameInterval
// Il2CppName: get_renderFrameInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&OnDemandRendering::get_renderFrameInterval)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OnDemandRendering*), "get_renderFrameInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OnDemandRendering::GetRenderFrameInterval
// Il2CppName: GetRenderFrameInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int&)>(&OnDemandRendering::GetRenderFrameInterval)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OnDemandRendering*), "GetRenderFrameInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: OnDemandRendering::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OnDemandRendering::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OnDemandRendering*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Rendering.RenderTargetIdentifier
#include "UnityEngine/Rendering/RenderTargetIdentifier.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
// Including type: UnityEngine.RenderTextureMemoryless
#include "UnityEngine/RenderTextureMemoryless.hpp"
// Including type: UnityEngine.RenderTextureFormat
#include "UnityEngine/RenderTextureFormat.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Rendering.CommandBufferExecutionFlags
#include "UnityEngine/Rendering/CommandBufferExecutionFlags.hpp"
// Including type: UnityEngine.Rendering.RenderTextureSubElement
#include "UnityEngine/Rendering/RenderTextureSubElement.hpp"
// Including type: UnityEngine.Rendering.ShadowSamplingMode
#include "UnityEngine/Rendering/ShadowSamplingMode.hpp"
// Including type: UnityEngine.Rendering.RenderBufferLoadAction
#include "UnityEngine/Rendering/RenderBufferLoadAction.hpp"
// Including type: UnityEngine.Rendering.RenderBufferStoreAction
#include "UnityEngine/Rendering/RenderBufferStoreAction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.InitBuffer
System::IntPtr UnityEngine::Rendering::CommandBuffer::InitBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::InitBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "CommandBuffer", "InitBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.ReleaseBuffer
void UnityEngine::Rendering::CommandBuffer::ReleaseBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::ReleaseBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.set_name
void UnityEngine::Rendering::CommandBuffer::set_name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::set_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Clear
void UnityEngine::Rendering::CommandBuffer::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Internal_DrawMesh
void UnityEngine::Rendering::CommandBuffer::Internal_DrawMesh(UnityEngine::Mesh* mesh, UnityEngine::Matrix4x4 matrix, UnityEngine::Material* material, int submeshIndex, int shaderPass, UnityEngine::MaterialPropertyBlock* properties) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Internal_DrawMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Internal_DrawMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(submeshIndex), ::il2cpp_utils::ExtractType(shaderPass), ::il2cpp_utils::ExtractType(properties)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mesh, matrix, material, submeshIndex, shaderPass, properties);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Internal_DrawRenderer
void UnityEngine::Rendering::CommandBuffer::Internal_DrawRenderer(UnityEngine::Renderer* renderer, UnityEngine::Material* material, int submeshIndex, int shaderPass) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Internal_DrawRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Internal_DrawRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderer), ::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(submeshIndex), ::il2cpp_utils::ExtractType(shaderPass)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, renderer, material, submeshIndex, shaderPass);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.CopyTexture_Internal
void UnityEngine::Rendering::CommandBuffer::CopyTexture_Internal(UnityEngine::Rendering::RenderTargetIdentifier& src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, UnityEngine::Rendering::RenderTargetIdentifier& dst, int dstElement, int dstMip, int dstX, int dstY, int mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::CopyTexture_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTexture_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(srcElement), ::il2cpp_utils::ExtractType(srcMip), ::il2cpp_utils::ExtractType(srcX), ::il2cpp_utils::ExtractType(srcY), ::il2cpp_utils::ExtractType(srcWidth), ::il2cpp_utils::ExtractType(srcHeight), ::il2cpp_utils::ExtractType(dst), ::il2cpp_utils::ExtractType(dstElement), ::il2cpp_utils::ExtractType(dstMip), ::il2cpp_utils::ExtractType(dstX), ::il2cpp_utils::ExtractType(dstY), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, srcElement, srcMip, srcX, srcY, srcWidth, srcHeight, dst, dstElement, dstMip, dstX, dstY, mode);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Blit_Texture
void UnityEngine::Rendering::CommandBuffer::Blit_Texture(UnityEngine::Texture* source, UnityEngine::Rendering::RenderTargetIdentifier& dest, UnityEngine::Material* mat, int pass, UnityEngine::Vector2 scale, UnityEngine::Vector2 offset, int sourceDepthSlice, int destDepthSlice) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Blit_Texture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blit_Texture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(mat), ::il2cpp_utils::ExtractType(pass), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(sourceDepthSlice), ::il2cpp_utils::ExtractType(destDepthSlice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, dest, mat, pass, scale, offset, sourceDepthSlice, destDepthSlice);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Blit_Identifier
void UnityEngine::Rendering::CommandBuffer::Blit_Identifier(UnityEngine::Rendering::RenderTargetIdentifier& source, UnityEngine::Rendering::RenderTargetIdentifier& dest, UnityEngine::Material* mat, int pass, UnityEngine::Vector2 scale, UnityEngine::Vector2 offset, int sourceDepthSlice, int destDepthSlice) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Blit_Identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blit_Identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(mat), ::il2cpp_utils::ExtractType(pass), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(sourceDepthSlice), ::il2cpp_utils::ExtractType(destDepthSlice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, dest, mat, pass, scale, offset, sourceDepthSlice, destDepthSlice);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.GetTemporaryRT
void UnityEngine::Rendering::CommandBuffer::GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine::FilterMode filter, UnityEngine::Experimental::Rendering::GraphicsFormat format, int antiAliasing, bool enableRandomWrite, UnityEngine::RenderTextureMemoryless memorylessMode, bool useDynamicScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::GetTemporaryRT");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTemporaryRT", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID), ::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(depthBuffer), ::il2cpp_utils::ExtractType(filter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(antiAliasing), ::il2cpp_utils::ExtractType(enableRandomWrite), ::il2cpp_utils::ExtractType(memorylessMode), ::il2cpp_utils::ExtractType(useDynamicScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID, width, height, depthBuffer, filter, format, antiAliasing, enableRandomWrite, memorylessMode, useDynamicScale);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.GetTemporaryRT
void UnityEngine::Rendering::CommandBuffer::GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine::FilterMode filter, UnityEngine::Experimental::Rendering::GraphicsFormat format, int antiAliasing, bool enableRandomWrite, UnityEngine::RenderTextureMemoryless memorylessMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::GetTemporaryRT");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTemporaryRT", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID), ::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(depthBuffer), ::il2cpp_utils::ExtractType(filter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(antiAliasing), ::il2cpp_utils::ExtractType(enableRandomWrite), ::il2cpp_utils::ExtractType(memorylessMode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID, width, height, depthBuffer, filter, format, antiAliasing, enableRandomWrite, memorylessMode);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.GetTemporaryRT
void UnityEngine::Rendering::CommandBuffer::GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine::FilterMode filter, UnityEngine::Experimental::Rendering::GraphicsFormat format, int antiAliasing) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::GetTemporaryRT");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTemporaryRT", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID), ::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(depthBuffer), ::il2cpp_utils::ExtractType(filter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(antiAliasing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID, width, height, depthBuffer, filter, format, antiAliasing);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.GetTemporaryRT
void UnityEngine::Rendering::CommandBuffer::GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine::FilterMode filter, UnityEngine::Experimental::Rendering::GraphicsFormat format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::GetTemporaryRT");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTemporaryRT", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID), ::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(depthBuffer), ::il2cpp_utils::ExtractType(filter), ::il2cpp_utils::ExtractType(format)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID, width, height, depthBuffer, filter, format);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.GetTemporaryRT
void UnityEngine::Rendering::CommandBuffer::GetTemporaryRT(int nameID, int width, int height, int depthBuffer, UnityEngine::FilterMode filter, UnityEngine::RenderTextureFormat format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::GetTemporaryRT");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTemporaryRT", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID), ::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(depthBuffer), ::il2cpp_utils::ExtractType(filter), ::il2cpp_utils::ExtractType(format)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID, width, height, depthBuffer, filter, format);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.ReleaseTemporaryRT
void UnityEngine::Rendering::CommandBuffer::ReleaseTemporaryRT(int nameID) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::ReleaseTemporaryRT");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseTemporaryRT", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetGlobalFloat
void UnityEngine::Rendering::CommandBuffer::SetGlobalFloat(int nameID, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetGlobalFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID, value);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetGlobalVector
void UnityEngine::Rendering::CommandBuffer::SetGlobalVector(int nameID, UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetGlobalVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID, value);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetViewProjectionMatrices
void UnityEngine::Rendering::CommandBuffer::SetViewProjectionMatrices(UnityEngine::Matrix4x4 view, UnityEngine::Matrix4x4 proj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetViewProjectionMatrices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetViewProjectionMatrices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(view), ::il2cpp_utils::ExtractType(proj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, view, proj);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.ValidateAgainstExecutionFlags
bool UnityEngine::Rendering::CommandBuffer::ValidateAgainstExecutionFlags(UnityEngine::Rendering::CommandBufferExecutionFlags requiredFlags, UnityEngine::Rendering::CommandBufferExecutionFlags invalidFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::ValidateAgainstExecutionFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateAgainstExecutionFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requiredFlags), ::il2cpp_utils::ExtractType(invalidFlags)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, requiredFlags, invalidFlags);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetGlobalTexture_Impl
void UnityEngine::Rendering::CommandBuffer::SetGlobalTexture_Impl(int nameID, UnityEngine::Rendering::RenderTargetIdentifier& rt, UnityEngine::Rendering::RenderTextureSubElement element) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetGlobalTexture_Impl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalTexture_Impl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID), ::il2cpp_utils::ExtractType(rt), ::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID, rt, element);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetShadowSamplingMode_Impl
void UnityEngine::Rendering::CommandBuffer::SetShadowSamplingMode_Impl(UnityEngine::Rendering::RenderTargetIdentifier& shadowmap, UnityEngine::Rendering::ShadowSamplingMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetShadowSamplingMode_Impl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetShadowSamplingMode_Impl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shadowmap), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shadowmap, mode);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetRenderTarget
void UnityEngine::Rendering::CommandBuffer::SetRenderTarget(UnityEngine::Rendering::RenderTargetIdentifier rt) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetRenderTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRenderTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rt)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rt);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetRenderTargetSingle_Internal
void UnityEngine::Rendering::CommandBuffer::SetRenderTargetSingle_Internal(UnityEngine::Rendering::RenderTargetIdentifier rt, UnityEngine::Rendering::RenderBufferLoadAction colorLoadAction, UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, UnityEngine::Rendering::RenderBufferLoadAction depthLoadAction, UnityEngine::Rendering::RenderBufferStoreAction depthStoreAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetRenderTargetSingle_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRenderTargetSingle_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rt), ::il2cpp_utils::ExtractType(colorLoadAction), ::il2cpp_utils::ExtractType(colorStoreAction), ::il2cpp_utils::ExtractType(depthLoadAction), ::il2cpp_utils::ExtractType(depthStoreAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rt, colorLoadAction, colorStoreAction, depthLoadAction, depthStoreAction);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Dispose
void UnityEngine::Rendering::CommandBuffer::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Dispose
void UnityEngine::Rendering::CommandBuffer::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Dispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.DrawMesh
void UnityEngine::Rendering::CommandBuffer::DrawMesh(UnityEngine::Mesh* mesh, UnityEngine::Matrix4x4 matrix, UnityEngine::Material* material, int submeshIndex, int shaderPass, UnityEngine::MaterialPropertyBlock* properties) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::DrawMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(submeshIndex), ::il2cpp_utils::ExtractType(shaderPass), ::il2cpp_utils::ExtractType(properties)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mesh, matrix, material, submeshIndex, shaderPass, properties);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.DrawMesh
void UnityEngine::Rendering::CommandBuffer::DrawMesh(UnityEngine::Mesh* mesh, UnityEngine::Matrix4x4 matrix, UnityEngine::Material* material, int submeshIndex, int shaderPass) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::DrawMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(submeshIndex), ::il2cpp_utils::ExtractType(shaderPass)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mesh, matrix, material, submeshIndex, shaderPass);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.DrawMesh
void UnityEngine::Rendering::CommandBuffer::DrawMesh(UnityEngine::Mesh* mesh, UnityEngine::Matrix4x4 matrix, UnityEngine::Material* material, int submeshIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::DrawMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(submeshIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mesh, matrix, material, submeshIndex);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.DrawMesh
void UnityEngine::Rendering::CommandBuffer::DrawMesh(UnityEngine::Mesh* mesh, UnityEngine::Matrix4x4 matrix, UnityEngine::Material* material) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::DrawMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(material)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mesh, matrix, material);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.DrawRenderer
void UnityEngine::Rendering::CommandBuffer::DrawRenderer(UnityEngine::Renderer* renderer, UnityEngine::Material* material, int submeshIndex, int shaderPass) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::DrawRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderer), ::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(submeshIndex), ::il2cpp_utils::ExtractType(shaderPass)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, renderer, material, submeshIndex, shaderPass);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.CopyTexture
void UnityEngine::Rendering::CommandBuffer::CopyTexture(UnityEngine::Rendering::RenderTargetIdentifier src, UnityEngine::Rendering::RenderTargetIdentifier dst) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::CopyTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dst)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dst);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Blit
void UnityEngine::Rendering::CommandBuffer::Blit(UnityEngine::Texture* source, UnityEngine::Rendering::RenderTargetIdentifier dest, UnityEngine::Material* mat, int pass) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Blit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(mat), ::il2cpp_utils::ExtractType(pass)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, dest, mat, pass);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Blit
void UnityEngine::Rendering::CommandBuffer::Blit(UnityEngine::Rendering::RenderTargetIdentifier source, UnityEngine::Rendering::RenderTargetIdentifier dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Blit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, dest);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Blit
void UnityEngine::Rendering::CommandBuffer::Blit(UnityEngine::Rendering::RenderTargetIdentifier source, UnityEngine::Rendering::RenderTargetIdentifier dest, UnityEngine::Material* mat, int pass) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Blit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(mat), ::il2cpp_utils::ExtractType(pass)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, dest, mat, pass);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetGlobalVector
void UnityEngine::Rendering::CommandBuffer::SetGlobalVector(::Il2CppString* name, UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetGlobalVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, value);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetGlobalTexture
void UnityEngine::Rendering::CommandBuffer::SetGlobalTexture(::Il2CppString* name, UnityEngine::Rendering::RenderTargetIdentifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetGlobalTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, value);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetGlobalTexture
void UnityEngine::Rendering::CommandBuffer::SetGlobalTexture(int nameID, UnityEngine::Rendering::RenderTargetIdentifier value, UnityEngine::Rendering::RenderTextureSubElement element) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetGlobalTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID, value, element);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetShadowSamplingMode
void UnityEngine::Rendering::CommandBuffer::SetShadowSamplingMode(UnityEngine::Rendering::RenderTargetIdentifier shadowmap, UnityEngine::Rendering::ShadowSamplingMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetShadowSamplingMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetShadowSamplingMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shadowmap), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shadowmap, mode);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Internal_DrawMesh_Injected
void UnityEngine::Rendering::CommandBuffer::Internal_DrawMesh_Injected(UnityEngine::Mesh* mesh, UnityEngine::Matrix4x4& matrix, UnityEngine::Material* material, int submeshIndex, int shaderPass, UnityEngine::MaterialPropertyBlock* properties) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Internal_DrawMesh_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Internal_DrawMesh_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(submeshIndex), ::il2cpp_utils::ExtractType(shaderPass), ::il2cpp_utils::ExtractType(properties)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mesh, matrix, material, submeshIndex, shaderPass, properties);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Blit_Texture_Injected
void UnityEngine::Rendering::CommandBuffer::Blit_Texture_Injected(UnityEngine::Texture* source, UnityEngine::Rendering::RenderTargetIdentifier& dest, UnityEngine::Material* mat, int pass, UnityEngine::Vector2& scale, UnityEngine::Vector2& offset, int sourceDepthSlice, int destDepthSlice) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Blit_Texture_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blit_Texture_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(mat), ::il2cpp_utils::ExtractType(pass), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(sourceDepthSlice), ::il2cpp_utils::ExtractType(destDepthSlice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, dest, mat, pass, scale, offset, sourceDepthSlice, destDepthSlice);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Blit_Identifier_Injected
void UnityEngine::Rendering::CommandBuffer::Blit_Identifier_Injected(UnityEngine::Rendering::RenderTargetIdentifier& source, UnityEngine::Rendering::RenderTargetIdentifier& dest, UnityEngine::Material* mat, int pass, UnityEngine::Vector2& scale, UnityEngine::Vector2& offset, int sourceDepthSlice, int destDepthSlice) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Blit_Identifier_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blit_Identifier_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(mat), ::il2cpp_utils::ExtractType(pass), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(sourceDepthSlice), ::il2cpp_utils::ExtractType(destDepthSlice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, dest, mat, pass, scale, offset, sourceDepthSlice, destDepthSlice);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetGlobalVector_Injected
void UnityEngine::Rendering::CommandBuffer::SetGlobalVector_Injected(int nameID, UnityEngine::Vector4& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetGlobalVector_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalVector_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nameID, value);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetViewProjectionMatrices_Injected
void UnityEngine::Rendering::CommandBuffer::SetViewProjectionMatrices_Injected(UnityEngine::Matrix4x4& view, UnityEngine::Matrix4x4& proj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetViewProjectionMatrices_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetViewProjectionMatrices_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(view), ::il2cpp_utils::ExtractType(proj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, view, proj);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.SetRenderTargetSingle_Internal_Injected
void UnityEngine::Rendering::CommandBuffer::SetRenderTargetSingle_Internal_Injected(UnityEngine::Rendering::RenderTargetIdentifier& rt, UnityEngine::Rendering::RenderBufferLoadAction colorLoadAction, UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, UnityEngine::Rendering::RenderBufferLoadAction depthLoadAction, UnityEngine::Rendering::RenderBufferStoreAction depthStoreAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::SetRenderTargetSingle_Internal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRenderTargetSingle_Internal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rt), ::il2cpp_utils::ExtractType(colorLoadAction), ::il2cpp_utils::ExtractType(colorStoreAction), ::il2cpp_utils::ExtractType(depthLoadAction), ::il2cpp_utils::ExtractType(depthStoreAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rt, colorLoadAction, colorStoreAction, depthLoadAction, depthStoreAction);
}
// Autogenerated method: UnityEngine.Rendering.CommandBuffer.Finalize
void UnityEngine::Rendering::CommandBuffer::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::CommandBuffer::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CommandBuffer::InitBuffer
// Il2CppName: InitBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)()>(&CommandBuffer::InitBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "InitBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBuffer::ReleaseBuffer
// Il2CppName: ReleaseBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)()>(&CommandBuffer::ReleaseBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "ReleaseBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBuffer::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(::Il2CppString*)>(&CommandBuffer::set_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)()>(&CommandBuffer::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Internal_DrawMesh
// Il2CppName: Internal_DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Mesh*, UnityEngine::Matrix4x4, UnityEngine::Material*, int, int, UnityEngine::MaterialPropertyBlock*)>(&CommandBuffer::Internal_DrawMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Internal_DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::MaterialPropertyBlock*>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Internal_DrawRenderer
// Il2CppName: Internal_DrawRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Renderer*, UnityEngine::Material*, int, int)>(&CommandBuffer::Internal_DrawRenderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Internal_DrawRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Renderer*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::CopyTexture_Internal
// Il2CppName: CopyTexture_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier&, int, int, int, int, int, int, UnityEngine::Rendering::RenderTargetIdentifier&, int, int, int, int, int)>(&CommandBuffer::CopyTexture_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "CopyTexture_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Blit_Texture
// Il2CppName: Blit_Texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Texture*, UnityEngine::Rendering::RenderTargetIdentifier&, UnityEngine::Material*, int, UnityEngine::Vector2, UnityEngine::Vector2, int, int)>(&CommandBuffer::Blit_Texture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Blit_Texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Blit_Identifier
// Il2CppName: Blit_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier&, UnityEngine::Rendering::RenderTargetIdentifier&, UnityEngine::Material*, int, UnityEngine::Vector2, UnityEngine::Vector2, int, int)>(&CommandBuffer::Blit_Identifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Blit_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::GetTemporaryRT
// Il2CppName: GetTemporaryRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int, int, int, int, UnityEngine::FilterMode, UnityEngine::Experimental::Rendering::GraphicsFormat, int, bool, UnityEngine::RenderTextureMemoryless, bool)>(&CommandBuffer::GetTemporaryRT)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "GetTemporaryRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::FilterMode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Rendering::GraphicsFormat>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTextureMemoryless>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::GetTemporaryRT
// Il2CppName: GetTemporaryRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int, int, int, int, UnityEngine::FilterMode, UnityEngine::Experimental::Rendering::GraphicsFormat, int, bool, UnityEngine::RenderTextureMemoryless)>(&CommandBuffer::GetTemporaryRT)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "GetTemporaryRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::FilterMode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Rendering::GraphicsFormat>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTextureMemoryless>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::GetTemporaryRT
// Il2CppName: GetTemporaryRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int, int, int, int, UnityEngine::FilterMode, UnityEngine::Experimental::Rendering::GraphicsFormat, int)>(&CommandBuffer::GetTemporaryRT)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "GetTemporaryRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::FilterMode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Rendering::GraphicsFormat>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::GetTemporaryRT
// Il2CppName: GetTemporaryRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int, int, int, int, UnityEngine::FilterMode, UnityEngine::Experimental::Rendering::GraphicsFormat)>(&CommandBuffer::GetTemporaryRT)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "GetTemporaryRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::FilterMode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Rendering::GraphicsFormat>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::GetTemporaryRT
// Il2CppName: GetTemporaryRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int, int, int, int, UnityEngine::FilterMode, UnityEngine::RenderTextureFormat)>(&CommandBuffer::GetTemporaryRT)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "GetTemporaryRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::FilterMode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTextureFormat>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::ReleaseTemporaryRT
// Il2CppName: ReleaseTemporaryRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int)>(&CommandBuffer::ReleaseTemporaryRT)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "ReleaseTemporaryRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetGlobalFloat
// Il2CppName: SetGlobalFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int, float)>(&CommandBuffer::SetGlobalFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetGlobalFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetGlobalVector
// Il2CppName: SetGlobalVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int, UnityEngine::Vector4)>(&CommandBuffer::SetGlobalVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetGlobalVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetViewProjectionMatrices
// Il2CppName: SetViewProjectionMatrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Matrix4x4, UnityEngine::Matrix4x4)>(&CommandBuffer::SetViewProjectionMatrices)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetViewProjectionMatrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::ValidateAgainstExecutionFlags
// Il2CppName: ValidateAgainstExecutionFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CommandBuffer::*)(UnityEngine::Rendering::CommandBufferExecutionFlags, UnityEngine::Rendering::CommandBufferExecutionFlags)>(&CommandBuffer::ValidateAgainstExecutionFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "ValidateAgainstExecutionFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CommandBufferExecutionFlags>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CommandBufferExecutionFlags>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetGlobalTexture_Impl
// Il2CppName: SetGlobalTexture_Impl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int, UnityEngine::Rendering::RenderTargetIdentifier&, UnityEngine::Rendering::RenderTextureSubElement)>(&CommandBuffer::SetGlobalTexture_Impl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetGlobalTexture_Impl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTextureSubElement>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetShadowSamplingMode_Impl
// Il2CppName: SetShadowSamplingMode_Impl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier&, UnityEngine::Rendering::ShadowSamplingMode)>(&CommandBuffer::SetShadowSamplingMode_Impl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetShadowSamplingMode_Impl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ShadowSamplingMode>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier)>(&CommandBuffer::SetRenderTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetRenderTargetSingle_Internal
// Il2CppName: SetRenderTargetSingle_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier, UnityEngine::Rendering::RenderBufferLoadAction, UnityEngine::Rendering::RenderBufferStoreAction, UnityEngine::Rendering::RenderBufferLoadAction, UnityEngine::Rendering::RenderBufferStoreAction)>(&CommandBuffer::SetRenderTargetSingle_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetRenderTargetSingle_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderBufferLoadAction>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderBufferStoreAction>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderBufferLoadAction>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderBufferStoreAction>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)()>(&CommandBuffer::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(bool)>(&CommandBuffer::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Mesh*, UnityEngine::Matrix4x4, UnityEngine::Material*, int, int, UnityEngine::MaterialPropertyBlock*)>(&CommandBuffer::DrawMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::MaterialPropertyBlock*>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Mesh*, UnityEngine::Matrix4x4, UnityEngine::Material*, int, int)>(&CommandBuffer::DrawMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Mesh*, UnityEngine::Matrix4x4, UnityEngine::Material*, int)>(&CommandBuffer::DrawMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Mesh*, UnityEngine::Matrix4x4, UnityEngine::Material*)>(&CommandBuffer::DrawMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::DrawRenderer
// Il2CppName: DrawRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Renderer*, UnityEngine::Material*, int, int)>(&CommandBuffer::DrawRenderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "DrawRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Renderer*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::CopyTexture
// Il2CppName: CopyTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier, UnityEngine::Rendering::RenderTargetIdentifier)>(&CommandBuffer::CopyTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "CopyTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Texture*, UnityEngine::Rendering::RenderTargetIdentifier, UnityEngine::Material*, int)>(&CommandBuffer::Blit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier, UnityEngine::Rendering::RenderTargetIdentifier)>(&CommandBuffer::Blit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier, UnityEngine::Rendering::RenderTargetIdentifier, UnityEngine::Material*, int)>(&CommandBuffer::Blit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetGlobalVector
// Il2CppName: SetGlobalVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(::Il2CppString*, UnityEngine::Vector4)>(&CommandBuffer::SetGlobalVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetGlobalVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetGlobalTexture
// Il2CppName: SetGlobalTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(::Il2CppString*, UnityEngine::Rendering::RenderTargetIdentifier)>(&CommandBuffer::SetGlobalTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetGlobalTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetGlobalTexture
// Il2CppName: SetGlobalTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int, UnityEngine::Rendering::RenderTargetIdentifier, UnityEngine::Rendering::RenderTextureSubElement)>(&CommandBuffer::SetGlobalTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetGlobalTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTextureSubElement>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetShadowSamplingMode
// Il2CppName: SetShadowSamplingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier, UnityEngine::Rendering::ShadowSamplingMode)>(&CommandBuffer::SetShadowSamplingMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetShadowSamplingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ShadowSamplingMode>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Internal_DrawMesh_Injected
// Il2CppName: Internal_DrawMesh_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Mesh*, UnityEngine::Matrix4x4&, UnityEngine::Material*, int, int, UnityEngine::MaterialPropertyBlock*)>(&CommandBuffer::Internal_DrawMesh_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Internal_DrawMesh_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::MaterialPropertyBlock*>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Blit_Texture_Injected
// Il2CppName: Blit_Texture_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Texture*, UnityEngine::Rendering::RenderTargetIdentifier&, UnityEngine::Material*, int, UnityEngine::Vector2&, UnityEngine::Vector2&, int, int)>(&CommandBuffer::Blit_Texture_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Blit_Texture_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Blit_Identifier_Injected
// Il2CppName: Blit_Identifier_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier&, UnityEngine::Rendering::RenderTargetIdentifier&, UnityEngine::Material*, int, UnityEngine::Vector2&, UnityEngine::Vector2&, int, int)>(&CommandBuffer::Blit_Identifier_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Blit_Identifier_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetGlobalVector_Injected
// Il2CppName: SetGlobalVector_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(int, UnityEngine::Vector4&)>(&CommandBuffer::SetGlobalVector_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetGlobalVector_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4&>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetViewProjectionMatrices_Injected
// Il2CppName: SetViewProjectionMatrices_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Matrix4x4&, UnityEngine::Matrix4x4&)>(&CommandBuffer::SetViewProjectionMatrices_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetViewProjectionMatrices_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::SetRenderTargetSingle_Internal_Injected
// Il2CppName: SetRenderTargetSingle_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)(UnityEngine::Rendering::RenderTargetIdentifier&, UnityEngine::Rendering::RenderBufferLoadAction, UnityEngine::Rendering::RenderBufferStoreAction, UnityEngine::Rendering::RenderBufferLoadAction, UnityEngine::Rendering::RenderBufferStoreAction)>(&CommandBuffer::SetRenderTargetSingle_Internal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "SetRenderTargetSingle_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderBufferLoadAction>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderBufferStoreAction>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderBufferLoadAction>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderBufferStoreAction>()});
  }
};
// Writing MetadataGetter for method: CommandBuffer::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)()>(&CommandBuffer::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CommandBuffer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)()>(&CommandBuffer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CommandBuffer::*)()>(&CommandBuffer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuffer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.SplashScreen
#include "UnityEngine/Rendering/SplashScreen.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.SplashScreen.get_isFinished
bool UnityEngine::Rendering::SplashScreen::get_isFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SplashScreen::get_isFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SplashScreen", "get_isFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SplashScreen::get_isFinished
// Il2CppName: get_isFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SplashScreen::get_isFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SplashScreen*), "get_isFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.LODParameters
#include "UnityEngine/Rendering/LODParameters.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.LODParameters.Equals
bool UnityEngine::Rendering::LODParameters::Equals(UnityEngine::Rendering::LODParameters other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LODParameters::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Rendering.LODParameters.Equals
bool UnityEngine::Rendering::LODParameters::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LODParameters::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Rendering.LODParameters.GetHashCode
int UnityEngine::Rendering::LODParameters::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::LODParameters::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: LODParameters::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LODParameters::*)(UnityEngine::Rendering::LODParameters)>(&LODParameters::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LODParameters), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::LODParameters>()});
  }
};
// Writing MetadataGetter for method: LODParameters::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LODParameters::*)(::Il2CppObject*)>(&LODParameters::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LODParameters), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LODParameters::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LODParameters::*)()>(&LODParameters::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LODParameters), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.RenderPipeline
#include "UnityEngine/Rendering/RenderPipeline.hpp"
// Including type: UnityEngine.Rendering.ScriptableRenderContext
#include "UnityEngine/Rendering/ScriptableRenderContext.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.RenderPipeline.Render
void UnityEngine::Rendering::RenderPipeline::Render(UnityEngine::Rendering::ScriptableRenderContext context, ::Array<UnityEngine::Camera*>* cameras) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipeline::Render");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(cameras)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, cameras);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipeline.InternalRender
void UnityEngine::Rendering::RenderPipeline::InternalRender(UnityEngine::Rendering::ScriptableRenderContext context, ::Array<UnityEngine::Camera*>* cameras) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipeline::InternalRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(cameras)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, cameras);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipeline.get_disposed
bool UnityEngine::Rendering::RenderPipeline::get_disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipeline::get_disposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipeline.set_disposed
void UnityEngine::Rendering::RenderPipeline::set_disposed(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipeline::set_disposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipeline.Dispose
void UnityEngine::Rendering::RenderPipeline::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipeline::Dispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipeline.Dispose
void UnityEngine::Rendering::RenderPipeline::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipeline::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Writing MetadataGetter for method: RenderPipeline::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderPipeline::*)(UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*)>(&RenderPipeline::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipeline*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ScriptableRenderContext>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Camera*>*>()});
  }
};
// Writing MetadataGetter for method: RenderPipeline::InternalRender
// Il2CppName: InternalRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderPipeline::*)(UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*)>(&RenderPipeline::InternalRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipeline*), "InternalRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ScriptableRenderContext>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Camera*>*>()});
  }
};
// Writing MetadataGetter for method: RenderPipeline::get_disposed
// Il2CppName: get_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RenderPipeline::*)()>(&RenderPipeline::get_disposed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipeline*), "get_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipeline::set_disposed
// Il2CppName: set_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderPipeline::*)(bool)>(&RenderPipeline::set_disposed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipeline*), "set_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: RenderPipeline::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderPipeline::*)()>(&RenderPipeline::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipeline*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipeline::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderPipeline::*)(bool)>(&RenderPipeline::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipeline*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.RenderPipelineAsset
#include "UnityEngine/Rendering/RenderPipelineAsset.hpp"
// Including type: UnityEngine.Rendering.RenderPipeline
#include "UnityEngine/Rendering/RenderPipeline.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.InternalCreatePipeline
UnityEngine::Rendering::RenderPipeline* UnityEngine::Rendering::RenderPipelineAsset::InternalCreatePipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::InternalCreatePipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCreatePipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::RenderPipeline*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_renderingLayerMaskNames
::Array<::Il2CppString*>* UnityEngine::Rendering::RenderPipelineAsset::get_renderingLayerMaskNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_renderingLayerMaskNames");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderingLayerMaskNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_defaultMaterial
UnityEngine::Material* UnityEngine::Rendering::RenderPipelineAsset::get_defaultMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_defaultMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_autodeskInteractiveShader
UnityEngine::Shader* UnityEngine::Rendering::RenderPipelineAsset::get_autodeskInteractiveShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_autodeskInteractiveShader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autodeskInteractiveShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_autodeskInteractiveTransparentShader
UnityEngine::Shader* UnityEngine::Rendering::RenderPipelineAsset::get_autodeskInteractiveTransparentShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_autodeskInteractiveTransparentShader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autodeskInteractiveTransparentShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_autodeskInteractiveMaskedShader
UnityEngine::Shader* UnityEngine::Rendering::RenderPipelineAsset::get_autodeskInteractiveMaskedShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_autodeskInteractiveMaskedShader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autodeskInteractiveMaskedShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_terrainDetailLitShader
UnityEngine::Shader* UnityEngine::Rendering::RenderPipelineAsset::get_terrainDetailLitShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_terrainDetailLitShader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_terrainDetailLitShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_terrainDetailGrassShader
UnityEngine::Shader* UnityEngine::Rendering::RenderPipelineAsset::get_terrainDetailGrassShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_terrainDetailGrassShader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_terrainDetailGrassShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_terrainDetailGrassBillboardShader
UnityEngine::Shader* UnityEngine::Rendering::RenderPipelineAsset::get_terrainDetailGrassBillboardShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_terrainDetailGrassBillboardShader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_terrainDetailGrassBillboardShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_defaultParticleMaterial
UnityEngine::Material* UnityEngine::Rendering::RenderPipelineAsset::get_defaultParticleMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_defaultParticleMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultParticleMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_defaultLineMaterial
UnityEngine::Material* UnityEngine::Rendering::RenderPipelineAsset::get_defaultLineMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_defaultLineMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultLineMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_defaultTerrainMaterial
UnityEngine::Material* UnityEngine::Rendering::RenderPipelineAsset::get_defaultTerrainMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_defaultTerrainMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultTerrainMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_defaultUIMaterial
UnityEngine::Material* UnityEngine::Rendering::RenderPipelineAsset::get_defaultUIMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_defaultUIMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultUIMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_defaultUIOverdrawMaterial
UnityEngine::Material* UnityEngine::Rendering::RenderPipelineAsset::get_defaultUIOverdrawMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_defaultUIOverdrawMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultUIOverdrawMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_defaultUIETC1SupportedMaterial
UnityEngine::Material* UnityEngine::Rendering::RenderPipelineAsset::get_defaultUIETC1SupportedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_defaultUIETC1SupportedMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultUIETC1SupportedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_default2DMaterial
UnityEngine::Material* UnityEngine::Rendering::RenderPipelineAsset::get_default2DMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_default2DMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_default2DMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_defaultShader
UnityEngine::Shader* UnityEngine::Rendering::RenderPipelineAsset::get_defaultShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_defaultShader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_defaultSpeedTree7Shader
UnityEngine::Shader* UnityEngine::Rendering::RenderPipelineAsset::get_defaultSpeedTree7Shader() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_defaultSpeedTree7Shader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultSpeedTree7Shader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.get_defaultSpeedTree8Shader
UnityEngine::Shader* UnityEngine::Rendering::RenderPipelineAsset::get_defaultSpeedTree8Shader() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::get_defaultSpeedTree8Shader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultSpeedTree8Shader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.CreatePipeline
UnityEngine::Rendering::RenderPipeline* UnityEngine::Rendering::RenderPipelineAsset::CreatePipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::CreatePipeline");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::RenderPipeline*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.OnValidate
void UnityEngine::Rendering::RenderPipelineAsset::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::OnValidate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineAsset.OnDisable
void UnityEngine::Rendering::RenderPipelineAsset::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineAsset::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RenderPipelineAsset::InternalCreatePipeline
// Il2CppName: InternalCreatePipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::RenderPipeline* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::InternalCreatePipeline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "InternalCreatePipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_renderingLayerMaskNames
// Il2CppName: get_renderingLayerMaskNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_renderingLayerMaskNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_renderingLayerMaskNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_defaultMaterial
// Il2CppName: get_defaultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_defaultMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_defaultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_autodeskInteractiveShader
// Il2CppName: get_autodeskInteractiveShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_autodeskInteractiveShader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_autodeskInteractiveShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_autodeskInteractiveTransparentShader
// Il2CppName: get_autodeskInteractiveTransparentShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_autodeskInteractiveTransparentShader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_autodeskInteractiveTransparentShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_autodeskInteractiveMaskedShader
// Il2CppName: get_autodeskInteractiveMaskedShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_autodeskInteractiveMaskedShader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_autodeskInteractiveMaskedShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_terrainDetailLitShader
// Il2CppName: get_terrainDetailLitShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_terrainDetailLitShader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_terrainDetailLitShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_terrainDetailGrassShader
// Il2CppName: get_terrainDetailGrassShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_terrainDetailGrassShader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_terrainDetailGrassShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_terrainDetailGrassBillboardShader
// Il2CppName: get_terrainDetailGrassBillboardShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_terrainDetailGrassBillboardShader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_terrainDetailGrassBillboardShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_defaultParticleMaterial
// Il2CppName: get_defaultParticleMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_defaultParticleMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_defaultParticleMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_defaultLineMaterial
// Il2CppName: get_defaultLineMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_defaultLineMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_defaultLineMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_defaultTerrainMaterial
// Il2CppName: get_defaultTerrainMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_defaultTerrainMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_defaultTerrainMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_defaultUIMaterial
// Il2CppName: get_defaultUIMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_defaultUIMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_defaultUIMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_defaultUIOverdrawMaterial
// Il2CppName: get_defaultUIOverdrawMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_defaultUIOverdrawMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_defaultUIOverdrawMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_defaultUIETC1SupportedMaterial
// Il2CppName: get_defaultUIETC1SupportedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_defaultUIETC1SupportedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_defaultUIETC1SupportedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_default2DMaterial
// Il2CppName: get_default2DMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_default2DMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_default2DMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_defaultShader
// Il2CppName: get_defaultShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_defaultShader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_defaultShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_defaultSpeedTree7Shader
// Il2CppName: get_defaultSpeedTree7Shader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_defaultSpeedTree7Shader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_defaultSpeedTree7Shader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::get_defaultSpeedTree8Shader
// Il2CppName: get_defaultSpeedTree8Shader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::get_defaultSpeedTree8Shader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "get_defaultSpeedTree8Shader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::CreatePipeline
// Il2CppName: CreatePipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::RenderPipeline* (RenderPipelineAsset::*)()>(&RenderPipelineAsset::CreatePipeline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "CreatePipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderPipelineAsset::*)()>(&RenderPipelineAsset::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderPipelineAsset::*)()>(&RenderPipelineAsset::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderPipelineAsset::*)()>(&RenderPipelineAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderPipelineAsset::*)()>(&RenderPipelineAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.RenderPipelineManager
#include "UnityEngine/Rendering/RenderPipelineManager.hpp"
// Including type: UnityEngine.Rendering.RenderPipelineAsset
#include "UnityEngine/Rendering/RenderPipelineAsset.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Rendering.RenderPipeline
#include "UnityEngine/Rendering/RenderPipeline.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static UnityEngine.Rendering.RenderPipelineAsset s_CurrentPipelineAsset
UnityEngine::Rendering::RenderPipelineAsset* UnityEngine::Rendering::RenderPipelineManager::_get_s_CurrentPipelineAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_get_s_CurrentPipelineAsset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderPipelineAsset*>("UnityEngine.Rendering", "RenderPipelineManager", "s_CurrentPipelineAsset"));
}
// Autogenerated static field setter
// Set static field: static UnityEngine.Rendering.RenderPipelineAsset s_CurrentPipelineAsset
void UnityEngine::Rendering::RenderPipelineManager::_set_s_CurrentPipelineAsset(UnityEngine::Rendering::RenderPipelineAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_set_s_CurrentPipelineAsset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderPipelineManager", "s_CurrentPipelineAsset", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Camera[] s_Cameras
::Array<UnityEngine::Camera*>* UnityEngine::Rendering::RenderPipelineManager::_get_s_Cameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_get_s_Cameras");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Camera*>*>("UnityEngine.Rendering", "RenderPipelineManager", "s_Cameras"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Camera[] s_Cameras
void UnityEngine::Rendering::RenderPipelineManager::_set_s_Cameras(::Array<UnityEngine::Camera*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_set_s_Cameras");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderPipelineManager", "s_Cameras", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 s_CameraCapacity
int UnityEngine::Rendering::RenderPipelineManager::_get_s_CameraCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_get_s_CameraCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Rendering", "RenderPipelineManager", "s_CameraCapacity"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 s_CameraCapacity
void UnityEngine::Rendering::RenderPipelineManager::_set_s_CameraCapacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_set_s_CameraCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderPipelineManager", "s_CameraCapacity", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xD94B64
// [CompilerGeneratedAttribute] Offset: 0xD94B64
// Autogenerated static field getter
// Get static field: static private UnityEngine.Rendering.RenderPipeline <currentPipeline>k__BackingField
UnityEngine::Rendering::RenderPipeline* UnityEngine::Rendering::RenderPipelineManager::_get_$currentPipeline$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_get_$currentPipeline$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<UnityEngine::Rendering::RenderPipeline*>("UnityEngine.Rendering", "RenderPipelineManager", "<currentPipeline>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Rendering.RenderPipeline <currentPipeline>k__BackingField
void UnityEngine::Rendering::RenderPipelineManager::_set_$currentPipeline$k__BackingField(UnityEngine::Rendering::RenderPipeline* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_set_$currentPipeline$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderPipelineManager", "<currentPipeline>k__BackingField", value));
}
// [DebuggerBrowsableAttribute] Offset: 0xD94BA0
// [CompilerGeneratedAttribute] Offset: 0xD94BA0
// Autogenerated static field getter
// Get static field: static private System.Action`2<UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera[]> beginFrameRendering
System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*>* UnityEngine::Rendering::RenderPipelineManager::_get_beginFrameRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_get_beginFrameRendering");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*>*>("UnityEngine.Rendering", "RenderPipelineManager", "beginFrameRendering")));
}
// Autogenerated static field setter
// Set static field: static private System.Action`2<UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera[]> beginFrameRendering
void UnityEngine::Rendering::RenderPipelineManager::_set_beginFrameRendering(System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_set_beginFrameRendering");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderPipelineManager", "beginFrameRendering", value));
}
// [CompilerGeneratedAttribute] Offset: 0xD94BDC
// [DebuggerBrowsableAttribute] Offset: 0xD94BDC
// Autogenerated static field getter
// Get static field: static private System.Action`2<UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera> beginCameraRendering
System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, UnityEngine::Camera*>* UnityEngine::Rendering::RenderPipelineManager::_get_beginCameraRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_get_beginCameraRendering");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, UnityEngine::Camera*>*>("UnityEngine.Rendering", "RenderPipelineManager", "beginCameraRendering")));
}
// Autogenerated static field setter
// Set static field: static private System.Action`2<UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera> beginCameraRendering
void UnityEngine::Rendering::RenderPipelineManager::_set_beginCameraRendering(System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, UnityEngine::Camera*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::_set_beginCameraRendering");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "RenderPipelineManager", "beginCameraRendering", value));
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager.get_currentPipeline
UnityEngine::Rendering::RenderPipeline* UnityEngine::Rendering::RenderPipelineManager::get_currentPipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::get_currentPipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", "get_currentPipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::RenderPipeline*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager.set_currentPipeline
void UnityEngine::Rendering::RenderPipelineManager::set_currentPipeline(UnityEngine::Rendering::RenderPipeline* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::set_currentPipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", "set_currentPipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager.add_beginFrameRendering
void UnityEngine::Rendering::RenderPipelineManager::add_beginFrameRendering(System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::add_beginFrameRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", "add_beginFrameRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager.remove_beginFrameRendering
void UnityEngine::Rendering::RenderPipelineManager::remove_beginFrameRendering(System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::remove_beginFrameRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", "remove_beginFrameRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager.add_beginCameraRendering
void UnityEngine::Rendering::RenderPipelineManager::add_beginCameraRendering(System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, UnityEngine::Camera*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::add_beginCameraRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", "add_beginCameraRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager.remove_beginCameraRendering
void UnityEngine::Rendering::RenderPipelineManager::remove_beginCameraRendering(System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, UnityEngine::Camera*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::remove_beginCameraRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", "remove_beginCameraRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager.CleanupRenderPipeline
void UnityEngine::Rendering::RenderPipelineManager::CleanupRenderPipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::CleanupRenderPipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", "CleanupRenderPipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager.GetCameras
void UnityEngine::Rendering::RenderPipelineManager::GetCameras(UnityEngine::Rendering::ScriptableRenderContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::GetCameras");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", "GetCameras", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, context);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager.DoRenderLoop_Internal
void UnityEngine::Rendering::RenderPipelineManager::DoRenderLoop_Internal(UnityEngine::Rendering::RenderPipelineAsset* pipe, System::IntPtr loopPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::DoRenderLoop_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", "DoRenderLoop_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pipe), ::il2cpp_utils::ExtractType(loopPtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pipe, loopPtr);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager.PrepareRenderPipeline
void UnityEngine::Rendering::RenderPipelineManager::PrepareRenderPipeline(UnityEngine::Rendering::RenderPipelineAsset* pipelineAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::PrepareRenderPipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", "PrepareRenderPipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pipelineAsset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pipelineAsset);
}
// Autogenerated method: UnityEngine.Rendering.RenderPipelineManager..cctor
void UnityEngine::Rendering::RenderPipelineManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderPipelineManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "RenderPipelineManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: RenderPipelineManager::get_currentPipeline
// Il2CppName: get_currentPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::RenderPipeline* (*)()>(&RenderPipelineManager::get_currentPipeline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), "get_currentPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineManager::set_currentPipeline
// Il2CppName: set_currentPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Rendering::RenderPipeline*)>(&RenderPipelineManager::set_currentPipeline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), "set_currentPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderPipeline*>()});
  }
};
// Writing MetadataGetter for method: RenderPipelineManager::add_beginFrameRendering
// Il2CppName: add_beginFrameRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*>*)>(&RenderPipelineManager::add_beginFrameRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), "add_beginFrameRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*>*>()});
  }
};
// Writing MetadataGetter for method: RenderPipelineManager::remove_beginFrameRendering
// Il2CppName: remove_beginFrameRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*>*)>(&RenderPipelineManager::remove_beginFrameRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), "remove_beginFrameRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*>*>()});
  }
};
// Writing MetadataGetter for method: RenderPipelineManager::add_beginCameraRendering
// Il2CppName: add_beginCameraRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, UnityEngine::Camera*>*)>(&RenderPipelineManager::add_beginCameraRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), "add_beginCameraRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, UnityEngine::Camera*>*>()});
  }
};
// Writing MetadataGetter for method: RenderPipelineManager::remove_beginCameraRendering
// Il2CppName: remove_beginCameraRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, UnityEngine::Camera*>*)>(&RenderPipelineManager::remove_beginCameraRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), "remove_beginCameraRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<UnityEngine::Rendering::ScriptableRenderContext, UnityEngine::Camera*>*>()});
  }
};
// Writing MetadataGetter for method: RenderPipelineManager::CleanupRenderPipeline
// Il2CppName: CleanupRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&RenderPipelineManager::CleanupRenderPipeline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), "CleanupRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderPipelineManager::GetCameras
// Il2CppName: GetCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Rendering::ScriptableRenderContext)>(&RenderPipelineManager::GetCameras)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), "GetCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ScriptableRenderContext>()});
  }
};
// Writing MetadataGetter for method: RenderPipelineManager::DoRenderLoop_Internal
// Il2CppName: DoRenderLoop_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Rendering::RenderPipelineAsset*, System::IntPtr)>(&RenderPipelineManager::DoRenderLoop_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), "DoRenderLoop_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderPipelineAsset*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: RenderPipelineManager::PrepareRenderPipeline
// Il2CppName: PrepareRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Rendering::RenderPipelineAsset*)>(&RenderPipelineManager::PrepareRenderPipeline)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), "PrepareRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderPipelineAsset*>()});
  }
};
// Writing MetadataGetter for method: RenderPipelineManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&RenderPipelineManager::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderPipelineManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.ScriptableRenderContext
#include "UnityEngine/Rendering/ScriptableRenderContext.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.ScriptableRenderContext.GetNumberOfCameras_Internal
int UnityEngine::Rendering::ScriptableRenderContext::GetNumberOfCameras_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ScriptableRenderContext::GetNumberOfCameras_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetNumberOfCameras_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.ScriptableRenderContext.GetCamera_Internal
UnityEngine::Camera* UnityEngine::Rendering::ScriptableRenderContext::GetCamera_Internal(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ScriptableRenderContext::GetCamera_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetCamera_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Camera*, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Rendering.ScriptableRenderContext.GetNumberOfCameras
int UnityEngine::Rendering::ScriptableRenderContext::GetNumberOfCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ScriptableRenderContext::GetNumberOfCameras");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetNumberOfCameras", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.ScriptableRenderContext.GetCamera
UnityEngine::Camera* UnityEngine::Rendering::ScriptableRenderContext::GetCamera(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ScriptableRenderContext::GetCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Camera*, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Rendering.ScriptableRenderContext.Equals
bool UnityEngine::Rendering::ScriptableRenderContext::Equals(UnityEngine::Rendering::ScriptableRenderContext other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ScriptableRenderContext::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Rendering.ScriptableRenderContext.GetNumberOfCameras_Internal_Injected
int UnityEngine::Rendering::ScriptableRenderContext::GetNumberOfCameras_Internal_Injected(UnityEngine::Rendering::ScriptableRenderContext& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ScriptableRenderContext::GetNumberOfCameras_Internal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "ScriptableRenderContext", "GetNumberOfCameras_Internal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Rendering.ScriptableRenderContext.GetCamera_Internal_Injected
UnityEngine::Camera* UnityEngine::Rendering::ScriptableRenderContext::GetCamera_Internal_Injected(UnityEngine::Rendering::ScriptableRenderContext& _unity_self, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ScriptableRenderContext::GetCamera_Internal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "ScriptableRenderContext", "GetCamera_Internal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Camera*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, index);
}
// Autogenerated method: UnityEngine.Rendering.ScriptableRenderContext.Equals
bool UnityEngine::Rendering::ScriptableRenderContext::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ScriptableRenderContext::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Rendering.ScriptableRenderContext.GetHashCode
int UnityEngine::Rendering::ScriptableRenderContext::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ScriptableRenderContext::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: ScriptableRenderContext::GetNumberOfCameras_Internal
// Il2CppName: GetNumberOfCameras_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScriptableRenderContext::*)()>(&ScriptableRenderContext::GetNumberOfCameras_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), "GetNumberOfCameras_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableRenderContext::GetCamera_Internal
// Il2CppName: GetCamera_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Camera* (ScriptableRenderContext::*)(int)>(&ScriptableRenderContext::GetCamera_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), "GetCamera_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ScriptableRenderContext::ScriptableRenderContext
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableRenderContext::*)(System::IntPtr)>(&ScriptableRenderContext::ScriptableRenderContext<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableRenderContext::*)(System::IntPtr)>(&ScriptableRenderContext::ScriptableRenderContext<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ScriptableRenderContext::GetNumberOfCameras
// Il2CppName: GetNumberOfCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScriptableRenderContext::*)()>(&ScriptableRenderContext::GetNumberOfCameras)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), "GetNumberOfCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptableRenderContext::GetCamera
// Il2CppName: GetCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Camera* (ScriptableRenderContext::*)(int)>(&ScriptableRenderContext::GetCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), "GetCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ScriptableRenderContext::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ScriptableRenderContext::*)(UnityEngine::Rendering::ScriptableRenderContext)>(&ScriptableRenderContext::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ScriptableRenderContext>()});
  }
};
// Writing MetadataGetter for method: ScriptableRenderContext::GetNumberOfCameras_Internal_Injected
// Il2CppName: GetNumberOfCameras_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::Rendering::ScriptableRenderContext&)>(&ScriptableRenderContext::GetNumberOfCameras_Internal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), "GetNumberOfCameras_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ScriptableRenderContext&>()});
  }
};
// Writing MetadataGetter for method: ScriptableRenderContext::GetCamera_Internal_Injected
// Il2CppName: GetCamera_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Camera* (*)(UnityEngine::Rendering::ScriptableRenderContext&, int)>(&ScriptableRenderContext::GetCamera_Internal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), "GetCamera_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ScriptableRenderContext&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ScriptableRenderContext::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ScriptableRenderContext::*)(::Il2CppObject*)>(&ScriptableRenderContext::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ScriptableRenderContext::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScriptableRenderContext::*)()>(&ScriptableRenderContext::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableRenderContext), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.ShaderTagId
#include "UnityEngine/Rendering/ShaderTagId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.Rendering.ShaderTagId none
UnityEngine::Rendering::ShaderTagId UnityEngine::Rendering::ShaderTagId::_get_none() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderTagId::_get_none");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderTagId>("UnityEngine.Rendering", "ShaderTagId", "none"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.Rendering.ShaderTagId none
void UnityEngine::Rendering::ShaderTagId::_set_none(UnityEngine::Rendering::ShaderTagId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderTagId::_set_none");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderTagId", "none", value));
}
// Autogenerated method: UnityEngine.Rendering.ShaderTagId.get_id
int UnityEngine::Rendering::ShaderTagId::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderTagId::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.ShaderTagId.set_id
void UnityEngine::Rendering::ShaderTagId::set_id(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderTagId::set_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Rendering.ShaderTagId.Equals
bool UnityEngine::Rendering::ShaderTagId::Equals(UnityEngine::Rendering::ShaderTagId other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderTagId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Rendering.ShaderTagId..cctor
void UnityEngine::Rendering::ShaderTagId::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderTagId::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "ShaderTagId", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.ShaderTagId.Equals
bool UnityEngine::Rendering::ShaderTagId::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderTagId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Rendering.ShaderTagId.GetHashCode
int UnityEngine::Rendering::ShaderTagId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderTagId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: ShaderTagId::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ShaderTagId::*)()>(&ShaderTagId::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderTagId), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderTagId::set_id
// Il2CppName: set_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShaderTagId::*)(int)>(&ShaderTagId::set_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderTagId), "set_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ShaderTagId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ShaderTagId::*)(UnityEngine::Rendering::ShaderTagId)>(&ShaderTagId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderTagId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ShaderTagId>()});
  }
};
// Writing MetadataGetter for method: ShaderTagId::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ShaderTagId::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderTagId), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderTagId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ShaderTagId::*)(::Il2CppObject*)>(&ShaderTagId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderTagId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ShaderTagId::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ShaderTagId::*)()>(&ShaderTagId::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderTagId), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.SupportedRenderingFeatures
#include "UnityEngine/Rendering/SupportedRenderingFeatures.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.MixedLightingMode
#include "UnityEngine/MixedLightingMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Rendering.SupportedRenderingFeatures s_Active
UnityEngine::Rendering::SupportedRenderingFeatures* UnityEngine::Rendering::SupportedRenderingFeatures::_get_s_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::_get_s_Active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::SupportedRenderingFeatures*>("UnityEngine.Rendering", "SupportedRenderingFeatures", "s_Active"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Rendering.SupportedRenderingFeatures s_Active
void UnityEngine::Rendering::SupportedRenderingFeatures::_set_s_Active(UnityEngine::Rendering::SupportedRenderingFeatures* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::_set_s_Active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "SupportedRenderingFeatures", "s_Active", value));
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.get_active
UnityEngine::Rendering::SupportedRenderingFeatures* UnityEngine::Rendering::SupportedRenderingFeatures::get_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::get_active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", "get_active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::SupportedRenderingFeatures*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.set_active
void UnityEngine::Rendering::SupportedRenderingFeatures::set_active(UnityEngine::Rendering::SupportedRenderingFeatures* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::set_active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", "set_active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.get_defaultMixedLightingModes
UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes UnityEngine::Rendering::SupportedRenderingFeatures::get_defaultMixedLightingModes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::get_defaultMixedLightingModes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultMixedLightingModes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.get_mixedLightingModes
UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes UnityEngine::Rendering::SupportedRenderingFeatures::get_mixedLightingModes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::get_mixedLightingModes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixedLightingModes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.get_lightmapBakeTypes
UnityEngine::LightmapBakeType UnityEngine::Rendering::SupportedRenderingFeatures::get_lightmapBakeTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::get_lightmapBakeTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightmapBakeTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LightmapBakeType, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.get_lightmapsModes
UnityEngine::LightmapsMode UnityEngine::Rendering::SupportedRenderingFeatures::get_lightmapsModes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::get_lightmapsModes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightmapsModes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::LightmapsMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.get_enlighten
bool UnityEngine::Rendering::SupportedRenderingFeatures::get_enlighten() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::get_enlighten");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enlighten", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.FallbackMixedLightingModeByRef
void UnityEngine::Rendering::SupportedRenderingFeatures::FallbackMixedLightingModeByRef(System::IntPtr fallbackModePtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::FallbackMixedLightingModeByRef");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", "FallbackMixedLightingModeByRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fallbackModePtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fallbackModePtr);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.IsMixedLightingModeSupported
bool UnityEngine::Rendering::SupportedRenderingFeatures::IsMixedLightingModeSupported(UnityEngine::MixedLightingMode mixedMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::IsMixedLightingModeSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", "IsMixedLightingModeSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mixedMode)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mixedMode);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.IsMixedLightingModeSupportedByRef
void UnityEngine::Rendering::SupportedRenderingFeatures::IsMixedLightingModeSupportedByRef(UnityEngine::MixedLightingMode mixedMode, System::IntPtr isSupportedPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::IsMixedLightingModeSupportedByRef");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", "IsMixedLightingModeSupportedByRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mixedMode), ::il2cpp_utils::ExtractType(isSupportedPtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mixedMode, isSupportedPtr);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.IsLightmapBakeTypeSupported
bool UnityEngine::Rendering::SupportedRenderingFeatures::IsLightmapBakeTypeSupported(UnityEngine::LightmapBakeType bakeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::IsLightmapBakeTypeSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", "IsLightmapBakeTypeSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bakeType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bakeType);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.IsLightmapBakeTypeSupportedByRef
void UnityEngine::Rendering::SupportedRenderingFeatures::IsLightmapBakeTypeSupportedByRef(UnityEngine::LightmapBakeType bakeType, System::IntPtr isSupportedPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::IsLightmapBakeTypeSupportedByRef");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", "IsLightmapBakeTypeSupportedByRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bakeType), ::il2cpp_utils::ExtractType(isSupportedPtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bakeType, isSupportedPtr);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.IsLightmapsModeSupportedByRef
void UnityEngine::Rendering::SupportedRenderingFeatures::IsLightmapsModeSupportedByRef(UnityEngine::LightmapsMode mode, System::IntPtr isSupportedPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::IsLightmapsModeSupportedByRef");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", "IsLightmapsModeSupportedByRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(isSupportedPtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mode, isSupportedPtr);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.IsLightmapperSupportedByRef
void UnityEngine::Rendering::SupportedRenderingFeatures::IsLightmapperSupportedByRef(int lightmapper, System::IntPtr isSupportedPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::IsLightmapperSupportedByRef");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", "IsLightmapperSupportedByRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightmapper), ::il2cpp_utils::ExtractType(isSupportedPtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lightmapper, isSupportedPtr);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures.FallbackLightmapperByRef
void UnityEngine::Rendering::SupportedRenderingFeatures::FallbackLightmapperByRef(System::IntPtr lightmapperPtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::FallbackLightmapperByRef");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", "FallbackLightmapperByRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightmapperPtr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lightmapperPtr);
}
// Autogenerated method: UnityEngine.Rendering.SupportedRenderingFeatures..cctor
void UnityEngine::Rendering::SupportedRenderingFeatures::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "SupportedRenderingFeatures", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SupportedRenderingFeatures::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::SupportedRenderingFeatures* (*)()>(&SupportedRenderingFeatures::get_active)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::set_active
// Il2CppName: set_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Rendering::SupportedRenderingFeatures*)>(&SupportedRenderingFeatures::set_active)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "set_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::SupportedRenderingFeatures*>()});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::get_defaultMixedLightingModes
// Il2CppName: get_defaultMixedLightingModes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes (SupportedRenderingFeatures::*)()>(&SupportedRenderingFeatures::get_defaultMixedLightingModes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "get_defaultMixedLightingModes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::get_mixedLightingModes
// Il2CppName: get_mixedLightingModes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes (SupportedRenderingFeatures::*)()>(&SupportedRenderingFeatures::get_mixedLightingModes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "get_mixedLightingModes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::get_lightmapBakeTypes
// Il2CppName: get_lightmapBakeTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LightmapBakeType (SupportedRenderingFeatures::*)()>(&SupportedRenderingFeatures::get_lightmapBakeTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "get_lightmapBakeTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::get_lightmapsModes
// Il2CppName: get_lightmapsModes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LightmapsMode (SupportedRenderingFeatures::*)()>(&SupportedRenderingFeatures::get_lightmapsModes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "get_lightmapsModes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::get_enlighten
// Il2CppName: get_enlighten
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SupportedRenderingFeatures::*)()>(&SupportedRenderingFeatures::get_enlighten)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "get_enlighten", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::FallbackMixedLightingModeByRef
// Il2CppName: FallbackMixedLightingModeByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&SupportedRenderingFeatures::FallbackMixedLightingModeByRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "FallbackMixedLightingModeByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::IsMixedLightingModeSupported
// Il2CppName: IsMixedLightingModeSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::MixedLightingMode)>(&SupportedRenderingFeatures::IsMixedLightingModeSupported)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "IsMixedLightingModeSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MixedLightingMode>()});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::IsMixedLightingModeSupportedByRef
// Il2CppName: IsMixedLightingModeSupportedByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::MixedLightingMode, System::IntPtr)>(&SupportedRenderingFeatures::IsMixedLightingModeSupportedByRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "IsMixedLightingModeSupportedByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MixedLightingMode>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::IsLightmapBakeTypeSupported
// Il2CppName: IsLightmapBakeTypeSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::LightmapBakeType)>(&SupportedRenderingFeatures::IsLightmapBakeTypeSupported)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "IsLightmapBakeTypeSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LightmapBakeType>()});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::IsLightmapBakeTypeSupportedByRef
// Il2CppName: IsLightmapBakeTypeSupportedByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::LightmapBakeType, System::IntPtr)>(&SupportedRenderingFeatures::IsLightmapBakeTypeSupportedByRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "IsLightmapBakeTypeSupportedByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LightmapBakeType>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::IsLightmapsModeSupportedByRef
// Il2CppName: IsLightmapsModeSupportedByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::LightmapsMode, System::IntPtr)>(&SupportedRenderingFeatures::IsLightmapsModeSupportedByRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "IsLightmapsModeSupportedByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LightmapsMode>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::IsLightmapperSupportedByRef
// Il2CppName: IsLightmapperSupportedByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, System::IntPtr)>(&SupportedRenderingFeatures::IsLightmapperSupportedByRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "IsLightmapperSupportedByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::FallbackLightmapperByRef
// Il2CppName: FallbackLightmapperByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&SupportedRenderingFeatures::FallbackLightmapperByRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), "FallbackLightmapperByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SupportedRenderingFeatures::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SupportedRenderingFeatures::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SupportedRenderingFeatures::*)()>(&SupportedRenderingFeatures::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SupportedRenderingFeatures::*)()>(&SupportedRenderingFeatures::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SupportedRenderingFeatures*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.SupportedRenderingFeatures/ReflectionProbeModes
#include "UnityEngine/Rendering/SupportedRenderingFeatures.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/ReflectionProbeModes None
UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes>("UnityEngine.Rendering", "SupportedRenderingFeatures/ReflectionProbeModes", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/ReflectionProbeModes None
void UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes::_set_None(UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "SupportedRenderingFeatures/ReflectionProbeModes", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/ReflectionProbeModes Rotation
UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes::_get_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes::_get_Rotation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes>("UnityEngine.Rendering", "SupportedRenderingFeatures/ReflectionProbeModes", "Rotation"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/ReflectionProbeModes Rotation
void UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes::_set_Rotation(UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::ReflectionProbeModes::_set_Rotation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "SupportedRenderingFeatures/ReflectionProbeModes", "Rotation", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes
#include "UnityEngine/Rendering/SupportedRenderingFeatures.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes None
UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes>("UnityEngine.Rendering", "SupportedRenderingFeatures/LightmapMixedBakeModes", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes None
void UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_set_None(UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "SupportedRenderingFeatures/LightmapMixedBakeModes", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes IndirectOnly
UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_get_IndirectOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_get_IndirectOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes>("UnityEngine.Rendering", "SupportedRenderingFeatures/LightmapMixedBakeModes", "IndirectOnly"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes IndirectOnly
void UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_set_IndirectOnly(UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_set_IndirectOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "SupportedRenderingFeatures/LightmapMixedBakeModes", "IndirectOnly", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes Subtractive
UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_get_Subtractive() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_get_Subtractive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes>("UnityEngine.Rendering", "SupportedRenderingFeatures/LightmapMixedBakeModes", "Subtractive"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes Subtractive
void UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_set_Subtractive(UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_set_Subtractive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "SupportedRenderingFeatures/LightmapMixedBakeModes", "Subtractive", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes Shadowmask
UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_get_Shadowmask() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_get_Shadowmask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes>("UnityEngine.Rendering", "SupportedRenderingFeatures/LightmapMixedBakeModes", "Shadowmask"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes Shadowmask
void UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_set_Shadowmask(UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::SupportedRenderingFeatures::LightmapMixedBakeModes::_set_Shadowmask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "SupportedRenderingFeatures/LightmapMixedBakeModes", "Shadowmask", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.BatchCullingContext
#include "UnityEngine/Rendering/BatchCullingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BatchCullingContext::BatchCullingContext
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BatchCullingContext::*)(Unity::Collections::NativeArray_1<UnityEngine::Plane>, Unity::Collections::NativeArray_1<UnityEngine::Rendering::BatchVisibility>, Unity::Collections::NativeArray_1<int>, UnityEngine::Rendering::LODParameters)>(&BatchCullingContext::BatchCullingContext<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BatchCullingContext), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<UnityEngine::Plane>>(), ::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<UnityEngine::Rendering::BatchVisibility>>(), ::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<int>>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::LODParameters>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BatchCullingContext::*)(Unity::Collections::NativeArray_1<UnityEngine::Plane>, Unity::Collections::NativeArray_1<UnityEngine::Rendering::BatchVisibility>, Unity::Collections::NativeArray_1<int>, UnityEngine::Rendering::LODParameters)>(&BatchCullingContext::BatchCullingContext<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BatchCullingContext), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<UnityEngine::Plane>>(), ::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<UnityEngine::Rendering::BatchVisibility>>(), ::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<int>>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::LODParameters>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.BatchRendererGroup
#include "UnityEngine/Rendering/BatchRendererGroup.hpp"
// Including type: UnityEngine.Rendering.BatchRendererGroup/OnPerformCulling
#include "UnityEngine/Rendering/BatchRendererGroup_OnPerformCulling.hpp"
// Including type: UnityEngine.Rendering.BatchRendererCullingOutput
#include "UnityEngine/Rendering/BatchRendererCullingOutput.hpp"
// Including type: UnityEngine.Rendering.LODParameters
#include "UnityEngine/Rendering/LODParameters.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.BatchRendererGroup.InvokeOnPerformCulling
void UnityEngine::Rendering::BatchRendererGroup::InvokeOnPerformCulling(UnityEngine::Rendering::BatchRendererGroup* group, UnityEngine::Rendering::BatchRendererCullingOutput& context, UnityEngine::Rendering::LODParameters& lodParameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BatchRendererGroup::InvokeOnPerformCulling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "BatchRendererGroup", "InvokeOnPerformCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(group), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(lodParameters)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, group, context, lodParameters);
}
// Writing MetadataGetter for method: BatchRendererGroup::InvokeOnPerformCulling
// Il2CppName: InvokeOnPerformCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Rendering::BatchRendererGroup*, UnityEngine::Rendering::BatchRendererCullingOutput&, UnityEngine::Rendering::LODParameters&)>(&BatchRendererGroup::InvokeOnPerformCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BatchRendererGroup*), "InvokeOnPerformCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BatchRendererGroup*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BatchRendererCullingOutput&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::LODParameters&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Rendering.BatchRendererGroup/OnPerformCulling
#include "UnityEngine/Rendering/BatchRendererGroup_OnPerformCulling.hpp"
// Including type: Unity.Jobs.JobHandle
#include "Unity/Jobs/JobHandle.hpp"
// Including type: UnityEngine.Rendering.BatchCullingContext
#include "UnityEngine/Rendering/BatchCullingContext.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Rendering.BatchRendererGroup/OnPerformCulling.Invoke
Unity::Jobs::JobHandle UnityEngine::Rendering::BatchRendererGroup::OnPerformCulling::Invoke(UnityEngine::Rendering::BatchRendererGroup* rendererGroup, UnityEngine::Rendering::BatchCullingContext cullingContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BatchRendererGroup::OnPerformCulling::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rendererGroup), ::il2cpp_utils::ExtractType(cullingContext)})));
  return ::il2cpp_utils::RunMethodThrow<Unity::Jobs::JobHandle, false>(this, ___internal__method, rendererGroup, cullingContext);
}
// Autogenerated method: UnityEngine.Rendering.BatchRendererGroup/OnPerformCulling.BeginInvoke
System::IAsyncResult* UnityEngine::Rendering::BatchRendererGroup::OnPerformCulling::BeginInvoke(UnityEngine::Rendering::BatchRendererGroup* rendererGroup, UnityEngine::Rendering::BatchCullingContext cullingContext, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BatchRendererGroup::OnPerformCulling::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rendererGroup), ::il2cpp_utils::ExtractType(cullingContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, rendererGroup, cullingContext, callback, object);
}
// Autogenerated method: UnityEngine.Rendering.BatchRendererGroup/OnPerformCulling.EndInvoke
Unity::Jobs::JobHandle UnityEngine::Rendering::BatchRendererGroup::OnPerformCulling::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::BatchRendererGroup::OnPerformCulling::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<Unity::Jobs::JobHandle, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BatchRendererGroup::OnPerformCulling::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BatchRendererGroup::OnPerformCulling::*)(::Il2CppObject*, System::IntPtr)>(&BatchRendererGroup::OnPerformCulling::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BatchRendererGroup::OnPerformCulling*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BatchRendererGroup::OnPerformCulling::*)(::Il2CppObject*, System::IntPtr)>(&BatchRendererGroup::OnPerformCulling::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BatchRendererGroup::OnPerformCulling*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BatchRendererGroup::OnPerformCulling::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Unity::Jobs::JobHandle (BatchRendererGroup::OnPerformCulling::*)(UnityEngine::Rendering::BatchRendererGroup*, UnityEngine::Rendering::BatchCullingContext)>(&BatchRendererGroup::OnPerformCulling::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BatchRendererGroup::OnPerformCulling*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BatchRendererGroup*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BatchCullingContext>()});
  }
};
// Writing MetadataGetter for method: BatchRendererGroup::OnPerformCulling::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BatchRendererGroup::OnPerformCulling::*)(UnityEngine::Rendering::BatchRendererGroup*, UnityEngine::Rendering::BatchCullingContext, System::AsyncCallback*, ::Il2CppObject*)>(&BatchRendererGroup::OnPerformCulling::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BatchRendererGroup::OnPerformCulling*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BatchRendererGroup*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BatchCullingContext>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BatchRendererGroup::OnPerformCulling::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Unity::Jobs::JobHandle (BatchRendererGroup::OnPerformCulling::*)(System::IAsyncResult*)>(&BatchRendererGroup::OnPerformCulling::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BatchRendererGroup::OnPerformCulling*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.ShaderPropertyType
#include "UnityEngine/Rendering/ShaderPropertyType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyType Color
UnityEngine::Rendering::ShaderPropertyType UnityEngine::Rendering::ShaderPropertyType::_get_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyType::_get_Color");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyType>("UnityEngine.Rendering", "ShaderPropertyType", "Color"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyType Color
void UnityEngine::Rendering::ShaderPropertyType::_set_Color(UnityEngine::Rendering::ShaderPropertyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyType::_set_Color");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyType", "Color", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyType Vector
UnityEngine::Rendering::ShaderPropertyType UnityEngine::Rendering::ShaderPropertyType::_get_Vector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyType::_get_Vector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyType>("UnityEngine.Rendering", "ShaderPropertyType", "Vector"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyType Vector
void UnityEngine::Rendering::ShaderPropertyType::_set_Vector(UnityEngine::Rendering::ShaderPropertyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyType::_set_Vector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyType", "Vector", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyType Float
UnityEngine::Rendering::ShaderPropertyType UnityEngine::Rendering::ShaderPropertyType::_get_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyType::_get_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyType>("UnityEngine.Rendering", "ShaderPropertyType", "Float"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyType Float
void UnityEngine::Rendering::ShaderPropertyType::_set_Float(UnityEngine::Rendering::ShaderPropertyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyType::_set_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyType", "Float", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyType Range
UnityEngine::Rendering::ShaderPropertyType UnityEngine::Rendering::ShaderPropertyType::_get_Range() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyType::_get_Range");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyType>("UnityEngine.Rendering", "ShaderPropertyType", "Range"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyType Range
void UnityEngine::Rendering::ShaderPropertyType::_set_Range(UnityEngine::Rendering::ShaderPropertyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyType::_set_Range");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyType", "Range", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyType Texture
UnityEngine::Rendering::ShaderPropertyType UnityEngine::Rendering::ShaderPropertyType::_get_Texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyType::_get_Texture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyType>("UnityEngine.Rendering", "ShaderPropertyType", "Texture"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyType Texture
void UnityEngine::Rendering::ShaderPropertyType::_set_Texture(UnityEngine::Rendering::ShaderPropertyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyType::_set_Texture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyType", "Texture", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Rendering.ShaderPropertyFlags
#include "UnityEngine/Rendering/ShaderPropertyFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyFlags None
UnityEngine::Rendering::ShaderPropertyFlags UnityEngine::Rendering::ShaderPropertyFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyFlags>("UnityEngine.Rendering", "ShaderPropertyFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyFlags None
void UnityEngine::Rendering::ShaderPropertyFlags::_set_None(UnityEngine::Rendering::ShaderPropertyFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyFlags HideInInspector
UnityEngine::Rendering::ShaderPropertyFlags UnityEngine::Rendering::ShaderPropertyFlags::_get_HideInInspector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_get_HideInInspector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyFlags>("UnityEngine.Rendering", "ShaderPropertyFlags", "HideInInspector"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyFlags HideInInspector
void UnityEngine::Rendering::ShaderPropertyFlags::_set_HideInInspector(UnityEngine::Rendering::ShaderPropertyFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_set_HideInInspector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyFlags", "HideInInspector", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyFlags PerRendererData
UnityEngine::Rendering::ShaderPropertyFlags UnityEngine::Rendering::ShaderPropertyFlags::_get_PerRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_get_PerRendererData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyFlags>("UnityEngine.Rendering", "ShaderPropertyFlags", "PerRendererData"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyFlags PerRendererData
void UnityEngine::Rendering::ShaderPropertyFlags::_set_PerRendererData(UnityEngine::Rendering::ShaderPropertyFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_set_PerRendererData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyFlags", "PerRendererData", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyFlags NoScaleOffset
UnityEngine::Rendering::ShaderPropertyFlags UnityEngine::Rendering::ShaderPropertyFlags::_get_NoScaleOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_get_NoScaleOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyFlags>("UnityEngine.Rendering", "ShaderPropertyFlags", "NoScaleOffset"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyFlags NoScaleOffset
void UnityEngine::Rendering::ShaderPropertyFlags::_set_NoScaleOffset(UnityEngine::Rendering::ShaderPropertyFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_set_NoScaleOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyFlags", "NoScaleOffset", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyFlags Normal
UnityEngine::Rendering::ShaderPropertyFlags UnityEngine::Rendering::ShaderPropertyFlags::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyFlags>("UnityEngine.Rendering", "ShaderPropertyFlags", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyFlags Normal
void UnityEngine::Rendering::ShaderPropertyFlags::_set_Normal(UnityEngine::Rendering::ShaderPropertyFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyFlags", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyFlags HDR
UnityEngine::Rendering::ShaderPropertyFlags UnityEngine::Rendering::ShaderPropertyFlags::_get_HDR() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_get_HDR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyFlags>("UnityEngine.Rendering", "ShaderPropertyFlags", "HDR"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyFlags HDR
void UnityEngine::Rendering::ShaderPropertyFlags::_set_HDR(UnityEngine::Rendering::ShaderPropertyFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_set_HDR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyFlags", "HDR", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyFlags Gamma
UnityEngine::Rendering::ShaderPropertyFlags UnityEngine::Rendering::ShaderPropertyFlags::_get_Gamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_get_Gamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyFlags>("UnityEngine.Rendering", "ShaderPropertyFlags", "Gamma"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyFlags Gamma
void UnityEngine::Rendering::ShaderPropertyFlags::_set_Gamma(UnityEngine::Rendering::ShaderPropertyFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_set_Gamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyFlags", "Gamma", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyFlags NonModifiableTextureData
UnityEngine::Rendering::ShaderPropertyFlags UnityEngine::Rendering::ShaderPropertyFlags::_get_NonModifiableTextureData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_get_NonModifiableTextureData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyFlags>("UnityEngine.Rendering", "ShaderPropertyFlags", "NonModifiableTextureData"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyFlags NonModifiableTextureData
void UnityEngine::Rendering::ShaderPropertyFlags::_set_NonModifiableTextureData(UnityEngine::Rendering::ShaderPropertyFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_set_NonModifiableTextureData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyFlags", "NonModifiableTextureData", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyFlags MainTexture
UnityEngine::Rendering::ShaderPropertyFlags UnityEngine::Rendering::ShaderPropertyFlags::_get_MainTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_get_MainTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyFlags>("UnityEngine.Rendering", "ShaderPropertyFlags", "MainTexture"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyFlags MainTexture
void UnityEngine::Rendering::ShaderPropertyFlags::_set_MainTexture(UnityEngine::Rendering::ShaderPropertyFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_set_MainTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyFlags", "MainTexture", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Rendering.ShaderPropertyFlags MainColor
UnityEngine::Rendering::ShaderPropertyFlags UnityEngine::Rendering::ShaderPropertyFlags::_get_MainColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_get_MainColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Rendering::ShaderPropertyFlags>("UnityEngine.Rendering", "ShaderPropertyFlags", "MainColor"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Rendering.ShaderPropertyFlags MainColor
void UnityEngine::Rendering::ShaderPropertyFlags::_set_MainColor(UnityEngine::Rendering::ShaderPropertyFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::ShaderPropertyFlags::_set_MainColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Rendering", "ShaderPropertyFlags", "MainColor", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
// Including type: UnityEngine.Playables.FrameData/EvaluationType
#include "UnityEngine/Playables/FrameData_EvaluationType.hpp"
// Including type: UnityEngine.Playables.PlayState
#include "UnityEngine/Playables/PlayState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.FrameData.HasFlags
bool UnityEngine::Playables::FrameData::HasFlags(UnityEngine::Playables::FrameData::Flags flag) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::HasFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flag)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, flag);
}
// Autogenerated method: UnityEngine.Playables.FrameData.get_deltaTime
float UnityEngine::Playables::FrameData::get_deltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::get_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.FrameData.get_effectiveSpeed
float UnityEngine::Playables::FrameData::get_effectiveSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::get_effectiveSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_effectiveSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.FrameData.get_evaluationType
UnityEngine::Playables::FrameData::EvaluationType UnityEngine::Playables::FrameData::get_evaluationType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::get_evaluationType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_evaluationType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::FrameData::EvaluationType, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.FrameData.get_seekOccurred
bool UnityEngine::Playables::FrameData::get_seekOccurred() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::get_seekOccurred");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_seekOccurred", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.FrameData.get_timeLooped
bool UnityEngine::Playables::FrameData::get_timeLooped() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::get_timeLooped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_timeLooped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.FrameData.get_timeHeld
bool UnityEngine::Playables::FrameData::get_timeHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::get_timeHeld");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_timeHeld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.FrameData.get_output
UnityEngine::Playables::PlayableOutput UnityEngine::Playables::FrameData::get_output() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::get_output");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_output", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutput, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.FrameData.get_effectivePlayState
UnityEngine::Playables::PlayState UnityEngine::Playables::FrameData::get_effectivePlayState() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::get_effectivePlayState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_effectivePlayState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayState, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: FrameData::HasFlags
// Il2CppName: HasFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FrameData::*)(UnityEngine::Playables::FrameData::Flags)>(&FrameData::HasFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameData), "HasFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData::Flags>()});
  }
};
// Writing MetadataGetter for method: FrameData::get_deltaTime
// Il2CppName: get_deltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (FrameData::*)()>(&FrameData::get_deltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameData), "get_deltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FrameData::get_effectiveSpeed
// Il2CppName: get_effectiveSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (FrameData::*)()>(&FrameData::get_effectiveSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameData), "get_effectiveSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FrameData::get_evaluationType
// Il2CppName: get_evaluationType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::FrameData::EvaluationType (FrameData::*)()>(&FrameData::get_evaluationType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameData), "get_evaluationType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FrameData::get_seekOccurred
// Il2CppName: get_seekOccurred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FrameData::*)()>(&FrameData::get_seekOccurred)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameData), "get_seekOccurred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FrameData::get_timeLooped
// Il2CppName: get_timeLooped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FrameData::*)()>(&FrameData::get_timeLooped)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameData), "get_timeLooped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FrameData::get_timeHeld
// Il2CppName: get_timeHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FrameData::*)()>(&FrameData::get_timeHeld)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameData), "get_timeHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FrameData::get_output
// Il2CppName: get_output
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutput (FrameData::*)()>(&FrameData::get_output)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameData), "get_output", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FrameData::get_effectivePlayState
// Il2CppName: get_effectivePlayState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayState (FrameData::*)()>(&FrameData::get_effectivePlayState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameData), "get_effectivePlayState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.FrameData/Flags
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.FrameData/Flags Evaluate
UnityEngine::Playables::FrameData::Flags UnityEngine::Playables::FrameData::Flags::_get_Evaluate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_get_Evaluate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::FrameData::Flags>("UnityEngine.Playables", "FrameData/Flags", "Evaluate"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.FrameData/Flags Evaluate
void UnityEngine::Playables::FrameData::Flags::_set_Evaluate(UnityEngine::Playables::FrameData::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_set_Evaluate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "FrameData/Flags", "Evaluate", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.FrameData/Flags SeekOccured
UnityEngine::Playables::FrameData::Flags UnityEngine::Playables::FrameData::Flags::_get_SeekOccured() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_get_SeekOccured");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::FrameData::Flags>("UnityEngine.Playables", "FrameData/Flags", "SeekOccured"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.FrameData/Flags SeekOccured
void UnityEngine::Playables::FrameData::Flags::_set_SeekOccured(UnityEngine::Playables::FrameData::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_set_SeekOccured");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "FrameData/Flags", "SeekOccured", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.FrameData/Flags Loop
UnityEngine::Playables::FrameData::Flags UnityEngine::Playables::FrameData::Flags::_get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_get_Loop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::FrameData::Flags>("UnityEngine.Playables", "FrameData/Flags", "Loop"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.FrameData/Flags Loop
void UnityEngine::Playables::FrameData::Flags::_set_Loop(UnityEngine::Playables::FrameData::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_set_Loop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "FrameData/Flags", "Loop", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.FrameData/Flags Hold
UnityEngine::Playables::FrameData::Flags UnityEngine::Playables::FrameData::Flags::_get_Hold() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_get_Hold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::FrameData::Flags>("UnityEngine.Playables", "FrameData/Flags", "Hold"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.FrameData/Flags Hold
void UnityEngine::Playables::FrameData::Flags::_set_Hold(UnityEngine::Playables::FrameData::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_set_Hold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "FrameData/Flags", "Hold", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.FrameData/Flags EffectivePlayStateDelayed
UnityEngine::Playables::FrameData::Flags UnityEngine::Playables::FrameData::Flags::_get_EffectivePlayStateDelayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_get_EffectivePlayStateDelayed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::FrameData::Flags>("UnityEngine.Playables", "FrameData/Flags", "EffectivePlayStateDelayed"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.FrameData/Flags EffectivePlayStateDelayed
void UnityEngine::Playables::FrameData::Flags::_set_EffectivePlayStateDelayed(UnityEngine::Playables::FrameData::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_set_EffectivePlayStateDelayed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "FrameData/Flags", "EffectivePlayStateDelayed", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.FrameData/Flags EffectivePlayStatePlaying
UnityEngine::Playables::FrameData::Flags UnityEngine::Playables::FrameData::Flags::_get_EffectivePlayStatePlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_get_EffectivePlayStatePlaying");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::FrameData::Flags>("UnityEngine.Playables", "FrameData/Flags", "EffectivePlayStatePlaying"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.FrameData/Flags EffectivePlayStatePlaying
void UnityEngine::Playables::FrameData::Flags::_set_EffectivePlayStatePlaying(UnityEngine::Playables::FrameData::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::Flags::_set_EffectivePlayStatePlaying");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "FrameData/Flags", "EffectivePlayStatePlaying", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.FrameData/EvaluationType
#include "UnityEngine/Playables/FrameData_EvaluationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.FrameData/EvaluationType Evaluate
UnityEngine::Playables::FrameData::EvaluationType UnityEngine::Playables::FrameData::EvaluationType::_get_Evaluate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::EvaluationType::_get_Evaluate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::FrameData::EvaluationType>("UnityEngine.Playables", "FrameData/EvaluationType", "Evaluate"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.FrameData/EvaluationType Evaluate
void UnityEngine::Playables::FrameData::EvaluationType::_set_Evaluate(UnityEngine::Playables::FrameData::EvaluationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::EvaluationType::_set_Evaluate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "FrameData/EvaluationType", "Evaluate", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.FrameData/EvaluationType Playback
UnityEngine::Playables::FrameData::EvaluationType UnityEngine::Playables::FrameData::EvaluationType::_get_Playback() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::EvaluationType::_get_Playback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::FrameData::EvaluationType>("UnityEngine.Playables", "FrameData/EvaluationType", "Playback"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.FrameData/EvaluationType Playback
void UnityEngine::Playables::FrameData::EvaluationType::_set_Playback(UnityEngine::Playables::FrameData::EvaluationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::FrameData::EvaluationType::_set_Playback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "FrameData/EvaluationType", "Playback", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
// Including type: UnityEngine.PropertyName
#include "UnityEngine/PropertyName.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.INotification.get_id
UnityEngine::PropertyName UnityEngine::Playables::INotification::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::INotification::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::PropertyName, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: INotification::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::PropertyName (INotification::*)()>(&INotification::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INotification*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.INotificationReceiver
#include "UnityEngine/Playables/INotificationReceiver.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.INotificationReceiver.OnNotify
void UnityEngine::Playables::INotificationReceiver::OnNotify(UnityEngine::Playables::Playable origin, UnityEngine::Playables::INotification* notification, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::INotificationReceiver::OnNotify");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNotify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(notification), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, origin, notification, context);
}
// Writing MetadataGetter for method: INotificationReceiver::OnNotify
// Il2CppName: OnNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INotificationReceiver::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::INotification*, ::Il2CppObject*)>(&INotificationReceiver::OnNotify)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INotificationReceiver*), "OnNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::INotification*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.IPlayable
#include "UnityEngine/Playables/IPlayable.hpp"
// Including type: UnityEngine.Playables.PlayableHandle
#include "UnityEngine/Playables/PlayableHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.IPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Playables::IPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (IPlayable::*)()>(&IPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayable*), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.IPlayableBehaviour
#include "UnityEngine/Playables/IPlayableBehaviour.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.IPlayableBehaviour.OnGraphStart
void UnityEngine::Playables::IPlayableBehaviour::OnGraphStart(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableBehaviour::OnGraphStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGraphStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Playables.IPlayableBehaviour.OnGraphStop
void UnityEngine::Playables::IPlayableBehaviour::OnGraphStop(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableBehaviour::OnGraphStop");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGraphStop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Playables.IPlayableBehaviour.OnPlayableCreate
void UnityEngine::Playables::IPlayableBehaviour::OnPlayableCreate(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableBehaviour::OnPlayableCreate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPlayableCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Playables.IPlayableBehaviour.OnPlayableDestroy
void UnityEngine::Playables::IPlayableBehaviour::OnPlayableDestroy(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableBehaviour::OnPlayableDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPlayableDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Playables.IPlayableBehaviour.OnBehaviourPlay
void UnityEngine::Playables::IPlayableBehaviour::OnBehaviourPlay(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableBehaviour::OnBehaviourPlay");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBehaviourPlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Playables.IPlayableBehaviour.OnBehaviourPause
void UnityEngine::Playables::IPlayableBehaviour::OnBehaviourPause(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableBehaviour::OnBehaviourPause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBehaviourPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Playables.IPlayableBehaviour.PrepareFrame
void UnityEngine::Playables::IPlayableBehaviour::PrepareFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableBehaviour::PrepareFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepareFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Playables.IPlayableBehaviour.ProcessFrame
void UnityEngine::Playables::IPlayableBehaviour::ProcessFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableBehaviour::ProcessFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(playerData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info, playerData);
}
// Writing MetadataGetter for method: IPlayableBehaviour::OnGraphStart
// Il2CppName: OnGraphStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayableBehaviour::*)(UnityEngine::Playables::Playable)>(&IPlayableBehaviour::OnGraphStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableBehaviour*), "OnGraphStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: IPlayableBehaviour::OnGraphStop
// Il2CppName: OnGraphStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayableBehaviour::*)(UnityEngine::Playables::Playable)>(&IPlayableBehaviour::OnGraphStop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableBehaviour*), "OnGraphStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: IPlayableBehaviour::OnPlayableCreate
// Il2CppName: OnPlayableCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayableBehaviour::*)(UnityEngine::Playables::Playable)>(&IPlayableBehaviour::OnPlayableCreate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableBehaviour*), "OnPlayableCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: IPlayableBehaviour::OnPlayableDestroy
// Il2CppName: OnPlayableDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayableBehaviour::*)(UnityEngine::Playables::Playable)>(&IPlayableBehaviour::OnPlayableDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableBehaviour*), "OnPlayableDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: IPlayableBehaviour::OnBehaviourPlay
// Il2CppName: OnBehaviourPlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayableBehaviour::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData)>(&IPlayableBehaviour::OnBehaviourPlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableBehaviour*), "OnBehaviourPlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: IPlayableBehaviour::OnBehaviourPause
// Il2CppName: OnBehaviourPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayableBehaviour::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData)>(&IPlayableBehaviour::OnBehaviourPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableBehaviour*), "OnBehaviourPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: IPlayableBehaviour::PrepareFrame
// Il2CppName: PrepareFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayableBehaviour::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData)>(&IPlayableBehaviour::PrepareFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableBehaviour*), "PrepareFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: IPlayableBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayableBehaviour::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&IPlayableBehaviour::ProcessFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.IPlayableOutput
#include "UnityEngine/Playables/IPlayableOutput.hpp"
// Including type: UnityEngine.Playables.PlayableOutputHandle
#include "UnityEngine/Playables/PlayableOutputHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.IPlayableOutput.GetHandle
UnityEngine::Playables::PlayableOutputHandle UnityEngine::Playables::IPlayableOutput::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableOutput::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutputHandle, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IPlayableOutput::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutputHandle (IPlayableOutput::*)()>(&IPlayableOutput::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableOutput*), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.DirectorWrapMode
#include "UnityEngine/Playables/DirectorWrapMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.DirectorWrapMode Hold
UnityEngine::Playables::DirectorWrapMode UnityEngine::Playables::DirectorWrapMode::_get_Hold() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::DirectorWrapMode::_get_Hold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::DirectorWrapMode>("UnityEngine.Playables", "DirectorWrapMode", "Hold"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.DirectorWrapMode Hold
void UnityEngine::Playables::DirectorWrapMode::_set_Hold(UnityEngine::Playables::DirectorWrapMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::DirectorWrapMode::_set_Hold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "DirectorWrapMode", "Hold", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.DirectorWrapMode Loop
UnityEngine::Playables::DirectorWrapMode UnityEngine::Playables::DirectorWrapMode::_get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::DirectorWrapMode::_get_Loop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::DirectorWrapMode>("UnityEngine.Playables", "DirectorWrapMode", "Loop"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.DirectorWrapMode Loop
void UnityEngine::Playables::DirectorWrapMode::_set_Loop(UnityEngine::Playables::DirectorWrapMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::DirectorWrapMode::_set_Loop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "DirectorWrapMode", "Loop", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.DirectorWrapMode None
UnityEngine::Playables::DirectorWrapMode UnityEngine::Playables::DirectorWrapMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::DirectorWrapMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::DirectorWrapMode>("UnityEngine.Playables", "DirectorWrapMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.DirectorWrapMode None
void UnityEngine::Playables::DirectorWrapMode::_set_None(UnityEngine::Playables::DirectorWrapMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::DirectorWrapMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "DirectorWrapMode", "None", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Playables.Playable m_NullPlayable
UnityEngine::Playables::Playable UnityEngine::Playables::Playable::_get_m_NullPlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::Playable::_get_m_NullPlayable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::Playable>("UnityEngine.Playables", "Playable", "m_NullPlayable"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Playables.Playable m_NullPlayable
void UnityEngine::Playables::Playable::_set_m_NullPlayable(UnityEngine::Playables::Playable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::Playable::_set_m_NullPlayable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "Playable", "m_NullPlayable", value));
}
// Autogenerated method: UnityEngine.Playables.Playable.get_Null
UnityEngine::Playables::Playable UnityEngine::Playables::Playable::get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::Playable::get_Null");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "Playable", "get_Null", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.Playable.Create
UnityEngine::Playables::Playable UnityEngine::Playables::Playable::Create(UnityEngine::Playables::PlayableGraph graph, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::Playable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "Playable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, inputCount);
}
// Autogenerated method: UnityEngine.Playables.Playable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Playables::Playable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::Playable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.Playable.GetPlayableType
System::Type* UnityEngine::Playables::Playable::GetPlayableType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::Playable::GetPlayableType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetPlayableType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.Playable.Equals
bool UnityEngine::Playables::Playable::Equals(UnityEngine::Playables::Playable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::Playable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Playables.Playable..cctor
void UnityEngine::Playables::Playable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::Playable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "Playable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Playable::get_Null
// Il2CppName: get_Null
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (*)()>(&Playable::get_Null)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Playable), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Playable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (*)(UnityEngine::Playables::PlayableGraph, int)>(&Playable::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Playable), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Playable::Playable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Playable::*)(UnityEngine::Playables::PlayableHandle)>(&Playable::Playable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Playable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Playable::*)(UnityEngine::Playables::PlayableHandle)>(&Playable::Playable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Playable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: Playable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (Playable::*)()>(&Playable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Playable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Playable::IsPlayableOfType
// Il2CppName: IsPlayableOfType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Playable::GetPlayableType
// Il2CppName: GetPlayableType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (Playable::*)()>(&Playable::GetPlayableType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Playable), "GetPlayableType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Playable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Playable::*)(UnityEngine::Playables::Playable)>(&Playable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Playable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: Playable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Playable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Playable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.IPlayableAsset
#include "UnityEngine/Playables/IPlayableAsset.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.IPlayableAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Playables::IPlayableAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(owner)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, owner);
}
// Autogenerated method: UnityEngine.Playables.IPlayableAsset.get_duration
double UnityEngine::Playables::IPlayableAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::IPlayableAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IPlayableAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (IPlayableAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&IPlayableAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: IPlayableAsset::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (IPlayableAsset::*)()>(&IPlayableAsset::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayableAsset*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.PlayableAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Playables::PlayableAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(owner)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, owner);
}
// Autogenerated method: UnityEngine.Playables.PlayableAsset.get_duration
double UnityEngine::Playables::PlayableAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableAsset.get_outputs
System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Playables::PlayableAsset::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableAsset::get_outputs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableAsset.Internal_CreatePlayable
void UnityEngine::Playables::PlayableAsset::Internal_CreatePlayable(UnityEngine::Playables::PlayableAsset* asset, UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, System::IntPtr ptr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableAsset::Internal_CreatePlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableAsset", "Internal_CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset), ::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(ptr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, asset, graph, go, ptr);
}
// Autogenerated method: UnityEngine.Playables.PlayableAsset.Internal_GetPlayableAssetDuration
void UnityEngine::Playables::PlayableAsset::Internal_GetPlayableAssetDuration(UnityEngine::Playables::PlayableAsset* asset, System::IntPtr ptrToDouble) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableAsset::Internal_GetPlayableAssetDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableAsset", "Internal_GetPlayableAssetDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset), ::il2cpp_utils::ExtractType(ptrToDouble)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, asset, ptrToDouble);
}
// Writing MetadataGetter for method: PlayableAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (PlayableAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&PlayableAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: PlayableAsset::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (PlayableAsset::*)()>(&PlayableAsset::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableAsset*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableAsset::get_outputs
// Il2CppName: get_outputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* (PlayableAsset::*)()>(&PlayableAsset::get_outputs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableAsset*), "get_outputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableAsset::Internal_CreatePlayable
// Il2CppName: Internal_CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableAsset*, UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, System::IntPtr)>(&PlayableAsset::Internal_CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableAsset*), "Internal_CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableAsset*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: PlayableAsset::Internal_GetPlayableAssetDuration
// Il2CppName: Internal_GetPlayableAssetDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableAsset*, System::IntPtr)>(&PlayableAsset::Internal_GetPlayableAssetDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableAsset*), "Internal_GetPlayableAssetDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableAsset*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: PlayableAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableAsset::*)()>(&PlayableAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableAsset::*)()>(&PlayableAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.PlayableBehaviour.OnGraphStart
void UnityEngine::Playables::PlayableBehaviour::OnGraphStart(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBehaviour::OnGraphStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGraphStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Playables.PlayableBehaviour.OnGraphStop
void UnityEngine::Playables::PlayableBehaviour::OnGraphStop(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBehaviour::OnGraphStop");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGraphStop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Playables.PlayableBehaviour.OnPlayableCreate
void UnityEngine::Playables::PlayableBehaviour::OnPlayableCreate(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBehaviour::OnPlayableCreate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPlayableCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Playables.PlayableBehaviour.OnPlayableDestroy
void UnityEngine::Playables::PlayableBehaviour::OnPlayableDestroy(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBehaviour::OnPlayableDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPlayableDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Playables.PlayableBehaviour.OnBehaviourPlay
void UnityEngine::Playables::PlayableBehaviour::OnBehaviourPlay(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBehaviour::OnBehaviourPlay");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBehaviourPlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Playables.PlayableBehaviour.OnBehaviourPause
void UnityEngine::Playables::PlayableBehaviour::OnBehaviourPause(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBehaviour::OnBehaviourPause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBehaviourPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Playables.PlayableBehaviour.PrepareFrame
void UnityEngine::Playables::PlayableBehaviour::PrepareFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBehaviour::PrepareFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepareFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Playables.PlayableBehaviour.ProcessFrame
void UnityEngine::Playables::PlayableBehaviour::ProcessFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBehaviour::ProcessFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(playerData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info, playerData);
}
// Autogenerated method: UnityEngine.Playables.PlayableBehaviour.Clone
::Il2CppObject* UnityEngine::Playables::PlayableBehaviour::Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBehaviour::Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PlayableBehaviour::OnGraphStart
// Il2CppName: OnGraphStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBehaviour::*)(UnityEngine::Playables::Playable)>(&PlayableBehaviour::OnGraphStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), "OnGraphStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: PlayableBehaviour::OnGraphStop
// Il2CppName: OnGraphStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBehaviour::*)(UnityEngine::Playables::Playable)>(&PlayableBehaviour::OnGraphStop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), "OnGraphStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: PlayableBehaviour::OnPlayableCreate
// Il2CppName: OnPlayableCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBehaviour::*)(UnityEngine::Playables::Playable)>(&PlayableBehaviour::OnPlayableCreate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), "OnPlayableCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: PlayableBehaviour::OnPlayableDestroy
// Il2CppName: OnPlayableDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBehaviour::*)(UnityEngine::Playables::Playable)>(&PlayableBehaviour::OnPlayableDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), "OnPlayableDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: PlayableBehaviour::OnBehaviourPlay
// Il2CppName: OnBehaviourPlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBehaviour::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData)>(&PlayableBehaviour::OnBehaviourPlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), "OnBehaviourPlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: PlayableBehaviour::OnBehaviourPause
// Il2CppName: OnBehaviourPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBehaviour::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData)>(&PlayableBehaviour::OnBehaviourPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), "OnBehaviourPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: PlayableBehaviour::PrepareFrame
// Il2CppName: PrepareFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBehaviour::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData)>(&PlayableBehaviour::PrepareFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), "PrepareFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: PlayableBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBehaviour::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&PlayableBehaviour::ProcessFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PlayableBehaviour::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayableBehaviour::*)()>(&PlayableBehaviour::Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableBehaviour::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBehaviour::*)()>(&PlayableBehaviour::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBehaviour::*)()>(&PlayableBehaviour::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBehaviour*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.PlayableBinding
#include "UnityEngine/Playables/PlayableBinding.hpp"
// Including type: UnityEngine.Playables.PlayableBinding/CreateOutputMethod
#include "UnityEngine/Playables/PlayableBinding_CreateOutputMethod.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Playables.PlayableOutput
#include "UnityEngine/Playables/PlayableOutput.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.Playables.PlayableBinding[] None
::Array<UnityEngine::Playables::PlayableBinding>* UnityEngine::Playables::PlayableBinding::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Playables::PlayableBinding>*>("UnityEngine.Playables", "PlayableBinding", "None"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.Playables.PlayableBinding[] None
void UnityEngine::Playables::PlayableBinding::_set_None(::Array<UnityEngine::Playables::PlayableBinding>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "PlayableBinding", "None", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Double DefaultDuration
double UnityEngine::Playables::PlayableBinding::_get_DefaultDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::_get_DefaultDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Playables", "PlayableBinding", "DefaultDuration"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Double DefaultDuration
void UnityEngine::Playables::PlayableBinding::_set_DefaultDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::_set_DefaultDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "PlayableBinding", "DefaultDuration", value));
}
// Autogenerated method: UnityEngine.Playables.PlayableBinding.get_streamName
::Il2CppString* UnityEngine::Playables::PlayableBinding::get_streamName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::get_streamName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_streamName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableBinding.get_sourceObject
UnityEngine::Object* UnityEngine::Playables::PlayableBinding::get_sourceObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::get_sourceObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_sourceObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableBinding.CreateOutput
UnityEngine::Playables::PlayableOutput UnityEngine::Playables::PlayableBinding::CreateOutput(UnityEngine::Playables::PlayableGraph graph) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::CreateOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutput, false>(*this, ___internal__method, graph);
}
// Autogenerated method: UnityEngine.Playables.PlayableBinding.CreateInternal
UnityEngine::Playables::PlayableBinding UnityEngine::Playables::PlayableBinding::CreateInternal(::Il2CppString* name, UnityEngine::Object* sourceObject, System::Type* sourceType, UnityEngine::Playables::PlayableBinding::CreateOutputMethod* createFunction) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::CreateInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableBinding", "CreateInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(sourceObject), ::il2cpp_utils::ExtractType(sourceType), ::il2cpp_utils::ExtractType(createFunction)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableBinding, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, sourceObject, sourceType, createFunction);
}
// Autogenerated method: UnityEngine.Playables.PlayableBinding..cctor
void UnityEngine::Playables::PlayableBinding::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableBinding", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: PlayableBinding::get_streamName
// Il2CppName: get_streamName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlayableBinding::*)()>(&PlayableBinding::get_streamName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBinding), "get_streamName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableBinding::get_sourceObject
// Il2CppName: get_sourceObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (PlayableBinding::*)()>(&PlayableBinding::get_sourceObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBinding), "get_sourceObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableBinding::CreateOutput
// Il2CppName: CreateOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutput (PlayableBinding::*)(UnityEngine::Playables::PlayableGraph)>(&PlayableBinding::CreateOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBinding), "CreateOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>()});
  }
};
// Writing MetadataGetter for method: PlayableBinding::CreateInternal
// Il2CppName: CreateInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableBinding (*)(::Il2CppString*, UnityEngine::Object*, System::Type*, UnityEngine::Playables::PlayableBinding::CreateOutputMethod*)>(&PlayableBinding::CreateInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBinding), "CreateInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableBinding::CreateOutputMethod*>()});
  }
};
// Writing MetadataGetter for method: PlayableBinding::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayableBinding::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBinding), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.PlayableBinding/CreateOutputMethod
#include "UnityEngine/Playables/PlayableBinding_CreateOutputMethod.hpp"
// Including type: UnityEngine.Playables.PlayableOutput
#include "UnityEngine/Playables/PlayableOutput.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.PlayableBinding/CreateOutputMethod.Invoke
UnityEngine::Playables::PlayableOutput UnityEngine::Playables::PlayableBinding::CreateOutputMethod::Invoke(UnityEngine::Playables::PlayableGraph graph, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::CreateOutputMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutput, false>(this, ___internal__method, graph, name);
}
// Autogenerated method: UnityEngine.Playables.PlayableBinding/CreateOutputMethod.BeginInvoke
System::IAsyncResult* UnityEngine::Playables::PlayableBinding::CreateOutputMethod::BeginInvoke(UnityEngine::Playables::PlayableGraph graph, ::Il2CppString* name, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::CreateOutputMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, graph, name, callback, object);
}
// Autogenerated method: UnityEngine.Playables.PlayableBinding/CreateOutputMethod.EndInvoke
UnityEngine::Playables::PlayableOutput UnityEngine::Playables::PlayableBinding::CreateOutputMethod::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableBinding::CreateOutputMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutput, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: PlayableBinding::CreateOutputMethod::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBinding::CreateOutputMethod::*)(::Il2CppObject*, System::IntPtr)>(&PlayableBinding::CreateOutputMethod::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBinding::CreateOutputMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableBinding::CreateOutputMethod::*)(::Il2CppObject*, System::IntPtr)>(&PlayableBinding::CreateOutputMethod::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBinding::CreateOutputMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: PlayableBinding::CreateOutputMethod::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutput (PlayableBinding::CreateOutputMethod::*)(UnityEngine::Playables::PlayableGraph, ::Il2CppString*)>(&PlayableBinding::CreateOutputMethod::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBinding::CreateOutputMethod*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayableBinding::CreateOutputMethod::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (PlayableBinding::CreateOutputMethod::*)(UnityEngine::Playables::PlayableGraph, ::Il2CppString*, System::AsyncCallback*, ::Il2CppObject*)>(&PlayableBinding::CreateOutputMethod::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBinding::CreateOutputMethod*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PlayableBinding::CreateOutputMethod::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutput (PlayableBinding::CreateOutputMethod::*)(System::IAsyncResult*)>(&PlayableBinding::CreateOutputMethod::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableBinding::CreateOutputMethod*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.PlayableTraversalMode
#include "UnityEngine/Playables/PlayableTraversalMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.PlayableTraversalMode Mix
UnityEngine::Playables::PlayableTraversalMode UnityEngine::Playables::PlayableTraversalMode::_get_Mix() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableTraversalMode::_get_Mix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::PlayableTraversalMode>("UnityEngine.Playables", "PlayableTraversalMode", "Mix"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.PlayableTraversalMode Mix
void UnityEngine::Playables::PlayableTraversalMode::_set_Mix(UnityEngine::Playables::PlayableTraversalMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableTraversalMode::_set_Mix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "PlayableTraversalMode", "Mix", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.PlayableTraversalMode Passthrough
UnityEngine::Playables::PlayableTraversalMode UnityEngine::Playables::PlayableTraversalMode::_get_Passthrough() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableTraversalMode::_get_Passthrough");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::PlayableTraversalMode>("UnityEngine.Playables", "PlayableTraversalMode", "Passthrough"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.PlayableTraversalMode Passthrough
void UnityEngine::Playables::PlayableTraversalMode::_set_Passthrough(UnityEngine::Playables::PlayableTraversalMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableTraversalMode::_set_Passthrough");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "PlayableTraversalMode", "Passthrough", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.PlayableExtensions
#include "UnityEngine/Playables/PlayableExtensions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayableExtensions::IsValid
// Il2CppName: IsValid
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::GetGraph
// Il2CppName: GetGraph
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::GetPlayState
// Il2CppName: GetPlayState
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::Play
// Il2CppName: Play
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::Pause
// Il2CppName: Pause
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::SetSpeed
// Il2CppName: SetSpeed
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::SetDuration
// Il2CppName: SetDuration
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::GetDuration
// Il2CppName: GetDuration
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::SetTime
// Il2CppName: SetTime
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::GetTime
// Il2CppName: GetTime
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::GetPreviousTime
// Il2CppName: GetPreviousTime
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::IsDone
// Il2CppName: IsDone
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::SetPropagateSetTime
// Il2CppName: SetPropagateSetTime
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::SetInputCount
// Il2CppName: SetInputCount
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::GetInputCount
// Il2CppName: GetInputCount
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::GetInput
// Il2CppName: GetInput
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::SetInputWeight
// Il2CppName: SetInputWeight
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::SetInputWeight
// Il2CppName: SetInputWeight
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::GetInputWeight
// Il2CppName: GetInputWeight
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::SetTraversalMode
// Il2CppName: SetTraversalMode
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::GetTimeWrapMode
// Il2CppName: GetTimeWrapMode
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableExtensions::SetTimeWrapMode
// Il2CppName: SetTimeWrapMode
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.IPlayable
#include "UnityEngine/Playables/IPlayable.hpp"
// Including type: UnityEngine.IExposedPropertyTable
#include "UnityEngine/IExposedPropertyTable.hpp"
// Including type: UnityEngine.Playables.PlayableHandle
#include "UnityEngine/Playables/PlayableHandle.hpp"
// Including type: UnityEngine.Playables.PlayableOutputHandle
#include "UnityEngine/Playables/PlayableOutputHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.PlayableGraph.GetRootPlayable
UnityEngine::Playables::Playable UnityEngine::Playables::PlayableGraph::GetRootPlayable(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::GetRootPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetRootPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.IsValid
bool UnityEngine::Playables::PlayableGraph::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.IsPlaying
bool UnityEngine::Playables::PlayableGraph::IsPlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::IsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.GetResolver
UnityEngine::IExposedPropertyTable* UnityEngine::Playables::PlayableGraph::GetResolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::GetResolver");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetResolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::IExposedPropertyTable*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.GetPlayableCount
int UnityEngine::Playables::PlayableGraph::GetPlayableCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::GetPlayableCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetPlayableCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.GetRootPlayableCount
int UnityEngine::Playables::PlayableGraph::GetRootPlayableCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::GetRootPlayableCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetRootPlayableCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.CreatePlayableHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Playables::PlayableGraph::CreatePlayableHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::CreatePlayableHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreatePlayableHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.CreateScriptOutputInternal
bool UnityEngine::Playables::PlayableGraph::CreateScriptOutputInternal(::Il2CppString* name, UnityEngine::Playables::PlayableOutputHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::CreateScriptOutputInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateScriptOutputInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, name, handle);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.GetRootPlayableInternal
UnityEngine::Playables::PlayableHandle UnityEngine::Playables::PlayableGraph::GetRootPlayableInternal(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::GetRootPlayableInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetRootPlayableInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.ConnectInternal
bool UnityEngine::Playables::PlayableGraph::ConnectInternal(UnityEngine::Playables::PlayableHandle source, int sourceOutputPort, UnityEngine::Playables::PlayableHandle destination, int destinationInputPort) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::ConnectInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ConnectInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(sourceOutputPort), ::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(destinationInputPort)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, source, sourceOutputPort, destination, destinationInputPort);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.IsValid_Injected
bool UnityEngine::Playables::PlayableGraph::IsValid_Injected(UnityEngine::Playables::PlayableGraph& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::IsValid_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableGraph", "IsValid_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.IsPlaying_Injected
bool UnityEngine::Playables::PlayableGraph::IsPlaying_Injected(UnityEngine::Playables::PlayableGraph& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::IsPlaying_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableGraph", "IsPlaying_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.GetResolver_Injected
UnityEngine::IExposedPropertyTable* UnityEngine::Playables::PlayableGraph::GetResolver_Injected(UnityEngine::Playables::PlayableGraph& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::GetResolver_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableGraph", "GetResolver_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::IExposedPropertyTable*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.GetPlayableCount_Injected
int UnityEngine::Playables::PlayableGraph::GetPlayableCount_Injected(UnityEngine::Playables::PlayableGraph& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::GetPlayableCount_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableGraph", "GetPlayableCount_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.GetRootPlayableCount_Injected
int UnityEngine::Playables::PlayableGraph::GetRootPlayableCount_Injected(UnityEngine::Playables::PlayableGraph& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::GetRootPlayableCount_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableGraph", "GetRootPlayableCount_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.CreatePlayableHandle_Injected
void UnityEngine::Playables::PlayableGraph::CreatePlayableHandle_Injected(UnityEngine::Playables::PlayableGraph& _unity_self, UnityEngine::Playables::PlayableHandle& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::CreatePlayableHandle_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableGraph", "CreatePlayableHandle_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, ret);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.CreateScriptOutputInternal_Injected
bool UnityEngine::Playables::PlayableGraph::CreateScriptOutputInternal_Injected(UnityEngine::Playables::PlayableGraph& _unity_self, ::Il2CppString* name, UnityEngine::Playables::PlayableOutputHandle& handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::CreateScriptOutputInternal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableGraph", "CreateScriptOutputInternal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, name, handle);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.GetRootPlayableInternal_Injected
void UnityEngine::Playables::PlayableGraph::GetRootPlayableInternal_Injected(UnityEngine::Playables::PlayableGraph& _unity_self, int index, UnityEngine::Playables::PlayableHandle& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::GetRootPlayableInternal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableGraph", "GetRootPlayableInternal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, index, ret);
}
// Autogenerated method: UnityEngine.Playables.PlayableGraph.ConnectInternal_Injected
bool UnityEngine::Playables::PlayableGraph::ConnectInternal_Injected(UnityEngine::Playables::PlayableGraph& _unity_self, UnityEngine::Playables::PlayableHandle& source, int sourceOutputPort, UnityEngine::Playables::PlayableHandle& destination, int destinationInputPort) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableGraph::ConnectInternal_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableGraph", "ConnectInternal_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(sourceOutputPort), ::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(destinationInputPort)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, source, sourceOutputPort, destination, destinationInputPort);
}
// Writing MetadataGetter for method: PlayableGraph::GetRootPlayable
// Il2CppName: GetRootPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (PlayableGraph::*)(int)>(&PlayableGraph::GetRootPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "GetRootPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::Connect
// Il2CppName: Connect
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableGraph::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableGraph::*)()>(&PlayableGraph::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableGraph::IsPlaying
// Il2CppName: IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableGraph::*)()>(&PlayableGraph::IsPlaying)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableGraph::GetResolver
// Il2CppName: GetResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::IExposedPropertyTable* (PlayableGraph::*)()>(&PlayableGraph::GetResolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "GetResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableGraph::GetPlayableCount
// Il2CppName: GetPlayableCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayableGraph::*)()>(&PlayableGraph::GetPlayableCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "GetPlayableCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableGraph::GetRootPlayableCount
// Il2CppName: GetRootPlayableCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayableGraph::*)()>(&PlayableGraph::GetRootPlayableCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "GetRootPlayableCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableGraph::CreatePlayableHandle
// Il2CppName: CreatePlayableHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (PlayableGraph::*)()>(&PlayableGraph::CreatePlayableHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "CreatePlayableHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableGraph::CreateScriptOutputInternal
// Il2CppName: CreateScriptOutputInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableGraph::*)(::Il2CppString*, UnityEngine::Playables::PlayableOutputHandle&)>(&PlayableGraph::CreateScriptOutputInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "CreateScriptOutputInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::GetRootPlayableInternal
// Il2CppName: GetRootPlayableInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (PlayableGraph::*)(int)>(&PlayableGraph::GetRootPlayableInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "GetRootPlayableInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::ConnectInternal
// Il2CppName: ConnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableGraph::*)(UnityEngine::Playables::PlayableHandle, int, UnityEngine::Playables::PlayableHandle, int)>(&PlayableGraph::ConnectInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "ConnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::IsValid_Injected
// Il2CppName: IsValid_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&)>(&PlayableGraph::IsValid_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "IsValid_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::IsPlaying_Injected
// Il2CppName: IsPlaying_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&)>(&PlayableGraph::IsPlaying_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "IsPlaying_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::GetResolver_Injected
// Il2CppName: GetResolver_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::IExposedPropertyTable* (*)(UnityEngine::Playables::PlayableGraph&)>(&PlayableGraph::GetResolver_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "GetResolver_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::GetPlayableCount_Injected
// Il2CppName: GetPlayableCount_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::Playables::PlayableGraph&)>(&PlayableGraph::GetPlayableCount_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "GetPlayableCount_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::GetRootPlayableCount_Injected
// Il2CppName: GetRootPlayableCount_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::Playables::PlayableGraph&)>(&PlayableGraph::GetRootPlayableCount_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "GetRootPlayableCount_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::CreatePlayableHandle_Injected
// Il2CppName: CreatePlayableHandle_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableGraph&, UnityEngine::Playables::PlayableHandle&)>(&PlayableGraph::CreatePlayableHandle_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "CreatePlayableHandle_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::CreateScriptOutputInternal_Injected
// Il2CppName: CreateScriptOutputInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, ::Il2CppString*, UnityEngine::Playables::PlayableOutputHandle&)>(&PlayableGraph::CreateScriptOutputInternal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "CreateScriptOutputInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::GetRootPlayableInternal_Injected
// Il2CppName: GetRootPlayableInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableGraph&, int, UnityEngine::Playables::PlayableHandle&)>(&PlayableGraph::GetRootPlayableInternal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "GetRootPlayableInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableGraph::ConnectInternal_Injected
// Il2CppName: ConnectInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableGraph&, UnityEngine::Playables::PlayableHandle&, int, UnityEngine::Playables::PlayableHandle&, int)>(&PlayableGraph::ConnectInternal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableGraph), "ConnectInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.PlayState
#include "UnityEngine/Playables/PlayState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.PlayState Paused
UnityEngine::Playables::PlayState UnityEngine::Playables::PlayState::_get_Paused() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayState::_get_Paused");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::PlayState>("UnityEngine.Playables", "PlayState", "Paused"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.PlayState Paused
void UnityEngine::Playables::PlayState::_set_Paused(UnityEngine::Playables::PlayState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayState::_set_Paused");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "PlayState", "Paused", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.PlayState Playing
UnityEngine::Playables::PlayState UnityEngine::Playables::PlayState::_get_Playing() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayState::_get_Playing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::PlayState>("UnityEngine.Playables", "PlayState", "Playing"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.PlayState Playing
void UnityEngine::Playables::PlayState::_set_Playing(UnityEngine::Playables::PlayState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayState::_set_Playing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "PlayState", "Playing", value));
}
// [ObsoleteAttribute] Offset: 0xD95050
// Autogenerated static field getter
// Get static field: static public UnityEngine.Playables.PlayState Delayed
UnityEngine::Playables::PlayState UnityEngine::Playables::PlayState::_get_Delayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayState::_get_Delayed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::PlayState>("UnityEngine.Playables", "PlayState", "Delayed"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Playables.PlayState Delayed
void UnityEngine::Playables::PlayState::_set_Delayed(UnityEngine::Playables::PlayState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayState::_set_Delayed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "PlayState", "Delayed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.PlayableHandle
#include "UnityEngine/Playables/PlayableHandle.hpp"
// Including type: UnityEngine.Playables.IPlayableBehaviour
#include "UnityEngine/Playables/IPlayableBehaviour.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Playables.PlayState
#include "UnityEngine/Playables/PlayState.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.PlayableTraversalMode
#include "UnityEngine/Playables/PlayableTraversalMode.hpp"
// Including type: UnityEngine.Playables.DirectorWrapMode
#include "UnityEngine/Playables/DirectorWrapMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Playables.PlayableHandle m_Null
UnityEngine::Playables::PlayableHandle UnityEngine::Playables::PlayableHandle::_get_m_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::_get_m_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::PlayableHandle>("UnityEngine.Playables", "PlayableHandle", "m_Null"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Playables.PlayableHandle m_Null
void UnityEngine::Playables::PlayableHandle::_set_m_Null(UnityEngine::Playables::PlayableHandle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::_set_m_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "PlayableHandle", "m_Null", value));
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.get_Null
UnityEngine::Playables::PlayableHandle UnityEngine::Playables::PlayableHandle::get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::get_Null");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "get_Null", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetInput
UnityEngine::Playables::Playable UnityEngine::Playables::PlayableHandle::GetInput(int inputPort) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputPort)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(*this, ___internal__method, inputPort);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetInputWeight
bool UnityEngine::Playables::PlayableHandle::SetInputWeight(int inputIndex, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetInputWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetInputWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputIndex), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, inputIndex, weight);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetInputWeight
float UnityEngine::Playables::PlayableHandle::GetInputWeight(int inputIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetInputWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetInputWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputIndex)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method, inputIndex);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.Equals
bool UnityEngine::Playables::PlayableHandle::Equals(UnityEngine::Playables::PlayableHandle other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.CompareVersion
bool UnityEngine::Playables::PlayableHandle::CompareVersion(UnityEngine::Playables::PlayableHandle lhs, UnityEngine::Playables::PlayableHandle rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::CompareVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "CompareVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.CheckInputBounds
bool UnityEngine::Playables::PlayableHandle::CheckInputBounds(int inputIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::CheckInputBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CheckInputBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, inputIndex);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.CheckInputBounds
bool UnityEngine::Playables::PlayableHandle::CheckInputBounds(int inputIndex, bool acceptAny) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::CheckInputBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CheckInputBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputIndex), ::il2cpp_utils::ExtractType(acceptAny)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, inputIndex, acceptAny);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.IsValid
bool UnityEngine::Playables::PlayableHandle::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetPlayableType
System::Type* UnityEngine::Playables::PlayableHandle::GetPlayableType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetPlayableType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetPlayableType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetScriptInstance
void UnityEngine::Playables::PlayableHandle::SetScriptInstance(::Il2CppObject* scriptInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetScriptInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetScriptInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scriptInstance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, scriptInstance);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetPlayState
UnityEngine::Playables::PlayState UnityEngine::Playables::PlayableHandle::GetPlayState() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetPlayState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetPlayState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayState, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.Play
void UnityEngine::Playables::PlayableHandle::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.Pause
void UnityEngine::Playables::PlayableHandle::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::Pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetSpeed
void UnityEngine::Playables::PlayableHandle::SetSpeed(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetTime
double UnityEngine::Playables::PlayableHandle::GetTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetTime
void UnityEngine::Playables::PlayableHandle::SetTime(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.IsDone
bool UnityEngine::Playables::PlayableHandle::IsDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::IsDone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsDone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetDuration
double UnityEngine::Playables::PlayableHandle::GetDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetDuration
void UnityEngine::Playables::PlayableHandle::SetDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetPropagateSetTime
void UnityEngine::Playables::PlayableHandle::SetPropagateSetTime(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetPropagateSetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetPropagateSetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetGraph
UnityEngine::Playables::PlayableGraph UnityEngine::Playables::PlayableHandle::GetGraph() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetGraph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetGraph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableGraph, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetInputCount
int UnityEngine::Playables::PlayableHandle::GetInputCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetInputCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetInputCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetInputCount
void UnityEngine::Playables::PlayableHandle::SetInputCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetInputCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetInputCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetInputWeight
void UnityEngine::Playables::PlayableHandle::SetInputWeight(UnityEngine::Playables::PlayableHandle input, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetInputWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetInputWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, input, weight);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetPreviousTime
double UnityEngine::Playables::PlayableHandle::GetPreviousTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetPreviousTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetPreviousTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetTraversalMode
void UnityEngine::Playables::PlayableHandle::SetTraversalMode(UnityEngine::Playables::PlayableTraversalMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetTraversalMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetTraversalMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, mode);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetTimeWrapMode
UnityEngine::Playables::DirectorWrapMode UnityEngine::Playables::PlayableHandle::GetTimeWrapMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetTimeWrapMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetTimeWrapMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::DirectorWrapMode, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetTimeWrapMode
void UnityEngine::Playables::PlayableHandle::SetTimeWrapMode(UnityEngine::Playables::DirectorWrapMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetTimeWrapMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetTimeWrapMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, mode);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetScriptInstance
::Il2CppObject* UnityEngine::Playables::PlayableHandle::GetScriptInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetScriptInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetScriptInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetInputHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Playables::PlayableHandle::GetInputHandle(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetInputHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetInputHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetInputWeightFromIndex
void UnityEngine::Playables::PlayableHandle::SetInputWeightFromIndex(int index, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetInputWeightFromIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetInputWeightFromIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, index, weight);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetInputWeightFromIndex
float UnityEngine::Playables::PlayableHandle::GetInputWeightFromIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetInputWeightFromIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetInputWeightFromIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle..cctor
void UnityEngine::Playables::PlayableHandle::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.IsValid_Injected
bool UnityEngine::Playables::PlayableHandle::IsValid_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::IsValid_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "IsValid_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetPlayableType_Injected
System::Type* UnityEngine::Playables::PlayableHandle::GetPlayableType_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetPlayableType_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetPlayableType_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetScriptInstance_Injected
void UnityEngine::Playables::PlayableHandle::SetScriptInstance_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, ::Il2CppObject* scriptInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetScriptInstance_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "SetScriptInstance_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(scriptInstance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, scriptInstance);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetPlayState_Injected
UnityEngine::Playables::PlayState UnityEngine::Playables::PlayableHandle::GetPlayState_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetPlayState_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetPlayState_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayState, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.Play_Injected
void UnityEngine::Playables::PlayableHandle::Play_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::Play_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "Play_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.Pause_Injected
void UnityEngine::Playables::PlayableHandle::Pause_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::Pause_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "Pause_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetSpeed_Injected
void UnityEngine::Playables::PlayableHandle::SetSpeed_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetSpeed_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "SetSpeed_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetTime_Injected
double UnityEngine::Playables::PlayableHandle::GetTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetTime_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetTime_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetTime_Injected
void UnityEngine::Playables::PlayableHandle::SetTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetTime_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "SetTime_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.IsDone_Injected
bool UnityEngine::Playables::PlayableHandle::IsDone_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::IsDone_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "IsDone_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetDuration_Injected
double UnityEngine::Playables::PlayableHandle::GetDuration_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetDuration_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetDuration_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetDuration_Injected
void UnityEngine::Playables::PlayableHandle::SetDuration_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetDuration_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "SetDuration_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetPropagateSetTime_Injected
void UnityEngine::Playables::PlayableHandle::SetPropagateSetTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetPropagateSetTime_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "SetPropagateSetTime_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetGraph_Injected
void UnityEngine::Playables::PlayableHandle::GetGraph_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::PlayableGraph& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetGraph_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetGraph_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, ret);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetInputCount_Injected
int UnityEngine::Playables::PlayableHandle::GetInputCount_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetInputCount_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetInputCount_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetInputCount_Injected
void UnityEngine::Playables::PlayableHandle::SetInputCount_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetInputCount_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "SetInputCount_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetInputWeight_Injected
void UnityEngine::Playables::PlayableHandle::SetInputWeight_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::PlayableHandle& input, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetInputWeight_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "SetInputWeight_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, input, weight);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetPreviousTime_Injected
double UnityEngine::Playables::PlayableHandle::GetPreviousTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetPreviousTime_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetPreviousTime_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetTraversalMode_Injected
void UnityEngine::Playables::PlayableHandle::SetTraversalMode_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::PlayableTraversalMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetTraversalMode_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "SetTraversalMode_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, mode);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetTimeWrapMode_Injected
UnityEngine::Playables::DirectorWrapMode UnityEngine::Playables::PlayableHandle::GetTimeWrapMode_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetTimeWrapMode_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetTimeWrapMode_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::DirectorWrapMode, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetTimeWrapMode_Injected
void UnityEngine::Playables::PlayableHandle::SetTimeWrapMode_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::DirectorWrapMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetTimeWrapMode_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "SetTimeWrapMode_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, mode);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetScriptInstance_Injected
::Il2CppObject* UnityEngine::Playables::PlayableHandle::GetScriptInstance_Injected(UnityEngine::Playables::PlayableHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetScriptInstance_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetScriptInstance_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetInputHandle_Injected
void UnityEngine::Playables::PlayableHandle::GetInputHandle_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int index, UnityEngine::Playables::PlayableHandle& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetInputHandle_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetInputHandle_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, index, ret);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.SetInputWeightFromIndex_Injected
void UnityEngine::Playables::PlayableHandle::SetInputWeightFromIndex_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int index, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::SetInputWeightFromIndex_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "SetInputWeightFromIndex_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, index, weight);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetInputWeightFromIndex_Injected
float UnityEngine::Playables::PlayableHandle::GetInputWeightFromIndex_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetInputWeightFromIndex_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "GetInputWeightFromIndex_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, index);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.Equals
bool UnityEngine::Playables::PlayableHandle::Equals(::Il2CppObject* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, p);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.GetHashCode
int UnityEngine::Playables::PlayableHandle::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableHandle.op_Equality
bool UnityEngine::Playables::operator ==(const UnityEngine::Playables::PlayableHandle& x, const UnityEngine::Playables::PlayableHandle& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableHandle", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x, y);
}
// Writing MetadataGetter for method: PlayableHandle::GetObject
// Il2CppName: GetObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableHandle::IsPlayableOfType
// Il2CppName: IsPlayableOfType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableHandle::get_Null
// Il2CppName: get_Null
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (*)()>(&PlayableHandle::get_Null)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetInput
// Il2CppName: GetInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (PlayableHandle::*)(int)>(&PlayableHandle::GetInput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetInputWeight
// Il2CppName: SetInputWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)(int, float)>(&PlayableHandle::SetInputWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetInputWeight
// Il2CppName: GetInputWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayableHandle::*)(int)>(&PlayableHandle::GetInputWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)(UnityEngine::Playables::PlayableHandle)>(&PlayableHandle::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::CompareVersion
// Il2CppName: CompareVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableHandle, UnityEngine::Playables::PlayableHandle)>(&PlayableHandle::CompareVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "CompareVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::CheckInputBounds
// Il2CppName: CheckInputBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)(int)>(&PlayableHandle::CheckInputBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "CheckInputBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::CheckInputBounds
// Il2CppName: CheckInputBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)(int, bool)>(&PlayableHandle::CheckInputBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "CheckInputBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)()>(&PlayableHandle::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetPlayableType
// Il2CppName: GetPlayableType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (PlayableHandle::*)()>(&PlayableHandle::GetPlayableType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPlayableType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetScriptInstance
// Il2CppName: SetScriptInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(::Il2CppObject*)>(&PlayableHandle::SetScriptInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetScriptInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetPlayState
// Il2CppName: GetPlayState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayState (PlayableHandle::*)()>(&PlayableHandle::GetPlayState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPlayState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)()>(&PlayableHandle::Play)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)()>(&PlayableHandle::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetSpeed
// Il2CppName: SetSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(double)>(&PlayableHandle::SetSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetTime
// Il2CppName: GetTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (PlayableHandle::*)()>(&PlayableHandle::GetTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetTime
// Il2CppName: SetTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(double)>(&PlayableHandle::SetTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::IsDone
// Il2CppName: IsDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)()>(&PlayableHandle::IsDone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "IsDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetDuration
// Il2CppName: GetDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (PlayableHandle::*)()>(&PlayableHandle::GetDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetDuration
// Il2CppName: SetDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(double)>(&PlayableHandle::SetDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetPropagateSetTime
// Il2CppName: SetPropagateSetTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(bool)>(&PlayableHandle::SetPropagateSetTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetPropagateSetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetGraph
// Il2CppName: GetGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableGraph (PlayableHandle::*)()>(&PlayableHandle::GetGraph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetInputCount
// Il2CppName: GetInputCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayableHandle::*)()>(&PlayableHandle::GetInputCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetInputCount
// Il2CppName: SetInputCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(int)>(&PlayableHandle::SetInputCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetInputWeight
// Il2CppName: SetInputWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(UnityEngine::Playables::PlayableHandle, float)>(&PlayableHandle::SetInputWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetPreviousTime
// Il2CppName: GetPreviousTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (PlayableHandle::*)()>(&PlayableHandle::GetPreviousTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPreviousTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetTraversalMode
// Il2CppName: SetTraversalMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(UnityEngine::Playables::PlayableTraversalMode)>(&PlayableHandle::SetTraversalMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTraversalMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableTraversalMode>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetTimeWrapMode
// Il2CppName: GetTimeWrapMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::DirectorWrapMode (PlayableHandle::*)()>(&PlayableHandle::GetTimeWrapMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetTimeWrapMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetTimeWrapMode
// Il2CppName: SetTimeWrapMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(UnityEngine::Playables::DirectorWrapMode)>(&PlayableHandle::SetTimeWrapMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTimeWrapMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::DirectorWrapMode>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetScriptInstance
// Il2CppName: GetScriptInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayableHandle::*)()>(&PlayableHandle::GetScriptInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetScriptInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetInputHandle
// Il2CppName: GetInputHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (PlayableHandle::*)(int)>(&PlayableHandle::GetInputHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetInputWeightFromIndex
// Il2CppName: SetInputWeightFromIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(int, float)>(&PlayableHandle::SetInputWeightFromIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputWeightFromIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetInputWeightFromIndex
// Il2CppName: GetInputWeightFromIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayableHandle::*)(int)>(&PlayableHandle::GetInputWeightFromIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputWeightFromIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayableHandle::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::IsValid_Injected
// Il2CppName: IsValid_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::IsValid_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "IsValid_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetPlayableType_Injected
// Il2CppName: GetPlayableType_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetPlayableType_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPlayableType_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetScriptInstance_Injected
// Il2CppName: SetScriptInstance_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, ::Il2CppObject*)>(&PlayableHandle::SetScriptInstance_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetScriptInstance_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetPlayState_Injected
// Il2CppName: GetPlayState_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayState (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetPlayState_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPlayState_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::Play_Injected
// Il2CppName: Play_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::Play_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Play_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::Pause_Injected
// Il2CppName: Pause_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::Pause_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Pause_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetSpeed_Injected
// Il2CppName: SetSpeed_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, double)>(&PlayableHandle::SetSpeed_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetSpeed_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetTime_Injected
// Il2CppName: GetTime_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetTime_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetTime_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetTime_Injected
// Il2CppName: SetTime_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, double)>(&PlayableHandle::SetTime_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTime_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::IsDone_Injected
// Il2CppName: IsDone_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::IsDone_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "IsDone_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetDuration_Injected
// Il2CppName: GetDuration_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetDuration_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetDuration_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetDuration_Injected
// Il2CppName: SetDuration_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, double)>(&PlayableHandle::SetDuration_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetDuration_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetPropagateSetTime_Injected
// Il2CppName: SetPropagateSetTime_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, bool)>(&PlayableHandle::SetPropagateSetTime_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetPropagateSetTime_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetGraph_Injected
// Il2CppName: GetGraph_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, UnityEngine::Playables::PlayableGraph&)>(&PlayableHandle::GetGraph_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetGraph_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetInputCount_Injected
// Il2CppName: GetInputCount_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetInputCount_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputCount_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetInputCount_Injected
// Il2CppName: SetInputCount_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, int)>(&PlayableHandle::SetInputCount_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputCount_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetInputWeight_Injected
// Il2CppName: SetInputWeight_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, UnityEngine::Playables::PlayableHandle&, float)>(&PlayableHandle::SetInputWeight_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputWeight_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetPreviousTime_Injected
// Il2CppName: GetPreviousTime_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetPreviousTime_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPreviousTime_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetTraversalMode_Injected
// Il2CppName: SetTraversalMode_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, UnityEngine::Playables::PlayableTraversalMode)>(&PlayableHandle::SetTraversalMode_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTraversalMode_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableTraversalMode>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetTimeWrapMode_Injected
// Il2CppName: GetTimeWrapMode_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::DirectorWrapMode (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetTimeWrapMode_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetTimeWrapMode_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetTimeWrapMode_Injected
// Il2CppName: SetTimeWrapMode_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, UnityEngine::Playables::DirectorWrapMode)>(&PlayableHandle::SetTimeWrapMode_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTimeWrapMode_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::DirectorWrapMode>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetScriptInstance_Injected
// Il2CppName: GetScriptInstance_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetScriptInstance_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetScriptInstance_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetInputHandle_Injected
// Il2CppName: GetInputHandle_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, int, UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetInputHandle_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputHandle_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::SetInputWeightFromIndex_Injected
// Il2CppName: SetInputWeightFromIndex_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, int, float)>(&PlayableHandle::SetInputWeightFromIndex_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputWeightFromIndex_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetInputWeightFromIndex_Injected
// Il2CppName: GetInputWeightFromIndex_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Playables::PlayableHandle&, int)>(&PlayableHandle::GetInputWeightFromIndex_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputWeightFromIndex_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)(::Il2CppObject*)>(&PlayableHandle::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PlayableHandle::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayableHandle::*)()>(&PlayableHandle::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableHandle::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Playables::PlayableHandle&, const UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.PlayableOutput
#include "UnityEngine/Playables/PlayableOutput.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Playables.PlayableOutput m_NullPlayableOutput
UnityEngine::Playables::PlayableOutput UnityEngine::Playables::PlayableOutput::_get_m_NullPlayableOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutput::_get_m_NullPlayableOutput");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::PlayableOutput>("UnityEngine.Playables", "PlayableOutput", "m_NullPlayableOutput"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Playables.PlayableOutput m_NullPlayableOutput
void UnityEngine::Playables::PlayableOutput::_set_m_NullPlayableOutput(UnityEngine::Playables::PlayableOutput value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutput::_set_m_NullPlayableOutput");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "PlayableOutput", "m_NullPlayableOutput", value));
}
// Autogenerated method: UnityEngine.Playables.PlayableOutput.get_Null
UnityEngine::Playables::PlayableOutput UnityEngine::Playables::PlayableOutput::get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutput::get_Null");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutput", "get_Null", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutput.GetHandle
UnityEngine::Playables::PlayableOutputHandle UnityEngine::Playables::PlayableOutput::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutput::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutputHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutput.Equals
bool UnityEngine::Playables::PlayableOutput::Equals(UnityEngine::Playables::PlayableOutput other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutput::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutput..cctor
void UnityEngine::Playables::PlayableOutput::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutput::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutput", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: PlayableOutput::get_Null
// Il2CppName: get_Null
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutput (*)()>(&PlayableOutput::get_Null)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutput), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableOutput::PlayableOutput
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableOutput::*)(UnityEngine::Playables::PlayableOutputHandle)>(&PlayableOutput::PlayableOutput<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutput), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableOutput::*)(UnityEngine::Playables::PlayableOutputHandle)>(&PlayableOutput::PlayableOutput<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutput), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>()});
  }
};
// Writing MetadataGetter for method: PlayableOutput::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutputHandle (PlayableOutput::*)()>(&PlayableOutput::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutput), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableOutput::IsPlayableOutputOfType
// Il2CppName: IsPlayableOutputOfType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableOutput::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableOutput::*)(UnityEngine::Playables::PlayableOutput)>(&PlayableOutput::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutput), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutput>()});
  }
};
// Writing MetadataGetter for method: PlayableOutput::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayableOutput::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutput), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.PlayableOutputExtensions
#include "UnityEngine/Playables/PlayableOutputExtensions.hpp"
// Including type: UnityEngine.Playables.IPlayableOutput
#include "UnityEngine/Playables/IPlayableOutput.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
// Including type: UnityEngine.Playables.INotificationReceiver
#include "UnityEngine/Playables/INotificationReceiver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayableOutputExtensions::SetReferenceObject
// Il2CppName: SetReferenceObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableOutputExtensions::SetUserData
// Il2CppName: SetUserData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableOutputExtensions::GetSourcePlayable
// Il2CppName: GetSourcePlayable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableOutputExtensions::SetSourcePlayable
// Il2CppName: SetSourcePlayable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableOutputExtensions::GetSourceOutputPort
// Il2CppName: GetSourceOutputPort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableOutputExtensions::SetWeight
// Il2CppName: SetWeight
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableOutputExtensions::PushNotification
// Il2CppName: PushNotification
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableOutputExtensions::AddNotificationReceiver
// Il2CppName: AddNotificationReceiver
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.PlayableOutputHandle
#include "UnityEngine/Playables/PlayableOutputHandle.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Playables.PlayableHandle
#include "UnityEngine/Playables/PlayableHandle.hpp"
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
// Including type: UnityEngine.Playables.INotificationReceiver
#include "UnityEngine/Playables/INotificationReceiver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Playables.PlayableOutputHandle m_Null
UnityEngine::Playables::PlayableOutputHandle UnityEngine::Playables::PlayableOutputHandle::_get_m_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::_get_m_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Playables::PlayableOutputHandle>("UnityEngine.Playables", "PlayableOutputHandle", "m_Null"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Playables.PlayableOutputHandle m_Null
void UnityEngine::Playables::PlayableOutputHandle::_set_m_Null(UnityEngine::Playables::PlayableOutputHandle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::_set_m_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Playables", "PlayableOutputHandle", "m_Null", value));
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.get_Null
UnityEngine::Playables::PlayableOutputHandle UnityEngine::Playables::PlayableOutputHandle::get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::get_Null");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "get_Null", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutputHandle, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.Equals
bool UnityEngine::Playables::PlayableOutputHandle::Equals(UnityEngine::Playables::PlayableOutputHandle other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.CompareVersion
bool UnityEngine::Playables::PlayableOutputHandle::CompareVersion(UnityEngine::Playables::PlayableOutputHandle lhs, UnityEngine::Playables::PlayableOutputHandle rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::CompareVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "CompareVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.IsValid
bool UnityEngine::Playables::PlayableOutputHandle::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.GetPlayableOutputType
System::Type* UnityEngine::Playables::PlayableOutputHandle::GetPlayableOutputType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::GetPlayableOutputType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetPlayableOutputType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.SetReferenceObject
void UnityEngine::Playables::PlayableOutputHandle::SetReferenceObject(UnityEngine::Object* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::SetReferenceObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetReferenceObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, target);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.SetUserData
void UnityEngine::Playables::PlayableOutputHandle::SetUserData(UnityEngine::Object* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::SetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, target);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.GetSourcePlayable
UnityEngine::Playables::PlayableHandle UnityEngine::Playables::PlayableOutputHandle::GetSourcePlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::GetSourcePlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSourcePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.SetSourcePlayable
void UnityEngine::Playables::PlayableOutputHandle::SetSourcePlayable(UnityEngine::Playables::PlayableHandle target, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::SetSourcePlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetSourcePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(port)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, target, port);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.GetSourceOutputPort
int UnityEngine::Playables::PlayableOutputHandle::GetSourceOutputPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::GetSourceOutputPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSourceOutputPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.SetWeight
void UnityEngine::Playables::PlayableOutputHandle::SetWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::SetWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, weight);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.PushNotification
void UnityEngine::Playables::PlayableOutputHandle::PushNotification(UnityEngine::Playables::PlayableHandle origin, UnityEngine::Playables::INotification* notification, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::PushNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "PushNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(notification), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, origin, notification, context);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.AddNotificationReceiver
void UnityEngine::Playables::PlayableOutputHandle::AddNotificationReceiver(UnityEngine::Playables::INotificationReceiver* receiver) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::AddNotificationReceiver");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AddNotificationReceiver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(receiver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, receiver);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle..cctor
void UnityEngine::Playables::PlayableOutputHandle::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.IsValid_Injected
bool UnityEngine::Playables::PlayableOutputHandle::IsValid_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::IsValid_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "IsValid_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.GetPlayableOutputType_Injected
System::Type* UnityEngine::Playables::PlayableOutputHandle::GetPlayableOutputType_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::GetPlayableOutputType_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "GetPlayableOutputType_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.SetReferenceObject_Injected
void UnityEngine::Playables::PlayableOutputHandle::SetReferenceObject_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Object* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::SetReferenceObject_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "SetReferenceObject_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, target);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.SetUserData_Injected
void UnityEngine::Playables::PlayableOutputHandle::SetUserData_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Object* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::SetUserData_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "SetUserData_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, target);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.GetSourcePlayable_Injected
void UnityEngine::Playables::PlayableOutputHandle::GetSourcePlayable_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Playables::PlayableHandle& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::GetSourcePlayable_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "GetSourcePlayable_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, ret);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.SetSourcePlayable_Injected
void UnityEngine::Playables::PlayableOutputHandle::SetSourcePlayable_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Playables::PlayableHandle& target, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::SetSourcePlayable_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "SetSourcePlayable_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(port)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, target, port);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.GetSourceOutputPort_Injected
int UnityEngine::Playables::PlayableOutputHandle::GetSourceOutputPort_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::GetSourceOutputPort_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "GetSourceOutputPort_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.SetWeight_Injected
void UnityEngine::Playables::PlayableOutputHandle::SetWeight_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::SetWeight_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "SetWeight_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, weight);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.PushNotification_Injected
void UnityEngine::Playables::PlayableOutputHandle::PushNotification_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Playables::PlayableHandle& origin, UnityEngine::Playables::INotification* notification, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::PushNotification_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "PushNotification_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(notification), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, origin, notification, context);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.AddNotificationReceiver_Injected
void UnityEngine::Playables::PlayableOutputHandle::AddNotificationReceiver_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Playables::INotificationReceiver* receiver) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::AddNotificationReceiver_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "AddNotificationReceiver_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractType(receiver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, receiver);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.GetHashCode
int UnityEngine::Playables::PlayableOutputHandle::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.Equals
bool UnityEngine::Playables::PlayableOutputHandle::Equals(::Il2CppObject* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, p);
}
// Autogenerated method: UnityEngine.Playables.PlayableOutputHandle.op_Equality
bool UnityEngine::Playables::operator ==(const UnityEngine::Playables::PlayableOutputHandle& lhs, const UnityEngine::Playables::PlayableOutputHandle& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "PlayableOutputHandle", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Writing MetadataGetter for method: PlayableOutputHandle::get_Null
// Il2CppName: get_Null
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutputHandle (*)()>(&PlayableOutputHandle::get_Null)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::IsPlayableOutputOfType
// Il2CppName: IsPlayableOutputOfType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayableOutputHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableOutputHandle::*)(UnityEngine::Playables::PlayableOutputHandle)>(&PlayableOutputHandle::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::CompareVersion
// Il2CppName: CompareVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableOutputHandle, UnityEngine::Playables::PlayableOutputHandle)>(&PlayableOutputHandle::CompareVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "CompareVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableOutputHandle::*)()>(&PlayableOutputHandle::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::GetPlayableOutputType
// Il2CppName: GetPlayableOutputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (PlayableOutputHandle::*)()>(&PlayableOutputHandle::GetPlayableOutputType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "GetPlayableOutputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::SetReferenceObject
// Il2CppName: SetReferenceObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableOutputHandle::*)(UnityEngine::Object*)>(&PlayableOutputHandle::SetReferenceObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "SetReferenceObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::SetUserData
// Il2CppName: SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableOutputHandle::*)(UnityEngine::Object*)>(&PlayableOutputHandle::SetUserData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::GetSourcePlayable
// Il2CppName: GetSourcePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (PlayableOutputHandle::*)()>(&PlayableOutputHandle::GetSourcePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "GetSourcePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::SetSourcePlayable
// Il2CppName: SetSourcePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableOutputHandle::*)(UnityEngine::Playables::PlayableHandle, int)>(&PlayableOutputHandle::SetSourcePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "SetSourcePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::GetSourceOutputPort
// Il2CppName: GetSourceOutputPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayableOutputHandle::*)()>(&PlayableOutputHandle::GetSourceOutputPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "GetSourceOutputPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::SetWeight
// Il2CppName: SetWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableOutputHandle::*)(float)>(&PlayableOutputHandle::SetWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "SetWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::PushNotification
// Il2CppName: PushNotification
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableOutputHandle::*)(UnityEngine::Playables::PlayableHandle, UnityEngine::Playables::INotification*, ::Il2CppObject*)>(&PlayableOutputHandle::PushNotification)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "PushNotification", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::INotification*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::AddNotificationReceiver
// Il2CppName: AddNotificationReceiver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableOutputHandle::*)(UnityEngine::Playables::INotificationReceiver*)>(&PlayableOutputHandle::AddNotificationReceiver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "AddNotificationReceiver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::INotificationReceiver*>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayableOutputHandle::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::IsValid_Injected
// Il2CppName: IsValid_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableOutputHandle&)>(&PlayableOutputHandle::IsValid_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "IsValid_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::GetPlayableOutputType_Injected
// Il2CppName: GetPlayableOutputType_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(UnityEngine::Playables::PlayableOutputHandle&)>(&PlayableOutputHandle::GetPlayableOutputType_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "GetPlayableOutputType_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::SetReferenceObject_Injected
// Il2CppName: SetReferenceObject_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableOutputHandle&, UnityEngine::Object*)>(&PlayableOutputHandle::SetReferenceObject_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "SetReferenceObject_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::SetUserData_Injected
// Il2CppName: SetUserData_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableOutputHandle&, UnityEngine::Object*)>(&PlayableOutputHandle::SetUserData_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "SetUserData_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::GetSourcePlayable_Injected
// Il2CppName: GetSourcePlayable_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableOutputHandle&, UnityEngine::Playables::PlayableHandle&)>(&PlayableOutputHandle::GetSourcePlayable_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "GetSourcePlayable_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::SetSourcePlayable_Injected
// Il2CppName: SetSourcePlayable_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableOutputHandle&, UnityEngine::Playables::PlayableHandle&, int)>(&PlayableOutputHandle::SetSourcePlayable_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "SetSourcePlayable_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::GetSourceOutputPort_Injected
// Il2CppName: GetSourceOutputPort_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::Playables::PlayableOutputHandle&)>(&PlayableOutputHandle::GetSourceOutputPort_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "GetSourceOutputPort_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::SetWeight_Injected
// Il2CppName: SetWeight_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableOutputHandle&, float)>(&PlayableOutputHandle::SetWeight_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "SetWeight_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::PushNotification_Injected
// Il2CppName: PushNotification_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableOutputHandle&, UnityEngine::Playables::PlayableHandle&, UnityEngine::Playables::INotification*, ::Il2CppObject*)>(&PlayableOutputHandle::PushNotification_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "PushNotification_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::INotification*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::AddNotificationReceiver_Injected
// Il2CppName: AddNotificationReceiver_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableOutputHandle&, UnityEngine::Playables::INotificationReceiver*)>(&PlayableOutputHandle::AddNotificationReceiver_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "AddNotificationReceiver_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::INotificationReceiver*>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayableOutputHandle::*)()>(&PlayableOutputHandle::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableOutputHandle::*)(::Il2CppObject*)>(&PlayableOutputHandle::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PlayableOutputHandle::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Playables::PlayableOutputHandle&, const UnityEngine::Playables::PlayableOutputHandle&)>(&PlayableOutputHandle::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableOutputHandle), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Playables::PlayableOutputHandle&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Playables::PlayableOutputHandle&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.ScriptPlayableBinding
#include "UnityEngine/Playables/ScriptPlayableBinding.hpp"
// Including type: UnityEngine.Playables.PlayableBinding
#include "UnityEngine/Playables/PlayableBinding.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Playables.PlayableOutput
#include "UnityEngine/Playables/PlayableOutput.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.ScriptPlayableBinding.Create
UnityEngine::Playables::PlayableBinding UnityEngine::Playables::ScriptPlayableBinding::Create(::Il2CppString* name, UnityEngine::Object* key, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::ScriptPlayableBinding::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "ScriptPlayableBinding", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableBinding, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, key, type);
}
// Autogenerated method: UnityEngine.Playables.ScriptPlayableBinding.CreateScriptOutput
UnityEngine::Playables::PlayableOutput UnityEngine::Playables::ScriptPlayableBinding::CreateScriptOutput(UnityEngine::Playables::PlayableGraph graph, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::ScriptPlayableBinding::CreateScriptOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "ScriptPlayableBinding", "CreateScriptOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, name);
}
// Writing MetadataGetter for method: ScriptPlayableBinding::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableBinding (*)(::Il2CppString*, UnityEngine::Object*, System::Type*)>(&ScriptPlayableBinding::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptPlayableBinding*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ScriptPlayableBinding::CreateScriptOutput
// Il2CppName: CreateScriptOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutput (*)(UnityEngine::Playables::PlayableGraph, ::Il2CppString*)>(&ScriptPlayableBinding::CreateScriptOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptPlayableBinding*), "CreateScriptOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.ScriptPlayableOutput
#include "UnityEngine/Playables/ScriptPlayableOutput.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.PlayableOutput
#include "UnityEngine/Playables/PlayableOutput.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.ScriptPlayableOutput.Create
UnityEngine::Playables::ScriptPlayableOutput UnityEngine::Playables::ScriptPlayableOutput::Create(UnityEngine::Playables::PlayableGraph graph, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::ScriptPlayableOutput::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "ScriptPlayableOutput", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::ScriptPlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, name);
}
// Autogenerated method: UnityEngine.Playables.ScriptPlayableOutput.get_Null
UnityEngine::Playables::ScriptPlayableOutput UnityEngine::Playables::ScriptPlayableOutput::get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::ScriptPlayableOutput::get_Null");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Playables", "ScriptPlayableOutput", "get_Null", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::ScriptPlayableOutput, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.ScriptPlayableOutput.GetHandle
UnityEngine::Playables::PlayableOutputHandle UnityEngine::Playables::ScriptPlayableOutput::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::ScriptPlayableOutput::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableOutputHandle, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: ScriptPlayableOutput::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::ScriptPlayableOutput (*)(UnityEngine::Playables::PlayableGraph, ::Il2CppString*)>(&ScriptPlayableOutput::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptPlayableOutput), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ScriptPlayableOutput::ScriptPlayableOutput
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptPlayableOutput::*)(UnityEngine::Playables::PlayableOutputHandle)>(&ScriptPlayableOutput::ScriptPlayableOutput<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptPlayableOutput), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptPlayableOutput::*)(UnityEngine::Playables::PlayableOutputHandle)>(&ScriptPlayableOutput::ScriptPlayableOutput<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptPlayableOutput), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableOutputHandle>()});
  }
};
// Writing MetadataGetter for method: ScriptPlayableOutput::get_Null
// Il2CppName: get_Null
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::ScriptPlayableOutput (*)()>(&ScriptPlayableOutput::get_Null)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptPlayableOutput), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScriptPlayableOutput::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableOutputHandle (ScriptPlayableOutput::*)()>(&ScriptPlayableOutput::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptPlayableOutput), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.GlobalIllumination.LightType
#include "UnityEngine/Experimental/GlobalIllumination/LightType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightType Directional
UnityEngine::Experimental::GlobalIllumination::LightType UnityEngine::Experimental::GlobalIllumination::LightType::_get_Directional() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_get_Directional");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightType>("UnityEngine.Experimental.GlobalIllumination", "LightType", "Directional"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightType Directional
void UnityEngine::Experimental::GlobalIllumination::LightType::_set_Directional(UnityEngine::Experimental::GlobalIllumination::LightType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_set_Directional");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightType", "Directional", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightType Point
UnityEngine::Experimental::GlobalIllumination::LightType UnityEngine::Experimental::GlobalIllumination::LightType::_get_Point() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_get_Point");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightType>("UnityEngine.Experimental.GlobalIllumination", "LightType", "Point"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightType Point
void UnityEngine::Experimental::GlobalIllumination::LightType::_set_Point(UnityEngine::Experimental::GlobalIllumination::LightType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_set_Point");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightType", "Point", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightType Spot
UnityEngine::Experimental::GlobalIllumination::LightType UnityEngine::Experimental::GlobalIllumination::LightType::_get_Spot() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_get_Spot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightType>("UnityEngine.Experimental.GlobalIllumination", "LightType", "Spot"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightType Spot
void UnityEngine::Experimental::GlobalIllumination::LightType::_set_Spot(UnityEngine::Experimental::GlobalIllumination::LightType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_set_Spot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightType", "Spot", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightType Rectangle
UnityEngine::Experimental::GlobalIllumination::LightType UnityEngine::Experimental::GlobalIllumination::LightType::_get_Rectangle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_get_Rectangle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightType>("UnityEngine.Experimental.GlobalIllumination", "LightType", "Rectangle"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightType Rectangle
void UnityEngine::Experimental::GlobalIllumination::LightType::_set_Rectangle(UnityEngine::Experimental::GlobalIllumination::LightType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_set_Rectangle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightType", "Rectangle", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightType Disc
UnityEngine::Experimental::GlobalIllumination::LightType UnityEngine::Experimental::GlobalIllumination::LightType::_get_Disc() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_get_Disc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightType>("UnityEngine.Experimental.GlobalIllumination", "LightType", "Disc"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightType Disc
void UnityEngine::Experimental::GlobalIllumination::LightType::_set_Disc(UnityEngine::Experimental::GlobalIllumination::LightType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_set_Disc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightType", "Disc", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightType SpotPyramidShape
UnityEngine::Experimental::GlobalIllumination::LightType UnityEngine::Experimental::GlobalIllumination::LightType::_get_SpotPyramidShape() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_get_SpotPyramidShape");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightType>("UnityEngine.Experimental.GlobalIllumination", "LightType", "SpotPyramidShape"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightType SpotPyramidShape
void UnityEngine::Experimental::GlobalIllumination::LightType::_set_SpotPyramidShape(UnityEngine::Experimental::GlobalIllumination::LightType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_set_SpotPyramidShape");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightType", "SpotPyramidShape", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightType SpotBoxShape
UnityEngine::Experimental::GlobalIllumination::LightType UnityEngine::Experimental::GlobalIllumination::LightType::_get_SpotBoxShape() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_get_SpotBoxShape");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightType>("UnityEngine.Experimental.GlobalIllumination", "LightType", "SpotBoxShape"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightType SpotBoxShape
void UnityEngine::Experimental::GlobalIllumination::LightType::_set_SpotBoxShape(UnityEngine::Experimental::GlobalIllumination::LightType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightType::_set_SpotBoxShape");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightType", "SpotBoxShape", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.GlobalIllumination.LightMode
#include "UnityEngine/Experimental/GlobalIllumination/LightMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightMode Realtime
UnityEngine::Experimental::GlobalIllumination::LightMode UnityEngine::Experimental::GlobalIllumination::LightMode::_get_Realtime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightMode::_get_Realtime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightMode>("UnityEngine.Experimental.GlobalIllumination", "LightMode", "Realtime"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightMode Realtime
void UnityEngine::Experimental::GlobalIllumination::LightMode::_set_Realtime(UnityEngine::Experimental::GlobalIllumination::LightMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightMode::_set_Realtime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightMode", "Realtime", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightMode Mixed
UnityEngine::Experimental::GlobalIllumination::LightMode UnityEngine::Experimental::GlobalIllumination::LightMode::_get_Mixed() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightMode::_get_Mixed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightMode>("UnityEngine.Experimental.GlobalIllumination", "LightMode", "Mixed"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightMode Mixed
void UnityEngine::Experimental::GlobalIllumination::LightMode::_set_Mixed(UnityEngine::Experimental::GlobalIllumination::LightMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightMode::_set_Mixed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightMode", "Mixed", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightMode Baked
UnityEngine::Experimental::GlobalIllumination::LightMode UnityEngine::Experimental::GlobalIllumination::LightMode::_get_Baked() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightMode::_get_Baked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightMode>("UnityEngine.Experimental.GlobalIllumination", "LightMode", "Baked"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightMode Baked
void UnityEngine::Experimental::GlobalIllumination::LightMode::_set_Baked(UnityEngine::Experimental::GlobalIllumination::LightMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightMode::_set_Baked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightMode", "Baked", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.LightMode Unknown
UnityEngine::Experimental::GlobalIllumination::LightMode UnityEngine::Experimental::GlobalIllumination::LightMode::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightMode::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::LightMode>("UnityEngine.Experimental.GlobalIllumination", "LightMode", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.LightMode Unknown
void UnityEngine::Experimental::GlobalIllumination::LightMode::_set_Unknown(UnityEngine::Experimental::GlobalIllumination::LightMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightMode::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "LightMode", "Unknown", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.GlobalIllumination.FalloffType
#include "UnityEngine/Experimental/GlobalIllumination/FalloffType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.FalloffType InverseSquared
UnityEngine::Experimental::GlobalIllumination::FalloffType UnityEngine::Experimental::GlobalIllumination::FalloffType::_get_InverseSquared() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::FalloffType::_get_InverseSquared");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::FalloffType>("UnityEngine.Experimental.GlobalIllumination", "FalloffType", "InverseSquared"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.FalloffType InverseSquared
void UnityEngine::Experimental::GlobalIllumination::FalloffType::_set_InverseSquared(UnityEngine::Experimental::GlobalIllumination::FalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::FalloffType::_set_InverseSquared");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "FalloffType", "InverseSquared", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.FalloffType InverseSquaredNoRangeAttenuation
UnityEngine::Experimental::GlobalIllumination::FalloffType UnityEngine::Experimental::GlobalIllumination::FalloffType::_get_InverseSquaredNoRangeAttenuation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::FalloffType::_get_InverseSquaredNoRangeAttenuation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::FalloffType>("UnityEngine.Experimental.GlobalIllumination", "FalloffType", "InverseSquaredNoRangeAttenuation"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.FalloffType InverseSquaredNoRangeAttenuation
void UnityEngine::Experimental::GlobalIllumination::FalloffType::_set_InverseSquaredNoRangeAttenuation(UnityEngine::Experimental::GlobalIllumination::FalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::FalloffType::_set_InverseSquaredNoRangeAttenuation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "FalloffType", "InverseSquaredNoRangeAttenuation", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.FalloffType Linear
UnityEngine::Experimental::GlobalIllumination::FalloffType UnityEngine::Experimental::GlobalIllumination::FalloffType::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::FalloffType::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::FalloffType>("UnityEngine.Experimental.GlobalIllumination", "FalloffType", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.FalloffType Linear
void UnityEngine::Experimental::GlobalIllumination::FalloffType::_set_Linear(UnityEngine::Experimental::GlobalIllumination::FalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::FalloffType::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "FalloffType", "Linear", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.FalloffType Legacy
UnityEngine::Experimental::GlobalIllumination::FalloffType UnityEngine::Experimental::GlobalIllumination::FalloffType::_get_Legacy() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::FalloffType::_get_Legacy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::FalloffType>("UnityEngine.Experimental.GlobalIllumination", "FalloffType", "Legacy"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.FalloffType Legacy
void UnityEngine::Experimental::GlobalIllumination::FalloffType::_set_Legacy(UnityEngine::Experimental::GlobalIllumination::FalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::FalloffType::_set_Legacy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "FalloffType", "Legacy", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.FalloffType Undefined
UnityEngine::Experimental::GlobalIllumination::FalloffType UnityEngine::Experimental::GlobalIllumination::FalloffType::_get_Undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::FalloffType::_get_Undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::FalloffType>("UnityEngine.Experimental.GlobalIllumination", "FalloffType", "Undefined"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.FalloffType Undefined
void UnityEngine::Experimental::GlobalIllumination::FalloffType::_set_Undefined(UnityEngine::Experimental::GlobalIllumination::FalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::FalloffType::_set_Undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "FalloffType", "Undefined", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.GlobalIllumination.AngularFalloffType
#include "UnityEngine/Experimental/GlobalIllumination/AngularFalloffType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.AngularFalloffType LUT
UnityEngine::Experimental::GlobalIllumination::AngularFalloffType UnityEngine::Experimental::GlobalIllumination::AngularFalloffType::_get_LUT() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::AngularFalloffType::_get_LUT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::AngularFalloffType>("UnityEngine.Experimental.GlobalIllumination", "AngularFalloffType", "LUT"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.AngularFalloffType LUT
void UnityEngine::Experimental::GlobalIllumination::AngularFalloffType::_set_LUT(UnityEngine::Experimental::GlobalIllumination::AngularFalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::AngularFalloffType::_set_LUT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "AngularFalloffType", "LUT", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Experimental.GlobalIllumination.AngularFalloffType AnalyticAndInnerAngle
UnityEngine::Experimental::GlobalIllumination::AngularFalloffType UnityEngine::Experimental::GlobalIllumination::AngularFalloffType::_get_AnalyticAndInnerAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::AngularFalloffType::_get_AnalyticAndInnerAngle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::AngularFalloffType>("UnityEngine.Experimental.GlobalIllumination", "AngularFalloffType", "AnalyticAndInnerAngle"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Experimental.GlobalIllumination.AngularFalloffType AnalyticAndInnerAngle
void UnityEngine::Experimental::GlobalIllumination::AngularFalloffType::_set_AnalyticAndInnerAngle(UnityEngine::Experimental::GlobalIllumination::AngularFalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::AngularFalloffType::_set_AnalyticAndInnerAngle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "AngularFalloffType", "AnalyticAndInnerAngle", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.GlobalIllumination.LinearColor
#include "UnityEngine/Experimental/GlobalIllumination/LinearColor.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LinearColor.Convert
UnityEngine::Experimental::GlobalIllumination::LinearColor UnityEngine::Experimental::GlobalIllumination::LinearColor::Convert(UnityEngine::Color color, float intensity) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LinearColor::Convert");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "LinearColor", "Convert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(intensity)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Experimental::GlobalIllumination::LinearColor, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, intensity);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LinearColor.Black
UnityEngine::Experimental::GlobalIllumination::LinearColor UnityEngine::Experimental::GlobalIllumination::LinearColor::Black() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LinearColor::Black");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "LinearColor", "Black", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Experimental::GlobalIllumination::LinearColor, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: LinearColor::Convert
// Il2CppName: Convert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Experimental::GlobalIllumination::LinearColor (*)(UnityEngine::Color, float)>(&LinearColor::Convert)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LinearColor), "Convert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LinearColor::Black
// Il2CppName: Black
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Experimental::GlobalIllumination::LinearColor (*)()>(&LinearColor::Black)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LinearColor), "Black", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.GlobalIllumination.LightDataGI
#include "UnityEngine/Experimental/GlobalIllumination/LightDataGI.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.DirectionalLight
#include "UnityEngine/Experimental/GlobalIllumination/DirectionalLight.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.PointLight
#include "UnityEngine/Experimental/GlobalIllumination/PointLight.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.SpotLight
#include "UnityEngine/Experimental/GlobalIllumination/SpotLight.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.RectangleLight
#include "UnityEngine/Experimental/GlobalIllumination/RectangleLight.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.DiscLight
#include "UnityEngine/Experimental/GlobalIllumination/DiscLight.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init
void UnityEngine::Experimental::GlobalIllumination::LightDataGI::Init(UnityEngine::Experimental::GlobalIllumination::DirectionalLight& light) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightDataGI::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(light)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, light);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init
void UnityEngine::Experimental::GlobalIllumination::LightDataGI::Init(UnityEngine::Experimental::GlobalIllumination::PointLight& light) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightDataGI::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(light)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, light);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init
void UnityEngine::Experimental::GlobalIllumination::LightDataGI::Init(UnityEngine::Experimental::GlobalIllumination::SpotLight& light) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightDataGI::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(light)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, light);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init
void UnityEngine::Experimental::GlobalIllumination::LightDataGI::Init(UnityEngine::Experimental::GlobalIllumination::RectangleLight& light) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightDataGI::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(light)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, light);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init
void UnityEngine::Experimental::GlobalIllumination::LightDataGI::Init(UnityEngine::Experimental::GlobalIllumination::DiscLight& light) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightDataGI::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(light)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, light);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightDataGI.InitNoBake
void UnityEngine::Experimental::GlobalIllumination::LightDataGI::InitNoBake(int lightInstanceID) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightDataGI::InitNoBake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitNoBake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightInstanceID)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, lightInstanceID);
}
// Writing MetadataGetter for method: LightDataGI::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightDataGI::*)(UnityEngine::Experimental::GlobalIllumination::DirectionalLight&)>(&LightDataGI::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightDataGI), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::DirectionalLight&>()});
  }
};
// Writing MetadataGetter for method: LightDataGI::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightDataGI::*)(UnityEngine::Experimental::GlobalIllumination::PointLight&)>(&LightDataGI::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightDataGI), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::PointLight&>()});
  }
};
// Writing MetadataGetter for method: LightDataGI::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightDataGI::*)(UnityEngine::Experimental::GlobalIllumination::SpotLight&)>(&LightDataGI::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightDataGI), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::SpotLight&>()});
  }
};
// Writing MetadataGetter for method: LightDataGI::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightDataGI::*)(UnityEngine::Experimental::GlobalIllumination::RectangleLight&)>(&LightDataGI::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightDataGI), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::RectangleLight&>()});
  }
};
// Writing MetadataGetter for method: LightDataGI::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightDataGI::*)(UnityEngine::Experimental::GlobalIllumination::DiscLight&)>(&LightDataGI::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightDataGI), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::DiscLight&>()});
  }
};
// Writing MetadataGetter for method: LightDataGI::InitNoBake
// Il2CppName: InitNoBake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightDataGI::*)(int)>(&LightDataGI::InitNoBake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightDataGI), "InitNoBake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.GlobalIllumination.LightmapperUtils
#include "UnityEngine/Experimental/GlobalIllumination/LightmapperUtils.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.LinearColor
#include "UnityEngine/Experimental/GlobalIllumination/LinearColor.hpp"
// Including type: UnityEngine.Light
#include "UnityEngine/Light.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.DirectionalLight
#include "UnityEngine/Experimental/GlobalIllumination/DirectionalLight.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.PointLight
#include "UnityEngine/Experimental/GlobalIllumination/PointLight.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.SpotLight
#include "UnityEngine/Experimental/GlobalIllumination/SpotLight.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.RectangleLight
#include "UnityEngine/Experimental/GlobalIllumination/RectangleLight.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.DiscLight
#include "UnityEngine/Experimental/GlobalIllumination/DiscLight.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.ExtractIndirect
UnityEngine::Experimental::GlobalIllumination::LinearColor UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::ExtractIndirect(UnityEngine::Light* l) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::ExtractIndirect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "LightmapperUtils", "ExtractIndirect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Experimental::GlobalIllumination::LinearColor, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.ExtractInnerCone
float UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::ExtractInnerCone(UnityEngine::Light* l) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::ExtractInnerCone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "LightmapperUtils", "ExtractInnerCone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.Extract
void UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::Extract(UnityEngine::Light* l, UnityEngine::Experimental::GlobalIllumination::DirectionalLight& dir) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::Extract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "LightmapperUtils", "Extract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l), ::il2cpp_utils::ExtractType(dir)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l, dir);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.Extract
void UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::Extract(UnityEngine::Light* l, UnityEngine::Experimental::GlobalIllumination::PointLight& point) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::Extract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "LightmapperUtils", "Extract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l, point);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.Extract
void UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::Extract(UnityEngine::Light* l, UnityEngine::Experimental::GlobalIllumination::SpotLight& spot) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::Extract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "LightmapperUtils", "Extract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l), ::il2cpp_utils::ExtractType(spot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l, spot);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.Extract
void UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::Extract(UnityEngine::Light* l, UnityEngine::Experimental::GlobalIllumination::RectangleLight& rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::Extract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "LightmapperUtils", "Extract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l), ::il2cpp_utils::ExtractType(rect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l, rect);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.Extract
void UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::Extract(UnityEngine::Light* l, UnityEngine::Experimental::GlobalIllumination::DiscLight& disc) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::LightmapperUtils::Extract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "LightmapperUtils", "Extract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l), ::il2cpp_utils::ExtractType(disc)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l, disc);
}
// Writing MetadataGetter for method: LightmapperUtils::ExtractIndirect
// Il2CppName: ExtractIndirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Experimental::GlobalIllumination::LinearColor (*)(UnityEngine::Light*)>(&LightmapperUtils::ExtractIndirect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapperUtils*), "ExtractIndirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Light*>()});
  }
};
// Writing MetadataGetter for method: LightmapperUtils::ExtractInnerCone
// Il2CppName: ExtractInnerCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Light*)>(&LightmapperUtils::ExtractInnerCone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapperUtils*), "ExtractInnerCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Light*>()});
  }
};
// Writing MetadataGetter for method: LightmapperUtils::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Light*, UnityEngine::Experimental::GlobalIllumination::DirectionalLight&)>(&LightmapperUtils::Extract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapperUtils*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Light*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::DirectionalLight&>()});
  }
};
// Writing MetadataGetter for method: LightmapperUtils::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Light*, UnityEngine::Experimental::GlobalIllumination::PointLight&)>(&LightmapperUtils::Extract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapperUtils*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Light*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::PointLight&>()});
  }
};
// Writing MetadataGetter for method: LightmapperUtils::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Light*, UnityEngine::Experimental::GlobalIllumination::SpotLight&)>(&LightmapperUtils::Extract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapperUtils*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Light*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::SpotLight&>()});
  }
};
// Writing MetadataGetter for method: LightmapperUtils::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Light*, UnityEngine::Experimental::GlobalIllumination::RectangleLight&)>(&LightmapperUtils::Extract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapperUtils*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Light*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::RectangleLight&>()});
  }
};
// Writing MetadataGetter for method: LightmapperUtils::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Light*, UnityEngine::Experimental::GlobalIllumination::DiscLight&)>(&LightmapperUtils::Extract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapperUtils*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Light*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::DiscLight&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Experimental.GlobalIllumination.Lightmapping
#include "UnityEngine/Experimental/GlobalIllumination/Lightmapping.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate
#include "UnityEngine/Experimental/GlobalIllumination/Lightmapping_RequestLightsDelegate.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.Lightmapping/<>c
#include "UnityEngine/Experimental/GlobalIllumination/Lightmapping_--c.hpp"
// Including type: UnityEngine.Light
#include "UnityEngine/Light.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [RequiredByNativeCodeAttribute] Offset: 0xD9508C
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate s_DefaultDelegate
UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate* UnityEngine::Experimental::GlobalIllumination::Lightmapping::_get_s_DefaultDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::_get_s_DefaultDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate*>("UnityEngine.Experimental.GlobalIllumination", "Lightmapping", "s_DefaultDelegate"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate s_DefaultDelegate
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::_set_s_DefaultDelegate(UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::_set_s_DefaultDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "Lightmapping", "s_DefaultDelegate", value));
}
// [RequiredByNativeCodeAttribute] Offset: 0xD9509C
// Autogenerated static field getter
// Get static field: static private UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate s_RequestLightsDelegate
UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate* UnityEngine::Experimental::GlobalIllumination::Lightmapping::_get_s_RequestLightsDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::_get_s_RequestLightsDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate*>("UnityEngine.Experimental.GlobalIllumination", "Lightmapping", "s_RequestLightsDelegate"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate s_RequestLightsDelegate
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::_set_s_RequestLightsDelegate(UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::_set_s_RequestLightsDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "Lightmapping", "s_RequestLightsDelegate", value));
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.Lightmapping.SetDelegate
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::SetDelegate(UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate* del) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::SetDelegate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "Lightmapping", "SetDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(del)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, del);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.Lightmapping.GetDelegate
UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate* UnityEngine::Experimental::GlobalIllumination::Lightmapping::GetDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::GetDelegate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "Lightmapping", "GetDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.Lightmapping.ResetDelegate
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::ResetDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::ResetDelegate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "Lightmapping", "ResetDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.Lightmapping.RequestLights
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLights(::Array<UnityEngine::Light*>* lights, System::IntPtr outLightsPtr, int outLightsCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "Lightmapping", "RequestLights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lights), ::il2cpp_utils::ExtractType(outLightsPtr), ::il2cpp_utils::ExtractType(outLightsCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lights, outLightsPtr, outLightsCount);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.Lightmapping..cctor
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "Lightmapping", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Lightmapping::SetDelegate
// Il2CppName: SetDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate*)>(&Lightmapping::SetDelegate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping*), "SetDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate*>()});
  }
};
// Writing MetadataGetter for method: Lightmapping::GetDelegate
// Il2CppName: GetDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate* (*)()>(&Lightmapping::GetDelegate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping*), "GetDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Lightmapping::ResetDelegate
// Il2CppName: ResetDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Lightmapping::ResetDelegate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping*), "ResetDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Lightmapping::RequestLights
// Il2CppName: RequestLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<UnityEngine::Light*>*, System::IntPtr, int)>(&Lightmapping::RequestLights)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping*), "RequestLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Light*>*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Lightmapping::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Lightmapping::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate
#include "UnityEngine/Experimental/GlobalIllumination/Lightmapping_RequestLightsDelegate.hpp"
// Including type: UnityEngine.Light
#include "UnityEngine/Light.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate.Invoke
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate::Invoke(::Array<UnityEngine::Light*>* requests, Unity::Collections::NativeArray_1<UnityEngine::Experimental::GlobalIllumination::LightDataGI> lightsOutput) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requests), ::il2cpp_utils::ExtractType(lightsOutput)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, requests, lightsOutput);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate.BeginInvoke
System::IAsyncResult* UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate::BeginInvoke(::Array<UnityEngine::Light*>* requests, Unity::Collections::NativeArray_1<UnityEngine::Experimental::GlobalIllumination::LightDataGI> lightsOutput, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requests), ::il2cpp_utils::ExtractType(lightsOutput), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, requests, lightsOutput, callback, object);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate.EndInvoke
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: Lightmapping::RequestLightsDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lightmapping::RequestLightsDelegate::*)(::Il2CppObject*, System::IntPtr)>(&Lightmapping::RequestLightsDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping::RequestLightsDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lightmapping::RequestLightsDelegate::*)(::Il2CppObject*, System::IntPtr)>(&Lightmapping::RequestLightsDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping::RequestLightsDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: Lightmapping::RequestLightsDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lightmapping::RequestLightsDelegate::*)(::Array<UnityEngine::Light*>*, Unity::Collections::NativeArray_1<UnityEngine::Experimental::GlobalIllumination::LightDataGI>)>(&Lightmapping::RequestLightsDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping::RequestLightsDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Light*>*>(), ::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<UnityEngine::Experimental::GlobalIllumination::LightDataGI>>()});
  }
};
// Writing MetadataGetter for method: Lightmapping::RequestLightsDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Lightmapping::RequestLightsDelegate::*)(::Array<UnityEngine::Light*>*, Unity::Collections::NativeArray_1<UnityEngine::Experimental::GlobalIllumination::LightDataGI>, System::AsyncCallback*, ::Il2CppObject*)>(&Lightmapping::RequestLightsDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping::RequestLightsDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Light*>*>(), ::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<UnityEngine::Experimental::GlobalIllumination::LightDataGI>>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Lightmapping::RequestLightsDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lightmapping::RequestLightsDelegate::*)(System::IAsyncResult*)>(&Lightmapping::RequestLightsDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping::RequestLightsDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Experimental.GlobalIllumination.Lightmapping/<>c
#include "UnityEngine/Experimental/GlobalIllumination/Lightmapping_--c.hpp"
// Including type: UnityEngine.Light
#include "UnityEngine/Light.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.Experimental.GlobalIllumination.Lightmapping/<>c <>9
UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c* UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c*>("UnityEngine.Experimental.GlobalIllumination", "Lightmapping/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.Experimental.GlobalIllumination.Lightmapping/<>c <>9
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c::_set_$$9(UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("UnityEngine.Experimental.GlobalIllumination", "Lightmapping/<>c", "<>9", value)));
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.Lightmapping/<>c..cctor
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Experimental.GlobalIllumination", "Lightmapping/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Experimental.GlobalIllumination.Lightmapping/<>c.<.cctor>b__7_0
void UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c::$_cctor$b__7_0(::Array<UnityEngine::Light*>* requests, Unity::Collections::NativeArray_1<UnityEngine::Experimental::GlobalIllumination::LightDataGI> lightsOutput) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::GlobalIllumination::Lightmapping::$$c::<.cctor>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requests), ::il2cpp_utils::ExtractType(lightsOutput)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, requests, lightsOutput);
}
// Writing MetadataGetter for method: Lightmapping::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Lightmapping::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Lightmapping::$$c::$_cctor$b__7_0
// Il2CppName: <.cctor>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lightmapping::$$c::*)(::Array<UnityEngine::Light*>*, Unity::Collections::NativeArray_1<UnityEngine::Experimental::GlobalIllumination::LightDataGI>)>(&Lightmapping::$$c::$_cctor$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping::$$c*), "<.cctor>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Light*>*>(), ::il2cpp_utils::ExtractIndependentType<Unity::Collections::NativeArray_1<UnityEngine::Experimental::GlobalIllumination::LightDataGI>>()});
  }
};
// Writing MetadataGetter for method: Lightmapping::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lightmapping::$$c::*)()>(&Lightmapping::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lightmapping::$$c::*)()>(&Lightmapping::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lightmapping::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.Playables.CameraPlayable
#include "UnityEngine/Experimental/Playables/CameraPlayable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.Playables.CameraPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Experimental::Playables::CameraPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Playables::CameraPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Experimental.Playables.CameraPlayable.Equals
bool UnityEngine::Experimental::Playables::CameraPlayable::Equals(UnityEngine::Experimental::Playables::CameraPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Playables::CameraPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Writing MetadataGetter for method: CameraPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (CameraPlayable::*)()>(&CameraPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CameraPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CameraPlayable::*)(UnityEngine::Experimental::Playables::CameraPlayable)>(&CameraPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Playables::CameraPlayable>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.Playables.MaterialEffectPlayable
#include "UnityEngine/Experimental/Playables/MaterialEffectPlayable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.Playables.MaterialEffectPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Experimental::Playables::MaterialEffectPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Playables::MaterialEffectPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Experimental.Playables.MaterialEffectPlayable.Equals
bool UnityEngine::Experimental::Playables::MaterialEffectPlayable::Equals(UnityEngine::Experimental::Playables::MaterialEffectPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Playables::MaterialEffectPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Writing MetadataGetter for method: MaterialEffectPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (MaterialEffectPlayable::*)()>(&MaterialEffectPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialEffectPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialEffectPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MaterialEffectPlayable::*)(UnityEngine::Experimental::Playables::MaterialEffectPlayable)>(&MaterialEffectPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialEffectPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Playables::MaterialEffectPlayable>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Experimental.Playables.TextureMixerPlayable
#include "UnityEngine/Experimental/Playables/TextureMixerPlayable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Experimental.Playables.TextureMixerPlayable.GetHandle
UnityEngine::Playables::PlayableHandle UnityEngine::Experimental::Playables::TextureMixerPlayable::GetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Playables::TextureMixerPlayable::GetHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableHandle, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Experimental.Playables.TextureMixerPlayable.Equals
bool UnityEngine::Experimental::Playables::TextureMixerPlayable::Equals(UnityEngine::Experimental::Playables::TextureMixerPlayable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Experimental::Playables::TextureMixerPlayable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Writing MetadataGetter for method: TextureMixerPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (TextureMixerPlayable::*)()>(&TextureMixerPlayable::GetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextureMixerPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextureMixerPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TextureMixerPlayable::*)(UnityEngine::Experimental::Playables::TextureMixerPlayable)>(&TextureMixerPlayable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextureMixerPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Playables::TextureMixerPlayable>()});
  }
};
