// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.ExceptionHandlingClause
#include "System/Reflection/ExceptionHandlingClause.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.ExceptionHandlingClause.ToString
::Il2CppString* System::Reflection::ExceptionHandlingClause::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ExceptionHandlingClause::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ExceptionHandlingClause::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExceptionHandlingClause::*)()>(&ExceptionHandlingClause::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExceptionHandlingClause*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExceptionHandlingClause::*)()>(&ExceptionHandlingClause::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExceptionHandlingClause*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExceptionHandlingClause::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ExceptionHandlingClause::*)()>(&ExceptionHandlingClause::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExceptionHandlingClause*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Reflection.FieldAttributes
#include "System/Reflection/FieldAttributes.hpp"
// Including type: System.RuntimeFieldHandle
#include "System/RuntimeFieldHandle.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.RuntimeTypeHandle
#include "System/RuntimeTypeHandle.hpp"
// Including type: System.TypedReference
#include "System/TypedReference.hpp"
// Including type: System.Runtime.InteropServices.MarshalAsAttribute
#include "System/Runtime/InteropServices/MarshalAsAttribute.hpp"
// Including type: System.Reflection.MemberTypes
#include "System/Reflection/MemberTypes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.FieldInfo.get_Attributes
System::Reflection::FieldAttributes System::Reflection::FieldInfo::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::FieldAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.get_FieldHandle
System::RuntimeFieldHandle System::Reflection::FieldInfo::get_FieldHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::get_FieldHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeFieldHandle, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.get_FieldType
System::Type* System::Reflection::FieldInfo::get_FieldType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::get_FieldType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.GetValue
::Il2CppObject* System::Reflection::FieldInfo::GetValue(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Reflection.FieldInfo.get_IsLiteral
bool System::Reflection::FieldInfo::get_IsLiteral() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::get_IsLiteral");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsLiteral", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.get_IsStatic
bool System::Reflection::FieldInfo::get_IsStatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::get_IsStatic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsStatic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.get_IsPublic
bool System::Reflection::FieldInfo::get_IsPublic() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::get_IsPublic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPublic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.get_IsNotSerialized
bool System::Reflection::FieldInfo::get_IsNotSerialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::get_IsNotSerialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsNotSerialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.SetValue
void System::Reflection::FieldInfo::SetValue(::Il2CppObject* obj, ::Il2CppObject* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::SetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(culture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, value, invokeAttr, binder, culture);
}
// Autogenerated method: System.Reflection.FieldInfo.SetValue
void System::Reflection::FieldInfo::SetValue(::Il2CppObject* obj, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::SetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, value);
}
// Autogenerated method: System.Reflection.FieldInfo.internal_from_handle_type
System::Reflection::FieldInfo* System::Reflection::FieldInfo::internal_from_handle_type(System::IntPtr field_handle, System::IntPtr type_handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::internal_from_handle_type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "FieldInfo", "internal_from_handle_type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(field_handle), ::il2cpp_utils::ExtractType(type_handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::FieldInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, field_handle, type_handle);
}
// Autogenerated method: System.Reflection.FieldInfo.GetFieldFromHandle
System::Reflection::FieldInfo* System::Reflection::FieldInfo::GetFieldFromHandle(System::RuntimeFieldHandle handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::GetFieldFromHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "FieldInfo", "GetFieldFromHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::FieldInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Reflection.FieldInfo.GetFieldFromHandle
System::Reflection::FieldInfo* System::Reflection::FieldInfo::GetFieldFromHandle(System::RuntimeFieldHandle handle, System::RuntimeTypeHandle declaringType) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::GetFieldFromHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "FieldInfo", "GetFieldFromHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(declaringType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::FieldInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, declaringType);
}
// Autogenerated method: System.Reflection.FieldInfo.GetFieldOffset
int System::Reflection::FieldInfo::GetFieldOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::GetFieldOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFieldOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.SetValueDirect
void System::Reflection::FieldInfo::SetValueDirect(System::TypedReference obj, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::SetValueDirect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValueDirect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, value);
}
// Autogenerated method: System.Reflection.FieldInfo.get_marshal_info
System::Runtime::InteropServices::MarshalAsAttribute* System::Reflection::FieldInfo::get_marshal_info() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::get_marshal_info");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_marshal_info", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Runtime::InteropServices::MarshalAsAttribute*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.GetPseudoCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::FieldInfo::GetPseudoCustomAttributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::GetPseudoCustomAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPseudoCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.GetRawConstantValue
::Il2CppObject* System::Reflection::FieldInfo::GetRawConstantValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::GetRawConstantValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRawConstantValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.get_MemberType
System::Reflection::MemberTypes System::Reflection::FieldInfo::get_MemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::get_MemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MemberTypes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.Equals
bool System::Reflection::FieldInfo::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Reflection.FieldInfo.GetHashCode
int System::Reflection::FieldInfo::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.FieldInfo.op_Equality
bool System::Reflection::operator ==(System::Reflection::FieldInfo* left, System::Reflection::FieldInfo& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "FieldInfo", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(&right)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, &right);
}
// Autogenerated method: System.Reflection.FieldInfo.op_Inequality
bool System::Reflection::operator !=(System::Reflection::FieldInfo* left, System::Reflection::FieldInfo& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::FieldInfo::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "FieldInfo", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(&right)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, &right);
}
// Writing MetadataGetter for method: FieldInfo::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::FieldAttributes (FieldInfo::*)()>(&FieldInfo::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::get_FieldHandle
// Il2CppName: get_FieldHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeFieldHandle (FieldInfo::*)()>(&FieldInfo::get_FieldHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "get_FieldHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::get_FieldType
// Il2CppName: get_FieldType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (FieldInfo::*)()>(&FieldInfo::get_FieldType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "get_FieldType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FieldInfo::*)(::Il2CppObject*)>(&FieldInfo::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: FieldInfo::get_IsLiteral
// Il2CppName: get_IsLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FieldInfo::*)()>(&FieldInfo::get_IsLiteral)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "get_IsLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::get_IsStatic
// Il2CppName: get_IsStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FieldInfo::*)()>(&FieldInfo::get_IsStatic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "get_IsStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::get_IsPublic
// Il2CppName: get_IsPublic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FieldInfo::*)()>(&FieldInfo::get_IsPublic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "get_IsPublic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::get_IsNotSerialized
// Il2CppName: get_IsNotSerialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FieldInfo::*)()>(&FieldInfo::get_IsNotSerialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "get_IsNotSerialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FieldInfo::*)(::Il2CppObject*, ::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, System::Globalization::CultureInfo*)>(&FieldInfo::SetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: FieldInfo::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FieldInfo::*)(::Il2CppObject*, ::Il2CppObject*)>(&FieldInfo::SetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: FieldInfo::internal_from_handle_type
// Il2CppName: internal_from_handle_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::FieldInfo* (*)(System::IntPtr, System::IntPtr)>(&FieldInfo::internal_from_handle_type)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "internal_from_handle_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: FieldInfo::GetFieldFromHandle
// Il2CppName: GetFieldFromHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::FieldInfo* (*)(System::RuntimeFieldHandle)>(&FieldInfo::GetFieldFromHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "GetFieldFromHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeFieldHandle>()});
  }
};
// Writing MetadataGetter for method: FieldInfo::GetFieldFromHandle
// Il2CppName: GetFieldFromHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::FieldInfo* (*)(System::RuntimeFieldHandle, System::RuntimeTypeHandle)>(&FieldInfo::GetFieldFromHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "GetFieldFromHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeFieldHandle>(), ::il2cpp_utils::ExtractIndependentType<System::RuntimeTypeHandle>()});
  }
};
// Writing MetadataGetter for method: FieldInfo::GetFieldOffset
// Il2CppName: GetFieldOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FieldInfo::*)()>(&FieldInfo::GetFieldOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "GetFieldOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::SetValueDirect
// Il2CppName: SetValueDirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FieldInfo::*)(System::TypedReference, ::Il2CppObject*)>(&FieldInfo::SetValueDirect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "SetValueDirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::TypedReference>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: FieldInfo::get_marshal_info
// Il2CppName: get_marshal_info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::InteropServices::MarshalAsAttribute* (FieldInfo::*)()>(&FieldInfo::get_marshal_info)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "get_marshal_info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::GetPseudoCustomAttributes
// Il2CppName: GetPseudoCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (FieldInfo::*)()>(&FieldInfo::GetPseudoCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "GetPseudoCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::GetRawConstantValue
// Il2CppName: GetRawConstantValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FieldInfo::*)()>(&FieldInfo::GetRawConstantValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "GetRawConstantValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FieldInfo::*)()>(&FieldInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FieldInfo::*)()>(&FieldInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::get_MemberType
// Il2CppName: get_MemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MemberTypes (FieldInfo::*)()>(&FieldInfo::get_MemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "get_MemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FieldInfo::*)(::Il2CppObject*)>(&FieldInfo::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: FieldInfo::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FieldInfo::*)()>(&FieldInfo::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldInfo::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Reflection::FieldInfo*, System::Reflection::FieldInfo&)>(&FieldInfo::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::FieldInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::FieldInfo&>()});
  }
};
// Writing MetadataGetter for method: FieldInfo::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Reflection::FieldInfo*, System::Reflection::FieldInfo&)>(&FieldInfo::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldInfo*), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::FieldInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::FieldInfo&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.LocalVariableInfo
#include "System/Reflection/LocalVariableInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.LocalVariableInfo.ToString
::Il2CppString* System::Reflection::LocalVariableInfo::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::LocalVariableInfo::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LocalVariableInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalVariableInfo::*)()>(&LocalVariableInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalVariableInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalVariableInfo::*)()>(&LocalVariableInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalVariableInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalVariableInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LocalVariableInfo::*)()>(&LocalVariableInfo::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalVariableInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MethodBody
#include "System/Reflection/MethodBody.hpp"
// Including type: System.Reflection.ExceptionHandlingClause
#include "System/Reflection/ExceptionHandlingClause.hpp"
// Including type: System.Reflection.LocalVariableInfo
#include "System/Reflection/LocalVariableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MethodBody::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MethodBody::*)()>(&MethodBody::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBody*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MethodBody::*)()>(&MethodBody::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBody*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Reflection.TypeFilter
#include "System/Reflection/TypeFilter.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Reflection.TypeFilter FilterTypeName
System::Reflection::TypeFilter* System::Reflection::Module::_get_FilterTypeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::_get_FilterTypeName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Reflection::TypeFilter*>("System.Reflection", "Module", "FilterTypeName"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Reflection.TypeFilter FilterTypeName
void System::Reflection::Module::_set_FilterTypeName(System::Reflection::TypeFilter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::_set_FilterTypeName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Reflection", "Module", "FilterTypeName", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Reflection.TypeFilter FilterTypeNameIgnoreCase
System::Reflection::TypeFilter* System::Reflection::Module::_get_FilterTypeNameIgnoreCase() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::_get_FilterTypeNameIgnoreCase");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Reflection::TypeFilter*>("System.Reflection", "Module", "FilterTypeNameIgnoreCase"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Reflection.TypeFilter FilterTypeNameIgnoreCase
void System::Reflection::Module::_set_FilterTypeNameIgnoreCase(System::Reflection::TypeFilter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::_set_FilterTypeNameIgnoreCase");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Reflection", "Module", "FilterTypeNameIgnoreCase", value));
}
// Autogenerated static field getter
// Get static field: static private System.Reflection.BindingFlags defaultBindingFlags
System::Reflection::BindingFlags System::Reflection::Module::_get_defaultBindingFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::_get_defaultBindingFlags");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Reflection::BindingFlags>("System.Reflection", "Module", "defaultBindingFlags"));
}
// Autogenerated static field setter
// Set static field: static private System.Reflection.BindingFlags defaultBindingFlags
void System::Reflection::Module::_set_defaultBindingFlags(System::Reflection::BindingFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::_set_defaultBindingFlags");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Reflection", "Module", "defaultBindingFlags", value));
}
// Autogenerated method: System.Reflection.Module.GetObjectData
void System::Reflection::Module::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Reflection.Module.GetModuleVersionId
System::Guid System::Reflection::Module::GetModuleVersionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::GetModuleVersionId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetModuleVersionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Guid, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Module.filter_by_type_name
bool System::Reflection::Module::filter_by_type_name(System::Type* m, ::Il2CppObject* filterCriteria) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::filter_by_type_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "Module", "filter_by_type_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(filterCriteria)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m, filterCriteria);
}
// Autogenerated method: System.Reflection.Module.filter_by_type_name_ignore_case
bool System::Reflection::Module::filter_by_type_name_ignore_case(System::Type* m, ::Il2CppObject* filterCriteria) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::filter_by_type_name_ignore_case");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "Module", "filter_by_type_name_ignore_case", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(filterCriteria)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m, filterCriteria);
}
// Autogenerated method: System.Reflection.Module.GetGuidInternal
::Il2CppString* System::Reflection::Module::GetGuidInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::GetGuidInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGuidInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Module.get_Assembly
System::Reflection::Assembly* System::Reflection::Module::get_Assembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::get_Assembly");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Assembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Assembly*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Module.get_ScopeName
::Il2CppString* System::Reflection::Module::get_ScopeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::get_ScopeName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ScopeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Module.get_ModuleVersionId
System::Guid System::Reflection::Module::get_ModuleVersionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::get_ModuleVersionId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ModuleVersionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Guid, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Module.CreateNIE
System::Exception* System::Reflection::Module::CreateNIE() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::CreateNIE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "Module", "CreateNIE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Reflection.Module.IsResource
bool System::Reflection::Module::IsResource() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::IsResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Module.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Module::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Module.IsDefined
bool System::Reflection::Module::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Module..cctor
void System::Reflection::Module::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "Module", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Reflection.Module.ToString
::Il2CppString* System::Reflection::Module::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Module.Equals
bool System::Reflection::Module::Equals(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, o);
}
// Autogenerated method: System.Reflection.Module.GetHashCode
int System::Reflection::Module::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Module.op_Equality
bool System::Reflection::operator ==(System::Reflection::Module* left, System::Reflection::Module& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Module::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "Module", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(&right)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, &right);
}
// Writing MetadataGetter for method: Module::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Module::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&Module::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: Module::GetModuleVersionId
// Il2CppName: GetModuleVersionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Guid (Module::*)()>(&Module::GetModuleVersionId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "GetModuleVersionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::filter_by_type_name
// Il2CppName: filter_by_type_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*, ::Il2CppObject*)>(&Module::filter_by_type_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "filter_by_type_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Module::filter_by_type_name_ignore_case
// Il2CppName: filter_by_type_name_ignore_case
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*, ::Il2CppObject*)>(&Module::filter_by_type_name_ignore_case)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "filter_by_type_name_ignore_case", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Module::GetGuidInternal
// Il2CppName: GetGuidInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Module::*)()>(&Module::GetGuidInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "GetGuidInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::get_Assembly
// Il2CppName: get_Assembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (Module::*)()>(&Module::get_Assembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "get_Assembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::get_ScopeName
// Il2CppName: get_ScopeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Module::*)()>(&Module::get_ScopeName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "get_ScopeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::get_ModuleVersionId
// Il2CppName: get_ModuleVersionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Guid (Module::*)()>(&Module::get_ModuleVersionId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "get_ModuleVersionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::CreateNIE
// Il2CppName: CreateNIE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)()>(&Module::CreateNIE)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "CreateNIE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::IsResource
// Il2CppName: IsResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Module::*)()>(&Module::IsResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "IsResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (Module::*)(System::Type*, bool)>(&Module::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Module::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Module::*)(System::Type*, bool)>(&Module::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Module::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Module::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Module::*)()>(&Module::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Module::*)()>(&Module::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Module::*)()>(&Module::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Module::*)(::Il2CppObject*)>(&Module::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Module::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Module::*)()>(&Module::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Module::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Reflection::Module*, System::Reflection::Module&)>(&Module::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Module*), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::Module*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Module&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.RuntimeAssembly
#include "System/Reflection/RuntimeAssembly.hpp"
// Including type: System.Security.Policy.Evidence
#include "System/Security/Policy/Evidence.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.Reflection.AssemblyName
#include "System/Reflection/AssemblyName.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.RuntimeAssembly.LoadWithPartialNameInternal
System::Reflection::RuntimeAssembly* System::Reflection::RuntimeAssembly::LoadWithPartialNameInternal(::Il2CppString* partialName, System::Security::Policy::Evidence* securityEvidence, System::Threading::StackCrawlMark& stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeAssembly::LoadWithPartialNameInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "RuntimeAssembly", "LoadWithPartialNameInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(partialName), ::il2cpp_utils::ExtractType(securityEvidence), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::RuntimeAssembly*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, partialName, securityEvidence, stackMark);
}
// Autogenerated method: System.Reflection.RuntimeAssembly.LoadWithPartialNameInternal
System::Reflection::RuntimeAssembly* System::Reflection::RuntimeAssembly::LoadWithPartialNameInternal(System::Reflection::AssemblyName* an, System::Security::Policy::Evidence* securityEvidence, System::Threading::StackCrawlMark& stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeAssembly::LoadWithPartialNameInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "RuntimeAssembly", "LoadWithPartialNameInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(an), ::il2cpp_utils::ExtractType(securityEvidence), ::il2cpp_utils::ExtractType(stackMark)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::RuntimeAssembly*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, an, securityEvidence, stackMark);
}
// Autogenerated method: System.Reflection.RuntimeAssembly.GetObjectData
void System::Reflection::RuntimeAssembly::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeAssembly::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Reflection.RuntimeAssembly.GetName
System::Reflection::AssemblyName* System::Reflection::RuntimeAssembly::GetName(bool copiedName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeAssembly::GetName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(copiedName)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::AssemblyName*, false>(this, ___internal__method, copiedName);
}
// Writing MetadataGetter for method: RuntimeAssembly::LoadWithPartialNameInternal
// Il2CppName: LoadWithPartialNameInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::RuntimeAssembly* (*)(::Il2CppString*, System::Security::Policy::Evidence*, System::Threading::StackCrawlMark&)>(&RuntimeAssembly::LoadWithPartialNameInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeAssembly*), "LoadWithPartialNameInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Policy::Evidence*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: RuntimeAssembly::LoadWithPartialNameInternal
// Il2CppName: LoadWithPartialNameInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::RuntimeAssembly* (*)(System::Reflection::AssemblyName*, System::Security::Policy::Evidence*, System::Threading::StackCrawlMark&)>(&RuntimeAssembly::LoadWithPartialNameInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeAssembly*), "LoadWithPartialNameInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::AssemblyName*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Policy::Evidence*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::StackCrawlMark&>()});
  }
};
// Writing MetadataGetter for method: RuntimeAssembly::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeAssembly::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&RuntimeAssembly::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeAssembly*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: RuntimeAssembly::GetName
// Il2CppName: GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::AssemblyName* (RuntimeAssembly::*)(bool)>(&RuntimeAssembly::GetName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeAssembly*), "GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: RuntimeAssembly::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeAssembly::*)()>(&RuntimeAssembly::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeAssembly*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeAssembly::*)()>(&RuntimeAssembly::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeAssembly*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoAssembly
#include "System/Reflection/MonoAssembly.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
// Including type: System.Reflection.AssemblyName
#include "System/Reflection/AssemblyName.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoAssembly.GetType
System::Type* System::Reflection::MonoAssembly::GetType(::Il2CppString* name, bool throwOnError, bool ignoreCase) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoAssembly::GetType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(throwOnError), ::il2cpp_utils::ExtractType(ignoreCase)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, name, throwOnError, ignoreCase);
}
// Autogenerated method: System.Reflection.MonoAssembly.GetModule
System::Reflection::Module* System::Reflection::MonoAssembly::GetModule(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoAssembly::GetModule");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Module*, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Reflection.MonoAssembly.GetReferencedAssemblies
::Array<System::Reflection::AssemblyName*>* System::Reflection::MonoAssembly::GetReferencedAssemblies() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoAssembly::GetReferencedAssemblies");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetReferencedAssemblies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::AssemblyName*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoAssembly.GetModules
::Array<System::Reflection::Module*>* System::Reflection::MonoAssembly::GetModules(bool getResourceModules) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoAssembly::GetModules");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetModules", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(getResourceModules)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::Module*>*, false>(this, ___internal__method, getResourceModules);
}
// Writing MetadataGetter for method: MonoAssembly::GetType
// Il2CppName: GetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoAssembly::*)(::Il2CppString*, bool, bool)>(&MonoAssembly::GetType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoAssembly*), "GetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoAssembly::GetModule
// Il2CppName: GetModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Module* (MonoAssembly::*)(::Il2CppString*)>(&MonoAssembly::GetModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoAssembly*), "GetModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MonoAssembly::GetReferencedAssemblies
// Il2CppName: GetReferencedAssemblies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::AssemblyName*>* (MonoAssembly::*)()>(&MonoAssembly::GetReferencedAssemblies)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoAssembly*), "GetReferencedAssemblies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoAssembly::GetModules
// Il2CppName: GetModules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::Module*>* (MonoAssembly::*)(bool)>(&MonoAssembly::GetModules)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoAssembly*), "GetModules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoAssembly::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoAssembly::*)()>(&MonoAssembly::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoAssembly*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoAssembly::*)()>(&MonoAssembly::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoAssembly*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoEventInfo
#include "System/Reflection/MonoEventInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.MonoEvent
#include "System/Reflection/MonoEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoEventInfo.get_event_info
void System::Reflection::MonoEventInfo::get_event_info(System::Reflection::MonoEvent* ev, System::Reflection::MonoEventInfo& info) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEventInfo::get_event_info");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoEventInfo", "get_event_info", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ev), ::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoEventInfo&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ev, info);
}
// Autogenerated method: System.Reflection.MonoEventInfo.GetEventInfo
System::Reflection::MonoEventInfo System::Reflection::MonoEventInfo::GetEventInfo(System::Reflection::MonoEvent* ev) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEventInfo::GetEventInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoEventInfo", "GetEventInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ev)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MonoEventInfo, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ev);
}
// Writing MetadataGetter for method: MonoEventInfo::get_event_info
// Il2CppName: get_event_info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Reflection::MonoEvent*, System::Reflection::MonoEventInfo&)>(&MonoEventInfo::get_event_info)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEventInfo), "get_event_info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoEvent*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoEventInfo&>()});
  }
};
// Writing MetadataGetter for method: MonoEventInfo::GetEventInfo
// Il2CppName: GetEventInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MonoEventInfo (*)(System::Reflection::MonoEvent*)>(&MonoEventInfo::GetEventInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEventInfo), "GetEventInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoEvent*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Reflection.RuntimeEventInfo
#include "System/Reflection/RuntimeEventInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.RuntimeType
#include "System/RuntimeType.hpp"
// Including type: System.Reflection.RuntimeModule
#include "System/Reflection/RuntimeModule.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.RuntimeEventInfo.get_BindingFlags
System::Reflection::BindingFlags System::Reflection::RuntimeEventInfo::get_BindingFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeEventInfo::get_BindingFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::BindingFlags, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeEventInfo.GetDeclaringTypeInternal
System::RuntimeType* System::Reflection::RuntimeEventInfo::GetDeclaringTypeInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeEventInfo::GetDeclaringTypeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDeclaringTypeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeType*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeEventInfo.get_ReflectedTypeInternal
System::RuntimeType* System::Reflection::RuntimeEventInfo::get_ReflectedTypeInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeEventInfo::get_ReflectedTypeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedTypeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeType*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeEventInfo.GetRuntimeModule
System::Reflection::RuntimeModule* System::Reflection::RuntimeEventInfo::GetRuntimeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeEventInfo::GetRuntimeModule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRuntimeModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::RuntimeModule*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeEventInfo.GetObjectData
void System::Reflection::RuntimeEventInfo::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeEventInfo::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Reflection.RuntimeEventInfo.get_Module
System::Reflection::Module* System::Reflection::RuntimeEventInfo::get_Module() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeEventInfo::get_Module");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Module", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Module*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RuntimeEventInfo::get_BindingFlags
// Il2CppName: get_BindingFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::BindingFlags (RuntimeEventInfo::*)()>(&RuntimeEventInfo::get_BindingFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeEventInfo*), "get_BindingFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeEventInfo::GetDeclaringTypeInternal
// Il2CppName: GetDeclaringTypeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (RuntimeEventInfo::*)()>(&RuntimeEventInfo::GetDeclaringTypeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeEventInfo*), "GetDeclaringTypeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeEventInfo::get_ReflectedTypeInternal
// Il2CppName: get_ReflectedTypeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (RuntimeEventInfo::*)()>(&RuntimeEventInfo::get_ReflectedTypeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeEventInfo*), "get_ReflectedTypeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeEventInfo::GetRuntimeModule
// Il2CppName: GetRuntimeModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::RuntimeModule* (RuntimeEventInfo::*)()>(&RuntimeEventInfo::GetRuntimeModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeEventInfo*), "GetRuntimeModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeEventInfo::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeEventInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&RuntimeEventInfo::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeEventInfo*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: RuntimeEventInfo::get_Module
// Il2CppName: get_Module
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Module* (RuntimeEventInfo::*)()>(&RuntimeEventInfo::get_Module)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeEventInfo*), "get_Module", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeEventInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeEventInfo::*)()>(&RuntimeEventInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeEventInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeEventInfo::*)()>(&RuntimeEventInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeEventInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoEvent
#include "System/Reflection/MonoEvent.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Reflection.CustomAttributeData
#include "System/Reflection/CustomAttributeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoEvent.GetAddMethod
System::Reflection::MethodInfo* System::Reflection::MonoEvent::GetAddMethod(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::GetAddMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAddMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.MonoEvent.GetRaiseMethod
System::Reflection::MethodInfo* System::Reflection::MonoEvent::GetRaiseMethod(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::GetRaiseMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRaiseMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.MonoEvent.GetRemoveMethod
System::Reflection::MethodInfo* System::Reflection::MonoEvent::GetRemoveMethod(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::GetRemoveMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRemoveMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.MonoEvent.get_DeclaringType
System::Type* System::Reflection::MonoEvent::get_DeclaringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::get_DeclaringType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoEvent.get_ReflectedType
System::Type* System::Reflection::MonoEvent::get_ReflectedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::get_ReflectedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoEvent.get_Name
::Il2CppString* System::Reflection::MonoEvent::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoEvent.ToString
::Il2CppString* System::Reflection::MonoEvent::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoEvent.IsDefined
bool System::Reflection::MonoEvent::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoEvent.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoEvent::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.MonoEvent.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoEvent::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoEvent.GetCustomAttributesData
System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* System::Reflection::MonoEvent::GetCustomAttributesData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoEvent::GetCustomAttributesData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributesData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MonoEvent::GetAddMethod
// Il2CppName: GetAddMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoEvent::*)(bool)>(&MonoEvent::GetAddMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "GetAddMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoEvent::GetRaiseMethod
// Il2CppName: GetRaiseMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoEvent::*)(bool)>(&MonoEvent::GetRaiseMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "GetRaiseMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoEvent::GetRemoveMethod
// Il2CppName: GetRemoveMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoEvent::*)(bool)>(&MonoEvent::GetRemoveMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "GetRemoveMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoEvent::get_DeclaringType
// Il2CppName: get_DeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoEvent::*)()>(&MonoEvent::get_DeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "get_DeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoEvent::get_ReflectedType
// Il2CppName: get_ReflectedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoEvent::*)()>(&MonoEvent::get_ReflectedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "get_ReflectedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoEvent::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonoEvent::*)()>(&MonoEvent::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoEvent::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonoEvent::*)()>(&MonoEvent::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoEvent::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoEvent::*)(System::Type*, bool)>(&MonoEvent::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoEvent::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoEvent::*)(bool)>(&MonoEvent::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoEvent::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoEvent::*)(System::Type*, bool)>(&MonoEvent::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoEvent::GetCustomAttributesData
// Il2CppName: GetCustomAttributesData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* (MonoEvent::*)()>(&MonoEvent::GetCustomAttributesData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), "GetCustomAttributesData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoEvent::*)()>(&MonoEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoEvent::*)()>(&MonoEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Reflection.RuntimeFieldInfo
#include "System/Reflection/RuntimeFieldInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.RuntimeType
#include "System/RuntimeType.hpp"
// Including type: System.Reflection.RuntimeModule
#include "System/Reflection/RuntimeModule.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.RuntimeFieldInfo.get_BindingFlags
System::Reflection::BindingFlags System::Reflection::RuntimeFieldInfo::get_BindingFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeFieldInfo::get_BindingFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::BindingFlags, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeFieldInfo.GetDeclaringTypeInternal
System::RuntimeType* System::Reflection::RuntimeFieldInfo::GetDeclaringTypeInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeFieldInfo::GetDeclaringTypeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDeclaringTypeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeType*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeFieldInfo.get_ReflectedTypeInternal
System::RuntimeType* System::Reflection::RuntimeFieldInfo::get_ReflectedTypeInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeFieldInfo::get_ReflectedTypeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedTypeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeType*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeFieldInfo.GetRuntimeModule
System::Reflection::RuntimeModule* System::Reflection::RuntimeFieldInfo::GetRuntimeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeFieldInfo::GetRuntimeModule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRuntimeModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::RuntimeModule*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeFieldInfo.GetObjectData
void System::Reflection::RuntimeFieldInfo::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeFieldInfo::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Reflection.RuntimeFieldInfo.get_Module
System::Reflection::Module* System::Reflection::RuntimeFieldInfo::get_Module() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeFieldInfo::get_Module");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Module", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Module*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RuntimeFieldInfo::get_BindingFlags
// Il2CppName: get_BindingFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::BindingFlags (RuntimeFieldInfo::*)()>(&RuntimeFieldInfo::get_BindingFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeFieldInfo*), "get_BindingFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeFieldInfo::GetDeclaringTypeInternal
// Il2CppName: GetDeclaringTypeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (RuntimeFieldInfo::*)()>(&RuntimeFieldInfo::GetDeclaringTypeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeFieldInfo*), "GetDeclaringTypeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeFieldInfo::get_ReflectedTypeInternal
// Il2CppName: get_ReflectedTypeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (RuntimeFieldInfo::*)()>(&RuntimeFieldInfo::get_ReflectedTypeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeFieldInfo*), "get_ReflectedTypeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeFieldInfo::GetRuntimeModule
// Il2CppName: GetRuntimeModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::RuntimeModule* (RuntimeFieldInfo::*)()>(&RuntimeFieldInfo::GetRuntimeModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeFieldInfo*), "GetRuntimeModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeFieldInfo::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeFieldInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&RuntimeFieldInfo::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeFieldInfo*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: RuntimeFieldInfo::get_Module
// Il2CppName: get_Module
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Module* (RuntimeFieldInfo::*)()>(&RuntimeFieldInfo::get_Module)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeFieldInfo*), "get_Module", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeFieldInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeFieldInfo::*)()>(&RuntimeFieldInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeFieldInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeFieldInfo::*)()>(&RuntimeFieldInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeFieldInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.RtFieldInfo
#include "System/Reflection/RtFieldInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.TypedReference
#include "System/TypedReference.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.RtFieldInfo.UnsafeGetValue
::Il2CppObject* System::Reflection::RtFieldInfo::UnsafeGetValue(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RtFieldInfo::UnsafeGetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnsafeGetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Reflection.RtFieldInfo.CheckConsistency
void System::Reflection::RtFieldInfo::CheckConsistency(::Il2CppObject* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RtFieldInfo::CheckConsistency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckConsistency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, target);
}
// Autogenerated method: System.Reflection.RtFieldInfo.UnsafeSetValue
void System::Reflection::RtFieldInfo::UnsafeSetValue(::Il2CppObject* obj, ::Il2CppObject* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RtFieldInfo::UnsafeSetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnsafeSetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(culture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, value, invokeAttr, binder, culture);
}
// Autogenerated method: System.Reflection.RtFieldInfo.SetValueDirect
void System::Reflection::RtFieldInfo::SetValueDirect(System::TypedReference obj, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RtFieldInfo::SetValueDirect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValueDirect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, value);
}
// Writing MetadataGetter for method: RtFieldInfo::UnsafeGetValue
// Il2CppName: UnsafeGetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RtFieldInfo::*)(::Il2CppObject*)>(&RtFieldInfo::UnsafeGetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RtFieldInfo*), "UnsafeGetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RtFieldInfo::CheckConsistency
// Il2CppName: CheckConsistency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RtFieldInfo::*)(::Il2CppObject*)>(&RtFieldInfo::CheckConsistency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RtFieldInfo*), "CheckConsistency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RtFieldInfo::UnsafeSetValue
// Il2CppName: UnsafeSetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RtFieldInfo::*)(::Il2CppObject*, ::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, System::Globalization::CultureInfo*)>(&RtFieldInfo::UnsafeSetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RtFieldInfo*), "UnsafeSetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: RtFieldInfo::SetValueDirect
// Il2CppName: SetValueDirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RtFieldInfo::*)(System::TypedReference, ::Il2CppObject*)>(&RtFieldInfo::SetValueDirect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RtFieldInfo*), "SetValueDirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::TypedReference>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RtFieldInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RtFieldInfo::*)()>(&RtFieldInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RtFieldInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RtFieldInfo::*)()>(&RtFieldInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RtFieldInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoField
#include "System/Reflection/MonoField.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Reflection.CustomAttributeData
#include "System/Reflection/CustomAttributeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoField.ResolveType
System::Type* System::Reflection::MonoField::ResolveType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::ResolveType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.GetParentType
System::Type* System::Reflection::MonoField::GetParentType(bool declaring) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::GetParentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(declaring)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, declaring);
}
// Autogenerated method: System.Reflection.MonoField.GetValueInternal
::Il2CppObject* System::Reflection::MonoField::GetValueInternal(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::GetValueInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValueInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Reflection.MonoField.SetValueInternal
void System::Reflection::MonoField::SetValueInternal(System::Reflection::FieldInfo* fi, ::Il2CppObject* obj, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::SetValueInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoField", "SetValueInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fi), ::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fi, obj, value);
}
// Autogenerated method: System.Reflection.MonoField.CheckGeneric
void System::Reflection::MonoField::CheckGeneric() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::CheckGeneric");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckGeneric", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.get_Attributes
System::Reflection::FieldAttributes System::Reflection::MonoField::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::FieldAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.get_FieldHandle
System::RuntimeFieldHandle System::Reflection::MonoField::get_FieldHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::get_FieldHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeFieldHandle, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.get_FieldType
System::Type* System::Reflection::MonoField::get_FieldType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::get_FieldType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.get_ReflectedType
System::Type* System::Reflection::MonoField::get_ReflectedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::get_ReflectedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.get_DeclaringType
System::Type* System::Reflection::MonoField::get_DeclaringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::get_DeclaringType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.get_Name
::Il2CppString* System::Reflection::MonoField::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.IsDefined
bool System::Reflection::MonoField::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoField.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoField::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.MonoField.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoField::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoField.GetFieldOffset
int System::Reflection::MonoField::GetFieldOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::GetFieldOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFieldOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.GetValue
::Il2CppObject* System::Reflection::MonoField::GetValue(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Reflection.MonoField.ToString
::Il2CppString* System::Reflection::MonoField::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.SetValue
void System::Reflection::MonoField::SetValue(::Il2CppObject* obj, ::Il2CppObject* val, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::SetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(culture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, val, invokeAttr, binder, culture);
}
// Autogenerated method: System.Reflection.MonoField.GetRawConstantValue
::Il2CppObject* System::Reflection::MonoField::GetRawConstantValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::GetRawConstantValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRawConstantValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoField.GetCustomAttributesData
System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* System::Reflection::MonoField::GetCustomAttributesData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoField::GetCustomAttributesData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributesData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MonoField::ResolveType
// Il2CppName: ResolveType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoField::*)()>(&MonoField::ResolveType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "ResolveType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::GetParentType
// Il2CppName: GetParentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoField::*)(bool)>(&MonoField::GetParentType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "GetParentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoField::GetValueInternal
// Il2CppName: GetValueInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoField::*)(::Il2CppObject*)>(&MonoField::GetValueInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "GetValueInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MonoField::SetValueInternal
// Il2CppName: SetValueInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Reflection::FieldInfo*, ::Il2CppObject*, ::Il2CppObject*)>(&MonoField::SetValueInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "SetValueInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::FieldInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MonoField::CheckGeneric
// Il2CppName: CheckGeneric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoField::*)()>(&MonoField::CheckGeneric)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "CheckGeneric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::FieldAttributes (MonoField::*)()>(&MonoField::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::get_FieldHandle
// Il2CppName: get_FieldHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeFieldHandle (MonoField::*)()>(&MonoField::get_FieldHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "get_FieldHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::get_FieldType
// Il2CppName: get_FieldType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoField::*)()>(&MonoField::get_FieldType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "get_FieldType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::get_ReflectedType
// Il2CppName: get_ReflectedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoField::*)()>(&MonoField::get_ReflectedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "get_ReflectedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::get_DeclaringType
// Il2CppName: get_DeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoField::*)()>(&MonoField::get_DeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "get_DeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonoField::*)()>(&MonoField::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoField::*)(System::Type*, bool)>(&MonoField::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoField::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoField::*)(bool)>(&MonoField::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoField::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoField::*)(System::Type*, bool)>(&MonoField::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoField::GetFieldOffset
// Il2CppName: GetFieldOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MonoField::*)()>(&MonoField::GetFieldOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "GetFieldOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoField::*)(::Il2CppObject*)>(&MonoField::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MonoField::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonoField::*)()>(&MonoField::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoField::*)(::Il2CppObject*, ::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, System::Globalization::CultureInfo*)>(&MonoField::SetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: MonoField::GetRawConstantValue
// Il2CppName: GetRawConstantValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoField::*)()>(&MonoField::GetRawConstantValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "GetRawConstantValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::GetCustomAttributesData
// Il2CppName: GetCustomAttributesData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* (MonoField::*)()>(&MonoField::GetCustomAttributesData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), "GetCustomAttributesData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoField::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoField::*)()>(&MonoField::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoField::*)()>(&MonoField::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoField*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoMethodInfo
#include "System/Reflection/MonoMethodInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoMethodInfo.get_method_info
void System::Reflection::MonoMethodInfo::get_method_info(System::IntPtr handle, System::Reflection::MonoMethodInfo& info) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethodInfo::get_method_info");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethodInfo", "get_method_info", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoMethodInfo&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, info);
}
// Autogenerated method: System.Reflection.MonoMethodInfo.get_method_attributes
int System::Reflection::MonoMethodInfo::get_method_attributes(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethodInfo::get_method_attributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethodInfo", "get_method_attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Reflection.MonoMethodInfo.GetMethodInfo
System::Reflection::MonoMethodInfo System::Reflection::MonoMethodInfo::GetMethodInfo(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethodInfo::GetMethodInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethodInfo", "GetMethodInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MonoMethodInfo, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Reflection.MonoMethodInfo.GetDeclaringType
System::Type* System::Reflection::MonoMethodInfo::GetDeclaringType(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethodInfo::GetDeclaringType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethodInfo", "GetDeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Reflection.MonoMethodInfo.GetReturnType
System::Type* System::Reflection::MonoMethodInfo::GetReturnType(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethodInfo::GetReturnType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethodInfo", "GetReturnType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Reflection.MonoMethodInfo.GetAttributes
System::Reflection::MethodAttributes System::Reflection::MonoMethodInfo::GetAttributes(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethodInfo::GetAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethodInfo", "GetAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodAttributes, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Reflection.MonoMethodInfo.GetCallingConvention
System::Reflection::CallingConventions System::Reflection::MonoMethodInfo::GetCallingConvention(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethodInfo::GetCallingConvention");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethodInfo", "GetCallingConvention", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::CallingConventions, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Reflection.MonoMethodInfo.GetMethodImplementationFlags
System::Reflection::MethodImplAttributes System::Reflection::MonoMethodInfo::GetMethodImplementationFlags(System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethodInfo::GetMethodImplementationFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethodInfo", "GetMethodImplementationFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodImplAttributes, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Reflection.MonoMethodInfo.get_parameter_info
::Array<System::Reflection::ParameterInfo*>* System::Reflection::MonoMethodInfo::get_parameter_info(System::IntPtr handle, System::Reflection::MemberInfo* member) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethodInfo::get_parameter_info");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethodInfo", "get_parameter_info", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(member)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, member);
}
// Autogenerated method: System.Reflection.MonoMethodInfo.GetParametersInfo
::Array<System::Reflection::ParameterInfo*>* System::Reflection::MonoMethodInfo::GetParametersInfo(System::IntPtr handle, System::Reflection::MemberInfo* member) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethodInfo::GetParametersInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethodInfo", "GetParametersInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(member)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, member);
}
// Writing MetadataGetter for method: MonoMethodInfo::get_method_info
// Il2CppName: get_method_info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, System::Reflection::MonoMethodInfo&)>(&MonoMethodInfo::get_method_info)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethodInfo), "get_method_info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoMethodInfo&>()});
  }
};
// Writing MetadataGetter for method: MonoMethodInfo::get_method_attributes
// Il2CppName: get_method_attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr)>(&MonoMethodInfo::get_method_attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethodInfo), "get_method_attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: MonoMethodInfo::GetMethodInfo
// Il2CppName: GetMethodInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MonoMethodInfo (*)(System::IntPtr)>(&MonoMethodInfo::GetMethodInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethodInfo), "GetMethodInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: MonoMethodInfo::GetDeclaringType
// Il2CppName: GetDeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(System::IntPtr)>(&MonoMethodInfo::GetDeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethodInfo), "GetDeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: MonoMethodInfo::GetReturnType
// Il2CppName: GetReturnType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(System::IntPtr)>(&MonoMethodInfo::GetReturnType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethodInfo), "GetReturnType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: MonoMethodInfo::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodAttributes (*)(System::IntPtr)>(&MonoMethodInfo::GetAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethodInfo), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: MonoMethodInfo::GetCallingConvention
// Il2CppName: GetCallingConvention
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::CallingConventions (*)(System::IntPtr)>(&MonoMethodInfo::GetCallingConvention)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethodInfo), "GetCallingConvention", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: MonoMethodInfo::GetMethodImplementationFlags
// Il2CppName: GetMethodImplementationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodImplAttributes (*)(System::IntPtr)>(&MonoMethodInfo::GetMethodImplementationFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethodInfo), "GetMethodImplementationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: MonoMethodInfo::get_parameter_info
// Il2CppName: get_parameter_info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (*)(System::IntPtr, System::Reflection::MemberInfo*)>(&MonoMethodInfo::get_parameter_info)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethodInfo), "get_parameter_info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::MemberInfo*>()});
  }
};
// Writing MetadataGetter for method: MonoMethodInfo::GetParametersInfo
// Il2CppName: GetParametersInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (*)(System::IntPtr, System::Reflection::MemberInfo*)>(&MonoMethodInfo::GetParametersInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethodInfo), "GetParametersInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::MemberInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.RuntimeMethodInfo
#include "System/Reflection/RuntimeMethodInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.RuntimeType
#include "System/RuntimeType.hpp"
// Including type: System.Reflection.RuntimeModule
#include "System/Reflection/RuntimeModule.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.RuntimeMethodInfo.get_BindingFlags
System::Reflection::BindingFlags System::Reflection::RuntimeMethodInfo::get_BindingFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeMethodInfo::get_BindingFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::BindingFlags, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeMethodInfo.get_ReflectedTypeInternal
System::RuntimeType* System::Reflection::RuntimeMethodInfo::get_ReflectedTypeInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeMethodInfo::get_ReflectedTypeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedTypeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeType*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeMethodInfo.GetRuntimeModule
System::Reflection::RuntimeModule* System::Reflection::RuntimeMethodInfo::GetRuntimeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeMethodInfo::GetRuntimeModule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRuntimeModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::RuntimeModule*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeMethodInfo.GetObjectData
void System::Reflection::RuntimeMethodInfo::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeMethodInfo::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Reflection.RuntimeMethodInfo.SerializationToString
::Il2CppString* System::Reflection::RuntimeMethodInfo::SerializationToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeMethodInfo::SerializationToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializationToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeMethodInfo.get_Module
System::Reflection::Module* System::Reflection::RuntimeMethodInfo::get_Module() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeMethodInfo::get_Module");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Module", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Module*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeMethodInfo.FormatNameAndSig
::Il2CppString* System::Reflection::RuntimeMethodInfo::FormatNameAndSig(bool serialization) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeMethodInfo::FormatNameAndSig");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FormatNameAndSig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serialization)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, serialization);
}
// Autogenerated method: System.Reflection.RuntimeMethodInfo.ToString
::Il2CppString* System::Reflection::RuntimeMethodInfo::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeMethodInfo::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RuntimeMethodInfo::get_BindingFlags
// Il2CppName: get_BindingFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::BindingFlags (RuntimeMethodInfo::*)()>(&RuntimeMethodInfo::get_BindingFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeMethodInfo*), "get_BindingFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeMethodInfo::get_ReflectedTypeInternal
// Il2CppName: get_ReflectedTypeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (RuntimeMethodInfo::*)()>(&RuntimeMethodInfo::get_ReflectedTypeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeMethodInfo*), "get_ReflectedTypeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeMethodInfo::GetRuntimeModule
// Il2CppName: GetRuntimeModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::RuntimeModule* (RuntimeMethodInfo::*)()>(&RuntimeMethodInfo::GetRuntimeModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeMethodInfo*), "GetRuntimeModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeMethodInfo::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeMethodInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&RuntimeMethodInfo::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeMethodInfo*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: RuntimeMethodInfo::SerializationToString
// Il2CppName: SerializationToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RuntimeMethodInfo::*)()>(&RuntimeMethodInfo::SerializationToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeMethodInfo*), "SerializationToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeMethodInfo::get_Module
// Il2CppName: get_Module
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Module* (RuntimeMethodInfo::*)()>(&RuntimeMethodInfo::get_Module)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeMethodInfo*), "get_Module", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeMethodInfo::FormatNameAndSig
// Il2CppName: FormatNameAndSig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RuntimeMethodInfo::*)(bool)>(&RuntimeMethodInfo::FormatNameAndSig)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeMethodInfo*), "FormatNameAndSig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: RuntimeMethodInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RuntimeMethodInfo::*)()>(&RuntimeMethodInfo::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeMethodInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeMethodInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeMethodInfo::*)()>(&RuntimeMethodInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeMethodInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeMethodInfo::*)()>(&RuntimeMethodInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeMethodInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoMethod
#include "System/Reflection/MonoMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.PInvokeAttributes
#include "System/Reflection/PInvokeAttributes.hpp"
// Including type: System.Reflection.MethodImplAttributes
#include "System/Reflection/MethodImplAttributes.hpp"
// Including type: System.RuntimeMethodHandle
#include "System/RuntimeMethodHandle.hpp"
// Including type: System.Reflection.MethodAttributes
#include "System/Reflection/MethodAttributes.hpp"
// Including type: System.Reflection.CallingConventions
#include "System/Reflection/CallingConventions.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Reflection.CustomAttributeData
#include "System/Reflection/CustomAttributeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoMethod.get_name
::Il2CppString* System::Reflection::MonoMethod::get_name(System::Reflection::MethodBase* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethod", "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_base_method
System::Reflection::MonoMethod* System::Reflection::MonoMethod::get_base_method(System::Reflection::MonoMethod* method, bool definition) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_base_method");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethod", "get_base_method", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(definition)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MonoMethod*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, method, definition);
}
// Autogenerated method: System.Reflection.MonoMethod.InternalInvoke
::Il2CppObject* System::Reflection::MonoMethod::InternalInvoke(::Il2CppObject* obj, ::Array<::Il2CppObject*>* parameters, System::Exception*& exc) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::InternalInvoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractIndependentType<System::Exception*&>()})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, parameters, exc);
}
// Autogenerated method: System.Reflection.MonoMethod.ConvertValues
void System::Reflection::MonoMethod::ConvertValues(System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* args, ::Array<System::Reflection::ParameterInfo*>* pinfo, System::Globalization::CultureInfo* culture, System::Reflection::BindingFlags invokeAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::ConvertValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethod", "ConvertValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(pinfo), ::il2cpp_utils::ExtractType(culture), ::il2cpp_utils::ExtractType(invokeAttr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, binder, args, pinfo, culture, invokeAttr);
}
// Autogenerated method: System.Reflection.MonoMethod.GetPInvoke
void System::Reflection::MonoMethod::GetPInvoke(System::Reflection::PInvokeAttributes& flags, ::Il2CppString*& entryPoint, ::Il2CppString*& dllName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetPInvoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::PInvokeAttributes&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flags, entryPoint, dllName);
}
// Autogenerated method: System.Reflection.MonoMethod.GetPseudoCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoMethod::GetPseudoCustomAttributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetPseudoCustomAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPseudoCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.MakeGenericMethod_impl
System::Reflection::MethodInfo* System::Reflection::MonoMethod::MakeGenericMethod_impl(::Array<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::MakeGenericMethod_impl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MakeGenericMethod_impl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, types);
}
// Autogenerated method: System.Reflection.MonoMethod.GetGenericMethodDefinition_impl
System::Reflection::MethodInfo* System::Reflection::MonoMethod::GetGenericMethodDefinition_impl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetGenericMethodDefinition_impl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGenericMethodDefinition_impl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_core_clr_security_level
int System::Reflection::MonoMethod::get_core_clr_security_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_core_clr_security_level");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoMethod", "get_core_clr_security_level", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.GetBaseDefinition
System::Reflection::MethodInfo* System::Reflection::MonoMethod::GetBaseDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetBaseDefinition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBaseDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.GetBaseMethod
System::Reflection::MethodInfo* System::Reflection::MonoMethod::GetBaseMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetBaseMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBaseMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_ReturnType
System::Type* System::Reflection::MonoMethod::get_ReturnType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_ReturnType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReturnType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.GetMethodImplementationFlags
System::Reflection::MethodImplAttributes System::Reflection::MonoMethod::GetMethodImplementationFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetMethodImplementationFlags");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethodImplementationFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodImplAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.GetParameters
::Array<System::Reflection::ParameterInfo*>* System::Reflection::MonoMethod::GetParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.GetParametersInternal
::Array<System::Reflection::ParameterInfo*>* System::Reflection::MonoMethod::GetParametersInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetParametersInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParametersInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.GetParametersCount
int System::Reflection::MonoMethod::GetParametersCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetParametersCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParametersCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.Invoke
::Il2CppObject* System::Reflection::MonoMethod::Invoke(::Il2CppObject* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* parameters, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractType(culture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, invokeAttr, binder, parameters, culture);
}
// Autogenerated method: System.Reflection.MonoMethod.get_MethodHandle
System::RuntimeMethodHandle System::Reflection::MonoMethod::get_MethodHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_MethodHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MethodHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeMethodHandle, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_Attributes
System::Reflection::MethodAttributes System::Reflection::MonoMethod::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_CallingConvention
System::Reflection::CallingConventions System::Reflection::MonoMethod::get_CallingConvention() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_CallingConvention");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CallingConvention", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::CallingConventions, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_ReflectedType
System::Type* System::Reflection::MonoMethod::get_ReflectedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_ReflectedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_DeclaringType
System::Type* System::Reflection::MonoMethod::get_DeclaringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_DeclaringType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_Name
::Il2CppString* System::Reflection::MonoMethod::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.IsDefined
bool System::Reflection::MonoMethod::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoMethod.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoMethod::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.MonoMethod.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoMethod::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoMethod.MakeGenericMethod
System::Reflection::MethodInfo* System::Reflection::MonoMethod::MakeGenericMethod(::Array<System::Type*>* methodInstantiation) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::MakeGenericMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MakeGenericMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodInstantiation)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, methodInstantiation);
}
// Creating initializer_list -> params proxy for: System.Reflection.MethodInfo MakeGenericMethod(params System.Type[] methodInstantiation)
System::Reflection::MethodInfo* System::Reflection::MonoMethod::MakeGenericMethod(std::initializer_list<System::Type*> methodInstantiation) {
  return System::Reflection::MonoMethod::MakeGenericMethod(::Array<System::Type*>::New(methodInstantiation));
}
// Autogenerated method: System.Reflection.MonoMethod.GetGenericArguments
::Array<System::Type*>* System::Reflection::MonoMethod::GetGenericArguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetGenericArguments");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGenericArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.GetGenericMethodDefinition
System::Reflection::MethodInfo* System::Reflection::MonoMethod::GetGenericMethodDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetGenericMethodDefinition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGenericMethodDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_IsGenericMethodDefinition
bool System::Reflection::MonoMethod::get_IsGenericMethodDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_IsGenericMethodDefinition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsGenericMethodDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_IsGenericMethod
bool System::Reflection::MonoMethod::get_IsGenericMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_IsGenericMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsGenericMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_ContainsGenericParameters
bool System::Reflection::MonoMethod::get_ContainsGenericParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_ContainsGenericParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContainsGenericParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.GetCustomAttributesData
System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* System::Reflection::MonoMethod::GetCustomAttributesData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::GetCustomAttributesData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributesData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoMethod.get_IsSecurityCritical
bool System::Reflection::MonoMethod::get_IsSecurityCritical() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoMethod::get_IsSecurityCritical");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSecurityCritical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MonoMethod::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Reflection::MethodBase*)>(&MonoMethod::get_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MethodBase*>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_base_method
// Il2CppName: get_base_method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MonoMethod* (*)(System::Reflection::MonoMethod*, bool)>(&MonoMethod::get_base_method)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_base_method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoMethod*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::InternalInvoke
// Il2CppName: InternalInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoMethod::*)(::Il2CppObject*, ::Array<::Il2CppObject*>*, System::Exception*&)>(&MonoMethod::InternalInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "InternalInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*&>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::ConvertValues
// Il2CppName: ConvertValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Reflection::Binder*, ::Array<::Il2CppObject*>*, ::Array<System::Reflection::ParameterInfo*>*, System::Globalization::CultureInfo*, System::Reflection::BindingFlags)>(&MonoMethod::ConvertValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "ConvertValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterInfo*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetPInvoke
// Il2CppName: GetPInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoMethod::*)(System::Reflection::PInvokeAttributes&, ::Il2CppString*&, ::Il2CppString*&)>(&MonoMethod::GetPInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetPInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::PInvokeAttributes&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetPseudoCustomAttributes
// Il2CppName: GetPseudoCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoMethod::*)()>(&MonoMethod::GetPseudoCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetPseudoCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::MakeGenericMethod_impl
// Il2CppName: MakeGenericMethod_impl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoMethod::*)(::Array<System::Type*>*)>(&MonoMethod::MakeGenericMethod_impl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "MakeGenericMethod_impl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetGenericMethodDefinition_impl
// Il2CppName: GetGenericMethodDefinition_impl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoMethod::*)()>(&MonoMethod::GetGenericMethodDefinition_impl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetGenericMethodDefinition_impl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_core_clr_security_level
// Il2CppName: get_core_clr_security_level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&MonoMethod::get_core_clr_security_level)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_core_clr_security_level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoMethod::*)()>(&MonoMethod::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoMethod::*)()>(&MonoMethod::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetBaseDefinition
// Il2CppName: GetBaseDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoMethod::*)()>(&MonoMethod::GetBaseDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetBaseDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetBaseMethod
// Il2CppName: GetBaseMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoMethod::*)()>(&MonoMethod::GetBaseMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetBaseMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_ReturnType
// Il2CppName: get_ReturnType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoMethod::*)()>(&MonoMethod::get_ReturnType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_ReturnType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetMethodImplementationFlags
// Il2CppName: GetMethodImplementationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodImplAttributes (MonoMethod::*)()>(&MonoMethod::GetMethodImplementationFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetMethodImplementationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetParameters
// Il2CppName: GetParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (MonoMethod::*)()>(&MonoMethod::GetParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetParametersInternal
// Il2CppName: GetParametersInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (MonoMethod::*)()>(&MonoMethod::GetParametersInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetParametersInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetParametersCount
// Il2CppName: GetParametersCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MonoMethod::*)()>(&MonoMethod::GetParametersCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetParametersCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoMethod::*)(::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&MonoMethod::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_MethodHandle
// Il2CppName: get_MethodHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeMethodHandle (MonoMethod::*)()>(&MonoMethod::get_MethodHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_MethodHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodAttributes (MonoMethod::*)()>(&MonoMethod::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_CallingConvention
// Il2CppName: get_CallingConvention
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::CallingConventions (MonoMethod::*)()>(&MonoMethod::get_CallingConvention)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_CallingConvention", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_ReflectedType
// Il2CppName: get_ReflectedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoMethod::*)()>(&MonoMethod::get_ReflectedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_ReflectedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_DeclaringType
// Il2CppName: get_DeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoMethod::*)()>(&MonoMethod::get_DeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_DeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonoMethod::*)()>(&MonoMethod::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoMethod::*)(System::Type*, bool)>(&MonoMethod::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoMethod::*)(bool)>(&MonoMethod::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoMethod::*)(System::Type*, bool)>(&MonoMethod::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::MakeGenericMethod
// Il2CppName: MakeGenericMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoMethod::*)(::Array<System::Type*>*)>(&MonoMethod::MakeGenericMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "MakeGenericMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetGenericArguments
// Il2CppName: GetGenericArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (MonoMethod::*)()>(&MonoMethod::GetGenericArguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetGenericArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetGenericMethodDefinition
// Il2CppName: GetGenericMethodDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoMethod::*)()>(&MonoMethod::GetGenericMethodDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetGenericMethodDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_IsGenericMethodDefinition
// Il2CppName: get_IsGenericMethodDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoMethod::*)()>(&MonoMethod::get_IsGenericMethodDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_IsGenericMethodDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_IsGenericMethod
// Il2CppName: get_IsGenericMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoMethod::*)()>(&MonoMethod::get_IsGenericMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_IsGenericMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_ContainsGenericParameters
// Il2CppName: get_ContainsGenericParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoMethod::*)()>(&MonoMethod::get_ContainsGenericParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_ContainsGenericParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::GetCustomAttributesData
// Il2CppName: GetCustomAttributesData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* (MonoMethod::*)()>(&MonoMethod::GetCustomAttributesData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "GetCustomAttributesData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoMethod::get_IsSecurityCritical
// Il2CppName: get_IsSecurityCritical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoMethod::*)()>(&MonoMethod::get_IsSecurityCritical)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoMethod*), "get_IsSecurityCritical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.RuntimeConstructorInfo
#include "System/Reflection/RuntimeConstructorInfo.hpp"
// Including type: System.Reflection.RuntimeModule
#include "System/Reflection/RuntimeModule.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.RuntimeType
#include "System/RuntimeType.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.RuntimeConstructorInfo.GetRuntimeModule
System::Reflection::RuntimeModule* System::Reflection::RuntimeConstructorInfo::GetRuntimeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeConstructorInfo::GetRuntimeModule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRuntimeModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::RuntimeModule*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeConstructorInfo.get_BindingFlags
System::Reflection::BindingFlags System::Reflection::RuntimeConstructorInfo::get_BindingFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeConstructorInfo::get_BindingFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::BindingFlags, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeConstructorInfo.get_ReflectedTypeInternal
System::RuntimeType* System::Reflection::RuntimeConstructorInfo::get_ReflectedTypeInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeConstructorInfo::get_ReflectedTypeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedTypeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeType*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeConstructorInfo.GetObjectData
void System::Reflection::RuntimeConstructorInfo::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeConstructorInfo::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Reflection.RuntimeConstructorInfo.SerializationToString
::Il2CppString* System::Reflection::RuntimeConstructorInfo::SerializationToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeConstructorInfo::SerializationToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializationToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimeConstructorInfo.SerializationInvoke
void System::Reflection::RuntimeConstructorInfo::SerializationInvoke(::Il2CppObject* target, System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeConstructorInfo::SerializationInvoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializationInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, target, info, context);
}
// Autogenerated method: System.Reflection.RuntimeConstructorInfo.get_Module
System::Reflection::Module* System::Reflection::RuntimeConstructorInfo::get_Module() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimeConstructorInfo::get_Module");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Module", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Module*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RuntimeConstructorInfo::GetRuntimeModule
// Il2CppName: GetRuntimeModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::RuntimeModule* (RuntimeConstructorInfo::*)()>(&RuntimeConstructorInfo::GetRuntimeModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeConstructorInfo*), "GetRuntimeModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeConstructorInfo::get_BindingFlags
// Il2CppName: get_BindingFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::BindingFlags (RuntimeConstructorInfo::*)()>(&RuntimeConstructorInfo::get_BindingFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeConstructorInfo*), "get_BindingFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeConstructorInfo::get_ReflectedTypeInternal
// Il2CppName: get_ReflectedTypeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (RuntimeConstructorInfo::*)()>(&RuntimeConstructorInfo::get_ReflectedTypeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeConstructorInfo*), "get_ReflectedTypeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeConstructorInfo::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeConstructorInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&RuntimeConstructorInfo::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeConstructorInfo*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: RuntimeConstructorInfo::SerializationToString
// Il2CppName: SerializationToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RuntimeConstructorInfo::*)()>(&RuntimeConstructorInfo::SerializationToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeConstructorInfo*), "SerializationToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeConstructorInfo::SerializationInvoke
// Il2CppName: SerializationInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeConstructorInfo::*)(::Il2CppObject*, System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&RuntimeConstructorInfo::SerializationInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeConstructorInfo*), "SerializationInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: RuntimeConstructorInfo::get_Module
// Il2CppName: get_Module
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Module* (RuntimeConstructorInfo::*)()>(&RuntimeConstructorInfo::get_Module)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeConstructorInfo*), "get_Module", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeConstructorInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeConstructorInfo::*)()>(&RuntimeConstructorInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeConstructorInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeConstructorInfo::*)()>(&RuntimeConstructorInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeConstructorInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoCMethod
#include "System/Reflection/MonoCMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.Reflection.MethodImplAttributes
#include "System/Reflection/MethodImplAttributes.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
// Including type: System.RuntimeMethodHandle
#include "System/RuntimeMethodHandle.hpp"
// Including type: System.Reflection.MethodAttributes
#include "System/Reflection/MethodAttributes.hpp"
// Including type: System.Reflection.CallingConventions
#include "System/Reflection/CallingConventions.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Reflection.CustomAttributeData
#include "System/Reflection/CustomAttributeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoCMethod.InternalInvoke
::Il2CppObject* System::Reflection::MonoCMethod::InternalInvoke(::Il2CppObject* obj, ::Array<::Il2CppObject*>* parameters, System::Exception*& exc) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::InternalInvoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractIndependentType<System::Exception*&>()})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, parameters, exc);
}
// Autogenerated method: System.Reflection.MonoCMethod.DoInvoke
::Il2CppObject* System::Reflection::MonoCMethod::DoInvoke(::Il2CppObject* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* parameters, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::DoInvoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractType(culture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, invokeAttr, binder, parameters, culture);
}
// Autogenerated method: System.Reflection.MonoCMethod.InternalInvoke
::Il2CppObject* System::Reflection::MonoCMethod::InternalInvoke(::Il2CppObject* obj, ::Array<::Il2CppObject*>* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::InternalInvoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(parameters)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, parameters);
}
// Autogenerated method: System.Reflection.MonoCMethod.get_core_clr_security_level
int System::Reflection::MonoCMethod::get_core_clr_security_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::get_core_clr_security_level");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoCMethod", "get_core_clr_security_level", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.GetMethodImplementationFlags
System::Reflection::MethodImplAttributes System::Reflection::MonoCMethod::GetMethodImplementationFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::GetMethodImplementationFlags");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethodImplementationFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodImplAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.GetParameters
::Array<System::Reflection::ParameterInfo*>* System::Reflection::MonoCMethod::GetParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::GetParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.GetParametersInternal
::Array<System::Reflection::ParameterInfo*>* System::Reflection::MonoCMethod::GetParametersInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::GetParametersInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParametersInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.GetParametersCount
int System::Reflection::MonoCMethod::GetParametersCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::GetParametersCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParametersCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.Invoke
::Il2CppObject* System::Reflection::MonoCMethod::Invoke(::Il2CppObject* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* parameters, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractType(culture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, invokeAttr, binder, parameters, culture);
}
// Autogenerated method: System.Reflection.MonoCMethod.Invoke
::Il2CppObject* System::Reflection::MonoCMethod::Invoke(System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* parameters, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractType(culture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, invokeAttr, binder, parameters, culture);
}
// Autogenerated method: System.Reflection.MonoCMethod.get_MethodHandle
System::RuntimeMethodHandle System::Reflection::MonoCMethod::get_MethodHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::get_MethodHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MethodHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeMethodHandle, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.get_Attributes
System::Reflection::MethodAttributes System::Reflection::MonoCMethod::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.get_CallingConvention
System::Reflection::CallingConventions System::Reflection::MonoCMethod::get_CallingConvention() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::get_CallingConvention");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CallingConvention", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::CallingConventions, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.get_ContainsGenericParameters
bool System::Reflection::MonoCMethod::get_ContainsGenericParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::get_ContainsGenericParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContainsGenericParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.get_ReflectedType
System::Type* System::Reflection::MonoCMethod::get_ReflectedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::get_ReflectedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.get_DeclaringType
System::Type* System::Reflection::MonoCMethod::get_DeclaringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::get_DeclaringType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.get_Name
::Il2CppString* System::Reflection::MonoCMethod::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.IsDefined
bool System::Reflection::MonoCMethod::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoCMethod.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoCMethod::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.MonoCMethod.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoCMethod::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoCMethod.ToString
::Il2CppString* System::Reflection::MonoCMethod::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.GetCustomAttributesData
System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* System::Reflection::MonoCMethod::GetCustomAttributesData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::GetCustomAttributesData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributesData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoCMethod.get_IsSecurityCritical
bool System::Reflection::MonoCMethod::get_IsSecurityCritical() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoCMethod::get_IsSecurityCritical");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSecurityCritical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MonoCMethod::InternalInvoke
// Il2CppName: InternalInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoCMethod::*)(::Il2CppObject*, ::Array<::Il2CppObject*>*, System::Exception*&)>(&MonoCMethod::InternalInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "InternalInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*&>()});
  }
};
// Writing MetadataGetter for method: MonoCMethod::DoInvoke
// Il2CppName: DoInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoCMethod::*)(::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&MonoCMethod::DoInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "DoInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: MonoCMethod::InternalInvoke
// Il2CppName: InternalInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoCMethod::*)(::Il2CppObject*, ::Array<::Il2CppObject*>*)>(&MonoCMethod::InternalInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "InternalInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: MonoCMethod::get_core_clr_security_level
// Il2CppName: get_core_clr_security_level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&MonoCMethod::get_core_clr_security_level)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "get_core_clr_security_level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::GetMethodImplementationFlags
// Il2CppName: GetMethodImplementationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodImplAttributes (MonoCMethod::*)()>(&MonoCMethod::GetMethodImplementationFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "GetMethodImplementationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::GetParameters
// Il2CppName: GetParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (MonoCMethod::*)()>(&MonoCMethod::GetParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "GetParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::GetParametersInternal
// Il2CppName: GetParametersInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (MonoCMethod::*)()>(&MonoCMethod::GetParametersInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "GetParametersInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::GetParametersCount
// Il2CppName: GetParametersCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MonoCMethod::*)()>(&MonoCMethod::GetParametersCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "GetParametersCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoCMethod::*)(::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&MonoCMethod::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: MonoCMethod::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoCMethod::*)(System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&MonoCMethod::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: MonoCMethod::get_MethodHandle
// Il2CppName: get_MethodHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeMethodHandle (MonoCMethod::*)()>(&MonoCMethod::get_MethodHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "get_MethodHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodAttributes (MonoCMethod::*)()>(&MonoCMethod::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::get_CallingConvention
// Il2CppName: get_CallingConvention
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::CallingConventions (MonoCMethod::*)()>(&MonoCMethod::get_CallingConvention)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "get_CallingConvention", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::get_ContainsGenericParameters
// Il2CppName: get_ContainsGenericParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoCMethod::*)()>(&MonoCMethod::get_ContainsGenericParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "get_ContainsGenericParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::get_ReflectedType
// Il2CppName: get_ReflectedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoCMethod::*)()>(&MonoCMethod::get_ReflectedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "get_ReflectedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::get_DeclaringType
// Il2CppName: get_DeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoCMethod::*)()>(&MonoCMethod::get_DeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "get_DeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonoCMethod::*)()>(&MonoCMethod::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoCMethod::*)(System::Type*, bool)>(&MonoCMethod::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoCMethod::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoCMethod::*)(bool)>(&MonoCMethod::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoCMethod::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoCMethod::*)(System::Type*, bool)>(&MonoCMethod::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoCMethod::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonoCMethod::*)()>(&MonoCMethod::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::GetCustomAttributesData
// Il2CppName: GetCustomAttributesData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* (MonoCMethod::*)()>(&MonoCMethod::GetCustomAttributesData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "GetCustomAttributesData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::get_IsSecurityCritical
// Il2CppName: get_IsSecurityCritical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoCMethod::*)()>(&MonoCMethod::get_IsSecurityCritical)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), "get_IsSecurityCritical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoCMethod::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoCMethod::*)()>(&MonoCMethod::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoCMethod::*)()>(&MonoCMethod::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoCMethod*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Reflection.RuntimeModule
#include "System/Reflection/RuntimeModule.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RuntimeModule::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeModule::*)()>(&RuntimeModule::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeModule*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeModule::*)()>(&RuntimeModule::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeModule*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoModule
#include "System/Reflection/MonoModule.hpp"
// Including type: System.Reflection.RuntimeAssembly
#include "System/Reflection/RuntimeAssembly.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoModule.GetRuntimeAssembly
System::Reflection::RuntimeAssembly* System::Reflection::MonoModule::GetRuntimeAssembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoModule::GetRuntimeAssembly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRuntimeAssembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::RuntimeAssembly*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoModule.get_Assembly
System::Reflection::Assembly* System::Reflection::MonoModule::get_Assembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoModule::get_Assembly");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Assembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Assembly*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoModule.get_ScopeName
::Il2CppString* System::Reflection::MonoModule::get_ScopeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoModule::get_ScopeName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ScopeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoModule.get_ModuleVersionId
System::Guid System::Reflection::MonoModule::get_ModuleVersionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoModule::get_ModuleVersionId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ModuleVersionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Guid, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoModule.IsResource
bool System::Reflection::MonoModule::IsResource() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoModule::IsResource");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoModule.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoModule::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoModule::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoModule.IsDefined
bool System::Reflection::MonoModule::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoModule::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoModule.GetObjectData
void System::Reflection::MonoModule::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoModule::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Writing MetadataGetter for method: MonoModule::GetRuntimeAssembly
// Il2CppName: GetRuntimeAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::RuntimeAssembly* (MonoModule::*)()>(&MonoModule::GetRuntimeAssembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoModule*), "GetRuntimeAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoModule::get_Assembly
// Il2CppName: get_Assembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (MonoModule::*)()>(&MonoModule::get_Assembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoModule*), "get_Assembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoModule::get_ScopeName
// Il2CppName: get_ScopeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonoModule::*)()>(&MonoModule::get_ScopeName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoModule*), "get_ScopeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoModule::get_ModuleVersionId
// Il2CppName: get_ModuleVersionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Guid (MonoModule::*)()>(&MonoModule::get_ModuleVersionId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoModule*), "get_ModuleVersionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoModule::IsResource
// Il2CppName: IsResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoModule::*)()>(&MonoModule::IsResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoModule*), "IsResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoModule::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoModule::*)(System::Type*, bool)>(&MonoModule::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoModule*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoModule::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoModule::*)(System::Type*, bool)>(&MonoModule::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoModule*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoModule::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoModule::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&MonoModule::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoModule*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: MonoModule::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoModule::*)()>(&MonoModule::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoModule*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoModule::*)()>(&MonoModule::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoModule*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Reflection.RuntimeParameterInfo
#include "System/Reflection/RuntimeParameterInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RuntimeParameterInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeParameterInfo::*)()>(&RuntimeParameterInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeParameterInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeParameterInfo::*)()>(&RuntimeParameterInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeParameterInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoParameterInfo
#include "System/Reflection/MonoParameterInfo.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoParameterInfo.get_DefaultValue
::Il2CppObject* System::Reflection::MonoParameterInfo::get_DefaultValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoParameterInfo::get_DefaultValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoParameterInfo.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoParameterInfo::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoParameterInfo::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoParameterInfo.IsDefined
bool System::Reflection::MonoParameterInfo::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoParameterInfo::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Writing MetadataGetter for method: MonoParameterInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoParameterInfo::*)(System::Reflection::ParameterInfo*, System::Reflection::MemberInfo*)>(&MonoParameterInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoParameterInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::ParameterInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::MemberInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoParameterInfo::*)(System::Reflection::ParameterInfo*, System::Reflection::MemberInfo*)>(&MonoParameterInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoParameterInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::ParameterInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::MemberInfo*>()});
  }
};
// Writing MetadataGetter for method: MonoParameterInfo::get_DefaultValue
// Il2CppName: get_DefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoParameterInfo::*)()>(&MonoParameterInfo::get_DefaultValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoParameterInfo*), "get_DefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoParameterInfo::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoParameterInfo::*)(System::Type*, bool)>(&MonoParameterInfo::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoParameterInfo*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoParameterInfo::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoParameterInfo::*)(System::Type*, bool)>(&MonoParameterInfo::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoParameterInfo*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoPropertyInfo
#include "System/Reflection/MonoPropertyInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.MonoProperty
#include "System/Reflection/MonoProperty.hpp"
// Including type: System.Reflection.PInfo
#include "System/Reflection/PInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoPropertyInfo.get_property_info
void System::Reflection::MonoPropertyInfo::get_property_info(System::Reflection::MonoProperty* prop, System::Reflection::MonoPropertyInfo& info, System::Reflection::PInfo req_info) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoPropertyInfo::get_property_info");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoPropertyInfo", "get_property_info", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(req_info)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, prop, info, req_info);
}
// Autogenerated method: System.Reflection.MonoPropertyInfo.GetTypeModifiers
::Array<System::Type*>* System::Reflection::MonoPropertyInfo::GetTypeModifiers(System::Reflection::MonoProperty* prop, bool optional) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoPropertyInfo::GetTypeModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoPropertyInfo", "GetTypeModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(optional)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, prop, optional);
}
// Autogenerated method: System.Reflection.MonoPropertyInfo.get_default_value
::Il2CppObject* System::Reflection::MonoPropertyInfo::get_default_value(System::Reflection::MonoProperty* prop) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoPropertyInfo::get_default_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoPropertyInfo", "get_default_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prop)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, prop);
}
// Writing MetadataGetter for method: MonoPropertyInfo::get_property_info
// Il2CppName: get_property_info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Reflection::MonoProperty*, System::Reflection::MonoPropertyInfo&, System::Reflection::PInfo)>(&MonoPropertyInfo::get_property_info)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoPropertyInfo), "get_property_info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoProperty*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoPropertyInfo&>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::PInfo>()});
  }
};
// Writing MetadataGetter for method: MonoPropertyInfo::GetTypeModifiers
// Il2CppName: GetTypeModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (*)(System::Reflection::MonoProperty*, bool)>(&MonoPropertyInfo::GetTypeModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoPropertyInfo), "GetTypeModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoProperty*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoPropertyInfo::get_default_value
// Il2CppName: get_default_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Reflection::MonoProperty*)>(&MonoPropertyInfo::get_default_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoPropertyInfo), "get_default_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MonoProperty*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Reflection.PInfo
#include "System/Reflection/PInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Reflection.PInfo Attributes
System::Reflection::PInfo System::Reflection::PInfo::_get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_get_Attributes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Reflection::PInfo>("System.Reflection", "PInfo", "Attributes"));
}
// Autogenerated static field setter
// Set static field: static public System.Reflection.PInfo Attributes
void System::Reflection::PInfo::_set_Attributes(System::Reflection::PInfo value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_set_Attributes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Reflection", "PInfo", "Attributes", value));
}
// Autogenerated static field getter
// Get static field: static public System.Reflection.PInfo GetMethod
System::Reflection::PInfo System::Reflection::PInfo::_get_GetMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_get_GetMethod");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Reflection::PInfo>("System.Reflection", "PInfo", "GetMethod"));
}
// Autogenerated static field setter
// Set static field: static public System.Reflection.PInfo GetMethod
void System::Reflection::PInfo::_set_GetMethod(System::Reflection::PInfo value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_set_GetMethod");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Reflection", "PInfo", "GetMethod", value));
}
// Autogenerated static field getter
// Get static field: static public System.Reflection.PInfo SetMethod
System::Reflection::PInfo System::Reflection::PInfo::_get_SetMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_get_SetMethod");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Reflection::PInfo>("System.Reflection", "PInfo", "SetMethod"));
}
// Autogenerated static field setter
// Set static field: static public System.Reflection.PInfo SetMethod
void System::Reflection::PInfo::_set_SetMethod(System::Reflection::PInfo value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_set_SetMethod");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Reflection", "PInfo", "SetMethod", value));
}
// Autogenerated static field getter
// Get static field: static public System.Reflection.PInfo ReflectedType
System::Reflection::PInfo System::Reflection::PInfo::_get_ReflectedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_get_ReflectedType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Reflection::PInfo>("System.Reflection", "PInfo", "ReflectedType"));
}
// Autogenerated static field setter
// Set static field: static public System.Reflection.PInfo ReflectedType
void System::Reflection::PInfo::_set_ReflectedType(System::Reflection::PInfo value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_set_ReflectedType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Reflection", "PInfo", "ReflectedType", value));
}
// Autogenerated static field getter
// Get static field: static public System.Reflection.PInfo DeclaringType
System::Reflection::PInfo System::Reflection::PInfo::_get_DeclaringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_get_DeclaringType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Reflection::PInfo>("System.Reflection", "PInfo", "DeclaringType"));
}
// Autogenerated static field setter
// Set static field: static public System.Reflection.PInfo DeclaringType
void System::Reflection::PInfo::_set_DeclaringType(System::Reflection::PInfo value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_set_DeclaringType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Reflection", "PInfo", "DeclaringType", value));
}
// Autogenerated static field getter
// Get static field: static public System.Reflection.PInfo Name
System::Reflection::PInfo System::Reflection::PInfo::_get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_get_Name");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Reflection::PInfo>("System.Reflection", "PInfo", "Name"));
}
// Autogenerated static field setter
// Set static field: static public System.Reflection.PInfo Name
void System::Reflection::PInfo::_set_Name(System::Reflection::PInfo value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PInfo::_set_Name");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Reflection", "PInfo", "Name", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.RuntimePropertyInfo
#include "System/Reflection/RuntimePropertyInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.RuntimeType
#include "System/RuntimeType.hpp"
// Including type: System.Reflection.RuntimeModule
#include "System/Reflection/RuntimeModule.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.RuntimePropertyInfo.get_BindingFlags
System::Reflection::BindingFlags System::Reflection::RuntimePropertyInfo::get_BindingFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimePropertyInfo::get_BindingFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::BindingFlags, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimePropertyInfo.GetDeclaringTypeInternal
System::RuntimeType* System::Reflection::RuntimePropertyInfo::GetDeclaringTypeInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimePropertyInfo::GetDeclaringTypeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDeclaringTypeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeType*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimePropertyInfo.get_ReflectedTypeInternal
System::RuntimeType* System::Reflection::RuntimePropertyInfo::get_ReflectedTypeInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimePropertyInfo::get_ReflectedTypeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedTypeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeType*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimePropertyInfo.GetRuntimeModule
System::Reflection::RuntimeModule* System::Reflection::RuntimePropertyInfo::GetRuntimeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimePropertyInfo::GetRuntimeModule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRuntimeModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::RuntimeModule*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimePropertyInfo.FormatNameAndSig
::Il2CppString* System::Reflection::RuntimePropertyInfo::FormatNameAndSig(bool serialization) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimePropertyInfo::FormatNameAndSig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FormatNameAndSig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serialization)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, serialization);
}
// Autogenerated method: System.Reflection.RuntimePropertyInfo.GetObjectData
void System::Reflection::RuntimePropertyInfo::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimePropertyInfo::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Reflection.RuntimePropertyInfo.SerializationToString
::Il2CppString* System::Reflection::RuntimePropertyInfo::SerializationToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimePropertyInfo::SerializationToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializationToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimePropertyInfo.get_Module
System::Reflection::Module* System::Reflection::RuntimePropertyInfo::get_Module() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimePropertyInfo::get_Module");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Module", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Module*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.RuntimePropertyInfo.ToString
::Il2CppString* System::Reflection::RuntimePropertyInfo::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::RuntimePropertyInfo::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RuntimePropertyInfo::get_BindingFlags
// Il2CppName: get_BindingFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::BindingFlags (RuntimePropertyInfo::*)()>(&RuntimePropertyInfo::get_BindingFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), "get_BindingFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimePropertyInfo::GetDeclaringTypeInternal
// Il2CppName: GetDeclaringTypeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (RuntimePropertyInfo::*)()>(&RuntimePropertyInfo::GetDeclaringTypeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), "GetDeclaringTypeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimePropertyInfo::get_ReflectedTypeInternal
// Il2CppName: get_ReflectedTypeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (RuntimePropertyInfo::*)()>(&RuntimePropertyInfo::get_ReflectedTypeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), "get_ReflectedTypeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimePropertyInfo::GetRuntimeModule
// Il2CppName: GetRuntimeModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::RuntimeModule* (RuntimePropertyInfo::*)()>(&RuntimePropertyInfo::GetRuntimeModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), "GetRuntimeModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimePropertyInfo::FormatNameAndSig
// Il2CppName: FormatNameAndSig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RuntimePropertyInfo::*)(bool)>(&RuntimePropertyInfo::FormatNameAndSig)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), "FormatNameAndSig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: RuntimePropertyInfo::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimePropertyInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&RuntimePropertyInfo::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: RuntimePropertyInfo::SerializationToString
// Il2CppName: SerializationToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RuntimePropertyInfo::*)()>(&RuntimePropertyInfo::SerializationToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), "SerializationToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimePropertyInfo::get_Module
// Il2CppName: get_Module
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Module* (RuntimePropertyInfo::*)()>(&RuntimePropertyInfo::get_Module)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), "get_Module", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimePropertyInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RuntimePropertyInfo::*)()>(&RuntimePropertyInfo::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimePropertyInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimePropertyInfo::*)()>(&RuntimePropertyInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimePropertyInfo::*)()>(&RuntimePropertyInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimePropertyInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoProperty
#include "System/Reflection/MonoProperty.hpp"
// Including type: System.Reflection.MonoProperty/GetterAdapter
#include "System/Reflection/MonoProperty_GetterAdapter.hpp"
// Including type: System.Reflection.MonoProperty/Getter`2
#include "System/Reflection/MonoProperty_Getter_2.hpp"
// Including type: System.Reflection.MonoProperty/StaticGetter`1
#include "System/Reflection/MonoProperty_StaticGetter_1.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.PropertyAttributes
#include "System/Reflection/PropertyAttributes.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Reflection.CustomAttributeData
#include "System/Reflection/CustomAttributeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoProperty.CachePropertyInfo
void System::Reflection::MonoProperty::CachePropertyInfo(System::Reflection::PInfo flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::CachePropertyInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CachePropertyInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flags);
}
// Autogenerated method: System.Reflection.MonoProperty.CreateGetterDelegate
System::Reflection::MonoProperty::GetterAdapter* System::Reflection::MonoProperty::CreateGetterDelegate(System::Reflection::MethodInfo* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::CreateGetterDelegate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "MonoProperty", "CreateGetterDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MonoProperty::GetterAdapter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, method);
}
// Autogenerated method: System.Reflection.MonoProperty.get_Attributes
System::Reflection::PropertyAttributes System::Reflection::MonoProperty::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::PropertyAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.get_CanRead
bool System::Reflection::MonoProperty::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::get_CanRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.get_CanWrite
bool System::Reflection::MonoProperty::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.get_PropertyType
System::Type* System::Reflection::MonoProperty::get_PropertyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::get_PropertyType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PropertyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.get_ReflectedType
System::Type* System::Reflection::MonoProperty::get_ReflectedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::get_ReflectedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.get_DeclaringType
System::Type* System::Reflection::MonoProperty::get_DeclaringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::get_DeclaringType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.get_Name
::Il2CppString* System::Reflection::MonoProperty::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.GetAccessors
::Array<System::Reflection::MethodInfo*>* System::Reflection::MonoProperty::GetAccessors(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetAccessors");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAccessors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::MethodInfo*>*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.MonoProperty.GetGetMethod
System::Reflection::MethodInfo* System::Reflection::MonoProperty::GetGetMethod(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetGetMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGetMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.MonoProperty.GetIndexParameters
::Array<System::Reflection::ParameterInfo*>* System::Reflection::MonoProperty::GetIndexParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetIndexParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.GetSetMethod
System::Reflection::MethodInfo* System::Reflection::MonoProperty::GetSetMethod(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetSetMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSetMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.MonoProperty.GetConstantValue
::Il2CppObject* System::Reflection::MonoProperty::GetConstantValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetConstantValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstantValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.GetRawConstantValue
::Il2CppObject* System::Reflection::MonoProperty::GetRawConstantValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetRawConstantValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRawConstantValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.IsDefined
bool System::Reflection::MonoProperty::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoProperty.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoProperty::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.MonoProperty.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::MonoProperty::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.MonoProperty.GetValue
::Il2CppObject* System::Reflection::MonoProperty::GetValue(::Il2CppObject* obj, ::Array<::Il2CppObject*>* index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, index);
}
// Autogenerated method: System.Reflection.MonoProperty.GetValue
::Il2CppObject* System::Reflection::MonoProperty::GetValue(::Il2CppObject* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* index, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(culture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, invokeAttr, binder, index, culture);
}
// Autogenerated method: System.Reflection.MonoProperty.SetValue
void System::Reflection::MonoProperty::SetValue(::Il2CppObject* obj, ::Il2CppObject* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* index, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::SetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(culture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, value, invokeAttr, binder, index, culture);
}
// Autogenerated method: System.Reflection.MonoProperty.GetOptionalCustomModifiers
::Array<System::Type*>* System::Reflection::MonoProperty::GetOptionalCustomModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetOptionalCustomModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOptionalCustomModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.GetRequiredCustomModifiers
::Array<System::Type*>* System::Reflection::MonoProperty::GetRequiredCustomModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetRequiredCustomModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRequiredCustomModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.MonoProperty.GetCustomAttributesData
System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* System::Reflection::MonoProperty::GetCustomAttributesData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetCustomAttributesData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributesData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MonoProperty::CachePropertyInfo
// Il2CppName: CachePropertyInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoProperty::*)(System::Reflection::PInfo)>(&MonoProperty::CachePropertyInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "CachePropertyInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::PInfo>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetterAdapterFrame
// Il2CppName: GetterAdapterFrame
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MonoProperty::StaticGetterAdapterFrame
// Il2CppName: StaticGetterAdapterFrame
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MonoProperty::CreateGetterDelegate
// Il2CppName: CreateGetterDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MonoProperty::GetterAdapter* (*)(System::Reflection::MethodInfo*)>(&MonoProperty::CreateGetterDelegate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "CreateGetterDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MethodInfo*>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::PropertyAttributes (MonoProperty::*)()>(&MonoProperty::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoProperty::*)()>(&MonoProperty::get_CanRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoProperty::*)()>(&MonoProperty::get_CanWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::get_PropertyType
// Il2CppName: get_PropertyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoProperty::*)()>(&MonoProperty::get_PropertyType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "get_PropertyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::get_ReflectedType
// Il2CppName: get_ReflectedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoProperty::*)()>(&MonoProperty::get_ReflectedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "get_ReflectedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::get_DeclaringType
// Il2CppName: get_DeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MonoProperty::*)()>(&MonoProperty::get_DeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "get_DeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonoProperty::*)()>(&MonoProperty::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetAccessors
// Il2CppName: GetAccessors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::MethodInfo*>* (MonoProperty::*)(bool)>(&MonoProperty::GetAccessors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetAccessors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetGetMethod
// Il2CppName: GetGetMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoProperty::*)(bool)>(&MonoProperty::GetGetMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetGetMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetIndexParameters
// Il2CppName: GetIndexParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (MonoProperty::*)()>(&MonoProperty::GetIndexParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetIndexParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetSetMethod
// Il2CppName: GetSetMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MonoProperty::*)(bool)>(&MonoProperty::GetSetMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetSetMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetConstantValue
// Il2CppName: GetConstantValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoProperty::*)()>(&MonoProperty::GetConstantValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetConstantValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetRawConstantValue
// Il2CppName: GetRawConstantValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoProperty::*)()>(&MonoProperty::GetRawConstantValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetRawConstantValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoProperty::*)(System::Type*, bool)>(&MonoProperty::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoProperty::*)(bool)>(&MonoProperty::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MonoProperty::*)(System::Type*, bool)>(&MonoProperty::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoProperty::*)(::Il2CppObject*, ::Array<::Il2CppObject*>*)>(&MonoProperty::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoProperty::*)(::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&MonoProperty::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoProperty::*)(::Il2CppObject*, ::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&MonoProperty::SetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetOptionalCustomModifiers
// Il2CppName: GetOptionalCustomModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (MonoProperty::*)()>(&MonoProperty::GetOptionalCustomModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetOptionalCustomModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetRequiredCustomModifiers
// Il2CppName: GetRequiredCustomModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (MonoProperty::*)()>(&MonoProperty::GetRequiredCustomModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetRequiredCustomModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetCustomAttributesData
// Il2CppName: GetCustomAttributesData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* (MonoProperty::*)()>(&MonoProperty::GetCustomAttributesData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), "GetCustomAttributesData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoProperty::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoProperty::*)()>(&MonoProperty::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoProperty::*)()>(&MonoProperty::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MonoProperty/GetterAdapter
#include "System/Reflection/MonoProperty_GetterAdapter.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.MonoProperty/GetterAdapter.Invoke
::Il2CppObject* System::Reflection::MonoProperty::GetterAdapter::Invoke(::Il2CppObject* _this) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetterAdapter::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_this)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, _this);
}
// Autogenerated method: System.Reflection.MonoProperty/GetterAdapter.BeginInvoke
System::IAsyncResult* System::Reflection::MonoProperty::GetterAdapter::BeginInvoke(::Il2CppObject* _this, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetterAdapter::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_this), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, _this, callback, object);
}
// Autogenerated method: System.Reflection.MonoProperty/GetterAdapter.EndInvoke
::Il2CppObject* System::Reflection::MonoProperty::GetterAdapter::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::MonoProperty::GetterAdapter::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: MonoProperty::GetterAdapter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoProperty::GetterAdapter::*)(::Il2CppObject*, System::IntPtr)>(&MonoProperty::GetterAdapter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty::GetterAdapter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoProperty::GetterAdapter::*)(::Il2CppObject*, System::IntPtr)>(&MonoProperty::GetterAdapter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty::GetterAdapter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetterAdapter::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoProperty::GetterAdapter::*)(::Il2CppObject*)>(&MonoProperty::GetterAdapter::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty::GetterAdapter*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetterAdapter::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (MonoProperty::GetterAdapter::*)(::Il2CppObject*, System::AsyncCallback*, ::Il2CppObject*)>(&MonoProperty::GetterAdapter::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty::GetterAdapter*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MonoProperty::GetterAdapter::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MonoProperty::GetterAdapter::*)(System::IAsyncResult*)>(&MonoProperty::GetterAdapter::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoProperty::GetterAdapter*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
// Including type: System.Runtime.InteropServices.MarshalAsAttribute
#include "System/Runtime/InteropServices/MarshalAsAttribute.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.Reflection.CallingConventions
#include "System/Reflection/CallingConventions.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.ParameterInfo.FormatParameters
void System::Reflection::ParameterInfo::FormatParameters(System::Text::StringBuilder* sb, ::Array<System::Reflection::ParameterInfo*>* p, System::Reflection::CallingConventions callingConvention, bool serialization) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::FormatParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "ParameterInfo", "FormatParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(callingConvention), ::il2cpp_utils::ExtractType(serialization)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sb, p, callingConvention, serialization);
}
// Autogenerated method: System.Reflection.ParameterInfo.get_ParameterType
System::Type* System::Reflection::ParameterInfo::get_ParameterType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::get_ParameterType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParameterType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.get_Attributes
System::Reflection::ParameterAttributes System::Reflection::ParameterInfo::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::ParameterAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.get_IsIn
bool System::Reflection::ParameterInfo::get_IsIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::get_IsIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.get_IsOptional
bool System::Reflection::ParameterInfo::get_IsOptional() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::get_IsOptional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsOptional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.get_IsOut
bool System::Reflection::ParameterInfo::get_IsOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::get_IsOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.get_IsRetval
bool System::Reflection::ParameterInfo::get_IsRetval() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::get_IsRetval");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRetval", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.get_Member
System::Reflection::MemberInfo* System::Reflection::ParameterInfo::get_Member() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::get_Member");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Member", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MemberInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.get_Name
::Il2CppString* System::Reflection::ParameterInfo::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.get_Position
int System::Reflection::ParameterInfo::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::get_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.GetPseudoCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::ParameterInfo::GetPseudoCustomAttributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::GetPseudoCustomAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPseudoCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.GetDefaultValueImpl
::Il2CppObject* System::Reflection::ParameterInfo::GetDefaultValueImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::GetDefaultValueImpl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultValueImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.get_DefaultValue
::Il2CppObject* System::Reflection::ParameterInfo::get_DefaultValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::get_DefaultValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.ParameterInfo.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::ParameterInfo::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.ParameterInfo.GetRealObject
::Il2CppObject* System::Reflection::ParameterInfo::GetRealObject(System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::GetRealObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRealObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, context);
}
// Autogenerated method: System.Reflection.ParameterInfo.IsDefined
bool System::Reflection::ParameterInfo::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.ParameterInfo.New
System::Reflection::ParameterInfo* System::Reflection::ParameterInfo::New(System::Reflection::ParameterInfo* pinfo, System::Reflection::MemberInfo* member) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::New");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "ParameterInfo", "New", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pinfo), ::il2cpp_utils::ExtractType(member)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::ParameterInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pinfo, member);
}
// Autogenerated method: System.Reflection.ParameterInfo.ToString
::Il2CppString* System::Reflection::ParameterInfo::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::ParameterInfo::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ParameterInfo::FormatParameters
// Il2CppName: FormatParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Text::StringBuilder*, ::Array<System::Reflection::ParameterInfo*>*, System::Reflection::CallingConventions, bool)>(&ParameterInfo::FormatParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "FormatParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterInfo*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::CallingConventions>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ParameterInfo::get_ParameterType
// Il2CppName: get_ParameterType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (ParameterInfo::*)()>(&ParameterInfo::get_ParameterType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "get_ParameterType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::ParameterAttributes (ParameterInfo::*)()>(&ParameterInfo::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::get_IsIn
// Il2CppName: get_IsIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ParameterInfo::*)()>(&ParameterInfo::get_IsIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "get_IsIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::get_IsOptional
// Il2CppName: get_IsOptional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ParameterInfo::*)()>(&ParameterInfo::get_IsOptional)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "get_IsOptional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::get_IsOut
// Il2CppName: get_IsOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ParameterInfo::*)()>(&ParameterInfo::get_IsOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "get_IsOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::get_IsRetval
// Il2CppName: get_IsRetval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ParameterInfo::*)()>(&ParameterInfo::get_IsRetval)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "get_IsRetval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::get_Member
// Il2CppName: get_Member
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MemberInfo* (ParameterInfo::*)()>(&ParameterInfo::get_Member)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "get_Member", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ParameterInfo::*)()>(&ParameterInfo::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ParameterInfo::*)()>(&ParameterInfo::get_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::GetPseudoCustomAttributes
// Il2CppName: GetPseudoCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (ParameterInfo::*)()>(&ParameterInfo::GetPseudoCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "GetPseudoCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::GetDefaultValueImpl
// Il2CppName: GetDefaultValueImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ParameterInfo::*)()>(&ParameterInfo::GetDefaultValueImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "GetDefaultValueImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::get_DefaultValue
// Il2CppName: get_DefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ParameterInfo::*)()>(&ParameterInfo::get_DefaultValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "get_DefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (ParameterInfo::*)(System::Type*, bool)>(&ParameterInfo::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ParameterInfo::GetRealObject
// Il2CppName: GetRealObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ParameterInfo::*)(System::Runtime::Serialization::StreamingContext)>(&ParameterInfo::GetRealObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "GetRealObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: ParameterInfo::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ParameterInfo::*)(System::Type*, bool)>(&ParameterInfo::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ParameterInfo::New
// Il2CppName: New
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::ParameterInfo* (*)(System::Reflection::ParameterInfo*, System::Reflection::MemberInfo*)>(&ParameterInfo::New)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "New", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::ParameterInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::MemberInfo*>()});
  }
};
// Writing MetadataGetter for method: ParameterInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParameterInfo::*)()>(&ParameterInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParameterInfo::*)()>(&ParameterInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParameterInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ParameterInfo::*)()>(&ParameterInfo::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: System.Reflection.PropertyAttributes
#include "System/Reflection/PropertyAttributes.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.NotImplementedException
#include "System/NotImplementedException.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Mono.RuntimePropertyHandle
#include "Mono/RuntimePropertyHandle.hpp"
// Including type: System.RuntimeTypeHandle
#include "System/RuntimeTypeHandle.hpp"
// Including type: System.Reflection.MemberTypes
#include "System/Reflection/MemberTypes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.PropertyInfo.get_Attributes
System::Reflection::PropertyAttributes System::Reflection::PropertyInfo::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::PropertyAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.get_CanRead
bool System::Reflection::PropertyInfo::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::get_CanRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.get_CanWrite
bool System::Reflection::PropertyInfo::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.get_PropertyType
System::Type* System::Reflection::PropertyInfo::get_PropertyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::get_PropertyType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PropertyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetAccessors
::Array<System::Reflection::MethodInfo*>* System::Reflection::PropertyInfo::GetAccessors(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetAccessors");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAccessors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::MethodInfo*>*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetGetMethod
System::Reflection::MethodInfo* System::Reflection::PropertyInfo::GetGetMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetGetMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGetMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetGetMethod
System::Reflection::MethodInfo* System::Reflection::PropertyInfo::GetGetMethod(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetGetMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGetMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetIndexParameters
::Array<System::Reflection::ParameterInfo*>* System::Reflection::PropertyInfo::GetIndexParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetIndexParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetSetMethod
System::Reflection::MethodInfo* System::Reflection::PropertyInfo::GetSetMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetSetMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSetMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetSetMethod
System::Reflection::MethodInfo* System::Reflection::PropertyInfo::GetSetMethod(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetSetMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSetMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetValue
::Il2CppObject* System::Reflection::PropertyInfo::GetValue(::Il2CppObject* obj, ::Array<::Il2CppObject*>* index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, index);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetValue
::Il2CppObject* System::Reflection::PropertyInfo::GetValue(::Il2CppObject* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* index, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(culture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, invokeAttr, binder, index, culture);
}
// Autogenerated method: System.Reflection.PropertyInfo.SetValue
void System::Reflection::PropertyInfo::SetValue(::Il2CppObject* obj, ::Il2CppObject* value, ::Array<::Il2CppObject*>* index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::SetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, value, index);
}
// Autogenerated method: System.Reflection.PropertyInfo.SetValue
void System::Reflection::PropertyInfo::SetValue(::Il2CppObject* obj, ::Il2CppObject* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* index, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::SetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(culture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, value, invokeAttr, binder, index, culture);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetOptionalCustomModifiers
::Array<System::Type*>* System::Reflection::PropertyInfo::GetOptionalCustomModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetOptionalCustomModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOptionalCustomModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetRequiredCustomModifiers
::Array<System::Type*>* System::Reflection::PropertyInfo::GetRequiredCustomModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetRequiredCustomModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRequiredCustomModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.CreateNIE
System::NotImplementedException* System::Reflection::PropertyInfo::CreateNIE() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::CreateNIE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "PropertyInfo", "CreateNIE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::NotImplementedException*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetConstantValue
::Il2CppObject* System::Reflection::PropertyInfo::GetConstantValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetConstantValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstantValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetRawConstantValue
::Il2CppObject* System::Reflection::PropertyInfo::GetRawConstantValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetRawConstantValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRawConstantValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.internal_from_handle_type
System::Reflection::PropertyInfo* System::Reflection::PropertyInfo::internal_from_handle_type(System::IntPtr event_handle, System::IntPtr type_handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::internal_from_handle_type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "PropertyInfo", "internal_from_handle_type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(event_handle), ::il2cpp_utils::ExtractType(type_handle)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::PropertyInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, event_handle, type_handle);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetPropertyFromHandle
System::Reflection::PropertyInfo* System::Reflection::PropertyInfo::GetPropertyFromHandle(Mono::RuntimePropertyHandle handle, System::RuntimeTypeHandle reflectedType) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetPropertyFromHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "PropertyInfo", "GetPropertyFromHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(reflectedType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::PropertyInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, handle, reflectedType);
}
// Autogenerated method: System.Reflection.PropertyInfo.get_MemberType
System::Reflection::MemberTypes System::Reflection::PropertyInfo::get_MemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::get_MemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MemberTypes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.Equals
bool System::Reflection::PropertyInfo::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Reflection.PropertyInfo.GetHashCode
int System::Reflection::PropertyInfo::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.PropertyInfo.op_Equality
bool System::Reflection::operator ==(System::Reflection::PropertyInfo* left, System::Reflection::PropertyInfo& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "PropertyInfo", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(&right)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, &right);
}
// Autogenerated method: System.Reflection.PropertyInfo.op_Inequality
bool System::Reflection::operator !=(System::Reflection::PropertyInfo* left, System::Reflection::PropertyInfo& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::PropertyInfo::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection", "PropertyInfo", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(&right)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, &right);
}
// Writing MetadataGetter for method: PropertyInfo::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::PropertyAttributes (PropertyInfo::*)()>(&PropertyInfo::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PropertyInfo::*)()>(&PropertyInfo::get_CanRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PropertyInfo::*)()>(&PropertyInfo::get_CanWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::get_PropertyType
// Il2CppName: get_PropertyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (PropertyInfo::*)()>(&PropertyInfo::get_PropertyType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "get_PropertyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetAccessors
// Il2CppName: GetAccessors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::MethodInfo*>* (PropertyInfo::*)(bool)>(&PropertyInfo::GetAccessors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetAccessors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetGetMethod
// Il2CppName: GetGetMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (PropertyInfo::*)()>(&PropertyInfo::GetGetMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetGetMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetGetMethod
// Il2CppName: GetGetMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (PropertyInfo::*)(bool)>(&PropertyInfo::GetGetMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetGetMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetIndexParameters
// Il2CppName: GetIndexParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (PropertyInfo::*)()>(&PropertyInfo::GetIndexParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetIndexParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetSetMethod
// Il2CppName: GetSetMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (PropertyInfo::*)()>(&PropertyInfo::GetSetMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetSetMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetSetMethod
// Il2CppName: GetSetMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (PropertyInfo::*)(bool)>(&PropertyInfo::GetSetMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetSetMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PropertyInfo::*)(::Il2CppObject*, ::Array<::Il2CppObject*>*)>(&PropertyInfo::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PropertyInfo::*)(::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&PropertyInfo::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyInfo::*)(::Il2CppObject*, ::Il2CppObject*, ::Array<::Il2CppObject*>*)>(&PropertyInfo::SetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyInfo::*)(::Il2CppObject*, ::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&PropertyInfo::SetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetOptionalCustomModifiers
// Il2CppName: GetOptionalCustomModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (PropertyInfo::*)()>(&PropertyInfo::GetOptionalCustomModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetOptionalCustomModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetRequiredCustomModifiers
// Il2CppName: GetRequiredCustomModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (PropertyInfo::*)()>(&PropertyInfo::GetRequiredCustomModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetRequiredCustomModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::CreateNIE
// Il2CppName: CreateNIE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::NotImplementedException* (*)()>(&PropertyInfo::CreateNIE)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "CreateNIE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetConstantValue
// Il2CppName: GetConstantValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PropertyInfo::*)()>(&PropertyInfo::GetConstantValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetConstantValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetRawConstantValue
// Il2CppName: GetRawConstantValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PropertyInfo::*)()>(&PropertyInfo::GetRawConstantValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetRawConstantValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::internal_from_handle_type
// Il2CppName: internal_from_handle_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::PropertyInfo* (*)(System::IntPtr, System::IntPtr)>(&PropertyInfo::internal_from_handle_type)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "internal_from_handle_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetPropertyFromHandle
// Il2CppName: GetPropertyFromHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::PropertyInfo* (*)(Mono::RuntimePropertyHandle, System::RuntimeTypeHandle)>(&PropertyInfo::GetPropertyFromHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetPropertyFromHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::RuntimePropertyHandle>(), ::il2cpp_utils::ExtractIndependentType<System::RuntimeTypeHandle>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::get_MemberType
// Il2CppName: get_MemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MemberTypes (PropertyInfo::*)()>(&PropertyInfo::get_MemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "get_MemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyInfo::*)()>(&PropertyInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyInfo::*)()>(&PropertyInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PropertyInfo::*)(::Il2CppObject*)>(&PropertyInfo::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PropertyInfo::*)()>(&PropertyInfo::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyInfo::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Reflection::PropertyInfo*, System::Reflection::PropertyInfo&)>(&PropertyInfo::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::PropertyInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::PropertyInfo&>()});
  }
};
// Writing MetadataGetter for method: PropertyInfo::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Reflection::PropertyInfo*, System::Reflection::PropertyInfo&)>(&PropertyInfo::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyInfo*), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::PropertyInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::PropertyInfo&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.StrongNameKeyPair
#include "System/Reflection/StrongNameKeyPair.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.StrongNameKeyPair.System.Runtime.Serialization.ISerializable.GetObjectData
void System::Reflection::StrongNameKeyPair::System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::StrongNameKeyPair::System.Runtime.Serialization.ISerializable.GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Reflection.StrongNameKeyPair.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
void System::Reflection::StrongNameKeyPair::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::StrongNameKeyPair::System.Runtime.Serialization.IDeserializationCallback.OnDeserialization");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sender);
}
// Writing MetadataGetter for method: StrongNameKeyPair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StrongNameKeyPair::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&StrongNameKeyPair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StrongNameKeyPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StrongNameKeyPair::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&StrongNameKeyPair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StrongNameKeyPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: StrongNameKeyPair::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StrongNameKeyPair::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&StrongNameKeyPair::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StrongNameKeyPair*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: StrongNameKeyPair::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
// Il2CppName: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StrongNameKeyPair::*)(::Il2CppObject*)>(&StrongNameKeyPair::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StrongNameKeyPair*), "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.Emit.ConstructorBuilder
#include "System/Reflection/Emit/ConstructorBuilder.hpp"
// Including type: System.Reflection.MethodAttributes
#include "System/Reflection/MethodAttributes.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
// Including type: System.RuntimeMethodHandle
#include "System/RuntimeMethodHandle.hpp"
// Including type: System.Reflection.MethodImplAttributes
#include "System/Reflection/MethodImplAttributes.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.get_Attributes
System::Reflection::MethodAttributes System::Reflection::Emit::ConstructorBuilder::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.get_DeclaringType
System::Type* System::Reflection::Emit::ConstructorBuilder::get_DeclaringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::get_DeclaringType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.get_Name
::Il2CppString* System::Reflection::Emit::ConstructorBuilder::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.GetParameters
::Array<System::Reflection::ParameterInfo*>* System::Reflection::Emit::ConstructorBuilder::GetParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::GetParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.get_MethodHandle
System::RuntimeMethodHandle System::Reflection::Emit::ConstructorBuilder::get_MethodHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::get_MethodHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MethodHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeMethodHandle, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.get_ReflectedType
System::Type* System::Reflection::Emit::ConstructorBuilder::get_ReflectedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::get_ReflectedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::ConstructorBuilder::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::ConstructorBuilder::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags
System::Reflection::MethodImplAttributes System::Reflection::Emit::ConstructorBuilder::GetMethodImplementationFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::GetMethodImplementationFlags");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethodImplementationFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodImplAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.Invoke
::Il2CppObject* System::Reflection::Emit::ConstructorBuilder::Invoke(::Il2CppObject* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* parameters, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractType(culture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, invokeAttr, binder, parameters, culture);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.Invoke
::Il2CppObject* System::Reflection::Emit::ConstructorBuilder::Invoke(System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* parameters, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractType(culture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, invokeAttr, binder, parameters, culture);
}
// Autogenerated method: System.Reflection.Emit.ConstructorBuilder.IsDefined
bool System::Reflection::Emit::ConstructorBuilder::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::ConstructorBuilder::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Writing MetadataGetter for method: ConstructorBuilder::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodAttributes (ConstructorBuilder::*)()>(&ConstructorBuilder::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::get_DeclaringType
// Il2CppName: get_DeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (ConstructorBuilder::*)()>(&ConstructorBuilder::get_DeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "get_DeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ConstructorBuilder::*)()>(&ConstructorBuilder::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::GetParameters
// Il2CppName: GetParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (ConstructorBuilder::*)()>(&ConstructorBuilder::GetParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "GetParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::get_MethodHandle
// Il2CppName: get_MethodHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeMethodHandle (ConstructorBuilder::*)()>(&ConstructorBuilder::get_MethodHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "get_MethodHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::get_ReflectedType
// Il2CppName: get_ReflectedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (ConstructorBuilder::*)()>(&ConstructorBuilder::get_ReflectedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "get_ReflectedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (ConstructorBuilder::*)(bool)>(&ConstructorBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (ConstructorBuilder::*)(System::Type*, bool)>(&ConstructorBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::GetMethodImplementationFlags
// Il2CppName: GetMethodImplementationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodImplAttributes (ConstructorBuilder::*)()>(&ConstructorBuilder::GetMethodImplementationFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "GetMethodImplementationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ConstructorBuilder::*)(::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&ConstructorBuilder::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ConstructorBuilder::*)(System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&ConstructorBuilder::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: ConstructorBuilder::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConstructorBuilder::*)(System::Type*, bool)>(&ConstructorBuilder::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstructorBuilder*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.Emit.EnumBuilder
#include "System/Reflection/Emit/EnumBuilder.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
// Including type: System.Reflection.TypeAttributes
#include "System/Reflection/TypeAttributes.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Reflection.CallingConventions
#include "System/Reflection/CallingConventions.hpp"
// Including type: System.Reflection.EventInfo
#include "System/Reflection/EventInfo.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.Emit.EnumBuilder.get_Assembly
System::Reflection::Assembly* System::Reflection::Emit::EnumBuilder::get_Assembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::get_Assembly");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Assembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Assembly*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.get_AssemblyQualifiedName
::Il2CppString* System::Reflection::Emit::EnumBuilder::get_AssemblyQualifiedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::get_AssemblyQualifiedName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AssemblyQualifiedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.get_BaseType
System::Type* System::Reflection::Emit::EnumBuilder::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::get_BaseType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.get_FullName
::Il2CppString* System::Reflection::Emit::EnumBuilder::get_FullName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::get_FullName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FullName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.get_GUID
System::Guid System::Reflection::Emit::EnumBuilder::get_GUID() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::get_GUID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GUID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Guid, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.get_Module
System::Reflection::Module* System::Reflection::Emit::EnumBuilder::get_Module() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::get_Module");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Module", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Module*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.get_Name
::Il2CppString* System::Reflection::Emit::EnumBuilder::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.get_Namespace
::Il2CppString* System::Reflection::Emit::EnumBuilder::get_Namespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::get_Namespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Namespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetElementType
System::Type* System::Reflection::Emit::EnumBuilder::GetElementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetElementType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetElementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.get_UnderlyingSystemType
System::Type* System::Reflection::Emit::EnumBuilder::get_UnderlyingSystemType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::get_UnderlyingSystemType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UnderlyingSystemType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl
System::Reflection::TypeAttributes System::Reflection::Emit::EnumBuilder::GetAttributeFlagsImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetAttributeFlagsImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAttributeFlagsImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::TypeAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetConstructorImpl
System::Reflection::ConstructorInfo* System::Reflection::Emit::EnumBuilder::GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetConstructorImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstructorImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(callConvention), ::il2cpp_utils::ExtractType(types), ::il2cpp_utils::ExtractType(modifiers)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::ConstructorInfo*, false>(this, ___internal__method, bindingAttr, binder, callConvention, types, modifiers);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetConstructors
::Array<System::Reflection::ConstructorInfo*>* System::Reflection::Emit::EnumBuilder::GetConstructors(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetConstructors");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstructors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ConstructorInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::EnumBuilder::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::EnumBuilder::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetEvent
System::Reflection::EventInfo* System::Reflection::Emit::EnumBuilder::GetEvent(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::EventInfo*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetField
System::Reflection::FieldInfo* System::Reflection::Emit::EnumBuilder::GetField(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetField");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::FieldInfo*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetFields
::Array<System::Reflection::FieldInfo*>* System::Reflection::Emit::EnumBuilder::GetFields(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetFields");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::FieldInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetInterfaces
::Array<System::Type*>* System::Reflection::Emit::EnumBuilder::GetInterfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetInterfaces");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInterfaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetMethodImpl
System::Reflection::MethodInfo* System::Reflection::Emit::EnumBuilder::GetMethodImpl(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetMethodImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethodImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(callConvention), ::il2cpp_utils::ExtractType(types), ::il2cpp_utils::ExtractType(modifiers)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, name, bindingAttr, binder, callConvention, types, modifiers);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetMethods
::Array<System::Reflection::MethodInfo*>* System::Reflection::Emit::EnumBuilder::GetMethods(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetMethods");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethods", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::MethodInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetNestedType
System::Type* System::Reflection::Emit::EnumBuilder::GetNestedType(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetNestedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNestedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetProperties
::Array<System::Reflection::PropertyInfo*>* System::Reflection::Emit::EnumBuilder::GetProperties(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::PropertyInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.GetPropertyImpl
System::Reflection::PropertyInfo* System::Reflection::Emit::EnumBuilder::GetPropertyImpl(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::GetPropertyImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPropertyImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(returnType), ::il2cpp_utils::ExtractType(types), ::il2cpp_utils::ExtractType(modifiers)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::PropertyInfo*, false>(this, ___internal__method, name, bindingAttr, binder, returnType, types, modifiers);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.HasElementTypeImpl
bool System::Reflection::Emit::EnumBuilder::HasElementTypeImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::HasElementTypeImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasElementTypeImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.InvokeMember
::Il2CppObject* System::Reflection::Emit::EnumBuilder::InvokeMember(::Il2CppString* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Il2CppObject* target, ::Array<::Il2CppObject*>* args, ::Array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, ::Array<::Il2CppString*>* namedParameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::InvokeMember");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeMember", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(modifiers), ::il2cpp_utils::ExtractType(culture), ::il2cpp_utils::ExtractType(namedParameters)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.IsArrayImpl
bool System::Reflection::Emit::EnumBuilder::IsArrayImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::IsArrayImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsArrayImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.IsByRefImpl
bool System::Reflection::Emit::EnumBuilder::IsByRefImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::IsByRefImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsByRefImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl
bool System::Reflection::Emit::EnumBuilder::IsCOMObjectImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::IsCOMObjectImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsCOMObjectImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.IsDefined
bool System::Reflection::Emit::EnumBuilder::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.IsPointerImpl
bool System::Reflection::Emit::EnumBuilder::IsPointerImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::IsPointerImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPointerImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl
bool System::Reflection::Emit::EnumBuilder::IsPrimitiveImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::EnumBuilder::IsPrimitiveImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPrimitiveImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnumBuilder::get_Assembly
// Il2CppName: get_Assembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (EnumBuilder::*)()>(&EnumBuilder::get_Assembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "get_Assembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::get_AssemblyQualifiedName
// Il2CppName: get_AssemblyQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EnumBuilder::*)()>(&EnumBuilder::get_AssemblyQualifiedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "get_AssemblyQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::get_BaseType
// Il2CppName: get_BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (EnumBuilder::*)()>(&EnumBuilder::get_BaseType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "get_BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EnumBuilder::*)()>(&EnumBuilder::get_FullName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::get_GUID
// Il2CppName: get_GUID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Guid (EnumBuilder::*)()>(&EnumBuilder::get_GUID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "get_GUID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::get_Module
// Il2CppName: get_Module
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Module* (EnumBuilder::*)()>(&EnumBuilder::get_Module)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "get_Module", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EnumBuilder::*)()>(&EnumBuilder::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EnumBuilder::*)()>(&EnumBuilder::get_Namespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetElementType
// Il2CppName: GetElementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (EnumBuilder::*)()>(&EnumBuilder::GetElementType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetElementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::get_UnderlyingSystemType
// Il2CppName: get_UnderlyingSystemType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (EnumBuilder::*)()>(&EnumBuilder::get_UnderlyingSystemType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "get_UnderlyingSystemType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetAttributeFlagsImpl
// Il2CppName: GetAttributeFlagsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::TypeAttributes (EnumBuilder::*)()>(&EnumBuilder::GetAttributeFlagsImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetAttributeFlagsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetConstructorImpl
// Il2CppName: GetConstructorImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::ConstructorInfo* (EnumBuilder::*)(System::Reflection::BindingFlags, System::Reflection::Binder*, System::Reflection::CallingConventions, ::Array<System::Type*>*, ::Array<System::Reflection::ParameterModifier>*)>(&EnumBuilder::GetConstructorImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetConstructorImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::CallingConventions>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetConstructors
// Il2CppName: GetConstructors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ConstructorInfo*>* (EnumBuilder::*)(System::Reflection::BindingFlags)>(&EnumBuilder::GetConstructors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetConstructors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (EnumBuilder::*)(bool)>(&EnumBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (EnumBuilder::*)(System::Type*, bool)>(&EnumBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetEvent
// Il2CppName: GetEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::EventInfo* (EnumBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags)>(&EnumBuilder::GetEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetField
// Il2CppName: GetField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::FieldInfo* (EnumBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags)>(&EnumBuilder::GetField)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetFields
// Il2CppName: GetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::FieldInfo*>* (EnumBuilder::*)(System::Reflection::BindingFlags)>(&EnumBuilder::GetFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetInterfaces
// Il2CppName: GetInterfaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (EnumBuilder::*)()>(&EnumBuilder::GetInterfaces)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetInterfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetMethodImpl
// Il2CppName: GetMethodImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (EnumBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags, System::Reflection::Binder*, System::Reflection::CallingConventions, ::Array<System::Type*>*, ::Array<System::Reflection::ParameterModifier>*)>(&EnumBuilder::GetMethodImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetMethodImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::CallingConventions>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetMethods
// Il2CppName: GetMethods
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::MethodInfo*>* (EnumBuilder::*)(System::Reflection::BindingFlags)>(&EnumBuilder::GetMethods)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetMethods", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetNestedType
// Il2CppName: GetNestedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (EnumBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags)>(&EnumBuilder::GetNestedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetNestedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetProperties
// Il2CppName: GetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::PropertyInfo*>* (EnumBuilder::*)(System::Reflection::BindingFlags)>(&EnumBuilder::GetProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::GetPropertyImpl
// Il2CppName: GetPropertyImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::PropertyInfo* (EnumBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags, System::Reflection::Binder*, System::Type*, ::Array<System::Type*>*, ::Array<System::Reflection::ParameterModifier>*)>(&EnumBuilder::GetPropertyImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "GetPropertyImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::HasElementTypeImpl
// Il2CppName: HasElementTypeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnumBuilder::*)()>(&EnumBuilder::HasElementTypeImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "HasElementTypeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::InvokeMember
// Il2CppName: InvokeMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (EnumBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Il2CppObject*, ::Array<::Il2CppObject*>*, ::Array<System::Reflection::ParameterModifier>*, System::Globalization::CultureInfo*, ::Array<::Il2CppString*>*)>(&EnumBuilder::InvokeMember)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "InvokeMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::IsArrayImpl
// Il2CppName: IsArrayImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnumBuilder::*)()>(&EnumBuilder::IsArrayImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "IsArrayImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::IsByRefImpl
// Il2CppName: IsByRefImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnumBuilder::*)()>(&EnumBuilder::IsByRefImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "IsByRefImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::IsCOMObjectImpl
// Il2CppName: IsCOMObjectImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnumBuilder::*)()>(&EnumBuilder::IsCOMObjectImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "IsCOMObjectImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnumBuilder::*)(System::Type*, bool)>(&EnumBuilder::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EnumBuilder::IsPointerImpl
// Il2CppName: IsPointerImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnumBuilder::*)()>(&EnumBuilder::IsPointerImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "IsPointerImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnumBuilder::IsPrimitiveImpl
// Il2CppName: IsPrimitiveImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnumBuilder::*)()>(&EnumBuilder::IsPrimitiveImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumBuilder*), "IsPrimitiveImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.Emit.FieldBuilder
#include "System/Reflection/Emit/FieldBuilder.hpp"
// Including type: System.Reflection.FieldAttributes
#include "System/Reflection/FieldAttributes.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.RuntimeFieldHandle
#include "System/RuntimeFieldHandle.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.Emit.FieldBuilder.get_Attributes
System::Reflection::FieldAttributes System::Reflection::Emit::FieldBuilder::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::FieldAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.FieldBuilder.get_DeclaringType
System::Type* System::Reflection::Emit::FieldBuilder::get_DeclaringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::get_DeclaringType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.FieldBuilder.get_FieldType
System::Type* System::Reflection::Emit::FieldBuilder::get_FieldType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::get_FieldType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.FieldBuilder.get_Name
::Il2CppString* System::Reflection::Emit::FieldBuilder::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.FieldBuilder.GetValue
::Il2CppObject* System::Reflection::Emit::FieldBuilder::GetValue(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Reflection.Emit.FieldBuilder.get_FieldHandle
System::RuntimeFieldHandle System::Reflection::Emit::FieldBuilder::get_FieldHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::get_FieldHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeFieldHandle, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.FieldBuilder.get_ReflectedType
System::Type* System::Reflection::Emit::FieldBuilder::get_ReflectedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::get_ReflectedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.FieldBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::FieldBuilder::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.Emit.FieldBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::FieldBuilder::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.FieldBuilder.IsDefined
bool System::Reflection::Emit::FieldBuilder::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.FieldBuilder.SetValue
void System::Reflection::Emit::FieldBuilder::SetValue(::Il2CppObject* obj, ::Il2CppObject* val, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::FieldBuilder::SetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(culture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, val, invokeAttr, binder, culture);
}
// Writing MetadataGetter for method: FieldBuilder::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::FieldAttributes (FieldBuilder::*)()>(&FieldBuilder::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldBuilder::get_DeclaringType
// Il2CppName: get_DeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (FieldBuilder::*)()>(&FieldBuilder::get_DeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "get_DeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldBuilder::get_FieldType
// Il2CppName: get_FieldType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (FieldBuilder::*)()>(&FieldBuilder::get_FieldType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "get_FieldType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldBuilder::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FieldBuilder::*)()>(&FieldBuilder::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldBuilder::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FieldBuilder::*)(::Il2CppObject*)>(&FieldBuilder::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: FieldBuilder::get_FieldHandle
// Il2CppName: get_FieldHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeFieldHandle (FieldBuilder::*)()>(&FieldBuilder::get_FieldHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "get_FieldHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldBuilder::get_ReflectedType
// Il2CppName: get_ReflectedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (FieldBuilder::*)()>(&FieldBuilder::get_ReflectedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "get_ReflectedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FieldBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (FieldBuilder::*)(bool)>(&FieldBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: FieldBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (FieldBuilder::*)(System::Type*, bool)>(&FieldBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: FieldBuilder::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FieldBuilder::*)(System::Type*, bool)>(&FieldBuilder::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: FieldBuilder::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FieldBuilder::*)(::Il2CppObject*, ::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, System::Globalization::CultureInfo*)>(&FieldBuilder::SetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FieldBuilder*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.Emit.GenericTypeParameterBuilder
#include "System/Reflection/Emit/GenericTypeParameterBuilder.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
// Including type: System.Reflection.TypeAttributes
#include "System/Reflection/TypeAttributes.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Reflection.CallingConventions
#include "System/Reflection/CallingConventions.hpp"
// Including type: System.Reflection.EventInfo
#include "System/Reflection/EventInfo.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.get_Assembly
System::Reflection::Assembly* System::Reflection::Emit::GenericTypeParameterBuilder::get_Assembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::get_Assembly");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Assembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Assembly*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.get_AssemblyQualifiedName
::Il2CppString* System::Reflection::Emit::GenericTypeParameterBuilder::get_AssemblyQualifiedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::get_AssemblyQualifiedName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AssemblyQualifiedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.get_BaseType
System::Type* System::Reflection::Emit::GenericTypeParameterBuilder::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::get_BaseType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.get_FullName
::Il2CppString* System::Reflection::Emit::GenericTypeParameterBuilder::get_FullName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::get_FullName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FullName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.get_GUID
System::Guid System::Reflection::Emit::GenericTypeParameterBuilder::get_GUID() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::get_GUID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GUID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Guid, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.get_Module
System::Reflection::Module* System::Reflection::Emit::GenericTypeParameterBuilder::get_Module() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::get_Module");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Module", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Module*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.get_Name
::Il2CppString* System::Reflection::Emit::GenericTypeParameterBuilder::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.get_Namespace
::Il2CppString* System::Reflection::Emit::GenericTypeParameterBuilder::get_Namespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::get_Namespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Namespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType
System::Type* System::Reflection::Emit::GenericTypeParameterBuilder::GetElementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetElementType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetElementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.get_UnderlyingSystemType
System::Type* System::Reflection::Emit::GenericTypeParameterBuilder::get_UnderlyingSystemType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::get_UnderlyingSystemType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UnderlyingSystemType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl
System::Reflection::TypeAttributes System::Reflection::Emit::GenericTypeParameterBuilder::GetAttributeFlagsImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetAttributeFlagsImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAttributeFlagsImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::TypeAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl
System::Reflection::ConstructorInfo* System::Reflection::Emit::GenericTypeParameterBuilder::GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetConstructorImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstructorImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(callConvention), ::il2cpp_utils::ExtractType(types), ::il2cpp_utils::ExtractType(modifiers)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::ConstructorInfo*, false>(this, ___internal__method, bindingAttr, binder, callConvention, types, modifiers);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors
::Array<System::Reflection::ConstructorInfo*>* System::Reflection::Emit::GenericTypeParameterBuilder::GetConstructors(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetConstructors");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstructors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ConstructorInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::GenericTypeParameterBuilder::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::GenericTypeParameterBuilder::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent
System::Reflection::EventInfo* System::Reflection::Emit::GenericTypeParameterBuilder::GetEvent(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::EventInfo*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetField
System::Reflection::FieldInfo* System::Reflection::Emit::GenericTypeParameterBuilder::GetField(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetField");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::FieldInfo*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetFields
::Array<System::Reflection::FieldInfo*>* System::Reflection::Emit::GenericTypeParameterBuilder::GetFields(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetFields");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::FieldInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces
::Array<System::Type*>* System::Reflection::Emit::GenericTypeParameterBuilder::GetInterfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetInterfaces");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInterfaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl
System::Reflection::MethodInfo* System::Reflection::Emit::GenericTypeParameterBuilder::GetMethodImpl(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetMethodImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethodImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(callConvention), ::il2cpp_utils::ExtractType(types), ::il2cpp_utils::ExtractType(modifiers)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, name, bindingAttr, binder, callConvention, types, modifiers);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods
::Array<System::Reflection::MethodInfo*>* System::Reflection::Emit::GenericTypeParameterBuilder::GetMethods(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetMethods");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethods", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::MethodInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType
System::Type* System::Reflection::Emit::GenericTypeParameterBuilder::GetNestedType(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetNestedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNestedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties
::Array<System::Reflection::PropertyInfo*>* System::Reflection::Emit::GenericTypeParameterBuilder::GetProperties(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::PropertyInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl
System::Reflection::PropertyInfo* System::Reflection::Emit::GenericTypeParameterBuilder::GetPropertyImpl(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::GetPropertyImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPropertyImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(returnType), ::il2cpp_utils::ExtractType(types), ::il2cpp_utils::ExtractType(modifiers)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::PropertyInfo*, false>(this, ___internal__method, name, bindingAttr, binder, returnType, types, modifiers);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl
bool System::Reflection::Emit::GenericTypeParameterBuilder::HasElementTypeImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::HasElementTypeImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasElementTypeImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember
::Il2CppObject* System::Reflection::Emit::GenericTypeParameterBuilder::InvokeMember(::Il2CppString* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Il2CppObject* target, ::Array<::Il2CppObject*>* args, ::Array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, ::Array<::Il2CppString*>* namedParameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::InvokeMember");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeMember", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(modifiers), ::il2cpp_utils::ExtractType(culture), ::il2cpp_utils::ExtractType(namedParameters)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl
bool System::Reflection::Emit::GenericTypeParameterBuilder::IsArrayImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::IsArrayImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsArrayImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl
bool System::Reflection::Emit::GenericTypeParameterBuilder::IsByRefImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::IsByRefImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsByRefImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl
bool System::Reflection::Emit::GenericTypeParameterBuilder::IsCOMObjectImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::IsCOMObjectImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsCOMObjectImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined
bool System::Reflection::Emit::GenericTypeParameterBuilder::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl
bool System::Reflection::Emit::GenericTypeParameterBuilder::IsPointerImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::IsPointerImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPointerImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl
bool System::Reflection::Emit::GenericTypeParameterBuilder::IsPrimitiveImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::GenericTypeParameterBuilder::IsPrimitiveImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPrimitiveImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GenericTypeParameterBuilder::get_Assembly
// Il2CppName: get_Assembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::get_Assembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "get_Assembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::get_AssemblyQualifiedName
// Il2CppName: get_AssemblyQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::get_AssemblyQualifiedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "get_AssemblyQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::get_BaseType
// Il2CppName: get_BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::get_BaseType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "get_BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::get_FullName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::get_GUID
// Il2CppName: get_GUID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Guid (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::get_GUID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "get_GUID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::get_Module
// Il2CppName: get_Module
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Module* (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::get_Module)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "get_Module", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::get_Namespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetElementType
// Il2CppName: GetElementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::GetElementType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetElementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::get_UnderlyingSystemType
// Il2CppName: get_UnderlyingSystemType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::get_UnderlyingSystemType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "get_UnderlyingSystemType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetAttributeFlagsImpl
// Il2CppName: GetAttributeFlagsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::TypeAttributes (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::GetAttributeFlagsImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetAttributeFlagsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetConstructorImpl
// Il2CppName: GetConstructorImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::ConstructorInfo* (GenericTypeParameterBuilder::*)(System::Reflection::BindingFlags, System::Reflection::Binder*, System::Reflection::CallingConventions, ::Array<System::Type*>*, ::Array<System::Reflection::ParameterModifier>*)>(&GenericTypeParameterBuilder::GetConstructorImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetConstructorImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::CallingConventions>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetConstructors
// Il2CppName: GetConstructors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ConstructorInfo*>* (GenericTypeParameterBuilder::*)(System::Reflection::BindingFlags)>(&GenericTypeParameterBuilder::GetConstructors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetConstructors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (GenericTypeParameterBuilder::*)(bool)>(&GenericTypeParameterBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (GenericTypeParameterBuilder::*)(System::Type*, bool)>(&GenericTypeParameterBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetEvent
// Il2CppName: GetEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::EventInfo* (GenericTypeParameterBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags)>(&GenericTypeParameterBuilder::GetEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetField
// Il2CppName: GetField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::FieldInfo* (GenericTypeParameterBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags)>(&GenericTypeParameterBuilder::GetField)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetFields
// Il2CppName: GetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::FieldInfo*>* (GenericTypeParameterBuilder::*)(System::Reflection::BindingFlags)>(&GenericTypeParameterBuilder::GetFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetInterfaces
// Il2CppName: GetInterfaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::GetInterfaces)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetInterfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetMethodImpl
// Il2CppName: GetMethodImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (GenericTypeParameterBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags, System::Reflection::Binder*, System::Reflection::CallingConventions, ::Array<System::Type*>*, ::Array<System::Reflection::ParameterModifier>*)>(&GenericTypeParameterBuilder::GetMethodImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetMethodImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::CallingConventions>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetMethods
// Il2CppName: GetMethods
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::MethodInfo*>* (GenericTypeParameterBuilder::*)(System::Reflection::BindingFlags)>(&GenericTypeParameterBuilder::GetMethods)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetMethods", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetNestedType
// Il2CppName: GetNestedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (GenericTypeParameterBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags)>(&GenericTypeParameterBuilder::GetNestedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetNestedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetProperties
// Il2CppName: GetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::PropertyInfo*>* (GenericTypeParameterBuilder::*)(System::Reflection::BindingFlags)>(&GenericTypeParameterBuilder::GetProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::GetPropertyImpl
// Il2CppName: GetPropertyImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::PropertyInfo* (GenericTypeParameterBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags, System::Reflection::Binder*, System::Type*, ::Array<System::Type*>*, ::Array<System::Reflection::ParameterModifier>*)>(&GenericTypeParameterBuilder::GetPropertyImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "GetPropertyImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::HasElementTypeImpl
// Il2CppName: HasElementTypeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::HasElementTypeImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "HasElementTypeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::InvokeMember
// Il2CppName: InvokeMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GenericTypeParameterBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Il2CppObject*, ::Array<::Il2CppObject*>*, ::Array<System::Reflection::ParameterModifier>*, System::Globalization::CultureInfo*, ::Array<::Il2CppString*>*)>(&GenericTypeParameterBuilder::InvokeMember)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "InvokeMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::IsArrayImpl
// Il2CppName: IsArrayImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::IsArrayImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "IsArrayImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::IsByRefImpl
// Il2CppName: IsByRefImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::IsByRefImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "IsByRefImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::IsCOMObjectImpl
// Il2CppName: IsCOMObjectImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::IsCOMObjectImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "IsCOMObjectImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GenericTypeParameterBuilder::*)(System::Type*, bool)>(&GenericTypeParameterBuilder::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::IsPointerImpl
// Il2CppName: IsPointerImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::IsPointerImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "IsPointerImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GenericTypeParameterBuilder::IsPrimitiveImpl
// Il2CppName: IsPrimitiveImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GenericTypeParameterBuilder::*)()>(&GenericTypeParameterBuilder::IsPrimitiveImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GenericTypeParameterBuilder*), "IsPrimitiveImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.Emit.MethodBuilder
#include "System/Reflection/Emit/MethodBuilder.hpp"
// Including type: System.Reflection.MethodAttributes
#include "System/Reflection/MethodAttributes.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
// Including type: System.RuntimeMethodHandle
#include "System/RuntimeMethodHandle.hpp"
// Including type: System.Reflection.MethodImplAttributes
#include "System/Reflection/MethodImplAttributes.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.Emit.MethodBuilder.get_Attributes
System::Reflection::MethodAttributes System::Reflection::Emit::MethodBuilder::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.get_DeclaringType
System::Type* System::Reflection::Emit::MethodBuilder::get_DeclaringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::get_DeclaringType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.get_Name
::Il2CppString* System::Reflection::Emit::MethodBuilder::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.GetParameters
::Array<System::Reflection::ParameterInfo*>* System::Reflection::Emit::MethodBuilder::GetParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::GetParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.get_MethodHandle
System::RuntimeMethodHandle System::Reflection::Emit::MethodBuilder::get_MethodHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::get_MethodHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MethodHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::RuntimeMethodHandle, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.get_ReflectedType
System::Type* System::Reflection::Emit::MethodBuilder::get_ReflectedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::get_ReflectedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.GetBaseDefinition
System::Reflection::MethodInfo* System::Reflection::Emit::MethodBuilder::GetBaseDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::GetBaseDefinition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBaseDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::MethodBuilder::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::MethodBuilder::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags
System::Reflection::MethodImplAttributes System::Reflection::Emit::MethodBuilder::GetMethodImplementationFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::GetMethodImplementationFlags");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethodImplementationFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodImplAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.Invoke
::Il2CppObject* System::Reflection::Emit::MethodBuilder::Invoke(::Il2CppObject* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* parameters, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractType(culture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, invokeAttr, binder, parameters, culture);
}
// Autogenerated method: System.Reflection.Emit.MethodBuilder.IsDefined
bool System::Reflection::Emit::MethodBuilder::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::MethodBuilder::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Writing MetadataGetter for method: MethodBuilder::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodAttributes (MethodBuilder::*)()>(&MethodBuilder::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodBuilder::get_DeclaringType
// Il2CppName: get_DeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MethodBuilder::*)()>(&MethodBuilder::get_DeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "get_DeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodBuilder::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MethodBuilder::*)()>(&MethodBuilder::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodBuilder::GetParameters
// Il2CppName: GetParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (MethodBuilder::*)()>(&MethodBuilder::GetParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "GetParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodBuilder::get_MethodHandle
// Il2CppName: get_MethodHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeMethodHandle (MethodBuilder::*)()>(&MethodBuilder::get_MethodHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "get_MethodHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodBuilder::get_ReflectedType
// Il2CppName: get_ReflectedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (MethodBuilder::*)()>(&MethodBuilder::get_ReflectedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "get_ReflectedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodBuilder::GetBaseDefinition
// Il2CppName: GetBaseDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (MethodBuilder::*)()>(&MethodBuilder::GetBaseDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "GetBaseDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MethodBuilder::*)(bool)>(&MethodBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MethodBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (MethodBuilder::*)(System::Type*, bool)>(&MethodBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MethodBuilder::GetMethodImplementationFlags
// Il2CppName: GetMethodImplementationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodImplAttributes (MethodBuilder::*)()>(&MethodBuilder::GetMethodImplementationFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "GetMethodImplementationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MethodBuilder::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MethodBuilder::*)(::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&MethodBuilder::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: MethodBuilder::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MethodBuilder::*)(System::Type*, bool)>(&MethodBuilder::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MethodBuilder*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.Emit.PropertyBuilder
#include "System/Reflection/Emit/PropertyBuilder.hpp"
// Including type: System.Reflection.PropertyAttributes
#include "System/Reflection/PropertyAttributes.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.get_Attributes
System::Reflection::PropertyAttributes System::Reflection::Emit::PropertyBuilder::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::get_Attributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::PropertyAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.get_CanRead
bool System::Reflection::Emit::PropertyBuilder::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::get_CanRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.get_CanWrite
bool System::Reflection::Emit::PropertyBuilder::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.get_DeclaringType
System::Type* System::Reflection::Emit::PropertyBuilder::get_DeclaringType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::get_DeclaringType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.get_Name
::Il2CppString* System::Reflection::Emit::PropertyBuilder::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.get_PropertyType
System::Type* System::Reflection::Emit::PropertyBuilder::get_PropertyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::get_PropertyType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PropertyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.GetIndexParameters
::Array<System::Reflection::ParameterInfo*>* System::Reflection::Emit::PropertyBuilder::GetIndexParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::GetIndexParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ParameterInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.get_ReflectedType
System::Type* System::Reflection::Emit::PropertyBuilder::get_ReflectedType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::get_ReflectedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReflectedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.GetAccessors
::Array<System::Reflection::MethodInfo*>* System::Reflection::Emit::PropertyBuilder::GetAccessors(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::GetAccessors");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAccessors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::MethodInfo*>*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::PropertyBuilder::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::PropertyBuilder::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.GetGetMethod
System::Reflection::MethodInfo* System::Reflection::Emit::PropertyBuilder::GetGetMethod(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::GetGetMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGetMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.GetSetMethod
System::Reflection::MethodInfo* System::Reflection::Emit::PropertyBuilder::GetSetMethod(bool nonPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::GetSetMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSetMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonPublic)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, nonPublic);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.GetValue
::Il2CppObject* System::Reflection::Emit::PropertyBuilder::GetValue(::Il2CppObject* obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* index, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::GetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(culture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, obj, invokeAttr, binder, index, culture);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.IsDefined
bool System::Reflection::Emit::PropertyBuilder::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.PropertyBuilder.SetValue
void System::Reflection::Emit::PropertyBuilder::SetValue(::Il2CppObject* obj, ::Il2CppObject* value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* index, System::Globalization::CultureInfo* culture) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::PropertyBuilder::SetValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(culture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj, value, invokeAttr, binder, index, culture);
}
// Writing MetadataGetter for method: PropertyBuilder::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::PropertyAttributes (PropertyBuilder::*)()>(&PropertyBuilder::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PropertyBuilder::*)()>(&PropertyBuilder::get_CanRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PropertyBuilder::*)()>(&PropertyBuilder::get_CanWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::get_DeclaringType
// Il2CppName: get_DeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (PropertyBuilder::*)()>(&PropertyBuilder::get_DeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "get_DeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PropertyBuilder::*)()>(&PropertyBuilder::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::get_PropertyType
// Il2CppName: get_PropertyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (PropertyBuilder::*)()>(&PropertyBuilder::get_PropertyType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "get_PropertyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::GetIndexParameters
// Il2CppName: GetIndexParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ParameterInfo*>* (PropertyBuilder::*)()>(&PropertyBuilder::GetIndexParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "GetIndexParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::get_ReflectedType
// Il2CppName: get_ReflectedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (PropertyBuilder::*)()>(&PropertyBuilder::get_ReflectedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "get_ReflectedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::GetAccessors
// Il2CppName: GetAccessors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::MethodInfo*>* (PropertyBuilder::*)(bool)>(&PropertyBuilder::GetAccessors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "GetAccessors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (PropertyBuilder::*)(bool)>(&PropertyBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (PropertyBuilder::*)(System::Type*, bool)>(&PropertyBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::GetGetMethod
// Il2CppName: GetGetMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (PropertyBuilder::*)(bool)>(&PropertyBuilder::GetGetMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "GetGetMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::GetSetMethod
// Il2CppName: GetSetMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (PropertyBuilder::*)(bool)>(&PropertyBuilder::GetSetMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "GetSetMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PropertyBuilder::*)(::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&PropertyBuilder::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PropertyBuilder::*)(System::Type*, bool)>(&PropertyBuilder::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PropertyBuilder::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyBuilder::*)(::Il2CppObject*, ::Il2CppObject*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Array<::Il2CppObject*>*, System::Globalization::CultureInfo*)>(&PropertyBuilder::SetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyBuilder*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.Emit.TypeBuilder
#include "System/Reflection/Emit/TypeBuilder.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
// Including type: System.Reflection.TypeAttributes
#include "System/Reflection/TypeAttributes.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Reflection.CallingConventions
#include "System/Reflection/CallingConventions.hpp"
// Including type: System.Reflection.EventInfo
#include "System/Reflection/EventInfo.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 UnspecifiedTypeSize
int System::Reflection::Emit::TypeBuilder::_get_UnspecifiedTypeSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::_get_UnspecifiedTypeSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Reflection.Emit", "TypeBuilder", "UnspecifiedTypeSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 UnspecifiedTypeSize
void System::Reflection::Emit::TypeBuilder::_set_UnspecifiedTypeSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::_set_UnspecifiedTypeSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Reflection.Emit", "TypeBuilder", "UnspecifiedTypeSize", value));
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.get_Assembly
System::Reflection::Assembly* System::Reflection::Emit::TypeBuilder::get_Assembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::get_Assembly");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Assembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Assembly*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.get_AssemblyQualifiedName
::Il2CppString* System::Reflection::Emit::TypeBuilder::get_AssemblyQualifiedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::get_AssemblyQualifiedName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AssemblyQualifiedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.get_BaseType
System::Type* System::Reflection::Emit::TypeBuilder::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::get_BaseType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.get_FullName
::Il2CppString* System::Reflection::Emit::TypeBuilder::get_FullName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::get_FullName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FullName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.get_GUID
System::Guid System::Reflection::Emit::TypeBuilder::get_GUID() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::get_GUID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GUID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Guid, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.get_Module
System::Reflection::Module* System::Reflection::Emit::TypeBuilder::get_Module() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::get_Module");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Module", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Module*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.get_Name
::Il2CppString* System::Reflection::Emit::TypeBuilder::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.get_Namespace
::Il2CppString* System::Reflection::Emit::TypeBuilder::get_Namespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::get_Namespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Namespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetElementType
System::Type* System::Reflection::Emit::TypeBuilder::GetElementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetElementType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetElementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.get_UnderlyingSystemType
System::Type* System::Reflection::Emit::TypeBuilder::get_UnderlyingSystemType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::get_UnderlyingSystemType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UnderlyingSystemType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl
System::Reflection::TypeAttributes System::Reflection::Emit::TypeBuilder::GetAttributeFlagsImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetAttributeFlagsImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAttributeFlagsImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::TypeAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetConstructorImpl
System::Reflection::ConstructorInfo* System::Reflection::Emit::TypeBuilder::GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetConstructorImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstructorImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(callConvention), ::il2cpp_utils::ExtractType(types), ::il2cpp_utils::ExtractType(modifiers)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::ConstructorInfo*, false>(this, ___internal__method, bindingAttr, binder, callConvention, types, modifiers);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetConstructors
::Array<System::Reflection::ConstructorInfo*>* System::Reflection::Emit::TypeBuilder::GetConstructors(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetConstructors");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstructors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ConstructorInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::TypeBuilder::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, inherit);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetCustomAttributes
::Array<::Il2CppObject*>* System::Reflection::Emit::TypeBuilder::GetCustomAttributes(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCustomAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetEvent
System::Reflection::EventInfo* System::Reflection::Emit::TypeBuilder::GetEvent(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::EventInfo*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetField
System::Reflection::FieldInfo* System::Reflection::Emit::TypeBuilder::GetField(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetField");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::FieldInfo*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetFields
::Array<System::Reflection::FieldInfo*>* System::Reflection::Emit::TypeBuilder::GetFields(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetFields");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::FieldInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetInterfaces
::Array<System::Type*>* System::Reflection::Emit::TypeBuilder::GetInterfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetInterfaces");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInterfaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetMethodImpl
System::Reflection::MethodInfo* System::Reflection::Emit::TypeBuilder::GetMethodImpl(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetMethodImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethodImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(callConvention), ::il2cpp_utils::ExtractType(types), ::il2cpp_utils::ExtractType(modifiers)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method, name, bindingAttr, binder, callConvention, types, modifiers);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetMethods
::Array<System::Reflection::MethodInfo*>* System::Reflection::Emit::TypeBuilder::GetMethods(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetMethods");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethods", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::MethodInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetNestedType
System::Type* System::Reflection::Emit::TypeBuilder::GetNestedType(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetNestedType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNestedType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetProperties
::Array<System::Reflection::PropertyInfo*>* System::Reflection::Emit::TypeBuilder::GetProperties(System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingAttr)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::PropertyInfo*>*, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.GetPropertyImpl
System::Reflection::PropertyInfo* System::Reflection::Emit::TypeBuilder::GetPropertyImpl(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::GetPropertyImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPropertyImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(bindingAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(returnType), ::il2cpp_utils::ExtractType(types), ::il2cpp_utils::ExtractType(modifiers)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::PropertyInfo*, false>(this, ___internal__method, name, bindingAttr, binder, returnType, types, modifiers);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.HasElementTypeImpl
bool System::Reflection::Emit::TypeBuilder::HasElementTypeImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::HasElementTypeImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasElementTypeImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.InvokeMember
::Il2CppObject* System::Reflection::Emit::TypeBuilder::InvokeMember(::Il2CppString* name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder* binder, ::Il2CppObject* target, ::Array<::Il2CppObject*>* args, ::Array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, ::Array<::Il2CppString*>* namedParameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::InvokeMember");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeMember", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(invokeAttr), ::il2cpp_utils::ExtractType(binder), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(modifiers), ::il2cpp_utils::ExtractType(culture), ::il2cpp_utils::ExtractType(namedParameters)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.IsArrayImpl
bool System::Reflection::Emit::TypeBuilder::IsArrayImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::IsArrayImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsArrayImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.IsByRefImpl
bool System::Reflection::Emit::TypeBuilder::IsByRefImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::IsByRefImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsByRefImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl
bool System::Reflection::Emit::TypeBuilder::IsCOMObjectImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::IsCOMObjectImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsCOMObjectImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.IsDefined
bool System::Reflection::Emit::TypeBuilder::IsDefined(System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::IsDefined");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeType), ::il2cpp_utils::ExtractType(inherit)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.IsPointerImpl
bool System::Reflection::Emit::TypeBuilder::IsPointerImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::IsPointerImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPointerImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl
bool System::Reflection::Emit::TypeBuilder::IsPrimitiveImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilder::IsPrimitiveImpl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPrimitiveImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TypeBuilder::get_Assembly
// Il2CppName: get_Assembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (TypeBuilder::*)()>(&TypeBuilder::get_Assembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "get_Assembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::get_AssemblyQualifiedName
// Il2CppName: get_AssemblyQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TypeBuilder::*)()>(&TypeBuilder::get_AssemblyQualifiedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "get_AssemblyQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::get_BaseType
// Il2CppName: get_BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (TypeBuilder::*)()>(&TypeBuilder::get_BaseType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "get_BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TypeBuilder::*)()>(&TypeBuilder::get_FullName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::get_GUID
// Il2CppName: get_GUID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Guid (TypeBuilder::*)()>(&TypeBuilder::get_GUID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "get_GUID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::get_Module
// Il2CppName: get_Module
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Module* (TypeBuilder::*)()>(&TypeBuilder::get_Module)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "get_Module", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TypeBuilder::*)()>(&TypeBuilder::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TypeBuilder::*)()>(&TypeBuilder::get_Namespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetElementType
// Il2CppName: GetElementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (TypeBuilder::*)()>(&TypeBuilder::GetElementType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetElementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::get_UnderlyingSystemType
// Il2CppName: get_UnderlyingSystemType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (TypeBuilder::*)()>(&TypeBuilder::get_UnderlyingSystemType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "get_UnderlyingSystemType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetAttributeFlagsImpl
// Il2CppName: GetAttributeFlagsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::TypeAttributes (TypeBuilder::*)()>(&TypeBuilder::GetAttributeFlagsImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetAttributeFlagsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetConstructorImpl
// Il2CppName: GetConstructorImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::ConstructorInfo* (TypeBuilder::*)(System::Reflection::BindingFlags, System::Reflection::Binder*, System::Reflection::CallingConventions, ::Array<System::Type*>*, ::Array<System::Reflection::ParameterModifier>*)>(&TypeBuilder::GetConstructorImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetConstructorImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::CallingConventions>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetConstructors
// Il2CppName: GetConstructors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ConstructorInfo*>* (TypeBuilder::*)(System::Reflection::BindingFlags)>(&TypeBuilder::GetConstructors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetConstructors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (TypeBuilder::*)(bool)>(&TypeBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (TypeBuilder::*)(System::Type*, bool)>(&TypeBuilder::GetCustomAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetEvent
// Il2CppName: GetEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::EventInfo* (TypeBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags)>(&TypeBuilder::GetEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetField
// Il2CppName: GetField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::FieldInfo* (TypeBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags)>(&TypeBuilder::GetField)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetFields
// Il2CppName: GetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::FieldInfo*>* (TypeBuilder::*)(System::Reflection::BindingFlags)>(&TypeBuilder::GetFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetInterfaces
// Il2CppName: GetInterfaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (TypeBuilder::*)()>(&TypeBuilder::GetInterfaces)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetInterfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetMethodImpl
// Il2CppName: GetMethodImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (TypeBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags, System::Reflection::Binder*, System::Reflection::CallingConventions, ::Array<System::Type*>*, ::Array<System::Reflection::ParameterModifier>*)>(&TypeBuilder::GetMethodImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetMethodImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::CallingConventions>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetMethods
// Il2CppName: GetMethods
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::MethodInfo*>* (TypeBuilder::*)(System::Reflection::BindingFlags)>(&TypeBuilder::GetMethods)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetMethods", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetNestedType
// Il2CppName: GetNestedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (TypeBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags)>(&TypeBuilder::GetNestedType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetNestedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetProperties
// Il2CppName: GetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::PropertyInfo*>* (TypeBuilder::*)(System::Reflection::BindingFlags)>(&TypeBuilder::GetProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::GetPropertyImpl
// Il2CppName: GetPropertyImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::PropertyInfo* (TypeBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags, System::Reflection::Binder*, System::Type*, ::Array<System::Type*>*, ::Array<System::Reflection::ParameterModifier>*)>(&TypeBuilder::GetPropertyImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "GetPropertyImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::HasElementTypeImpl
// Il2CppName: HasElementTypeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeBuilder::*)()>(&TypeBuilder::HasElementTypeImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "HasElementTypeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::InvokeMember
// Il2CppName: InvokeMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TypeBuilder::*)(::Il2CppString*, System::Reflection::BindingFlags, System::Reflection::Binder*, ::Il2CppObject*, ::Array<::Il2CppObject*>*, ::Array<System::Reflection::ParameterModifier>*, System::Globalization::CultureInfo*, ::Array<::Il2CppString*>*)>(&TypeBuilder::InvokeMember)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "InvokeMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Reflection::Binder*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::ParameterModifier>*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::IsArrayImpl
// Il2CppName: IsArrayImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeBuilder::*)()>(&TypeBuilder::IsArrayImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "IsArrayImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::IsByRefImpl
// Il2CppName: IsByRefImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeBuilder::*)()>(&TypeBuilder::IsByRefImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "IsByRefImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::IsCOMObjectImpl
// Il2CppName: IsCOMObjectImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeBuilder::*)()>(&TypeBuilder::IsCOMObjectImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "IsCOMObjectImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeBuilder::*)(System::Type*, bool)>(&TypeBuilder::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TypeBuilder::IsPointerImpl
// Il2CppName: IsPointerImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeBuilder::*)()>(&TypeBuilder::IsPointerImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "IsPointerImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeBuilder::IsPrimitiveImpl
// Il2CppName: IsPrimitiveImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeBuilder::*)()>(&TypeBuilder::IsPrimitiveImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilder*), "IsPrimitiveImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.Emit.TypeBuilderInstantiation
#include "System/Reflection/Emit/TypeBuilderInstantiation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Reflection.Emit.TypeBuilderInstantiation.MakeGenericType
System::Type* System::Reflection::Emit::TypeBuilderInstantiation::MakeGenericType(System::Type* type, ::Array<System::Type*>* typeArguments) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Emit::TypeBuilderInstantiation::MakeGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Reflection.Emit", "TypeBuilderInstantiation", "MakeGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(typeArguments)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type, typeArguments);
}
// Writing MetadataGetter for method: TypeBuilderInstantiation::MakeGenericType
// Il2CppName: MakeGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(System::Type*, ::Array<System::Type*>*)>(&TypeBuilderInstantiation::MakeGenericType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeBuilderInstantiation*), "MakeGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.__Error
#include "System/IO/__Error.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.__Error.EndOfFile
void System::IO::__Error::EndOfFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::EndOfFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "EndOfFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.__Error.FileNotOpen
void System::IO::__Error::FileNotOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::FileNotOpen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "FileNotOpen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.__Error.StreamIsClosed
void System::IO::__Error::StreamIsClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::StreamIsClosed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "StreamIsClosed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.__Error.MemoryStreamNotExpandable
void System::IO::__Error::MemoryStreamNotExpandable() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::MemoryStreamNotExpandable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "MemoryStreamNotExpandable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.__Error.ReaderClosed
void System::IO::__Error::ReaderClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::ReaderClosed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "ReaderClosed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.__Error.ReadNotSupported
void System::IO::__Error::ReadNotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::ReadNotSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "ReadNotSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.__Error.WrongAsyncResult
void System::IO::__Error::WrongAsyncResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::WrongAsyncResult");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "WrongAsyncResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.__Error.EndReadCalledTwice
void System::IO::__Error::EndReadCalledTwice() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::EndReadCalledTwice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "EndReadCalledTwice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.__Error.EndWriteCalledTwice
void System::IO::__Error::EndWriteCalledTwice() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::EndWriteCalledTwice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "EndWriteCalledTwice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.__Error.GetDisplayablePath
::Il2CppString* System::IO::__Error::GetDisplayablePath(::Il2CppString* path, bool isInvalidPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::GetDisplayablePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "GetDisplayablePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(isInvalidPath)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, isInvalidPath);
}
// Autogenerated method: System.IO.__Error.WinIOError
void System::IO::__Error::WinIOError(int errorCode, ::Il2CppString* maybeFullPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::WinIOError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "WinIOError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(maybeFullPath)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, errorCode, maybeFullPath);
}
// Autogenerated method: System.IO.__Error.WriteNotSupported
void System::IO::__Error::WriteNotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::WriteNotSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "WriteNotSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.__Error.WriterClosed
void System::IO::__Error::WriterClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::__Error::WriterClosed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "__Error", "WriterClosed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: __Error::EndOfFile
// Il2CppName: EndOfFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::EndOfFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "EndOfFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: __Error::FileNotOpen
// Il2CppName: FileNotOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::FileNotOpen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "FileNotOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: __Error::StreamIsClosed
// Il2CppName: StreamIsClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::StreamIsClosed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "StreamIsClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: __Error::MemoryStreamNotExpandable
// Il2CppName: MemoryStreamNotExpandable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::MemoryStreamNotExpandable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "MemoryStreamNotExpandable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: __Error::ReaderClosed
// Il2CppName: ReaderClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::ReaderClosed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "ReaderClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: __Error::ReadNotSupported
// Il2CppName: ReadNotSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::ReadNotSupported)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "ReadNotSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: __Error::WrongAsyncResult
// Il2CppName: WrongAsyncResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::WrongAsyncResult)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "WrongAsyncResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: __Error::EndReadCalledTwice
// Il2CppName: EndReadCalledTwice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::EndReadCalledTwice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "EndReadCalledTwice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: __Error::EndWriteCalledTwice
// Il2CppName: EndWriteCalledTwice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::EndWriteCalledTwice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "EndWriteCalledTwice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: __Error::GetDisplayablePath
// Il2CppName: GetDisplayablePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, bool)>(&__Error::GetDisplayablePath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "GetDisplayablePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: __Error::WinIOError
// Il2CppName: WinIOError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::Il2CppString*)>(&__Error::WinIOError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "WinIOError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: __Error::WriteNotSupported
// Il2CppName: WriteNotSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::WriteNotSupported)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "WriteNotSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: __Error::WriterClosed
// Il2CppName: WriterClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&__Error::WriterClosed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(__Error*), "WriterClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.BinaryReader
#include "System/IO/BinaryReader.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Text.Decoder
#include "System/Text/Decoder.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.BinaryReader.get_BaseStream
System::IO::Stream* System::IO::BinaryReader::get_BaseStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::get_BaseStream");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::Stream*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.Close
void System::IO::BinaryReader::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.Dispose
void System::IO::BinaryReader::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.BinaryReader.Dispose
void System::IO::BinaryReader::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.Read
int System::IO::BinaryReader::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadBoolean
bool System::IO::BinaryReader::ReadBoolean() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadBoolean");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadBoolean", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadByte
uint8_t System::IO::BinaryReader::ReadByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadByte");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadSByte
int8_t System::IO::BinaryReader::ReadSByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadSByte");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadSByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int8_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadChar
::Il2CppChar System::IO::BinaryReader::ReadChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadChar");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadInt16
int16_t System::IO::BinaryReader::ReadInt16() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadInt16");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadInt16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadUInt16
uint16_t System::IO::BinaryReader::ReadUInt16() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadUInt16");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadUInt16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadInt32
int System::IO::BinaryReader::ReadInt32() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadInt32");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadUInt32
uint System::IO::BinaryReader::ReadUInt32() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadUInt32");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadUInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadInt64
int64_t System::IO::BinaryReader::ReadInt64() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadInt64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadInt64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadUInt64
uint64_t System::IO::BinaryReader::ReadUInt64() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadUInt64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadUInt64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadSingle
float System::IO::BinaryReader::ReadSingle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadSingle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadSingle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadDouble
double System::IO::BinaryReader::ReadDouble() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadDouble");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadDecimal
System::Decimal System::IO::BinaryReader::ReadDecimal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadDecimal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadDecimal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Decimal, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadString
::Il2CppString* System::IO::BinaryReader::ReadString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.InternalReadChars
int System::IO::BinaryReader::InternalReadChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::InternalReadChars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalReadChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.BinaryReader.InternalReadOneChar
int System::IO::BinaryReader::InternalReadOneChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::InternalReadOneChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalReadOneChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryReader.ReadChars
::Array<::Il2CppChar>* System::IO::BinaryReader::ReadChars(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppChar>*, false>(this, ___internal__method, count);
}
// Autogenerated method: System.IO.BinaryReader.Read
int System::IO::BinaryReader::Read(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.BinaryReader.ReadBytes
::Array<uint8_t>* System::IO::BinaryReader::ReadBytes(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::ReadBytes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, count);
}
// Autogenerated method: System.IO.BinaryReader.FillBuffer
void System::IO::BinaryReader::FillBuffer(int numBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::FillBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numBytes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, numBytes);
}
// Autogenerated method: System.IO.BinaryReader.Read7BitEncodedInt
int System::IO::BinaryReader::Read7BitEncodedInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryReader::Read7BitEncodedInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read7BitEncodedInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BinaryReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryReader::*)(System::IO::Stream*)>(&BinaryReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryReader::*)(System::IO::Stream*)>(&BinaryReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: BinaryReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryReader::*)(System::IO::Stream*, System::Text::Encoding*)>(&BinaryReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryReader::*)(System::IO::Stream*, System::Text::Encoding*)>(&BinaryReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
// Writing MetadataGetter for method: BinaryReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryReader::*)(System::IO::Stream*, System::Text::Encoding*, bool)>(&BinaryReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryReader::*)(System::IO::Stream*, System::Text::Encoding*, bool)>(&BinaryReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BinaryReader::get_BaseStream
// Il2CppName: get_BaseStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::Stream* (BinaryReader::*)()>(&BinaryReader::get_BaseStream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "get_BaseStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryReader::*)()>(&BinaryReader::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryReader::*)(bool)>(&BinaryReader::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BinaryReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryReader::*)()>(&BinaryReader::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BinaryReader::*)()>(&BinaryReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadBoolean
// Il2CppName: ReadBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BinaryReader::*)()>(&BinaryReader::ReadBoolean)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadByte
// Il2CppName: ReadByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (BinaryReader::*)()>(&BinaryReader::ReadByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadSByte
// Il2CppName: ReadSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (BinaryReader::*)()>(&BinaryReader::ReadSByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadChar
// Il2CppName: ReadChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (BinaryReader::*)()>(&BinaryReader::ReadChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadInt16
// Il2CppName: ReadInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (BinaryReader::*)()>(&BinaryReader::ReadInt16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadUInt16
// Il2CppName: ReadUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (BinaryReader::*)()>(&BinaryReader::ReadUInt16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadInt32
// Il2CppName: ReadInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BinaryReader::*)()>(&BinaryReader::ReadInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadUInt32
// Il2CppName: ReadUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (BinaryReader::*)()>(&BinaryReader::ReadUInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadInt64
// Il2CppName: ReadInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (BinaryReader::*)()>(&BinaryReader::ReadInt64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadUInt64
// Il2CppName: ReadUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (BinaryReader::*)()>(&BinaryReader::ReadUInt64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadSingle
// Il2CppName: ReadSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BinaryReader::*)()>(&BinaryReader::ReadSingle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadDouble
// Il2CppName: ReadDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (BinaryReader::*)()>(&BinaryReader::ReadDouble)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadDecimal
// Il2CppName: ReadDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Decimal (BinaryReader::*)()>(&BinaryReader::ReadDecimal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadString
// Il2CppName: ReadString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (BinaryReader::*)()>(&BinaryReader::ReadString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::InternalReadChars
// Il2CppName: InternalReadChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BinaryReader::*)(::Array<::Il2CppChar>*, int, int)>(&BinaryReader::InternalReadChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "InternalReadChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BinaryReader::InternalReadOneChar
// Il2CppName: InternalReadOneChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BinaryReader::*)()>(&BinaryReader::InternalReadOneChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "InternalReadOneChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadChars
// Il2CppName: ReadChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppChar>* (BinaryReader::*)(int)>(&BinaryReader::ReadChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BinaryReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BinaryReader::*)(::Array<uint8_t>*, int, int)>(&BinaryReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BinaryReader::ReadBytes
// Il2CppName: ReadBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (BinaryReader::*)(int)>(&BinaryReader::ReadBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "ReadBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BinaryReader::FillBuffer
// Il2CppName: FillBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryReader::*)(int)>(&BinaryReader::FillBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "FillBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BinaryReader::Read7BitEncodedInt
// Il2CppName: Read7BitEncodedInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BinaryReader::*)()>(&BinaryReader::Read7BitEncodedInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryReader*), "Read7BitEncodedInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.BinaryWriter
#include "System/IO/BinaryWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Text.Encoder
#include "System/Text/Encoder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.IO.BinaryWriter Null
System::IO::BinaryWriter* System::IO::BinaryWriter::_get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::_get_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::BinaryWriter*>("System.IO", "BinaryWriter", "Null"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.IO.BinaryWriter Null
void System::IO::BinaryWriter::_set_Null(System::IO::BinaryWriter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::_set_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "BinaryWriter", "Null", value));
}
// Autogenerated method: System.IO.BinaryWriter.Dispose
void System::IO::BinaryWriter::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.BinaryWriter.Dispose
void System::IO::BinaryWriter::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryWriter.Flush
void System::IO::BinaryWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(::Array<uint8_t>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(::Array<::Il2CppChar>* chars) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chars);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write
void System::IO::BinaryWriter::Write(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter.Write7BitEncodedInt
void System::IO::BinaryWriter::Write7BitEncodedInt(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::Write7BitEncodedInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write7BitEncodedInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.BinaryWriter..cctor
void System::IO::BinaryWriter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::BinaryWriter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "BinaryWriter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BinaryWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(System::IO::Stream*)>(&BinaryWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(System::IO::Stream*)>(&BinaryWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(System::IO::Stream*, System::Text::Encoding*)>(&BinaryWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(System::IO::Stream*, System::Text::Encoding*)>(&BinaryWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(System::IO::Stream*, System::Text::Encoding*, bool)>(&BinaryWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(System::IO::Stream*, System::Text::Encoding*, bool)>(&BinaryWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(bool)>(&BinaryWriter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)()>(&BinaryWriter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)()>(&BinaryWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(bool)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(uint8_t)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(::Array<uint8_t>*)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(::Array<uint8_t>*, int, int)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(::Il2CppChar)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(::Array<::Il2CppChar>*)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(double)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(int16_t)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int16_t>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(uint16_t)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint16_t>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(int)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(uint)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(int64_t)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(uint64_t)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(float)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(::Il2CppString*)>(&BinaryWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::Write7BitEncodedInt
// Il2CppName: Write7BitEncodedInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)(int)>(&BinaryWriter::Write7BitEncodedInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), "Write7BitEncodedInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BinaryWriter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BinaryWriter::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BinaryWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)()>(&BinaryWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BinaryWriter::*)()>(&BinaryWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinaryWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.Directory
#include "System/IO/Directory.hpp"
// Including type: System.IO.Directory/SearchData
#include "System/IO/Directory_SearchData.hpp"
// Including type: System.IO.SearchOption
#include "System/IO/SearchOption.hpp"
// Including type: System.IO.DirectoryInfo
#include "System/IO/DirectoryInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.Directory.GetFiles
::Array<::Il2CppString*>* System::IO::Directory::GetFiles(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::GetFiles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "GetFiles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.Directory.GetFiles
::Array<::Il2CppString*>* System::IO::Directory::GetFiles(::Il2CppString* path, ::Il2CppString* searchPattern) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::GetFiles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "GetFiles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(searchPattern)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, searchPattern);
}
// Autogenerated method: System.IO.Directory.InternalGetFiles
::Array<::Il2CppString*>* System::IO::Directory::InternalGetFiles(::Il2CppString* path, ::Il2CppString* searchPattern, System::IO::SearchOption searchOption) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::InternalGetFiles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "InternalGetFiles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(searchPattern), ::il2cpp_utils::ExtractType(searchOption)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, searchPattern, searchOption);
}
// Autogenerated method: System.IO.Directory.GetDirectories
::Array<::Il2CppString*>* System::IO::Directory::GetDirectories(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::GetDirectories");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "GetDirectories", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.Directory.GetDirectories
::Array<::Il2CppString*>* System::IO::Directory::GetDirectories(::Il2CppString* path, ::Il2CppString* searchPattern) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::GetDirectories");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "GetDirectories", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(searchPattern)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, searchPattern);
}
// Autogenerated method: System.IO.Directory.InternalGetDirectories
::Array<::Il2CppString*>* System::IO::Directory::InternalGetDirectories(::Il2CppString* path, ::Il2CppString* searchPattern, System::IO::SearchOption searchOption) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::InternalGetDirectories");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "InternalGetDirectories", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(searchPattern), ::il2cpp_utils::ExtractType(searchOption)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, searchPattern, searchOption);
}
// Autogenerated method: System.IO.Directory.GetFileSystemEntries
::Array<::Il2CppString*>* System::IO::Directory::GetFileSystemEntries(::Il2CppString* path, ::Il2CppString* searchPattern) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::GetFileSystemEntries");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "GetFileSystemEntries", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(searchPattern)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, searchPattern);
}
// Autogenerated method: System.IO.Directory.InternalGetFileSystemEntries
::Array<::Il2CppString*>* System::IO::Directory::InternalGetFileSystemEntries(::Il2CppString* path, ::Il2CppString* searchPattern, System::IO::SearchOption searchOption) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::InternalGetFileSystemEntries");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "InternalGetFileSystemEntries", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(searchPattern), ::il2cpp_utils::ExtractType(searchOption)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, searchPattern, searchOption);
}
// Autogenerated method: System.IO.Directory.InternalGetFileDirectoryNames
::Array<::Il2CppString*>* System::IO::Directory::InternalGetFileDirectoryNames(::Il2CppString* path, ::Il2CppString* userPathOriginal, ::Il2CppString* searchPattern, bool includeFiles, bool includeDirs, System::IO::SearchOption searchOption, bool checkHost) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::InternalGetFileDirectoryNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "InternalGetFileDirectoryNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(userPathOriginal), ::il2cpp_utils::ExtractType(searchPattern), ::il2cpp_utils::ExtractType(includeFiles), ::il2cpp_utils::ExtractType(includeDirs), ::il2cpp_utils::ExtractType(searchOption), ::il2cpp_utils::ExtractType(checkHost)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, userPathOriginal, searchPattern, includeFiles, includeDirs, searchOption, checkHost);
}
// Autogenerated method: System.IO.Directory.CreateDirectory
System::IO::DirectoryInfo* System::IO::Directory::CreateDirectory(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::CreateDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "CreateDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::DirectoryInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.Directory.CreateDirectoriesInternal
System::IO::DirectoryInfo* System::IO::Directory::CreateDirectoriesInternal(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::CreateDirectoriesInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "CreateDirectoriesInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::DirectoryInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.Directory.Delete
void System::IO::Directory::Delete(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::Delete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "Delete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.Directory.RecursiveDelete
void System::IO::Directory::RecursiveDelete(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::RecursiveDelete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "RecursiveDelete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.Directory.Delete
void System::IO::Directory::Delete(::Il2CppString* path, bool recursive) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::Delete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "Delete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(recursive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, recursive);
}
// Autogenerated method: System.IO.Directory.Exists
bool System::IO::Directory::Exists(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::Exists");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "Exists", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.Directory.GetCurrentDirectory
::Il2CppString* System::IO::Directory::GetCurrentDirectory() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::GetCurrentDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "GetCurrentDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.Directory.InsecureGetCurrentDirectory
::Il2CppString* System::IO::Directory::InsecureGetCurrentDirectory() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::InsecureGetCurrentDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "InsecureGetCurrentDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.Directory.GetLogicalDrives
::Array<::Il2CppString*>* System::IO::Directory::GetLogicalDrives() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::GetLogicalDrives");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "GetLogicalDrives", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.Directory.GetDemandDir
::Il2CppString* System::IO::Directory::GetDemandDir(::Il2CppString* fullPath, bool thisDirOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Directory::GetDemandDir");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Directory", "GetDemandDir", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fullPath), ::il2cpp_utils::ExtractType(thisDirOnly)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fullPath, thisDirOnly);
}
// Writing MetadataGetter for method: Directory::GetFiles
// Il2CppName: GetFiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*)>(&Directory::GetFiles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "GetFiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Directory::GetFiles
// Il2CppName: GetFiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*, ::Il2CppString*)>(&Directory::GetFiles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "GetFiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Directory::InternalGetFiles
// Il2CppName: InternalGetFiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*, ::Il2CppString*, System::IO::SearchOption)>(&Directory::InternalGetFiles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "InternalGetFiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SearchOption>()});
  }
};
// Writing MetadataGetter for method: Directory::GetDirectories
// Il2CppName: GetDirectories
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*)>(&Directory::GetDirectories)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "GetDirectories", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Directory::GetDirectories
// Il2CppName: GetDirectories
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*, ::Il2CppString*)>(&Directory::GetDirectories)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "GetDirectories", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Directory::InternalGetDirectories
// Il2CppName: InternalGetDirectories
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*, ::Il2CppString*, System::IO::SearchOption)>(&Directory::InternalGetDirectories)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "InternalGetDirectories", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SearchOption>()});
  }
};
// Writing MetadataGetter for method: Directory::GetFileSystemEntries
// Il2CppName: GetFileSystemEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*, ::Il2CppString*)>(&Directory::GetFileSystemEntries)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "GetFileSystemEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Directory::InternalGetFileSystemEntries
// Il2CppName: InternalGetFileSystemEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*, ::Il2CppString*, System::IO::SearchOption)>(&Directory::InternalGetFileSystemEntries)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "InternalGetFileSystemEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SearchOption>()});
  }
};
// Writing MetadataGetter for method: Directory::InternalGetFileDirectoryNames
// Il2CppName: InternalGetFileDirectoryNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, bool, bool, System::IO::SearchOption, bool)>(&Directory::InternalGetFileDirectoryNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "InternalGetFileDirectoryNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SearchOption>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Directory::CreateDirectory
// Il2CppName: CreateDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::DirectoryInfo* (*)(::Il2CppString*)>(&Directory::CreateDirectory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "CreateDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Directory::CreateDirectoriesInternal
// Il2CppName: CreateDirectoriesInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::DirectoryInfo* (*)(::Il2CppString*)>(&Directory::CreateDirectoriesInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "CreateDirectoriesInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Directory::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&Directory::Delete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Directory::RecursiveDelete
// Il2CppName: RecursiveDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&Directory::RecursiveDelete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "RecursiveDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Directory::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, bool)>(&Directory::Delete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Directory::Exists
// Il2CppName: Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&Directory::Exists)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Directory::GetCurrentDirectory
// Il2CppName: GetCurrentDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&Directory::GetCurrentDirectory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "GetCurrentDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Directory::InsecureGetCurrentDirectory
// Il2CppName: InsecureGetCurrentDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&Directory::InsecureGetCurrentDirectory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "InsecureGetCurrentDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Directory::GetLogicalDrives
// Il2CppName: GetLogicalDrives
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)()>(&Directory::GetLogicalDrives)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "GetLogicalDrives", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Directory::GetDemandDir
// Il2CppName: GetDemandDir
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, bool)>(&Directory::GetDemandDir)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory*), "GetDemandDir", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.Directory/SearchData
#include "System/IO/Directory_SearchData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: Directory::SearchData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Directory::SearchData::*)(::Il2CppString*, ::Il2CppString*, System::IO::SearchOption)>(&Directory::SearchData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory::SearchData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SearchOption>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Directory::SearchData::*)(::Il2CppString*, ::Il2CppString*, System::IO::SearchOption)>(&Directory::SearchData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Directory::SearchData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SearchOption>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.DirectoryNotFoundException
#include "System/IO/DirectoryNotFoundException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DirectoryNotFoundException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryNotFoundException::*)()>(&DirectoryNotFoundException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryNotFoundException::*)()>(&DirectoryNotFoundException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectoryNotFoundException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryNotFoundException::*)(::Il2CppString*)>(&DirectoryNotFoundException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryNotFoundException::*)(::Il2CppString*)>(&DirectoryNotFoundException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DirectoryNotFoundException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryNotFoundException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&DirectoryNotFoundException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryNotFoundException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&DirectoryNotFoundException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.DriveNotFoundException
#include "System/IO/DriveNotFoundException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DriveNotFoundException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DriveNotFoundException::*)()>(&DriveNotFoundException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DriveNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DriveNotFoundException::*)()>(&DriveNotFoundException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DriveNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DriveNotFoundException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DriveNotFoundException::*)(::Il2CppString*)>(&DriveNotFoundException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DriveNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DriveNotFoundException::*)(::Il2CppString*)>(&DriveNotFoundException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DriveNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DriveNotFoundException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DriveNotFoundException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&DriveNotFoundException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DriveNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DriveNotFoundException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&DriveNotFoundException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DriveNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.EndOfStreamException
#include "System/IO/EndOfStreamException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: EndOfStreamException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EndOfStreamException::*)()>(&EndOfStreamException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EndOfStreamException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EndOfStreamException::*)()>(&EndOfStreamException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EndOfStreamException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EndOfStreamException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EndOfStreamException::*)(::Il2CppString*)>(&EndOfStreamException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EndOfStreamException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EndOfStreamException::*)(::Il2CppString*)>(&EndOfStreamException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EndOfStreamException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: EndOfStreamException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EndOfStreamException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&EndOfStreamException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EndOfStreamException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EndOfStreamException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&EndOfStreamException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EndOfStreamException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.FileInfo
#include "System/IO/FileInfo.hpp"
// Including type: System.IO.StreamWriter
#include "System/IO/StreamWriter.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.FileInfo.Init
void System::IO::FileInfo::Init(::Il2CppString* fileName, bool checkHost) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileInfo::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fileName), ::il2cpp_utils::ExtractType(checkHost)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fileName, checkHost);
}
// Autogenerated method: System.IO.FileInfo.GetDisplayPath
::Il2CppString* System::IO::FileInfo::GetDisplayPath(::Il2CppString* originalPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileInfo::GetDisplayPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDisplayPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(originalPath)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, originalPath);
}
// Autogenerated method: System.IO.FileInfo.get_DirectoryName
::Il2CppString* System::IO::FileInfo::get_DirectoryName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileInfo::get_DirectoryName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DirectoryName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileInfo.CreateText
System::IO::StreamWriter* System::IO::FileInfo::CreateText() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileInfo::CreateText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::StreamWriter*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileInfo.AppendText
System::IO::StreamWriter* System::IO::FileInfo::AppendText() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileInfo::AppendText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::StreamWriter*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileInfo.get_Name
::Il2CppString* System::IO::FileInfo::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileInfo::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileInfo.get_Exists
bool System::IO::FileInfo::get_Exists() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileInfo::get_Exists");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Exists", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileInfo.ToString
::Il2CppString* System::IO::FileInfo::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileInfo::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FileInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileInfo::*)(::Il2CppString*)>(&FileInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileInfo::*)(::Il2CppString*)>(&FileInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileInfo::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileInfo::*)(::Il2CppString*, bool)>(&FileInfo::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: FileInfo::GetDisplayPath
// Il2CppName: GetDisplayPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileInfo::*)(::Il2CppString*)>(&FileInfo::GetDisplayPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), "GetDisplayPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileInfo::get_DirectoryName
// Il2CppName: get_DirectoryName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileInfo::*)()>(&FileInfo::get_DirectoryName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), "get_DirectoryName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileInfo::CreateText
// Il2CppName: CreateText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamWriter* (FileInfo::*)()>(&FileInfo::CreateText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), "CreateText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileInfo::AppendText
// Il2CppName: AppendText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamWriter* (FileInfo::*)()>(&FileInfo::AppendText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), "AppendText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: FileInfo::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileInfo::*)()>(&FileInfo::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileInfo::get_Exists
// Il2CppName: get_Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FileInfo::*)()>(&FileInfo::get_Exists)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), "get_Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileInfo::*)()>(&FileInfo::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.FileLoadException
#include "System/IO/FileLoadException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.FileLoadException.SetMessageField
void System::IO::FileLoadException::SetMessageField() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileLoadException::SetMessageField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMessageField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileLoadException.get_FusionLog
::Il2CppString* System::IO::FileLoadException::get_FusionLog() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileLoadException::get_FusionLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FusionLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileLoadException.FormatFileLoadExceptionMessage
::Il2CppString* System::IO::FileLoadException::FormatFileLoadExceptionMessage(::Il2CppString* fileName, int hResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileLoadException::FormatFileLoadExceptionMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "FileLoadException", "FormatFileLoadExceptionMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fileName), ::il2cpp_utils::ExtractType(hResult)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fileName, hResult);
}
// Autogenerated method: System.IO.FileLoadException.get_Message
::Il2CppString* System::IO::FileLoadException::get_Message() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileLoadException::get_Message");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Message", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileLoadException.ToString
::Il2CppString* System::IO::FileLoadException::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileLoadException::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileLoadException.GetObjectData
void System::IO::FileLoadException::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileLoadException::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Writing MetadataGetter for method: FileLoadException::SetMessageField
// Il2CppName: SetMessageField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileLoadException::*)()>(&FileLoadException::SetMessageField)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), "SetMessageField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileLoadException::get_FusionLog
// Il2CppName: get_FusionLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileLoadException::*)()>(&FileLoadException::get_FusionLog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), "get_FusionLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileLoadException::FormatFileLoadExceptionMessage
// Il2CppName: FormatFileLoadExceptionMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, int)>(&FileLoadException::FormatFileLoadExceptionMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), "FormatFileLoadExceptionMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FileLoadException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileLoadException::*)()>(&FileLoadException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileLoadException::*)()>(&FileLoadException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileLoadException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileLoadException::*)(::Il2CppString*)>(&FileLoadException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileLoadException::*)(::Il2CppString*)>(&FileLoadException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileLoadException::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileLoadException::*)()>(&FileLoadException::get_Message)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileLoadException::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileLoadException::*)()>(&FileLoadException::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileLoadException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileLoadException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileLoadException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileLoadException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileLoadException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: FileLoadException::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileLoadException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileLoadException::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileLoadException*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.FileNotFoundException
#include "System/IO/FileNotFoundException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.FileNotFoundException.SetMessageField
void System::IO::FileNotFoundException::SetMessageField() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileNotFoundException::SetMessageField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMessageField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileNotFoundException.get_FusionLog
::Il2CppString* System::IO::FileNotFoundException::get_FusionLog() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileNotFoundException::get_FusionLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FusionLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileNotFoundException.get_Message
::Il2CppString* System::IO::FileNotFoundException::get_Message() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileNotFoundException::get_Message");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Message", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileNotFoundException.ToString
::Il2CppString* System::IO::FileNotFoundException::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileNotFoundException::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileNotFoundException.GetObjectData
void System::IO::FileNotFoundException::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileNotFoundException::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Writing MetadataGetter for method: FileNotFoundException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileNotFoundException::*)(::Il2CppString*, ::Il2CppString*)>(&FileNotFoundException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileNotFoundException::*)(::Il2CppString*, ::Il2CppString*)>(&FileNotFoundException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileNotFoundException::SetMessageField
// Il2CppName: SetMessageField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileNotFoundException::*)()>(&FileNotFoundException::SetMessageField)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), "SetMessageField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileNotFoundException::get_FusionLog
// Il2CppName: get_FusionLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileNotFoundException::*)()>(&FileNotFoundException::get_FusionLog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), "get_FusionLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileNotFoundException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileNotFoundException::*)()>(&FileNotFoundException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileNotFoundException::*)()>(&FileNotFoundException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileNotFoundException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileNotFoundException::*)(::Il2CppString*)>(&FileNotFoundException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileNotFoundException::*)(::Il2CppString*)>(&FileNotFoundException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileNotFoundException::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileNotFoundException::*)()>(&FileNotFoundException::get_Message)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileNotFoundException::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileNotFoundException::*)()>(&FileNotFoundException::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileNotFoundException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileNotFoundException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileNotFoundException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileNotFoundException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileNotFoundException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: FileNotFoundException::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileNotFoundException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileNotFoundException::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileNotFoundException*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.FileSystemEnumerableFactory
#include "System/IO/FileSystemEnumerableFactory.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IO.SearchOption
#include "System/IO/SearchOption.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.FileSystemEnumerableFactory.CreateFileNameIterator
System::Collections::Generic::IEnumerable_1<::Il2CppString*>* System::IO::FileSystemEnumerableFactory::CreateFileNameIterator(::Il2CppString* path, ::Il2CppString* originalUserPath, ::Il2CppString* searchPattern, bool includeFiles, bool includeDirs, System::IO::SearchOption searchOption, bool checkHost) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemEnumerableFactory::CreateFileNameIterator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "FileSystemEnumerableFactory", "CreateFileNameIterator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(originalUserPath), ::il2cpp_utils::ExtractType(searchPattern), ::il2cpp_utils::ExtractType(includeFiles), ::il2cpp_utils::ExtractType(includeDirs), ::il2cpp_utils::ExtractType(searchOption), ::il2cpp_utils::ExtractType(checkHost)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, originalUserPath, searchPattern, includeFiles, includeDirs, searchOption, checkHost);
}
// Writing MetadataGetter for method: FileSystemEnumerableFactory::CreateFileNameIterator
// Il2CppName: CreateFileNameIterator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<::Il2CppString*>* (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, bool, bool, System::IO::SearchOption, bool)>(&FileSystemEnumerableFactory::CreateFileNameIterator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemEnumerableFactory*), "CreateFileNameIterator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SearchOption>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.StringResultHandler
#include "System/IO/StringResultHandler.hpp"
// Including type: System.IO.SearchResult
#include "System/IO/SearchResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.StringResultHandler.CreateObject
::Il2CppString* System::IO::StringResultHandler::CreateObject(System::IO::SearchResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringResultHandler::CreateObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, result);
}
// Autogenerated method: System.IO.StringResultHandler.IsResultIncluded
bool System::IO::StringResultHandler::IsResultIncluded(System::IO::SearchResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringResultHandler::IsResultIncluded");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsResultIncluded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: StringResultHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringResultHandler::*)(bool, bool)>(&StringResultHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringResultHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringResultHandler::*)(bool, bool)>(&StringResultHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringResultHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StringResultHandler::CreateObject
// Il2CppName: CreateObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StringResultHandler::*)(System::IO::SearchResult*)>(&StringResultHandler::CreateObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringResultHandler*), "CreateObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::SearchResult*>()});
  }
};
// Writing MetadataGetter for method: StringResultHandler::IsResultIncluded
// Il2CppName: IsResultIncluded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StringResultHandler::*)(System::IO::SearchResult*)>(&StringResultHandler::IsResultIncluded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringResultHandler*), "IsResultIncluded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::SearchResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.SearchResult
#include "System/IO/SearchResult.hpp"
// Including type: Microsoft.Win32.Win32Native/WIN32_FIND_DATA
#include "Microsoft/Win32/Win32Native_WIN32_FIND_DATA.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.SearchResult.get_UserPath
::Il2CppString* System::IO::SearchResult::get_UserPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::SearchResult::get_UserPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.SearchResult.get_FindData
Microsoft::Win32::Win32Native::WIN32_FIND_DATA* System::IO::SearchResult::get_FindData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::SearchResult::get_FindData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FindData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Microsoft::Win32::Win32Native::WIN32_FIND_DATA*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SearchResult::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SearchResult::*)(::Il2CppString*, ::Il2CppString*, Microsoft::Win32::Win32Native::WIN32_FIND_DATA*)>(&SearchResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SearchResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::Win32Native::WIN32_FIND_DATA*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SearchResult::*)(::Il2CppString*, ::Il2CppString*, Microsoft::Win32::Win32Native::WIN32_FIND_DATA*)>(&SearchResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SearchResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::Win32Native::WIN32_FIND_DATA*>()});
  }
};
// Writing MetadataGetter for method: SearchResult::get_UserPath
// Il2CppName: get_UserPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SearchResult::*)()>(&SearchResult::get_UserPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SearchResult*), "get_UserPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SearchResult::get_FindData
// Il2CppName: get_FindData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Microsoft::Win32::Win32Native::WIN32_FIND_DATA* (SearchResult::*)()>(&SearchResult::get_FindData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SearchResult*), "get_FindData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.IO.FileSystemEnumerableHelpers
#include "System/IO/FileSystemEnumerableHelpers.hpp"
// Including type: Microsoft.Win32.Win32Native/WIN32_FIND_DATA
#include "Microsoft/Win32/Win32Native_WIN32_FIND_DATA.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.FileSystemEnumerableHelpers.IsDir
bool System::IO::FileSystemEnumerableHelpers::IsDir(Microsoft::Win32::Win32Native::WIN32_FIND_DATA* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemEnumerableHelpers::IsDir");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "FileSystemEnumerableHelpers", "IsDir", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data);
}
// Autogenerated method: System.IO.FileSystemEnumerableHelpers.IsFile
bool System::IO::FileSystemEnumerableHelpers::IsFile(Microsoft::Win32::Win32Native::WIN32_FIND_DATA* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemEnumerableHelpers::IsFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "FileSystemEnumerableHelpers", "IsFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data);
}
// Writing MetadataGetter for method: FileSystemEnumerableHelpers::IsDir
// Il2CppName: IsDir
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(Microsoft::Win32::Win32Native::WIN32_FIND_DATA*)>(&FileSystemEnumerableHelpers::IsDir)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemEnumerableHelpers*), "IsDir", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::Win32Native::WIN32_FIND_DATA*>()});
  }
};
// Writing MetadataGetter for method: FileSystemEnumerableHelpers::IsFile
// Il2CppName: IsFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(Microsoft::Win32::Win32Native::WIN32_FIND_DATA*)>(&FileSystemEnumerableHelpers::IsFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemEnumerableHelpers*), "IsFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::Win32Native::WIN32_FIND_DATA*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.FileSystemInfo
#include "System/IO/FileSystemInfo.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.FileSystemInfo.get_FullName
::Il2CppString* System::IO::FileSystemInfo::get_FullName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::get_FullName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FullName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileSystemInfo.get_Name
::Il2CppString* System::IO::FileSystemInfo::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileSystemInfo.get_Exists
bool System::IO::FileSystemInfo::get_Exists() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::get_Exists");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Exists", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileSystemInfo.get_CreationTime
System::DateTime System::IO::FileSystemInfo::get_CreationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::get_CreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileSystemInfo.get_CreationTimeUtc
System::DateTime System::IO::FileSystemInfo::get_CreationTimeUtc() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::get_CreationTimeUtc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreationTimeUtc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileSystemInfo.get_LastAccessTime
System::DateTime System::IO::FileSystemInfo::get_LastAccessTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::get_LastAccessTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LastAccessTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileSystemInfo.get_LastAccessTimeUtc
System::DateTime System::IO::FileSystemInfo::get_LastAccessTimeUtc() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::get_LastAccessTimeUtc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LastAccessTimeUtc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileSystemInfo.Refresh
void System::IO::FileSystemInfo::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileSystemInfo.get_Attributes
System::IO::FileAttributes System::IO::FileSystemInfo::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::get_Attributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::FileAttributes, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileSystemInfo.GetObjectData
void System::IO::FileSystemInfo::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.IO.FileSystemInfo.get_DisplayPath
::Il2CppString* System::IO::FileSystemInfo::get_DisplayPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::get_DisplayPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DisplayPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.FileSystemInfo.set_DisplayPath
void System::IO::FileSystemInfo::set_DisplayPath(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileSystemInfo::set_DisplayPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DisplayPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: FileSystemInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileSystemInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileSystemInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileSystemInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileSystemInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileSystemInfo::*)()>(&FileSystemInfo::get_FullName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileSystemInfo::*)()>(&FileSystemInfo::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::get_Exists
// Il2CppName: get_Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FileSystemInfo::*)()>(&FileSystemInfo::get_Exists)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "get_Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::get_CreationTime
// Il2CppName: get_CreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (FileSystemInfo::*)()>(&FileSystemInfo::get_CreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "get_CreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::get_CreationTimeUtc
// Il2CppName: get_CreationTimeUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (FileSystemInfo::*)()>(&FileSystemInfo::get_CreationTimeUtc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "get_CreationTimeUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::get_LastAccessTime
// Il2CppName: get_LastAccessTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (FileSystemInfo::*)()>(&FileSystemInfo::get_LastAccessTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "get_LastAccessTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::get_LastAccessTimeUtc
// Il2CppName: get_LastAccessTimeUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (FileSystemInfo::*)()>(&FileSystemInfo::get_LastAccessTimeUtc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "get_LastAccessTimeUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileSystemInfo::*)()>(&FileSystemInfo::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileAttributes (FileSystemInfo::*)()>(&FileSystemInfo::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileSystemInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&FileSystemInfo::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::get_DisplayPath
// Il2CppName: get_DisplayPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileSystemInfo::*)()>(&FileSystemInfo::get_DisplayPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "get_DisplayPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::set_DisplayPath
// Il2CppName: set_DisplayPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileSystemInfo::*)(::Il2CppString*)>(&FileSystemInfo::set_DisplayPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), "set_DisplayPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileSystemInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileSystemInfo::*)()>(&FileSystemInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileSystemInfo::*)()>(&FileSystemInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileSystemInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.IOException
#include "System/IO/IOException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: IOException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)(::Il2CppString*, int)>(&IOException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)(::Il2CppString*, int)>(&IOException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IOException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)(::Il2CppString*, int, ::Il2CppString*)>(&IOException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)(::Il2CppString*, int, ::Il2CppString*)>(&IOException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IOException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)()>(&IOException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)()>(&IOException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IOException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)(::Il2CppString*)>(&IOException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)(::Il2CppString*)>(&IOException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IOException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)(::Il2CppString*, System::Exception*)>(&IOException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)(::Il2CppString*, System::Exception*)>(&IOException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: IOException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&IOException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&IOException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.MemoryStream
#include "System/IO/MemoryStream.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.MemoryStream.EnsureWriteable
void System::IO::MemoryStream::EnsureWriteable() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::EnsureWriteable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureWriteable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.EnsureCapacity
bool System::IO::MemoryStream::EnsureCapacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::EnsureCapacity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureCapacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.MemoryStream.GetBuffer
::Array<uint8_t>* System::IO::MemoryStream::GetBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::GetBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.InternalGetBuffer
::Array<uint8_t>* System::IO::MemoryStream::InternalGetBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::InternalGetBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalGetBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.InternalGetPosition
int System::IO::MemoryStream::InternalGetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::InternalGetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalGetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.InternalReadInt32
int System::IO::MemoryStream::InternalReadInt32() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::InternalReadInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalReadInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.InternalEmulateRead
int System::IO::MemoryStream::InternalEmulateRead(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::InternalEmulateRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalEmulateRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, count);
}
// Autogenerated method: System.IO.MemoryStream.get_Capacity
int System::IO::MemoryStream::get_Capacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::get_Capacity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.set_Capacity
void System::IO::MemoryStream::set_Capacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::set_Capacity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.MemoryStream.ToArray
::Array<uint8_t>* System::IO::MemoryStream::ToArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::ToArray");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.WriteTo
void System::IO::MemoryStream::WriteTo(System::IO::Stream* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::WriteTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, stream);
}
// Autogenerated method: System.IO.MemoryStream.get_CanRead
bool System::IO::MemoryStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.get_CanSeek
bool System::IO::MemoryStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanSeek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.get_CanWrite
bool System::IO::MemoryStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.Dispose
void System::IO::MemoryStream::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.MemoryStream.Flush
void System::IO::MemoryStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.get_Length
int64_t System::IO::MemoryStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::get_Length");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.get_Position
int64_t System::IO::MemoryStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::get_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.set_Position
void System::IO::MemoryStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::set_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.MemoryStream.Read
int System::IO::MemoryStream::Read(::Array<uint8_t>*& buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.MemoryStream.ReadAsync
System::Threading::Tasks::Task_1<int>* System::IO::MemoryStream::ReadAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::ReadAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<int>*, false>(this, ___internal__method, buffer, offset, count, cancellationToken);
}
// Autogenerated method: System.IO.MemoryStream.ReadByte
int System::IO::MemoryStream::ReadByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::ReadByte");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.MemoryStream.CopyToAsync
System::Threading::Tasks::Task* System::IO::MemoryStream::CopyToAsync(System::IO::Stream* destination, int bufferSize, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::CopyToAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyToAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(bufferSize), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, destination, bufferSize, cancellationToken);
}
// Autogenerated method: System.IO.MemoryStream.Seek
int64_t System::IO::MemoryStream::Seek(int64_t offset, System::IO::SeekOrigin loc) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::Seek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Seek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(loc)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method, offset, loc);
}
// Autogenerated method: System.IO.MemoryStream.SetLength
void System::IO::MemoryStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::SetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.MemoryStream.Write
void System::IO::MemoryStream::Write(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.MemoryStream.WriteAsync
System::Threading::Tasks::Task* System::IO::MemoryStream::WriteAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::WriteAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, buffer, offset, count, cancellationToken);
}
// Autogenerated method: System.IO.MemoryStream.WriteByte
void System::IO::MemoryStream::WriteByte(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::MemoryStream::WriteByte");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: MemoryStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(int)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(int)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*, bool)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*, bool)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*, int, int)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*, int, int)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*, int, int, bool)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*, int, int, bool)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*, int, int, bool, bool)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*, int, int, bool, bool)>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::EnsureWriteable
// Il2CppName: EnsureWriteable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)()>(&MemoryStream::EnsureWriteable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "EnsureWriteable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::EnsureCapacity
// Il2CppName: EnsureCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MemoryStream::*)(int)>(&MemoryStream::EnsureCapacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "EnsureCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::GetBuffer
// Il2CppName: GetBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (MemoryStream::*)()>(&MemoryStream::GetBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "GetBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::InternalGetBuffer
// Il2CppName: InternalGetBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (MemoryStream::*)()>(&MemoryStream::InternalGetBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "InternalGetBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::InternalGetPosition
// Il2CppName: InternalGetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MemoryStream::*)()>(&MemoryStream::InternalGetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "InternalGetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::InternalReadInt32
// Il2CppName: InternalReadInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MemoryStream::*)()>(&MemoryStream::InternalReadInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "InternalReadInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::InternalEmulateRead
// Il2CppName: InternalEmulateRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MemoryStream::*)(int)>(&MemoryStream::InternalEmulateRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "InternalEmulateRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::get_Capacity
// Il2CppName: get_Capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MemoryStream::*)()>(&MemoryStream::get_Capacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "get_Capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::set_Capacity
// Il2CppName: set_Capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(int)>(&MemoryStream::set_Capacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "set_Capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::ToArray
// Il2CppName: ToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (MemoryStream::*)()>(&MemoryStream::ToArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "ToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::WriteTo
// Il2CppName: WriteTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(System::IO::Stream*)>(&MemoryStream::WriteTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "WriteTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)()>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)()>(&MemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MemoryStream::*)()>(&MemoryStream::get_CanRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MemoryStream::*)()>(&MemoryStream::get_CanSeek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MemoryStream::*)()>(&MemoryStream::get_CanWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(bool)>(&MemoryStream::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)()>(&MemoryStream::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (MemoryStream::*)()>(&MemoryStream::get_Length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (MemoryStream::*)()>(&MemoryStream::get_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(int64_t)>(&MemoryStream::set_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MemoryStream::*)(::Array<uint8_t>*&, int, int)>(&MemoryStream::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::ReadAsync
// Il2CppName: ReadAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<int>* (MemoryStream::*)(::Array<uint8_t>*, int, int, System::Threading::CancellationToken)>(&MemoryStream::ReadAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "ReadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::ReadByte
// Il2CppName: ReadByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MemoryStream::*)()>(&MemoryStream::ReadByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "ReadByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryStream::CopyToAsync
// Il2CppName: CopyToAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MemoryStream::*)(System::IO::Stream*, int, System::Threading::CancellationToken)>(&MemoryStream::CopyToAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "CopyToAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (MemoryStream::*)(int64_t, System::IO::SeekOrigin)>(&MemoryStream::Seek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SeekOrigin>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(int64_t)>(&MemoryStream::SetLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(::Array<uint8_t>*, int, int)>(&MemoryStream::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::WriteAsync
// Il2CppName: WriteAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MemoryStream::*)(::Array<uint8_t>*, int, int, System::Threading::CancellationToken)>(&MemoryStream::WriteAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "WriteAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MemoryStream::WriteByte
// Il2CppName: WriteByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryStream::*)(uint8_t)>(&MemoryStream::WriteByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryStream*), "WriteByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.PathTooLongException
#include "System/IO/PathTooLongException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PathTooLongException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathTooLongException::*)()>(&PathTooLongException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathTooLongException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathTooLongException::*)()>(&PathTooLongException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathTooLongException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PathTooLongException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathTooLongException::*)(::Il2CppString*)>(&PathTooLongException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathTooLongException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathTooLongException::*)(::Il2CppString*)>(&PathTooLongException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathTooLongException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PathTooLongException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathTooLongException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&PathTooLongException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathTooLongException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathTooLongException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&PathTooLongException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathTooLongException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.PinnedBufferMemoryStream
#include "System/IO/PinnedBufferMemoryStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.PinnedBufferMemoryStream.Finalize
void System::IO::PinnedBufferMemoryStream::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::PinnedBufferMemoryStream::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.PinnedBufferMemoryStream.Dispose
void System::IO::PinnedBufferMemoryStream::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::PinnedBufferMemoryStream::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Writing MetadataGetter for method: PinnedBufferMemoryStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PinnedBufferMemoryStream::*)(::Array<uint8_t>*)>(&PinnedBufferMemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PinnedBufferMemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PinnedBufferMemoryStream::*)(::Array<uint8_t>*)>(&PinnedBufferMemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PinnedBufferMemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: PinnedBufferMemoryStream::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PinnedBufferMemoryStream::*)()>(&PinnedBufferMemoryStream::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PinnedBufferMemoryStream*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PinnedBufferMemoryStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PinnedBufferMemoryStream::*)(bool)>(&PinnedBufferMemoryStream::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PinnedBufferMemoryStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.IO.Stream/ReadWriteParameters
#include "System/IO/Stream_ReadWriteParameters.hpp"
// Including type: System.IO.Stream/ReadWriteTask
#include "System/IO/Stream_ReadWriteTask.hpp"
// Including type: System.IO.Stream/NullStream
#include "System/IO/Stream_NullStream.hpp"
// Including type: System.IO.Stream/SynchronousAsyncResult
#include "System/IO/Stream_SynchronousAsyncResult.hpp"
// Including type: System.IO.Stream/<>c
#include "System/IO/Stream_--c.hpp"
// Including type: System.IO.Stream/<CopyToAsyncInternal>d__27
#include "System/IO/Stream_-CopyToAsyncInternal-d__27.hpp"
// Including type: System.Threading.SemaphoreSlim
#include "System/Threading/SemaphoreSlim.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.IO.Stream Null
System::IO::Stream* System::IO::Stream::_get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::_get_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::Stream*>("System.IO", "Stream", "Null"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.IO.Stream Null
void System::IO::Stream::_set_Null(System::IO::Stream* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::_set_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "Stream", "Null", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _DefaultCopyBufferSize
int System::IO::Stream::_get__DefaultCopyBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::_get__DefaultCopyBufferSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.IO", "Stream", "_DefaultCopyBufferSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _DefaultCopyBufferSize
void System::IO::Stream::_set__DefaultCopyBufferSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::_set__DefaultCopyBufferSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "Stream", "_DefaultCopyBufferSize", value));
}
// Autogenerated method: System.IO.Stream.EnsureAsyncActiveSemaphoreInitialized
System::Threading::SemaphoreSlim* System::IO::Stream::EnsureAsyncActiveSemaphoreInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::EnsureAsyncActiveSemaphoreInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureAsyncActiveSemaphoreInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::SemaphoreSlim*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.get_CanRead
bool System::IO::Stream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.get_CanSeek
bool System::IO::Stream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanSeek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.get_CanWrite
bool System::IO::Stream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.get_Length
int64_t System::IO::Stream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::get_Length");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.get_Position
int64_t System::IO::Stream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::get_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.set_Position
void System::IO::Stream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::set_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.Stream.get_ReadTimeout
int System::IO::Stream::get_ReadTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::get_ReadTimeout");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReadTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.get_WriteTimeout
int System::IO::Stream::get_WriteTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::get_WriteTimeout");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WriteTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.CopyToAsync
System::Threading::Tasks::Task* System::IO::Stream::CopyToAsync(System::IO::Stream* destination) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::CopyToAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyToAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, destination);
}
// Autogenerated method: System.IO.Stream.CopyToAsync
System::Threading::Tasks::Task* System::IO::Stream::CopyToAsync(System::IO::Stream* destination, int bufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::CopyToAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyToAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(bufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, destination, bufferSize);
}
// Autogenerated method: System.IO.Stream.CopyToAsync
System::Threading::Tasks::Task* System::IO::Stream::CopyToAsync(System::IO::Stream* destination, int bufferSize, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::CopyToAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyToAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(bufferSize), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, destination, bufferSize, cancellationToken);
}
// Autogenerated method: System.IO.Stream.CopyToAsyncInternal
System::Threading::Tasks::Task* System::IO::Stream::CopyToAsyncInternal(System::IO::Stream* destination, int bufferSize, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::CopyToAsyncInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyToAsyncInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(bufferSize), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, destination, bufferSize, cancellationToken);
}
// Autogenerated method: System.IO.Stream.Close
void System::IO::Stream::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.Dispose
void System::IO::Stream::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.Dispose
void System::IO::Stream::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.Stream.Flush
void System::IO::Stream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.BeginRead
System::IAsyncResult* System::IO::Stream::BeginRead(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::BeginRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, offset, count, callback, state);
}
// Autogenerated method: System.IO.Stream.BeginReadInternal
System::IAsyncResult* System::IO::Stream::BeginReadInternal(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state, bool serializeAsynchronously) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::BeginReadInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginReadInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(serializeAsynchronously)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, offset, count, callback, state, serializeAsynchronously);
}
// Autogenerated method: System.IO.Stream.EndRead
int System::IO::Stream::EndRead(System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::EndRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, asyncResult);
}
// Autogenerated method: System.IO.Stream.ReadAsync
System::Threading::Tasks::Task_1<int>* System::IO::Stream::ReadAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::ReadAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<int>*, false>(this, ___internal__method, buffer, offset, count, cancellationToken);
}
// Autogenerated method: System.IO.Stream.BeginEndReadAsync
System::Threading::Tasks::Task_1<int>* System::IO::Stream::BeginEndReadAsync(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::BeginEndReadAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginEndReadAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<int>*, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.Stream.BeginWrite
System::IAsyncResult* System::IO::Stream::BeginWrite(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::BeginWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, offset, count, callback, state);
}
// Autogenerated method: System.IO.Stream.BeginWriteInternal
System::IAsyncResult* System::IO::Stream::BeginWriteInternal(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state, bool serializeAsynchronously) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::BeginWriteInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginWriteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(serializeAsynchronously)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, offset, count, callback, state, serializeAsynchronously);
}
// Autogenerated method: System.IO.Stream.RunReadWriteTaskWhenReady
void System::IO::Stream::RunReadWriteTaskWhenReady(System::Threading::Tasks::Task* asyncWaiter, System::IO::Stream::ReadWriteTask* readWriteTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::RunReadWriteTaskWhenReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunReadWriteTaskWhenReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncWaiter), ::il2cpp_utils::ExtractType(readWriteTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asyncWaiter, readWriteTask);
}
// Autogenerated method: System.IO.Stream.RunReadWriteTask
void System::IO::Stream::RunReadWriteTask(System::IO::Stream::ReadWriteTask* readWriteTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::RunReadWriteTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunReadWriteTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(readWriteTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, readWriteTask);
}
// Autogenerated method: System.IO.Stream.EndWrite
void System::IO::Stream::EndWrite(System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::EndWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asyncResult);
}
// Autogenerated method: System.IO.Stream.WriteAsync
System::Threading::Tasks::Task* System::IO::Stream::WriteAsync(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::WriteAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.Stream.WriteAsync
System::Threading::Tasks::Task* System::IO::Stream::WriteAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::WriteAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, buffer, offset, count, cancellationToken);
}
// Autogenerated method: System.IO.Stream.BeginEndWriteAsync
System::Threading::Tasks::Task* System::IO::Stream::BeginEndWriteAsync(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::BeginEndWriteAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginEndWriteAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.Stream.Seek
int64_t System::IO::Stream::Seek(int64_t offset, System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::Seek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Seek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(origin)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: System.IO.Stream.SetLength
void System::IO::Stream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.Stream.Read
int System::IO::Stream::Read(::Array<uint8_t>*& buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.Stream.ReadByte
int System::IO::Stream::ReadByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::ReadByte");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream.Write
void System::IO::Stream::Write(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.Stream.WriteByte
void System::IO::Stream::WriteByte(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::WriteByte");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.Stream.BlockingBeginRead
System::IAsyncResult* System::IO::Stream::BlockingBeginRead(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::BlockingBeginRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BlockingBeginRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, offset, count, callback, state);
}
// Autogenerated method: System.IO.Stream.BlockingEndRead
int System::IO::Stream::BlockingEndRead(System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::BlockingEndRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Stream", "BlockingEndRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, asyncResult);
}
// Autogenerated method: System.IO.Stream.BlockingBeginWrite
System::IAsyncResult* System::IO::Stream::BlockingBeginWrite(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::BlockingBeginWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BlockingBeginWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, offset, count, callback, state);
}
// Autogenerated method: System.IO.Stream.BlockingEndWrite
void System::IO::Stream::BlockingEndWrite(System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::BlockingEndWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Stream", "BlockingEndWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, asyncResult);
}
// Autogenerated method: System.IO.Stream..cctor
void System::IO::Stream::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Stream", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Stream::EnsureAsyncActiveSemaphoreInitialized
// Il2CppName: EnsureAsyncActiveSemaphoreInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::SemaphoreSlim* (Stream::*)()>(&Stream::EnsureAsyncActiveSemaphoreInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "EnsureAsyncActiveSemaphoreInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Stream::*)()>(&Stream::get_CanRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Stream::*)()>(&Stream::get_CanSeek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Stream::*)()>(&Stream::get_CanWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Stream::*)()>(&Stream::get_Length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Stream::*)()>(&Stream::get_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)(int64_t)>(&Stream::set_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: Stream::get_ReadTimeout
// Il2CppName: get_ReadTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::*)()>(&Stream::get_ReadTimeout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "get_ReadTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::get_WriteTimeout
// Il2CppName: get_WriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::*)()>(&Stream::get_WriteTimeout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "get_WriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::CopyToAsync
// Il2CppName: CopyToAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Stream::*)(System::IO::Stream*)>(&Stream::CopyToAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "CopyToAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: Stream::CopyToAsync
// Il2CppName: CopyToAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Stream::*)(System::IO::Stream*, int)>(&Stream::CopyToAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "CopyToAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Stream::CopyToAsync
// Il2CppName: CopyToAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Stream::*)(System::IO::Stream*, int, System::Threading::CancellationToken)>(&Stream::CopyToAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "CopyToAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Stream::CopyToAsyncInternal
// Il2CppName: CopyToAsyncInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Stream::*)(System::IO::Stream*, int, System::Threading::CancellationToken)>(&Stream::CopyToAsyncInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "CopyToAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Stream::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)()>(&Stream::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)()>(&Stream::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)(bool)>(&Stream::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Stream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)()>(&Stream::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::BeginRead
// Il2CppName: BeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Stream::*)(::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*)>(&Stream::BeginRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "BeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::BeginReadInternal
// Il2CppName: BeginReadInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Stream::*)(::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*, bool)>(&Stream::BeginReadInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "BeginReadInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Stream::EndRead
// Il2CppName: EndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::*)(System::IAsyncResult*)>(&Stream::EndRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "EndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Stream::ReadAsync
// Il2CppName: ReadAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<int>* (Stream::*)(::Array<uint8_t>*, int, int, System::Threading::CancellationToken)>(&Stream::ReadAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "ReadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Stream::BeginEndReadAsync
// Il2CppName: BeginEndReadAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<int>* (Stream::*)(::Array<uint8_t>*, int, int)>(&Stream::BeginEndReadAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "BeginEndReadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Stream::BeginWrite
// Il2CppName: BeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Stream::*)(::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*)>(&Stream::BeginWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "BeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::BeginWriteInternal
// Il2CppName: BeginWriteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Stream::*)(::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*, bool)>(&Stream::BeginWriteInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "BeginWriteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Stream::RunReadWriteTaskWhenReady
// Il2CppName: RunReadWriteTaskWhenReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)(System::Threading::Tasks::Task*, System::IO::Stream::ReadWriteTask*)>(&Stream::RunReadWriteTaskWhenReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "RunReadWriteTaskWhenReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream::ReadWriteTask*>()});
  }
};
// Writing MetadataGetter for method: Stream::RunReadWriteTask
// Il2CppName: RunReadWriteTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)(System::IO::Stream::ReadWriteTask*)>(&Stream::RunReadWriteTask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "RunReadWriteTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream::ReadWriteTask*>()});
  }
};
// Writing MetadataGetter for method: Stream::EndWrite
// Il2CppName: EndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)(System::IAsyncResult*)>(&Stream::EndWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "EndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Stream::WriteAsync
// Il2CppName: WriteAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Stream::*)(::Array<uint8_t>*, int, int)>(&Stream::WriteAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "WriteAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Stream::WriteAsync
// Il2CppName: WriteAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Stream::*)(::Array<uint8_t>*, int, int, System::Threading::CancellationToken)>(&Stream::WriteAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "WriteAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Stream::BeginEndWriteAsync
// Il2CppName: BeginEndWriteAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Stream::*)(::Array<uint8_t>*, int, int)>(&Stream::BeginEndWriteAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "BeginEndWriteAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Stream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Stream::*)(int64_t, System::IO::SeekOrigin)>(&Stream::Seek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SeekOrigin>()});
  }
};
// Writing MetadataGetter for method: Stream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)(int64_t)>(&Stream::SetLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: Stream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::*)(::Array<uint8_t>*&, int, int)>(&Stream::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Stream::ReadByte
// Il2CppName: ReadByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::*)()>(&Stream::ReadByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "ReadByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)(::Array<uint8_t>*, int, int)>(&Stream::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Stream::WriteByte
// Il2CppName: WriteByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)(uint8_t)>(&Stream::WriteByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "WriteByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: Stream::BlockingBeginRead
// Il2CppName: BlockingBeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Stream::*)(::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*)>(&Stream::BlockingBeginRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "BlockingBeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::BlockingEndRead
// Il2CppName: BlockingEndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IAsyncResult*)>(&Stream::BlockingEndRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "BlockingEndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Stream::BlockingBeginWrite
// Il2CppName: BlockingBeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Stream::*)(::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*)>(&Stream::BlockingBeginWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "BlockingBeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::BlockingEndWrite
// Il2CppName: BlockingEndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IAsyncResult*)>(&Stream::BlockingEndWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), "BlockingEndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Stream::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Stream::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)()>(&Stream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::*)()>(&Stream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.Stream/ReadWriteTask
#include "System/IO/Stream_ReadWriteTask.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_invokeAsyncCallback
System::Threading::ContextCallback* System::IO::Stream::ReadWriteTask::_get_s_invokeAsyncCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::ReadWriteTask::_get_s_invokeAsyncCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ContextCallback*>("System.IO", "Stream/ReadWriteTask", "s_invokeAsyncCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_invokeAsyncCallback
void System::IO::Stream::ReadWriteTask::_set_s_invokeAsyncCallback(System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::ReadWriteTask::_set_s_invokeAsyncCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "Stream/ReadWriteTask", "s_invokeAsyncCallback", value));
}
// Autogenerated method: System.IO.Stream/ReadWriteTask.ClearBeginState
void System::IO::Stream::ReadWriteTask::ClearBeginState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::ReadWriteTask::ClearBeginState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearBeginState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/ReadWriteTask.InvokeAsyncCallback
void System::IO::Stream::ReadWriteTask::InvokeAsyncCallback(::Il2CppObject* completedTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::ReadWriteTask::InvokeAsyncCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Stream/ReadWriteTask", "InvokeAsyncCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completedTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, completedTask);
}
// Autogenerated method: System.IO.Stream/ReadWriteTask.System.Threading.Tasks.ITaskCompletionAction.Invoke
void System::IO::Stream::ReadWriteTask::System_Threading_Tasks_ITaskCompletionAction_Invoke(System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::ReadWriteTask::System.Threading.Tasks.ITaskCompletionAction.Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Threading.Tasks.ITaskCompletionAction.Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completingTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, completingTask);
}
// Writing MetadataGetter for method: Stream::ReadWriteTask::ClearBeginState
// Il2CppName: ClearBeginState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::ReadWriteTask::*)()>(&Stream::ReadWriteTask::ClearBeginState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::ReadWriteTask*), "ClearBeginState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::ReadWriteTask::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::ReadWriteTask::*)(bool, System::Func_2<::Il2CppObject*, int>*, ::Il2CppObject*, System::IO::Stream*, ::Array<uint8_t>*, int, int, System::AsyncCallback*)>(&Stream::ReadWriteTask::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::ReadWriteTask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Func_2<::Il2CppObject*, int>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::ReadWriteTask::*)(bool, System::Func_2<::Il2CppObject*, int>*, ::Il2CppObject*, System::IO::Stream*, ::Array<uint8_t>*, int, int, System::AsyncCallback*)>(&Stream::ReadWriteTask::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::ReadWriteTask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Func_2<::Il2CppObject*, int>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>()});
  }
};
// Writing MetadataGetter for method: Stream::ReadWriteTask::InvokeAsyncCallback
// Il2CppName: InvokeAsyncCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Stream::ReadWriteTask::InvokeAsyncCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::ReadWriteTask*), "InvokeAsyncCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::ReadWriteTask::System_Threading_Tasks_ITaskCompletionAction_Invoke
// Il2CppName: System.Threading.Tasks.ITaskCompletionAction.Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::ReadWriteTask::*)(System::Threading::Tasks::Task*)>(&Stream::ReadWriteTask::System_Threading_Tasks_ITaskCompletionAction_Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::ReadWriteTask*), "System.Threading.Tasks.ITaskCompletionAction.Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.Stream/NullStream
#include "System/IO/Stream_NullStream.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Threading.Tasks.Task`1<System.Int32> s_nullReadTask
System::Threading::Tasks::Task_1<int>* System::IO::Stream::NullStream::_get_s_nullReadTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::_get_s_nullReadTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::Task_1<int>*>("System.IO", "Stream/NullStream", "s_nullReadTask"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Tasks.Task`1<System.Int32> s_nullReadTask
void System::IO::Stream::NullStream::_set_s_nullReadTask(System::Threading::Tasks::Task_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::_set_s_nullReadTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "Stream/NullStream", "s_nullReadTask", value));
}
// Autogenerated method: System.IO.Stream/NullStream.get_CanRead
bool System::IO::Stream::NullStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/NullStream.get_CanWrite
bool System::IO::Stream::NullStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/NullStream.get_CanSeek
bool System::IO::Stream::NullStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanSeek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/NullStream.get_Length
int64_t System::IO::Stream::NullStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::get_Length");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/NullStream.get_Position
int64_t System::IO::Stream::NullStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::get_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/NullStream.set_Position
void System::IO::Stream::NullStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::set_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.Stream/NullStream.Dispose
void System::IO::Stream::NullStream::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.Stream/NullStream.Flush
void System::IO::Stream::NullStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/NullStream.BeginRead
System::IAsyncResult* System::IO::Stream::NullStream::BeginRead(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::BeginRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, offset, count, callback, state);
}
// Autogenerated method: System.IO.Stream/NullStream.EndRead
int System::IO::Stream::NullStream::EndRead(System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::EndRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, asyncResult);
}
// Autogenerated method: System.IO.Stream/NullStream.BeginWrite
System::IAsyncResult* System::IO::Stream::NullStream::BeginWrite(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::BeginWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, buffer, offset, count, callback, state);
}
// Autogenerated method: System.IO.Stream/NullStream.EndWrite
void System::IO::Stream::NullStream::EndWrite(System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::EndWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asyncResult);
}
// Autogenerated method: System.IO.Stream/NullStream.Read
int System::IO::Stream::NullStream::Read(::Array<uint8_t>*& buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.Stream/NullStream.ReadAsync
System::Threading::Tasks::Task_1<int>* System::IO::Stream::NullStream::ReadAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::ReadAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<int>*, false>(this, ___internal__method, buffer, offset, count, cancellationToken);
}
// Autogenerated method: System.IO.Stream/NullStream.ReadByte
int System::IO::Stream::NullStream::ReadByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::ReadByte");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/NullStream.Write
void System::IO::Stream::NullStream::Write(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.Stream/NullStream.WriteAsync
System::Threading::Tasks::Task* System::IO::Stream::NullStream::WriteAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::WriteAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, buffer, offset, count, cancellationToken);
}
// Autogenerated method: System.IO.Stream/NullStream.WriteByte
void System::IO::Stream::NullStream::WriteByte(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::WriteByte");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.Stream/NullStream.Seek
int64_t System::IO::Stream::NullStream::Seek(int64_t offset, System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::Seek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Seek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(origin)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: System.IO.Stream/NullStream.SetLength
void System::IO::Stream::NullStream::SetLength(int64_t length) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::NullStream::SetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, length);
}
// Writing MetadataGetter for method: Stream::NullStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::NullStream::*)()>(&Stream::NullStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::NullStream::*)()>(&Stream::NullStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Stream::NullStream::*)()>(&Stream::NullStream::get_CanRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Stream::NullStream::*)()>(&Stream::NullStream::get_CanWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Stream::NullStream::*)()>(&Stream::NullStream::get_CanSeek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Stream::NullStream::*)()>(&Stream::NullStream::get_Length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Stream::NullStream::*)()>(&Stream::NullStream::get_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::NullStream::*)(int64_t)>(&Stream::NullStream::set_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::NullStream::*)(bool)>(&Stream::NullStream::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::NullStream::*)()>(&Stream::NullStream::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::BeginRead
// Il2CppName: BeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Stream::NullStream::*)(::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*)>(&Stream::NullStream::BeginRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "BeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::EndRead
// Il2CppName: EndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::NullStream::*)(System::IAsyncResult*)>(&Stream::NullStream::EndRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "EndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::BeginWrite
// Il2CppName: BeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Stream::NullStream::*)(::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*)>(&Stream::NullStream::BeginWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "BeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::EndWrite
// Il2CppName: EndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::NullStream::*)(System::IAsyncResult*)>(&Stream::NullStream::EndWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "EndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::NullStream::*)(::Array<uint8_t>*&, int, int)>(&Stream::NullStream::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::ReadAsync
// Il2CppName: ReadAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<int>* (Stream::NullStream::*)(::Array<uint8_t>*, int, int, System::Threading::CancellationToken)>(&Stream::NullStream::ReadAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "ReadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::ReadByte
// Il2CppName: ReadByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::NullStream::*)()>(&Stream::NullStream::ReadByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "ReadByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::NullStream::*)(::Array<uint8_t>*, int, int)>(&Stream::NullStream::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::WriteAsync
// Il2CppName: WriteAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (Stream::NullStream::*)(::Array<uint8_t>*, int, int, System::Threading::CancellationToken)>(&Stream::NullStream::WriteAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "WriteAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::WriteByte
// Il2CppName: WriteByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::NullStream::*)(uint8_t)>(&Stream::NullStream::WriteByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "WriteByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Stream::NullStream::*)(int64_t, System::IO::SeekOrigin)>(&Stream::NullStream::Seek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SeekOrigin>()});
  }
};
// Writing MetadataGetter for method: Stream::NullStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::NullStream::*)(int64_t)>(&Stream::NullStream::SetLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::NullStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.Stream/SynchronousAsyncResult
#include "System/IO/Stream_SynchronousAsyncResult.hpp"
// Including type: System.IO.Stream/SynchronousAsyncResult/<>c
#include "System/IO/Stream_SynchronousAsyncResult_--c.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.Stream/SynchronousAsyncResult.get_IsCompleted
bool System::IO::Stream::SynchronousAsyncResult::get_IsCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::get_IsCompleted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/SynchronousAsyncResult.get_AsyncWaitHandle
System::Threading::WaitHandle* System::IO::Stream::SynchronousAsyncResult::get_AsyncWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::get_AsyncWaitHandle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AsyncWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::WaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/SynchronousAsyncResult.get_AsyncState
::Il2CppObject* System::IO::Stream::SynchronousAsyncResult::get_AsyncState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::get_AsyncState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AsyncState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/SynchronousAsyncResult.get_CompletedSynchronously
bool System::IO::Stream::SynchronousAsyncResult::get_CompletedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::get_CompletedSynchronously");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CompletedSynchronously", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/SynchronousAsyncResult.ThrowIfError
void System::IO::Stream::SynchronousAsyncResult::ThrowIfError() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::ThrowIfError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/SynchronousAsyncResult.EndRead
int System::IO::Stream::SynchronousAsyncResult::EndRead(System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::EndRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Stream/SynchronousAsyncResult", "EndRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, asyncResult);
}
// Autogenerated method: System.IO.Stream/SynchronousAsyncResult.EndWrite
void System::IO::Stream::SynchronousAsyncResult::EndWrite(System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::EndWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Stream/SynchronousAsyncResult", "EndWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, asyncResult);
}
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::SynchronousAsyncResult::*)(int, ::Il2CppObject*)>(&Stream::SynchronousAsyncResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::SynchronousAsyncResult::*)(int, ::Il2CppObject*)>(&Stream::SynchronousAsyncResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::SynchronousAsyncResult::*)(::Il2CppObject*)>(&Stream::SynchronousAsyncResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::SynchronousAsyncResult::*)(::Il2CppObject*)>(&Stream::SynchronousAsyncResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::SynchronousAsyncResult::*)(System::Exception*, ::Il2CppObject*, bool)>(&Stream::SynchronousAsyncResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::SynchronousAsyncResult::*)(System::Exception*, ::Il2CppObject*, bool)>(&Stream::SynchronousAsyncResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::get_IsCompleted
// Il2CppName: get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Stream::SynchronousAsyncResult::*)()>(&Stream::SynchronousAsyncResult::get_IsCompleted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::get_AsyncWaitHandle
// Il2CppName: get_AsyncWaitHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::WaitHandle* (Stream::SynchronousAsyncResult::*)()>(&Stream::SynchronousAsyncResult::get_AsyncWaitHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), "get_AsyncWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::get_AsyncState
// Il2CppName: get_AsyncState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Stream::SynchronousAsyncResult::*)()>(&Stream::SynchronousAsyncResult::get_AsyncState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), "get_AsyncState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::get_CompletedSynchronously
// Il2CppName: get_CompletedSynchronously
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Stream::SynchronousAsyncResult::*)()>(&Stream::SynchronousAsyncResult::get_CompletedSynchronously)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), "get_CompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::ThrowIfError
// Il2CppName: ThrowIfError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::SynchronousAsyncResult::*)()>(&Stream::SynchronousAsyncResult::ThrowIfError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), "ThrowIfError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::EndRead
// Il2CppName: EndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IAsyncResult*)>(&Stream::SynchronousAsyncResult::EndRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), "EndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::EndWrite
// Il2CppName: EndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IAsyncResult*)>(&Stream::SynchronousAsyncResult::EndWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult*), "EndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.IO.Stream/SynchronousAsyncResult/<>c
#include "System/IO/Stream_SynchronousAsyncResult_--c.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.IO.Stream/SynchronousAsyncResult/<>c <>9
System::IO::Stream::SynchronousAsyncResult::$$c* System::IO::Stream::SynchronousAsyncResult::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::IO::Stream::SynchronousAsyncResult::$$c*>("System.IO", "Stream/SynchronousAsyncResult/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.IO.Stream/SynchronousAsyncResult/<>c <>9
void System::IO::Stream::SynchronousAsyncResult::$$c::_set_$$9(System::IO::Stream::SynchronousAsyncResult::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/SynchronousAsyncResult/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`1<System.Threading.ManualResetEvent> <>9__12_0
System::Func_1<System::Threading::ManualResetEvent*>* System::IO::Stream::SynchronousAsyncResult::$$c::_get_$$9__12_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::$$c::_get_$$9__12_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_1<System::Threading::ManualResetEvent*>*>("System.IO", "Stream/SynchronousAsyncResult/<>c", "<>9__12_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`1<System.Threading.ManualResetEvent> <>9__12_0
void System::IO::Stream::SynchronousAsyncResult::$$c::_set_$$9__12_0(System::Func_1<System::Threading::ManualResetEvent*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::$$c::_set_$$9__12_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/SynchronousAsyncResult/<>c", "<>9__12_0", value)));
}
// Autogenerated method: System.IO.Stream/SynchronousAsyncResult/<>c..cctor
void System::IO::Stream::SynchronousAsyncResult::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Stream/SynchronousAsyncResult/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.Stream/SynchronousAsyncResult/<>c.<get_AsyncWaitHandle>b__12_0
System::Threading::ManualResetEvent* System::IO::Stream::SynchronousAsyncResult::$$c::$get_AsyncWaitHandle$b__12_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::SynchronousAsyncResult::$$c::<get_AsyncWaitHandle>b__12_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_AsyncWaitHandle>b__12_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::ManualResetEvent*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Stream::SynchronousAsyncResult::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::$$c::$get_AsyncWaitHandle$b__12_0
// Il2CppName: <get_AsyncWaitHandle>b__12_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::ManualResetEvent* (Stream::SynchronousAsyncResult::$$c::*)()>(&Stream::SynchronousAsyncResult::$$c::$get_AsyncWaitHandle$b__12_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult::$$c*), "<get_AsyncWaitHandle>b__12_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::SynchronousAsyncResult::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::SynchronousAsyncResult::$$c::*)()>(&Stream::SynchronousAsyncResult::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::SynchronousAsyncResult::$$c::*)()>(&Stream::SynchronousAsyncResult::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::SynchronousAsyncResult::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.Stream/<>c
#include "System/IO/Stream_--c.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.SemaphoreSlim
#include "System/Threading/SemaphoreSlim.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Func`5
#include "System/Func_5.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.IO.Stream/<>c <>9
System::IO::Stream::$$c* System::IO::Stream::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::IO::Stream::$$c*>("System.IO", "Stream/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.IO.Stream/<>c <>9
void System::IO::Stream::$$c::_set_$$9(System::IO::Stream::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`1<System.Threading.SemaphoreSlim> <>9__4_0
System::Func_1<System::Threading::SemaphoreSlim*>* System::IO::Stream::$$c::_get_$$9__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_get_$$9__4_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_1<System::Threading::SemaphoreSlim*>*>("System.IO", "Stream/<>c", "<>9__4_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`1<System.Threading.SemaphoreSlim> <>9__4_0
void System::IO::Stream::$$c::_set_$$9__4_0(System::Func_1<System::Threading::SemaphoreSlim*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_set_$$9__4_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/<>c", "<>9__4_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Object,System.Int32> <>9__39_0
System::Func_2<::Il2CppObject*, int>* System::IO::Stream::$$c::_get_$$9__39_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_get_$$9__39_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<::Il2CppObject*, int>*>("System.IO", "Stream/<>c", "<>9__39_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Object,System.Int32> <>9__39_0
void System::IO::Stream::$$c::_set_$$9__39_0(System::Func_2<::Il2CppObject*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_set_$$9__39_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/<>c", "<>9__39_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`5<System.IO.Stream,System.IO.Stream/ReadWriteParameters,System.AsyncCallback,System.Object,System.IAsyncResult> <>9__43_0
System::Func_5<System::IO::Stream*, System::IO::Stream::ReadWriteParameters, System::AsyncCallback*, ::Il2CppObject*, System::IAsyncResult*>* System::IO::Stream::$$c::_get_$$9__43_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_get_$$9__43_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_5<System::IO::Stream*, System::IO::Stream::ReadWriteParameters, System::AsyncCallback*, ::Il2CppObject*, System::IAsyncResult*>*>("System.IO", "Stream/<>c", "<>9__43_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`5<System.IO.Stream,System.IO.Stream/ReadWriteParameters,System.AsyncCallback,System.Object,System.IAsyncResult> <>9__43_0
void System::IO::Stream::$$c::_set_$$9__43_0(System::Func_5<System::IO::Stream*, System::IO::Stream::ReadWriteParameters, System::AsyncCallback*, ::Il2CppObject*, System::IAsyncResult*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_set_$$9__43_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/<>c", "<>9__43_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`3<System.IO.Stream,System.IAsyncResult,System.Int32> <>9__43_1
System::Func_3<System::IO::Stream*, System::IAsyncResult*, int>* System::IO::Stream::$$c::_get_$$9__43_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_get_$$9__43_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_3<System::IO::Stream*, System::IAsyncResult*, int>*>("System.IO", "Stream/<>c", "<>9__43_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`3<System.IO.Stream,System.IAsyncResult,System.Int32> <>9__43_1
void System::IO::Stream::$$c::_set_$$9__43_1(System::Func_3<System::IO::Stream*, System::IAsyncResult*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_set_$$9__43_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/<>c", "<>9__43_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Object,System.Int32> <>9__46_0
System::Func_2<::Il2CppObject*, int>* System::IO::Stream::$$c::_get_$$9__46_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_get_$$9__46_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<::Il2CppObject*, int>*>("System.IO", "Stream/<>c", "<>9__46_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Object,System.Int32> <>9__46_0
void System::IO::Stream::$$c::_set_$$9__46_0(System::Func_2<::Il2CppObject*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_set_$$9__46_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/<>c", "<>9__46_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`2<System.Threading.Tasks.Task,System.Object> <>9__47_0
System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>* System::IO::Stream::$$c::_get_$$9__47_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_get_$$9__47_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>*>("System.IO", "Stream/<>c", "<>9__47_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`2<System.Threading.Tasks.Task,System.Object> <>9__47_0
void System::IO::Stream::$$c::_set_$$9__47_0(System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_set_$$9__47_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/<>c", "<>9__47_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`5<System.IO.Stream,System.IO.Stream/ReadWriteParameters,System.AsyncCallback,System.Object,System.IAsyncResult> <>9__53_0
System::Func_5<System::IO::Stream*, System::IO::Stream::ReadWriteParameters, System::AsyncCallback*, ::Il2CppObject*, System::IAsyncResult*>* System::IO::Stream::$$c::_get_$$9__53_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_get_$$9__53_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_5<System::IO::Stream*, System::IO::Stream::ReadWriteParameters, System::AsyncCallback*, ::Il2CppObject*, System::IAsyncResult*>*>("System.IO", "Stream/<>c", "<>9__53_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`5<System.IO.Stream,System.IO.Stream/ReadWriteParameters,System.AsyncCallback,System.Object,System.IAsyncResult> <>9__53_0
void System::IO::Stream::$$c::_set_$$9__53_0(System::Func_5<System::IO::Stream*, System::IO::Stream::ReadWriteParameters, System::AsyncCallback*, ::Il2CppObject*, System::IAsyncResult*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_set_$$9__53_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/<>c", "<>9__53_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`3<System.IO.Stream,System.IAsyncResult,System.Threading.Tasks.VoidTaskResult> <>9__53_1
System::Func_3<System::IO::Stream*, System::IAsyncResult*, System::Threading::Tasks::VoidTaskResult>* System::IO::Stream::$$c::_get_$$9__53_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_get_$$9__53_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_3<System::IO::Stream*, System::IAsyncResult*, System::Threading::Tasks::VoidTaskResult>*>("System.IO", "Stream/<>c", "<>9__53_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`3<System.IO.Stream,System.IAsyncResult,System.Threading.Tasks.VoidTaskResult> <>9__53_1
void System::IO::Stream::$$c::_set_$$9__53_1(System::Func_3<System::IO::Stream*, System::IAsyncResult*, System::Threading::Tasks::VoidTaskResult>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::_set_$$9__53_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "Stream/<>c", "<>9__53_1", value)));
}
// Autogenerated method: System.IO.Stream/<>c..cctor
void System::IO::Stream::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "Stream/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.Stream/<>c.<EnsureAsyncActiveSemaphoreInitialized>b__4_0
System::Threading::SemaphoreSlim* System::IO::Stream::$$c::$EnsureAsyncActiveSemaphoreInitialized$b__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::<EnsureAsyncActiveSemaphoreInitialized>b__4_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<EnsureAsyncActiveSemaphoreInitialized>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::SemaphoreSlim*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/<>c.<BeginReadInternal>b__39_0
int System::IO::Stream::$$c::$BeginReadInternal$b__39_0(::Il2CppObject* $p0$) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::<BeginReadInternal>b__39_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BeginReadInternal>b__39_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType($p0$)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, $p0$);
}
// Autogenerated method: System.IO.Stream/<>c.<BeginEndReadAsync>b__43_0
System::IAsyncResult* System::IO::Stream::$$c::$BeginEndReadAsync$b__43_0(System::IO::Stream* stream, System::IO::Stream::ReadWriteParameters args, System::AsyncCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::<BeginEndReadAsync>b__43_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BeginEndReadAsync>b__43_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, stream, args, callback, state);
}
// Autogenerated method: System.IO.Stream/<>c.<BeginEndReadAsync>b__43_1
int System::IO::Stream::$$c::$BeginEndReadAsync$b__43_1(System::IO::Stream* stream, System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::<BeginEndReadAsync>b__43_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BeginEndReadAsync>b__43_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(asyncResult)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, stream, asyncResult);
}
// Autogenerated method: System.IO.Stream/<>c.<BeginWriteInternal>b__46_0
int System::IO::Stream::$$c::$BeginWriteInternal$b__46_0(::Il2CppObject* $p0$) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::<BeginWriteInternal>b__46_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BeginWriteInternal>b__46_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType($p0$)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, $p0$);
}
// Autogenerated method: System.IO.Stream/<>c.<RunReadWriteTaskWhenReady>b__47_0
void System::IO::Stream::$$c::$RunReadWriteTaskWhenReady$b__47_0(System::Threading::Tasks::Task* t, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::<RunReadWriteTaskWhenReady>b__47_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunReadWriteTaskWhenReady>b__47_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, state);
}
// Autogenerated method: System.IO.Stream/<>c.<BeginEndWriteAsync>b__53_0
System::IAsyncResult* System::IO::Stream::$$c::$BeginEndWriteAsync$b__53_0(System::IO::Stream* stream, System::IO::Stream::ReadWriteParameters args, System::AsyncCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::<BeginEndWriteAsync>b__53_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BeginEndWriteAsync>b__53_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, stream, args, callback, state);
}
// Autogenerated method: System.IO.Stream/<>c.<BeginEndWriteAsync>b__53_1
System::Threading::Tasks::VoidTaskResult System::IO::Stream::$$c::$BeginEndWriteAsync$b__53_1(System::IO::Stream* stream, System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$$c::<BeginEndWriteAsync>b__53_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BeginEndWriteAsync>b__53_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(asyncResult)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::VoidTaskResult, false>(this, ___internal__method, stream, asyncResult);
}
// Writing MetadataGetter for method: Stream::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Stream::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::$$c::$EnsureAsyncActiveSemaphoreInitialized$b__4_0
// Il2CppName: <EnsureAsyncActiveSemaphoreInitialized>b__4_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::SemaphoreSlim* (Stream::$$c::*)()>(&Stream::$$c::$EnsureAsyncActiveSemaphoreInitialized$b__4_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), "<EnsureAsyncActiveSemaphoreInitialized>b__4_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::$$c::$BeginReadInternal$b__39_0
// Il2CppName: <BeginReadInternal>b__39_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::$$c::*)(::Il2CppObject*)>(&Stream::$$c::$BeginReadInternal$b__39_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), "<BeginReadInternal>b__39_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::$$c::$BeginEndReadAsync$b__43_0
// Il2CppName: <BeginEndReadAsync>b__43_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Stream::$$c::*)(System::IO::Stream*, System::IO::Stream::ReadWriteParameters, System::AsyncCallback*, ::Il2CppObject*)>(&Stream::$$c::$BeginEndReadAsync$b__43_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), "<BeginEndReadAsync>b__43_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream::ReadWriteParameters>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::$$c::$BeginEndReadAsync$b__43_1
// Il2CppName: <BeginEndReadAsync>b__43_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::$$c::*)(System::IO::Stream*, System::IAsyncResult*)>(&Stream::$$c::$BeginEndReadAsync$b__43_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), "<BeginEndReadAsync>b__43_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Stream::$$c::$BeginWriteInternal$b__46_0
// Il2CppName: <BeginWriteInternal>b__46_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Stream::$$c::*)(::Il2CppObject*)>(&Stream::$$c::$BeginWriteInternal$b__46_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), "<BeginWriteInternal>b__46_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::$$c::$RunReadWriteTaskWhenReady$b__47_0
// Il2CppName: <RunReadWriteTaskWhenReady>b__47_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::$$c::*)(System::Threading::Tasks::Task*, ::Il2CppObject*)>(&Stream::$$c::$RunReadWriteTaskWhenReady$b__47_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), "<RunReadWriteTaskWhenReady>b__47_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::$$c::$BeginEndWriteAsync$b__53_0
// Il2CppName: <BeginEndWriteAsync>b__53_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Stream::$$c::*)(System::IO::Stream*, System::IO::Stream::ReadWriteParameters, System::AsyncCallback*, ::Il2CppObject*)>(&Stream::$$c::$BeginEndWriteAsync$b__53_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), "<BeginEndWriteAsync>b__53_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream::ReadWriteParameters>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Stream::$$c::$BeginEndWriteAsync$b__53_1
// Il2CppName: <BeginEndWriteAsync>b__53_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::VoidTaskResult (Stream::$$c::*)(System::IO::Stream*, System::IAsyncResult*)>(&Stream::$$c::$BeginEndWriteAsync$b__53_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), "<BeginEndWriteAsync>b__53_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Stream::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::$$c::*)()>(&Stream::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::$$c::*)()>(&Stream::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.Stream/<CopyToAsyncInternal>d__27
#include "System/IO/Stream_-CopyToAsyncInternal-d__27.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.Stream/<CopyToAsyncInternal>d__27.MoveNext
void System::IO::Stream::$CopyToAsyncInternal$d__27::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$CopyToAsyncInternal$d__27::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: System.IO.Stream/<CopyToAsyncInternal>d__27.SetStateMachine
void System::IO::Stream::$CopyToAsyncInternal$d__27::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::$CopyToAsyncInternal$d__27::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: Stream::$CopyToAsyncInternal$d__27::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::$CopyToAsyncInternal$d__27::*)()>(&Stream::$CopyToAsyncInternal$d__27::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$CopyToAsyncInternal$d__27), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Stream::$CopyToAsyncInternal$d__27::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Stream::$CopyToAsyncInternal$d__27::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&Stream::$CopyToAsyncInternal$d__27::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Stream::$CopyToAsyncInternal$d__27), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.StreamReader
#include "System/IO/StreamReader.hpp"
// Including type: System.IO.StreamReader/NullStreamReader
#include "System/IO/StreamReader_NullStreamReader.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Text.Decoder
#include "System/Text/Decoder.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.IO.StreamReader Null
System::IO::StreamReader* System::IO::StreamReader::_get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::_get_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::StreamReader*>("System.IO", "StreamReader", "Null"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.IO.StreamReader Null
void System::IO::StreamReader::_set_Null(System::IO::StreamReader* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::_set_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "StreamReader", "Null", value));
}
// Autogenerated method: System.IO.StreamReader.get_DefaultBufferSize
int System::IO::StreamReader::get_DefaultBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::get_DefaultBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "StreamReader", "get_DefaultBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.CheckAsyncTaskInProgress
void System::IO::StreamReader::CheckAsyncTaskInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::CheckAsyncTaskInProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckAsyncTaskInProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.Init
void System::IO::StreamReader::Init(System::IO::Stream* stream, System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(encoding), ::il2cpp_utils::ExtractType(detectEncodingFromByteOrderMarks), ::il2cpp_utils::ExtractType(bufferSize), ::il2cpp_utils::ExtractType(leaveOpen)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, stream, encoding, detectEncodingFromByteOrderMarks, bufferSize, leaveOpen);
}
// Autogenerated method: System.IO.StreamReader.Init
void System::IO::StreamReader::Init(System::IO::Stream* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, stream);
}
// Autogenerated method: System.IO.StreamReader.get_CurrentEncoding
System::Text::Encoding* System::IO::StreamReader::get_CurrentEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::get_CurrentEncoding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.get_BaseStream
System::IO::Stream* System::IO::StreamReader::get_BaseStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::get_BaseStream");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::Stream*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.get_LeaveOpen
bool System::IO::StreamReader::get_LeaveOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::get_LeaveOpen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LeaveOpen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.get_EndOfStream
bool System::IO::StreamReader::get_EndOfStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::get_EndOfStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EndOfStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.DataAvailable
bool System::IO::StreamReader::DataAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::DataAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DataAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.CompressBuffer
void System::IO::StreamReader::CompressBuffer(int n) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::CompressBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompressBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, n);
}
// Autogenerated method: System.IO.StreamReader.DetectEncoding
void System::IO::StreamReader::DetectEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::DetectEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DetectEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.IsPreamble
bool System::IO::StreamReader::IsPreamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::IsPreamble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPreamble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.ReadBuffer
int System::IO::StreamReader::ReadBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::ReadBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.ReadBuffer
int System::IO::StreamReader::ReadBuffer(::Array<::Il2CppChar>* userBuffer, int userOffset, int desiredChars, bool& readToUserBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::ReadBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userBuffer), ::il2cpp_utils::ExtractType(userOffset), ::il2cpp_utils::ExtractType(desiredChars), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, userBuffer, userOffset, desiredChars, readToUserBuffer);
}
// Autogenerated method: System.IO.StreamReader.Close
void System::IO::StreamReader::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.Dispose
void System::IO::StreamReader::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.StreamReader.Peek
int System::IO::StreamReader::Peek() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::Peek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Peek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.Read
int System::IO::StreamReader::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.Read
int System::IO::StreamReader::Read(::Array<::Il2CppChar>*& buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.StreamReader.ReadToEnd
::Il2CppString* System::IO::StreamReader::ReadToEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::ReadToEnd");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadToEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader.ReadLine
::Il2CppString* System::IO::StreamReader::ReadLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::ReadLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader..cctor
void System::IO::StreamReader::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "StreamReader", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: StreamReader::get_DefaultBufferSize
// Il2CppName: get_DefaultBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&StreamReader::get_DefaultBufferSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "get_DefaultBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::CheckAsyncTaskInProgress
// Il2CppName: CheckAsyncTaskInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)()>(&StreamReader::CheckAsyncTaskInProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "CheckAsyncTaskInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(System::IO::Stream*)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(System::IO::Stream*)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: StreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(System::IO::Stream*, bool)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(System::IO::Stream*, bool)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(System::IO::Stream*, System::Text::Encoding*)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(System::IO::Stream*, System::Text::Encoding*)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
// Writing MetadataGetter for method: StreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(System::IO::Stream*, System::Text::Encoding*, bool, int, bool)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(System::IO::Stream*, System::Text::Encoding*, bool, int, bool)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(::Il2CppString*)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(::Il2CppString*)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(::Il2CppString*, bool)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(::Il2CppString*, bool)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(::Il2CppString*, System::Text::Encoding*)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(::Il2CppString*, System::Text::Encoding*)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
// Writing MetadataGetter for method: StreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(::Il2CppString*, System::Text::Encoding*, bool, int)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(::Il2CppString*, System::Text::Encoding*, bool, int)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(::Il2CppString*, System::Text::Encoding*, bool, int, bool)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(::Il2CppString*, System::Text::Encoding*, bool, int, bool)>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamReader::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(System::IO::Stream*, System::Text::Encoding*, bool, int, bool)>(&StreamReader::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamReader::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(System::IO::Stream*)>(&StreamReader::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: StreamReader::get_CurrentEncoding
// Il2CppName: get_CurrentEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (StreamReader::*)()>(&StreamReader::get_CurrentEncoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "get_CurrentEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::get_BaseStream
// Il2CppName: get_BaseStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::Stream* (StreamReader::*)()>(&StreamReader::get_BaseStream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "get_BaseStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::get_LeaveOpen
// Il2CppName: get_LeaveOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StreamReader::*)()>(&StreamReader::get_LeaveOpen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "get_LeaveOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::get_EndOfStream
// Il2CppName: get_EndOfStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StreamReader::*)()>(&StreamReader::get_EndOfStream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "get_EndOfStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::DataAvailable
// Il2CppName: DataAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StreamReader::*)()>(&StreamReader::DataAvailable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "DataAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::CompressBuffer
// Il2CppName: CompressBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(int)>(&StreamReader::CompressBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "CompressBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StreamReader::DetectEncoding
// Il2CppName: DetectEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)()>(&StreamReader::DetectEncoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "DetectEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::IsPreamble
// Il2CppName: IsPreamble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StreamReader::*)()>(&StreamReader::IsPreamble)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "IsPreamble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::ReadBuffer
// Il2CppName: ReadBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StreamReader::*)()>(&StreamReader::ReadBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "ReadBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::ReadBuffer
// Il2CppName: ReadBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StreamReader::*)(::Array<::Il2CppChar>*, int, int, bool&)>(&StreamReader::ReadBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "ReadBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: StreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)()>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)()>(&StreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)()>(&StreamReader::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::*)(bool)>(&StreamReader::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamReader::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StreamReader::*)()>(&StreamReader::Peek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StreamReader::*)()>(&StreamReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StreamReader::*)(::Array<::Il2CppChar>*&, int, int)>(&StreamReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StreamReader::ReadToEnd
// Il2CppName: ReadToEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StreamReader::*)()>(&StreamReader::ReadToEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "ReadToEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StreamReader::*)()>(&StreamReader::ReadLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&StreamReader::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.StreamReader/NullStreamReader
#include "System/IO/StreamReader_NullStreamReader.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.StreamReader/NullStreamReader.get_BaseStream
System::IO::Stream* System::IO::StreamReader::NullStreamReader::get_BaseStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::NullStreamReader::get_BaseStream");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::Stream*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader/NullStreamReader.get_CurrentEncoding
System::Text::Encoding* System::IO::StreamReader::NullStreamReader::get_CurrentEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::NullStreamReader::get_CurrentEncoding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader/NullStreamReader.Dispose
void System::IO::StreamReader::NullStreamReader::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::NullStreamReader::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.StreamReader/NullStreamReader.Peek
int System::IO::StreamReader::NullStreamReader::Peek() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::NullStreamReader::Peek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Peek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader/NullStreamReader.Read
int System::IO::StreamReader::NullStreamReader::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::NullStreamReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader/NullStreamReader.Read
int System::IO::StreamReader::NullStreamReader::Read(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::NullStreamReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.StreamReader/NullStreamReader.ReadLine
::Il2CppString* System::IO::StreamReader::NullStreamReader::ReadLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::NullStreamReader::ReadLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader/NullStreamReader.ReadToEnd
::Il2CppString* System::IO::StreamReader::NullStreamReader::ReadToEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::NullStreamReader::ReadToEnd");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadToEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamReader/NullStreamReader.ReadBuffer
int System::IO::StreamReader::NullStreamReader::ReadBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamReader::NullStreamReader::ReadBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StreamReader::NullStreamReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::NullStreamReader::*)()>(&StreamReader::NullStreamReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::NullStreamReader::*)()>(&StreamReader::NullStreamReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::NullStreamReader::get_BaseStream
// Il2CppName: get_BaseStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::Stream* (StreamReader::NullStreamReader::*)()>(&StreamReader::NullStreamReader::get_BaseStream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), "get_BaseStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::NullStreamReader::get_CurrentEncoding
// Il2CppName: get_CurrentEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (StreamReader::NullStreamReader::*)()>(&StreamReader::NullStreamReader::get_CurrentEncoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), "get_CurrentEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::NullStreamReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamReader::NullStreamReader::*)(bool)>(&StreamReader::NullStreamReader::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamReader::NullStreamReader::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StreamReader::NullStreamReader::*)()>(&StreamReader::NullStreamReader::Peek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::NullStreamReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StreamReader::NullStreamReader::*)()>(&StreamReader::NullStreamReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::NullStreamReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StreamReader::NullStreamReader::*)(::Array<::Il2CppChar>*, int, int)>(&StreamReader::NullStreamReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StreamReader::NullStreamReader::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StreamReader::NullStreamReader::*)()>(&StreamReader::NullStreamReader::ReadLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::NullStreamReader::ReadToEnd
// Il2CppName: ReadToEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StreamReader::NullStreamReader::*)()>(&StreamReader::NullStreamReader::ReadToEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), "ReadToEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamReader::NullStreamReader::ReadBuffer
// Il2CppName: ReadBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StreamReader::NullStreamReader::*)()>(&StreamReader::NullStreamReader::ReadBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamReader::NullStreamReader*), "ReadBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.StreamWriter
#include "System/IO/StreamWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Text.Encoder
#include "System/Text/Encoder.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.IO.StreamWriter Null
System::IO::StreamWriter* System::IO::StreamWriter::_get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::_get_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::StreamWriter*>("System.IO", "StreamWriter", "Null"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.IO.StreamWriter Null
void System::IO::StreamWriter::_set_Null(System::IO::StreamWriter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::_set_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "StreamWriter", "Null", value));
}
// Autogenerated static field getter
// Get static field: static private System.Text.Encoding _UTF8NoBOM
System::Text::Encoding* System::IO::StreamWriter::_get__UTF8NoBOM() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::_get__UTF8NoBOM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Text::Encoding*>("System.IO", "StreamWriter", "_UTF8NoBOM"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.Encoding _UTF8NoBOM
void System::IO::StreamWriter::_set__UTF8NoBOM(System::Text::Encoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::_set__UTF8NoBOM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "StreamWriter", "_UTF8NoBOM", value));
}
// Autogenerated method: System.IO.StreamWriter.CheckAsyncTaskInProgress
void System::IO::StreamWriter::CheckAsyncTaskInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::CheckAsyncTaskInProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckAsyncTaskInProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamWriter.get_UTF8NoBOM
System::Text::Encoding* System::IO::StreamWriter::get_UTF8NoBOM() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::get_UTF8NoBOM");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "StreamWriter", "get_UTF8NoBOM", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.StreamWriter.Init
void System::IO::StreamWriter::Init(System::IO::Stream* streamArg, System::Text::Encoding* encodingArg, int bufferSize, bool shouldLeaveOpen) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(streamArg), ::il2cpp_utils::ExtractType(encodingArg), ::il2cpp_utils::ExtractType(bufferSize), ::il2cpp_utils::ExtractType(shouldLeaveOpen)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, streamArg, encodingArg, bufferSize, shouldLeaveOpen);
}
// Autogenerated method: System.IO.StreamWriter.CreateFile
System::IO::Stream* System::IO::StreamWriter::CreateFile(::Il2CppString* path, bool append, bool checkHost) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::CreateFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "StreamWriter", "CreateFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(append), ::il2cpp_utils::ExtractType(checkHost)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::Stream*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, append, checkHost);
}
// Autogenerated method: System.IO.StreamWriter.Flush
void System::IO::StreamWriter::Flush(bool flushStream, bool flushEncoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flushStream), ::il2cpp_utils::ExtractType(flushEncoder)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flushStream, flushEncoder);
}
// Autogenerated method: System.IO.StreamWriter.set_AutoFlush
void System::IO::StreamWriter::set_AutoFlush(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::set_AutoFlush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AutoFlush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.StreamWriter.get_LeaveOpen
bool System::IO::StreamWriter::get_LeaveOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::get_LeaveOpen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LeaveOpen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamWriter.Close
void System::IO::StreamWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamWriter.Dispose
void System::IO::StreamWriter::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.StreamWriter.Flush
void System::IO::StreamWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamWriter.get_Encoding
System::Text::Encoding* System::IO::StreamWriter::get_Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::get_Encoding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Encoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StreamWriter.Write
void System::IO::StreamWriter::Write(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.StreamWriter.Write
void System::IO::StreamWriter::Write(::Array<::Il2CppChar>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer);
}
// Autogenerated method: System.IO.StreamWriter.Write
void System::IO::StreamWriter::Write(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.StreamWriter.Write
void System::IO::StreamWriter::Write(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.StreamWriter..cctor
void System::IO::StreamWriter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StreamWriter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "StreamWriter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: StreamWriter::CheckAsyncTaskInProgress
// Il2CppName: CheckAsyncTaskInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)()>(&StreamWriter::CheckAsyncTaskInProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "CheckAsyncTaskInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamWriter::get_UTF8NoBOM
// Il2CppName: get_UTF8NoBOM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (*)()>(&StreamWriter::get_UTF8NoBOM)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "get_UTF8NoBOM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(System::IO::Stream*)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(System::IO::Stream*)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(System::IO::Stream*, System::Text::Encoding*)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(System::IO::Stream*, System::Text::Encoding*)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(System::IO::Stream*, System::Text::Encoding*, int)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(System::IO::Stream*, System::Text::Encoding*, int)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(System::IO::Stream*, System::Text::Encoding*, int, bool)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(System::IO::Stream*, System::Text::Encoding*, int, bool)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*, bool)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*, bool)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*, bool, System::Text::Encoding*)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*, bool, System::Text::Encoding*)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*, bool, System::Text::Encoding*, int)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*, bool, System::Text::Encoding*, int)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*, bool, System::Text::Encoding*, int, bool)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*, bool, System::Text::Encoding*, int, bool)>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(System::IO::Stream*, System::Text::Encoding*, int, bool)>(&StreamWriter::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::CreateFile
// Il2CppName: CreateFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::Stream* (*)(::Il2CppString*, bool, bool)>(&StreamWriter::CreateFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "CreateFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(bool, bool)>(&StreamWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::set_AutoFlush
// Il2CppName: set_AutoFlush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(bool)>(&StreamWriter::set_AutoFlush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "set_AutoFlush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::get_LeaveOpen
// Il2CppName: get_LeaveOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StreamWriter::*)()>(&StreamWriter::get_LeaveOpen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "get_LeaveOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)()>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)()>(&StreamWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)()>(&StreamWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(bool)>(&StreamWriter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)()>(&StreamWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamWriter::get_Encoding
// Il2CppName: get_Encoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (StreamWriter::*)()>(&StreamWriter::get_Encoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "get_Encoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StreamWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppChar)>(&StreamWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Array<::Il2CppChar>*)>(&StreamWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Array<::Il2CppChar>*, int, int)>(&StreamWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StreamWriter::*)(::Il2CppString*)>(&StreamWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StreamWriter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&StreamWriter::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StreamWriter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.StringReader
#include "System/IO/StringReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.StringReader.Close
void System::IO::StringReader::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringReader::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StringReader.Dispose
void System::IO::StringReader::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringReader::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.StringReader.Peek
int System::IO::StringReader::Peek() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringReader::Peek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Peek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StringReader.Read
int System::IO::StringReader::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StringReader.Read
int System::IO::StringReader::Read(::Array<::Il2CppChar>*& buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.StringReader.ReadToEnd
::Il2CppString* System::IO::StringReader::ReadToEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringReader::ReadToEnd");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadToEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StringReader.ReadLine
::Il2CppString* System::IO::StringReader::ReadLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringReader::ReadLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StringReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringReader::*)(::Il2CppString*)>(&StringReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringReader::*)(::Il2CppString*)>(&StringReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringReader::*)()>(&StringReader::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringReader::*)(bool)>(&StringReader::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StringReader::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StringReader::*)()>(&StringReader::Peek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringReader*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StringReader::*)()>(&StringReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StringReader::*)(::Array<::Il2CppChar>*&, int, int)>(&StringReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringReader::ReadToEnd
// Il2CppName: ReadToEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StringReader::*)()>(&StringReader::ReadToEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringReader*), "ReadToEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringReader::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StringReader::*)()>(&StringReader::ReadLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringReader*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.StringWriter
#include "System/IO/StringWriter.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.Text.UnicodeEncoding
#include "System/Text/UnicodeEncoding.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.UnicodeEncoding m_encoding
System::Text::UnicodeEncoding* System::IO::StringWriter::_get_m_encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringWriter::_get_m_encoding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Text::UnicodeEncoding*>("System.IO", "StringWriter", "m_encoding"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.UnicodeEncoding m_encoding
void System::IO::StringWriter::_set_m_encoding(System::Text::UnicodeEncoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringWriter::_set_m_encoding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "StringWriter", "m_encoding", value));
}
// Autogenerated method: System.IO.StringWriter.Close
void System::IO::StringWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StringWriter.Dispose
void System::IO::StringWriter::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringWriter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.StringWriter.get_Encoding
System::Text::Encoding* System::IO::StringWriter::get_Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringWriter::get_Encoding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Encoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.StringWriter.Write
void System::IO::StringWriter::Write(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.StringWriter.Write
void System::IO::StringWriter::Write(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.StringWriter.Write
void System::IO::StringWriter::Write(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.StringWriter.ToString
::Il2CppString* System::IO::StringWriter::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::StringWriter::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StringWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)(System::Text::StringBuilder*)>(&StringWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)(System::Text::StringBuilder*)>(&StringWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>()});
  }
};
// Writing MetadataGetter for method: StringWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)(System::Text::StringBuilder*, System::IFormatProvider*)>(&StringWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)(System::Text::StringBuilder*, System::IFormatProvider*)>(&StringWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: StringWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)()>(&StringWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)()>(&StringWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)(System::IFormatProvider*)>(&StringWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)(System::IFormatProvider*)>(&StringWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: StringWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)()>(&StringWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)(bool)>(&StringWriter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StringWriter::get_Encoding
// Il2CppName: get_Encoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (StringWriter::*)()>(&StringWriter::get_Encoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), "get_Encoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)(::Il2CppChar)>(&StringWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: StringWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)(::Array<::Il2CppChar>*, int, int)>(&StringWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWriter::*)(::Il2CppString*)>(&StringWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringWriter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StringWriter::*)()>(&StringWriter::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWriter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.TextReader
#include "System/IO/TextReader.hpp"
// Including type: System.IO.TextReader/NullTextReader
#include "System/IO/TextReader_NullTextReader.hpp"
// Including type: System.IO.TextReader/SyncTextReader
#include "System/IO/TextReader_SyncTextReader.hpp"
// Including type: System.IO.TextReader/<>c
#include "System/IO/TextReader_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Func`2<System.Object,System.String> _ReadLineDelegate
System::Func_2<::Il2CppObject*, ::Il2CppString*>* System::IO::TextReader::_get__ReadLineDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::_get__ReadLineDelegate");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<::Il2CppObject*, ::Il2CppString*>*>("System.IO", "TextReader", "_ReadLineDelegate")));
}
// Autogenerated static field setter
// Set static field: static private System.Func`2<System.Object,System.String> _ReadLineDelegate
void System::IO::TextReader::_set__ReadLineDelegate(System::Func_2<::Il2CppObject*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::_set__ReadLineDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextReader", "_ReadLineDelegate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Func`2<System.Object,System.Int32> _ReadDelegate
System::Func_2<::Il2CppObject*, int>* System::IO::TextReader::_get__ReadDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::_get__ReadDelegate");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<::Il2CppObject*, int>*>("System.IO", "TextReader", "_ReadDelegate")));
}
// Autogenerated static field setter
// Set static field: static private System.Func`2<System.Object,System.Int32> _ReadDelegate
void System::IO::TextReader::_set__ReadDelegate(System::Func_2<::Il2CppObject*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::_set__ReadDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextReader", "_ReadDelegate", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.IO.TextReader Null
System::IO::TextReader* System::IO::TextReader::_get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::_get_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::TextReader*>("System.IO", "TextReader", "Null"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.IO.TextReader Null
void System::IO::TextReader::_set_Null(System::IO::TextReader* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::_set_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextReader", "Null", value));
}
// Autogenerated method: System.IO.TextReader.Close
void System::IO::TextReader::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextReader.Dispose
void System::IO::TextReader::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextReader.Dispose
void System::IO::TextReader::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.TextReader.Peek
int System::IO::TextReader::Peek() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::Peek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Peek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextReader.Read
int System::IO::TextReader::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextReader.Read
int System::IO::TextReader::Read(::Array<::Il2CppChar>*& buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.TextReader.ReadToEnd
::Il2CppString* System::IO::TextReader::ReadToEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::ReadToEnd");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadToEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextReader.ReadLine
::Il2CppString* System::IO::TextReader::ReadLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::ReadLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextReader.Synchronized
System::IO::TextReader* System::IO::TextReader::Synchronized(System::IO::TextReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::Synchronized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "TextReader", "Synchronized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::TextReader*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: System.IO.TextReader..cctor
void System::IO::TextReader::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "TextReader", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TextReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::*)()>(&TextReader::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::*)()>(&TextReader::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::*)(bool)>(&TextReader::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextReader::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextReader::*)()>(&TextReader::Peek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextReader::*)()>(&TextReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextReader::*)(::Array<::Il2CppChar>*&, int, int)>(&TextReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextReader::ReadToEnd
// Il2CppName: ReadToEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TextReader::*)()>(&TextReader::ReadToEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), "ReadToEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TextReader::*)()>(&TextReader::ReadLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::Synchronized
// Il2CppName: Synchronized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::TextReader* (*)(System::IO::TextReader*)>(&TextReader::Synchronized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), "Synchronized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextReader*>()});
  }
};
// Writing MetadataGetter for method: TextReader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TextReader::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::*)()>(&TextReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::*)()>(&TextReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.TextReader/NullTextReader
#include "System/IO/TextReader_NullTextReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.TextReader/NullTextReader.Read
int System::IO::TextReader::NullTextReader::Read(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::NullTextReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.TextReader/NullTextReader.ReadLine
::Il2CppString* System::IO::TextReader::NullTextReader::ReadLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::NullTextReader::ReadLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TextReader::NullTextReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::NullTextReader::*)()>(&TextReader::NullTextReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::NullTextReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::NullTextReader::*)()>(&TextReader::NullTextReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::NullTextReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::NullTextReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextReader::NullTextReader::*)(::Array<::Il2CppChar>*, int, int)>(&TextReader::NullTextReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::NullTextReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextReader::NullTextReader::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TextReader::NullTextReader::*)()>(&TextReader::NullTextReader::ReadLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::NullTextReader*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.TextReader/SyncTextReader
#include "System/IO/TextReader_SyncTextReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.TextReader/SyncTextReader.Close
void System::IO::TextReader::SyncTextReader::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::SyncTextReader::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextReader/SyncTextReader.Dispose
void System::IO::TextReader::SyncTextReader::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::SyncTextReader::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.TextReader/SyncTextReader.Peek
int System::IO::TextReader::SyncTextReader::Peek() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::SyncTextReader::Peek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Peek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextReader/SyncTextReader.Read
int System::IO::TextReader::SyncTextReader::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::SyncTextReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextReader/SyncTextReader.Read
int System::IO::TextReader::SyncTextReader::Read(::Array<::Il2CppChar>*& buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::SyncTextReader::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.TextReader/SyncTextReader.ReadLine
::Il2CppString* System::IO::TextReader::SyncTextReader::ReadLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::SyncTextReader::ReadLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextReader/SyncTextReader.ReadToEnd
::Il2CppString* System::IO::TextReader::SyncTextReader::ReadToEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::SyncTextReader::ReadToEnd");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadToEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TextReader::SyncTextReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::SyncTextReader::*)(System::IO::TextReader*)>(&TextReader::SyncTextReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::SyncTextReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextReader*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::SyncTextReader::*)(System::IO::TextReader*)>(&TextReader::SyncTextReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::SyncTextReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextReader*>()});
  }
};
// Writing MetadataGetter for method: TextReader::SyncTextReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::SyncTextReader::*)()>(&TextReader::SyncTextReader::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::SyncTextReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::SyncTextReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::SyncTextReader::*)(bool)>(&TextReader::SyncTextReader::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::SyncTextReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextReader::SyncTextReader::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextReader::SyncTextReader::*)()>(&TextReader::SyncTextReader::Peek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::SyncTextReader*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::SyncTextReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextReader::SyncTextReader::*)()>(&TextReader::SyncTextReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::SyncTextReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::SyncTextReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextReader::SyncTextReader::*)(::Array<::Il2CppChar>*&, int, int)>(&TextReader::SyncTextReader::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::SyncTextReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextReader::SyncTextReader::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TextReader::SyncTextReader::*)()>(&TextReader::SyncTextReader::ReadLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::SyncTextReader*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::SyncTextReader::ReadToEnd
// Il2CppName: ReadToEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TextReader::SyncTextReader::*)()>(&TextReader::SyncTextReader::ReadToEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::SyncTextReader*), "ReadToEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.TextReader/<>c
#include "System/IO/TextReader_--c.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.IO.TextReader/<>c <>9
System::IO::TextReader::$$c* System::IO::TextReader::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::IO::TextReader::$$c*>("System.IO", "TextReader/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.IO.TextReader/<>c <>9
void System::IO::TextReader::$$c::_set_$$9(System::IO::TextReader::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "TextReader/<>c", "<>9", value)));
}
// Autogenerated method: System.IO.TextReader/<>c..cctor
void System::IO::TextReader::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "TextReader/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.TextReader/<>c.<.cctor>b__22_0
::Il2CppString* System::IO::TextReader::$$c::$_cctor$b__22_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::$$c::<.cctor>b__22_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__22_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, state);
}
// Autogenerated method: System.IO.TextReader/<>c.<.cctor>b__22_1
int System::IO::TextReader::$$c::$_cctor$b__22_1(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextReader::$$c::<.cctor>b__22_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__22_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, state);
}
// Writing MetadataGetter for method: TextReader::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TextReader::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextReader::$$c::$_cctor$b__22_0
// Il2CppName: <.cctor>b__22_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TextReader::$$c::*)(::Il2CppObject*)>(&TextReader::$$c::$_cctor$b__22_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::$$c*), "<.cctor>b__22_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextReader::$$c::$_cctor$b__22_1
// Il2CppName: <.cctor>b__22_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextReader::$$c::*)(::Il2CppObject*)>(&TextReader::$$c::$_cctor$b__22_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::$$c*), "<.cctor>b__22_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextReader::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::$$c::*)()>(&TextReader::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextReader::$$c::*)()>(&TextReader::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextReader::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
// Including type: System.IO.TextWriter/NullTextWriter
#include "System/IO/TextWriter_NullTextWriter.hpp"
// Including type: System.IO.TextWriter/SyncTextWriter
#include "System/IO/TextWriter_SyncTextWriter.hpp"
// Including type: System.IO.TextWriter/<>c
#include "System/IO/TextWriter_--c.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.IO.TextWriter Null
System::IO::TextWriter* System::IO::TextWriter::_get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_get_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::TextWriter*>("System.IO", "TextWriter", "Null"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.IO.TextWriter Null
void System::IO::TextWriter::_set_Null(System::IO::TextWriter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_set_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextWriter", "Null", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> _WriteCharDelegate
System::Action_1<::Il2CppObject*>* System::IO::TextWriter::_get__WriteCharDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_get__WriteCharDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.IO", "TextWriter", "_WriteCharDelegate"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> _WriteCharDelegate
void System::IO::TextWriter::_set__WriteCharDelegate(System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_set__WriteCharDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextWriter", "_WriteCharDelegate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> _WriteStringDelegate
System::Action_1<::Il2CppObject*>* System::IO::TextWriter::_get__WriteStringDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_get__WriteStringDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.IO", "TextWriter", "_WriteStringDelegate"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> _WriteStringDelegate
void System::IO::TextWriter::_set__WriteStringDelegate(System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_set__WriteStringDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextWriter", "_WriteStringDelegate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> _WriteCharArrayRangeDelegate
System::Action_1<::Il2CppObject*>* System::IO::TextWriter::_get__WriteCharArrayRangeDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_get__WriteCharArrayRangeDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.IO", "TextWriter", "_WriteCharArrayRangeDelegate"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> _WriteCharArrayRangeDelegate
void System::IO::TextWriter::_set__WriteCharArrayRangeDelegate(System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_set__WriteCharArrayRangeDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextWriter", "_WriteCharArrayRangeDelegate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> _WriteLineCharDelegate
System::Action_1<::Il2CppObject*>* System::IO::TextWriter::_get__WriteLineCharDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_get__WriteLineCharDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.IO", "TextWriter", "_WriteLineCharDelegate"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> _WriteLineCharDelegate
void System::IO::TextWriter::_set__WriteLineCharDelegate(System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_set__WriteLineCharDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextWriter", "_WriteLineCharDelegate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> _WriteLineStringDelegate
System::Action_1<::Il2CppObject*>* System::IO::TextWriter::_get__WriteLineStringDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_get__WriteLineStringDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.IO", "TextWriter", "_WriteLineStringDelegate"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> _WriteLineStringDelegate
void System::IO::TextWriter::_set__WriteLineStringDelegate(System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_set__WriteLineStringDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextWriter", "_WriteLineStringDelegate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> _WriteLineCharArrayRangeDelegate
System::Action_1<::Il2CppObject*>* System::IO::TextWriter::_get__WriteLineCharArrayRangeDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_get__WriteLineCharArrayRangeDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.IO", "TextWriter", "_WriteLineCharArrayRangeDelegate"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> _WriteLineCharArrayRangeDelegate
void System::IO::TextWriter::_set__WriteLineCharArrayRangeDelegate(System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_set__WriteLineCharArrayRangeDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextWriter", "_WriteLineCharArrayRangeDelegate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> _FlushDelegate
System::Action_1<::Il2CppObject*>* System::IO::TextWriter::_get__FlushDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_get__FlushDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.IO", "TextWriter", "_FlushDelegate"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> _FlushDelegate
void System::IO::TextWriter::_set__FlushDelegate(System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::_set__FlushDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "TextWriter", "_FlushDelegate", value));
}
// Autogenerated method: System.IO.TextWriter.get_InitialNewLine
::Il2CppString* System::IO::TextWriter::get_InitialNewLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::get_InitialNewLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "TextWriter", "get_InitialNewLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.TextWriter.get_FormatProvider
System::IFormatProvider* System::IO::TextWriter::get_FormatProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::get_FormatProvider");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FormatProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IFormatProvider*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter.Close
void System::IO::TextWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter.Dispose
void System::IO::TextWriter::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.TextWriter.Dispose
void System::IO::TextWriter::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter.Flush
void System::IO::TextWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter.get_Encoding
System::Text::Encoding* System::IO::TextWriter::get_Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::get_Encoding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Encoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter.Synchronized
System::IO::TextWriter* System::IO::TextWriter::Synchronized(System::IO::TextWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Synchronized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "TextWriter", "Synchronized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::TextWriter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, writer);
}
// Autogenerated method: System.IO.TextWriter.Write
void System::IO::TextWriter::Write(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.TextWriter.Write
void System::IO::TextWriter::Write(::Array<::Il2CppChar>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer);
}
// Autogenerated method: System.IO.TextWriter.Write
void System::IO::TextWriter::Write(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.TextWriter.Write
void System::IO::TextWriter::Write(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.TextWriter.Write
void System::IO::TextWriter::Write(::Il2CppString* format, ::Il2CppObject* arg0) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, format, arg0);
}
// Autogenerated method: System.IO.TextWriter.Write
void System::IO::TextWriter::Write(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, format, arg0, arg1, arg2);
}
// Autogenerated method: System.IO.TextWriter.WriteLine
void System::IO::TextWriter::WriteLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter.WriteLine
void System::IO::TextWriter::WriteLine(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.TextWriter.WriteLine
void System::IO::TextWriter::WriteLine(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.TextWriter.WriteLine
void System::IO::TextWriter::WriteLine(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.TextWriter.WriteLine
void System::IO::TextWriter::WriteLine(::Il2CppString* format, ::Il2CppObject* arg0) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, format, arg0);
}
// Autogenerated method: System.IO.TextWriter.WriteLine
void System::IO::TextWriter::WriteLine(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, format, arg0, arg1);
}
// Autogenerated method: System.IO.TextWriter.WriteLine
void System::IO::TextWriter::WriteLine(::Il2CppString* format, ::Array<::Il2CppObject*>* arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, format, arg);
}
// Creating initializer_list -> params proxy for: System.Void WriteLine(System.String format, params System.Object[] arg)
void System::IO::TextWriter::WriteLine(::Il2CppString* format, std::initializer_list<::Il2CppObject*> arg) {
  System::IO::TextWriter::WriteLine(format, ::Array<::Il2CppObject*>::New(arg));
}
// Autogenerated method: System.IO.TextWriter..cctor
void System::IO::TextWriter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "TextWriter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TextWriter::get_InitialNewLine
// Il2CppName: get_InitialNewLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&TextWriter::get_InitialNewLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "get_InitialNewLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(System::IFormatProvider*)>(&TextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(System::IFormatProvider*)>(&TextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::get_FormatProvider
// Il2CppName: get_FormatProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IFormatProvider* (TextWriter::*)()>(&TextWriter::get_FormatProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "get_FormatProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)()>(&TextWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(bool)>(&TextWriter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)()>(&TextWriter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)()>(&TextWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::get_Encoding
// Il2CppName: get_Encoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (TextWriter::*)()>(&TextWriter::get_Encoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "get_Encoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::Synchronized
// Il2CppName: Synchronized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::TextWriter* (*)(System::IO::TextWriter*)>(&TextWriter::Synchronized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Synchronized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Il2CppChar)>(&TextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Array<::Il2CppChar>*)>(&TextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&TextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Il2CppString*)>(&TextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Il2CppString*, ::Il2CppObject*)>(&TextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&TextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)()>(&TextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Il2CppChar)>(&TextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&TextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Il2CppString*)>(&TextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Il2CppString*, ::Il2CppObject*)>(&TextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&TextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&TextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TextWriter::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)()>(&TextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::*)()>(&TextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.TextWriter/NullTextWriter
#include "System/IO/TextWriter_NullTextWriter.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.TextWriter/NullTextWriter.get_Encoding
System::Text::Encoding* System::IO::TextWriter::NullTextWriter::get_Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::NullTextWriter::get_Encoding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Encoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter/NullTextWriter.Write
void System::IO::TextWriter::NullTextWriter::Write(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::NullTextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.TextWriter/NullTextWriter.Write
void System::IO::TextWriter::NullTextWriter::Write(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::NullTextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.TextWriter/NullTextWriter.WriteLine
void System::IO::TextWriter::NullTextWriter::WriteLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::NullTextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter/NullTextWriter.WriteLine
void System::IO::TextWriter::NullTextWriter::WriteLine(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::NullTextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: TextWriter::NullTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::NullTextWriter::*)()>(&TextWriter::NullTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::NullTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::NullTextWriter::*)()>(&TextWriter::NullTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::NullTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::NullTextWriter::get_Encoding
// Il2CppName: get_Encoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (TextWriter::NullTextWriter::*)()>(&TextWriter::NullTextWriter::get_Encoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::NullTextWriter*), "get_Encoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::NullTextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::NullTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&TextWriter::NullTextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::NullTextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextWriter::NullTextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::NullTextWriter::*)(::Il2CppString*)>(&TextWriter::NullTextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::NullTextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::NullTextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::NullTextWriter::*)()>(&TextWriter::NullTextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::NullTextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::NullTextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::NullTextWriter::*)(::Il2CppString*)>(&TextWriter::NullTextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::NullTextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.TextWriter/SyncTextWriter
#include "System/IO/TextWriter_SyncTextWriter.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.get_Encoding
System::Text::Encoding* System::IO::TextWriter::SyncTextWriter::get_Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::get_Encoding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Encoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.get_FormatProvider
System::IFormatProvider* System::IO::TextWriter::SyncTextWriter::get_FormatProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::get_FormatProvider");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FormatProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IFormatProvider*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.Close
void System::IO::TextWriter::SyncTextWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.Dispose
void System::IO::TextWriter::SyncTextWriter::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.Flush
void System::IO::TextWriter::SyncTextWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.Write
void System::IO::TextWriter::SyncTextWriter::Write(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.Write
void System::IO::TextWriter::SyncTextWriter::Write(::Array<::Il2CppChar>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.Write
void System::IO::TextWriter::SyncTextWriter::Write(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.Write
void System::IO::TextWriter::SyncTextWriter::Write(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.Write
void System::IO::TextWriter::SyncTextWriter::Write(::Il2CppString* format, ::Il2CppObject* arg0) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, format, arg0);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.Write
void System::IO::TextWriter::SyncTextWriter::Write(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, format, arg0, arg1, arg2);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.WriteLine
void System::IO::TextWriter::SyncTextWriter::WriteLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.WriteLine
void System::IO::TextWriter::SyncTextWriter::WriteLine(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.WriteLine
void System::IO::TextWriter::SyncTextWriter::WriteLine(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.WriteLine
void System::IO::TextWriter::SyncTextWriter::WriteLine(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.WriteLine
void System::IO::TextWriter::SyncTextWriter::WriteLine(::Il2CppString* format, ::Il2CppObject* arg0) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, format, arg0);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.WriteLine
void System::IO::TextWriter::SyncTextWriter::WriteLine(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, format, arg0, arg1);
}
// Autogenerated method: System.IO.TextWriter/SyncTextWriter.WriteLine
void System::IO::TextWriter::SyncTextWriter::WriteLine(::Il2CppString* format, ::Array<::Il2CppObject*>* arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::SyncTextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, format, arg);
}
// Creating initializer_list -> params proxy for: System.Void WriteLine(System.String format, params System.Object[] arg)
void System::IO::TextWriter::SyncTextWriter::WriteLine(::Il2CppString* format, std::initializer_list<::Il2CppObject*> arg) {
  System::IO::TextWriter::SyncTextWriter::WriteLine(format, ::Array<::Il2CppObject*>::New(arg));
}
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(System::IO::TextWriter*)>(&TextWriter::SyncTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(System::IO::TextWriter*)>(&TextWriter::SyncTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::get_Encoding
// Il2CppName: get_Encoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (TextWriter::SyncTextWriter::*)()>(&TextWriter::SyncTextWriter::get_Encoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "get_Encoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::get_FormatProvider
// Il2CppName: get_FormatProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IFormatProvider* (TextWriter::SyncTextWriter::*)()>(&TextWriter::SyncTextWriter::get_FormatProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "get_FormatProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)()>(&TextWriter::SyncTextWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(bool)>(&TextWriter::SyncTextWriter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)()>(&TextWriter::SyncTextWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Il2CppChar)>(&TextWriter::SyncTextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Array<::Il2CppChar>*)>(&TextWriter::SyncTextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&TextWriter::SyncTextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Il2CppString*)>(&TextWriter::SyncTextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Il2CppString*, ::Il2CppObject*)>(&TextWriter::SyncTextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&TextWriter::SyncTextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)()>(&TextWriter::SyncTextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Il2CppChar)>(&TextWriter::SyncTextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&TextWriter::SyncTextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Il2CppString*)>(&TextWriter::SyncTextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Il2CppString*, ::Il2CppObject*)>(&TextWriter::SyncTextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&TextWriter::SyncTextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::SyncTextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::SyncTextWriter::*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&TextWriter::SyncTextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::SyncTextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.TextWriter/<>c
#include "System/IO/TextWriter_--c.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.IO.TextWriter/<>c <>9
System::IO::TextWriter::$$c* System::IO::TextWriter::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::IO::TextWriter::$$c*>("System.IO", "TextWriter/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.IO.TextWriter/<>c <>9
void System::IO::TextWriter::$$c::_set_$$9(System::IO::TextWriter::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.IO", "TextWriter/<>c", "<>9", value)));
}
// Autogenerated method: System.IO.TextWriter/<>c..cctor
void System::IO::TextWriter::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "TextWriter/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.TextWriter/<>c.<.cctor>b__73_0
void System::IO::TextWriter::$$c::$_cctor$b__73_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::$$c::<.cctor>b__73_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__73_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.IO.TextWriter/<>c.<.cctor>b__73_1
void System::IO::TextWriter::$$c::$_cctor$b__73_1(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::$$c::<.cctor>b__73_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__73_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.IO.TextWriter/<>c.<.cctor>b__73_2
void System::IO::TextWriter::$$c::$_cctor$b__73_2(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::$$c::<.cctor>b__73_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__73_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.IO.TextWriter/<>c.<.cctor>b__73_3
void System::IO::TextWriter::$$c::$_cctor$b__73_3(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::$$c::<.cctor>b__73_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__73_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.IO.TextWriter/<>c.<.cctor>b__73_4
void System::IO::TextWriter::$$c::$_cctor$b__73_4(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::$$c::<.cctor>b__73_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__73_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.IO.TextWriter/<>c.<.cctor>b__73_5
void System::IO::TextWriter::$$c::$_cctor$b__73_5(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::$$c::<.cctor>b__73_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__73_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.IO.TextWriter/<>c.<.cctor>b__73_6
void System::IO::TextWriter::$$c::$_cctor$b__73_6(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::TextWriter::$$c::<.cctor>b__73_6");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__73_6", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Writing MetadataGetter for method: TextWriter::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TextWriter::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextWriter::$$c::$_cctor$b__73_0
// Il2CppName: <.cctor>b__73_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::$$c::*)(::Il2CppObject*)>(&TextWriter::$$c::$_cctor$b__73_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::$$c*), "<.cctor>b__73_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::$$c::$_cctor$b__73_1
// Il2CppName: <.cctor>b__73_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::$$c::*)(::Il2CppObject*)>(&TextWriter::$$c::$_cctor$b__73_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::$$c*), "<.cctor>b__73_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::$$c::$_cctor$b__73_2
// Il2CppName: <.cctor>b__73_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::$$c::*)(::Il2CppObject*)>(&TextWriter::$$c::$_cctor$b__73_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::$$c*), "<.cctor>b__73_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::$$c::$_cctor$b__73_3
// Il2CppName: <.cctor>b__73_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::$$c::*)(::Il2CppObject*)>(&TextWriter::$$c::$_cctor$b__73_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::$$c*), "<.cctor>b__73_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::$$c::$_cctor$b__73_4
// Il2CppName: <.cctor>b__73_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::$$c::*)(::Il2CppObject*)>(&TextWriter::$$c::$_cctor$b__73_4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::$$c*), "<.cctor>b__73_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::$$c::$_cctor$b__73_5
// Il2CppName: <.cctor>b__73_5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::$$c::*)(::Il2CppObject*)>(&TextWriter::$$c::$_cctor$b__73_5)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::$$c*), "<.cctor>b__73_5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::$$c::$_cctor$b__73_6
// Il2CppName: <.cctor>b__73_6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::$$c::*)(::Il2CppObject*)>(&TextWriter::$$c::$_cctor$b__73_6)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::$$c*), "<.cctor>b__73_6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TextWriter::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::$$c::*)()>(&TextWriter::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextWriter::$$c::*)()>(&TextWriter::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextWriter::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.UnmanagedMemoryStream
#include "System/IO/UnmanagedMemoryStream.hpp"
// Including type: System.Runtime.InteropServices.SafeBuffer
#include "System/Runtime/InteropServices/SafeBuffer.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.UnmanagedMemoryStream.Initialize
void System::IO::UnmanagedMemoryStream::Initialize(uint8_t* pointer, int64_t length, int64_t capacity, System::IO::FileAccess access, bool skipSecurityCheck) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointer), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(access), ::il2cpp_utils::ExtractType(skipSecurityCheck)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pointer, length, capacity, access, skipSecurityCheck);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.get_PositionPointer
uint8_t* System::IO::UnmanagedMemoryStream::get_PositionPointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::get_PositionPointer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PositionPointer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.get_CanRead
bool System::IO::UnmanagedMemoryStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.get_CanSeek
bool System::IO::UnmanagedMemoryStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanSeek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.get_CanWrite
bool System::IO::UnmanagedMemoryStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.Dispose
void System::IO::UnmanagedMemoryStream::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.Flush
void System::IO::UnmanagedMemoryStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.get_Length
int64_t System::IO::UnmanagedMemoryStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::get_Length");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.get_Position
int64_t System::IO::UnmanagedMemoryStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::get_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.set_Position
void System::IO::UnmanagedMemoryStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::set_Position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.Read
int System::IO::UnmanagedMemoryStream::Read(::Array<uint8_t>*& buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::Read");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.ReadAsync
System::Threading::Tasks::Task_1<int>* System::IO::UnmanagedMemoryStream::ReadAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::ReadAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<int>*, false>(this, ___internal__method, buffer, offset, count, cancellationToken);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.ReadByte
int System::IO::UnmanagedMemoryStream::ReadByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::ReadByte");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.Seek
int64_t System::IO::UnmanagedMemoryStream::Seek(int64_t offset, System::IO::SeekOrigin loc) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::Seek");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Seek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(loc)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method, offset, loc);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.SetLength
void System::IO::UnmanagedMemoryStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::SetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.Write
void System::IO::UnmanagedMemoryStream::Write(::Array<uint8_t>* buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.WriteAsync
System::Threading::Tasks::Task* System::IO::UnmanagedMemoryStream::WriteAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::WriteAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, buffer, offset, count, cancellationToken);
}
// Autogenerated method: System.IO.UnmanagedMemoryStream.WriteByte
void System::IO::UnmanagedMemoryStream::WriteByte(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnmanagedMemoryStream::WriteByte");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: UnmanagedMemoryStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)(uint8_t*, int64_t, int64_t, System::IO::FileAccess, bool)>(&UnmanagedMemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileAccess>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)(uint8_t*, int64_t, int64_t, System::IO::FileAccess, bool)>(&UnmanagedMemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileAccess>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)(uint8_t*, int64_t, int64_t, System::IO::FileAccess, bool)>(&UnmanagedMemoryStream::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileAccess>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::get_PositionPointer
// Il2CppName: get_PositionPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (UnmanagedMemoryStream::*)()>(&UnmanagedMemoryStream::get_PositionPointer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "get_PositionPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)()>(&UnmanagedMemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)()>(&UnmanagedMemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnmanagedMemoryStream::*)()>(&UnmanagedMemoryStream::get_CanRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnmanagedMemoryStream::*)()>(&UnmanagedMemoryStream::get_CanSeek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnmanagedMemoryStream::*)()>(&UnmanagedMemoryStream::get_CanWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)(bool)>(&UnmanagedMemoryStream::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)()>(&UnmanagedMemoryStream::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnmanagedMemoryStream::*)()>(&UnmanagedMemoryStream::get_Length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnmanagedMemoryStream::*)()>(&UnmanagedMemoryStream::get_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)(int64_t)>(&UnmanagedMemoryStream::set_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnmanagedMemoryStream::*)(::Array<uint8_t>*&, int, int)>(&UnmanagedMemoryStream::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::ReadAsync
// Il2CppName: ReadAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<int>* (UnmanagedMemoryStream::*)(::Array<uint8_t>*, int, int, System::Threading::CancellationToken)>(&UnmanagedMemoryStream::ReadAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "ReadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::ReadByte
// Il2CppName: ReadByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnmanagedMemoryStream::*)()>(&UnmanagedMemoryStream::ReadByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "ReadByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnmanagedMemoryStream::*)(int64_t, System::IO::SeekOrigin)>(&UnmanagedMemoryStream::Seek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IO::SeekOrigin>()});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)(int64_t)>(&UnmanagedMemoryStream::SetLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)(::Array<uint8_t>*, int, int)>(&UnmanagedMemoryStream::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::WriteAsync
// Il2CppName: WriteAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (UnmanagedMemoryStream::*)(::Array<uint8_t>*, int, int, System::Threading::CancellationToken)>(&UnmanagedMemoryStream::WriteAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "WriteAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: UnmanagedMemoryStream::WriteByte
// Il2CppName: WriteByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnmanagedMemoryStream::*)(uint8_t)>(&UnmanagedMemoryStream::WriteByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnmanagedMemoryStream*), "WriteByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.PathInternal
#include "System/IO/PathInternal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.PathInternal.IsPartiallyQualified
bool System::IO::PathInternal::IsPartiallyQualified(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::PathInternal::IsPartiallyQualified");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "PathInternal", "IsPartiallyQualified", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.PathInternal.HasIllegalCharacters
bool System::IO::PathInternal::HasIllegalCharacters(::Il2CppString* path, bool checkAdditional) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::PathInternal::HasIllegalCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "PathInternal", "HasIllegalCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(checkAdditional)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, checkAdditional);
}
// Writing MetadataGetter for method: PathInternal::IsPartiallyQualified
// Il2CppName: IsPartiallyQualified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&PathInternal::IsPartiallyQualified)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathInternal*), "IsPartiallyQualified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PathInternal::HasIllegalCharacters
// Il2CppName: HasIllegalCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, bool)>(&PathInternal::HasIllegalCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathInternal*), "HasIllegalCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.DirectoryInfo
#include "System/IO/DirectoryInfo.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IO.DirectoryInfo.Initialize
void System::IO::DirectoryInfo::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::DirectoryInfo::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.DirectoryInfo.get_Parent
System::IO::DirectoryInfo* System::IO::DirectoryInfo::get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::DirectoryInfo::get_Parent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::DirectoryInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.DirectoryInfo.Create
void System::IO::DirectoryInfo::Create() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::DirectoryInfo::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.DirectoryInfo.GetDirectories
::Array<System::IO::DirectoryInfo*>* System::IO::DirectoryInfo::GetDirectories() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::DirectoryInfo::GetDirectories");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDirectories", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::IO::DirectoryInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.DirectoryInfo.GetDirectories
::Array<System::IO::DirectoryInfo*>* System::IO::DirectoryInfo::GetDirectories(::Il2CppString* searchPattern) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::DirectoryInfo::GetDirectories");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDirectories", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(searchPattern)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::IO::DirectoryInfo*>*, false>(this, ___internal__method, searchPattern);
}
// Autogenerated method: System.IO.DirectoryInfo.CheckPath
void System::IO::DirectoryInfo::CheckPath(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::DirectoryInfo::CheckPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: System.IO.DirectoryInfo.get_Exists
bool System::IO::DirectoryInfo::get_Exists() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::DirectoryInfo::get_Exists");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Exists", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.DirectoryInfo.get_Name
::Il2CppString* System::IO::DirectoryInfo::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::DirectoryInfo::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.IO.DirectoryInfo.ToString
::Il2CppString* System::IO::DirectoryInfo::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::DirectoryInfo::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DirectoryInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryInfo::*)(::Il2CppString*)>(&DirectoryInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryInfo::*)(::Il2CppString*)>(&DirectoryInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryInfo::*)(::Il2CppString*, bool)>(&DirectoryInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryInfo::*)(::Il2CppString*, bool)>(&DirectoryInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryInfo::*)()>(&DirectoryInfo::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::get_Parent
// Il2CppName: get_Parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::DirectoryInfo* (DirectoryInfo::*)()>(&DirectoryInfo::get_Parent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), "get_Parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryInfo::*)()>(&DirectoryInfo::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::GetDirectories
// Il2CppName: GetDirectories
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::IO::DirectoryInfo*>* (DirectoryInfo::*)()>(&DirectoryInfo::GetDirectories)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), "GetDirectories", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::GetDirectories
// Il2CppName: GetDirectories
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::IO::DirectoryInfo*>* (DirectoryInfo::*)(::Il2CppString*)>(&DirectoryInfo::GetDirectories)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), "GetDirectories", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::CheckPath
// Il2CppName: CheckPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryInfo::*)(::Il2CppString*)>(&DirectoryInfo::CheckPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), "CheckPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&DirectoryInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DirectoryInfo::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&DirectoryInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::get_Exists
// Il2CppName: get_Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DirectoryInfo::*)()>(&DirectoryInfo::get_Exists)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), "get_Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DirectoryInfo::*)()>(&DirectoryInfo::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DirectoryInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DirectoryInfo::*)()>(&DirectoryInfo::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DirectoryInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.File
#include "System/IO/File.hpp"
// Including type: System.IO.StreamWriter
#include "System/IO/StreamWriter.hpp"
// Including type: System.IO.FileStream
#include "System/IO/FileStream.hpp"
// Including type: System.IO.FileAttributes
#include "System/IO/FileAttributes.hpp"
// Including type: System.IO.FileMode
#include "System/IO/FileMode.hpp"
// Including type: System.IO.FileAccess
#include "System/IO/FileAccess.hpp"
// Including type: System.IO.FileShare
#include "System/IO/FileShare.hpp"
// Including type: System.IO.StreamReader
#include "System/IO/StreamReader.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IO.MonoIOStat
#include "System/IO/MonoIOStat.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Nullable`1<System.DateTime> defaultLocalFileTime
System::Nullable_1<System::DateTime> System::IO::File::_get_defaultLocalFileTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::_get_defaultLocalFileTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Nullable_1<System::DateTime>>("System.IO", "File", "defaultLocalFileTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Nullable`1<System.DateTime> defaultLocalFileTime
void System::IO::File::_set_defaultLocalFileTime(System::Nullable_1<System::DateTime> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::_set_defaultLocalFileTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "File", "defaultLocalFileTime", value));
}
// Autogenerated method: System.IO.File.AppendText
System::IO::StreamWriter* System::IO::File::AppendText(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::AppendText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "AppendText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::StreamWriter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.Create
System::IO::FileStream* System::IO::File::Create(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::FileStream*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.Create
System::IO::FileStream* System::IO::File::Create(::Il2CppString* path, int bufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(bufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::FileStream*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, bufferSize);
}
// Autogenerated method: System.IO.File.CreateText
System::IO::StreamWriter* System::IO::File::CreateText(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::CreateText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "CreateText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::StreamWriter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.Delete
void System::IO::File::Delete(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::Delete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "Delete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.Exists
bool System::IO::File::Exists(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::Exists");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "Exists", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.GetAttributes
System::IO::FileAttributes System::IO::File::GetAttributes(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::GetAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "GetAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::FileAttributes, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.GetCreationTime
System::DateTime System::IO::File::GetCreationTime(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::GetCreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "GetCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.GetLastWriteTime
System::DateTime System::IO::File::GetLastWriteTime(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::GetLastWriteTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "GetLastWriteTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.Open
System::IO::FileStream* System::IO::File::Open(::Il2CppString* path, System::IO::FileMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::Open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "Open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::FileStream*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, mode);
}
// Autogenerated method: System.IO.File.Open
System::IO::FileStream* System::IO::File::Open(::Il2CppString* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::Open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "Open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(access), ::il2cpp_utils::ExtractType(share)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::FileStream*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, mode, access, share);
}
// Autogenerated method: System.IO.File.OpenRead
System::IO::FileStream* System::IO::File::OpenRead(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::OpenRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "OpenRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::FileStream*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.OpenText
System::IO::StreamReader* System::IO::File::OpenText(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::OpenText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "OpenText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<System::IO::StreamReader*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.Replace
void System::IO::File::Replace(::Il2CppString* sourceFileName, ::Il2CppString* destinationFileName, ::Il2CppString* destinationBackupFileName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::Replace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "Replace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceFileName), ::il2cpp_utils::ExtractType(destinationFileName), ::il2cpp_utils::ExtractType(destinationBackupFileName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sourceFileName, destinationFileName, destinationBackupFileName);
}
// Autogenerated method: System.IO.File.Replace
void System::IO::File::Replace(::Il2CppString* sourceFileName, ::Il2CppString* destinationFileName, ::Il2CppString* destinationBackupFileName, bool ignoreMetadataErrors) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::Replace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "Replace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceFileName), ::il2cpp_utils::ExtractType(destinationFileName), ::il2cpp_utils::ExtractType(destinationBackupFileName), ::il2cpp_utils::ExtractType(ignoreMetadataErrors)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sourceFileName, destinationFileName, destinationBackupFileName, ignoreMetadataErrors);
}
// Autogenerated method: System.IO.File.ReadAllBytes
::Array<uint8_t>* System::IO::File::ReadAllBytes(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::ReadAllBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "ReadAllBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.ReadAllLines
::Array<::Il2CppString*>* System::IO::File::ReadAllLines(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::ReadAllLines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "ReadAllLines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.ReadAllLines
::Array<::Il2CppString*>* System::IO::File::ReadAllLines(System::IO::StreamReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::ReadAllLines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "ReadAllLines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: System.IO.File.ReadAllText
::Il2CppString* System::IO::File::ReadAllText(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::ReadAllText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "ReadAllText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: System.IO.File.WriteAllBytes
void System::IO::File::WriteAllBytes(::Il2CppString* path, ::Array<uint8_t>* bytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::WriteAllBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "WriteAllBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(bytes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, bytes);
}
// Autogenerated method: System.IO.File.WriteAllLines
void System::IO::File::WriteAllLines(::Il2CppString* path, ::Array<::Il2CppString*>* contents) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::WriteAllLines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "WriteAllLines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(contents)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, contents);
}
// Autogenerated method: System.IO.File.WriteAllLines
void System::IO::File::WriteAllLines(System::IO::StreamWriter* writer, ::Array<::Il2CppString*>* contents) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::WriteAllLines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "WriteAllLines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(contents)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, writer, contents);
}
// Autogenerated method: System.IO.File.WriteAllText
void System::IO::File::WriteAllText(::Il2CppString* path, ::Il2CppString* contents) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::WriteAllText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "WriteAllText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(contents)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, contents);
}
// Autogenerated method: System.IO.File.WriteAllText
void System::IO::File::WriteAllText(::Il2CppString* path, ::Il2CppString* contents, System::Text::Encoding* encoding) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::WriteAllText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "WriteAllText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(contents), ::il2cpp_utils::ExtractType(encoding)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, contents, encoding);
}
// Autogenerated method: System.IO.File.get_DefaultLocalFileTime
System::DateTime System::IO::File::get_DefaultLocalFileTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::get_DefaultLocalFileTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "get_DefaultLocalFileTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.IO.File.AppendAllLines
void System::IO::File::AppendAllLines(::Il2CppString* path, System::Collections::Generic::IEnumerable_1<::Il2CppString*>* contents) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::AppendAllLines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "AppendAllLines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(contents)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, contents);
}
// Autogenerated method: System.IO.File.FillAttributeInfo
int System::IO::File::FillAttributeInfo(::Il2CppString* path, System::IO::MonoIOStat& data, bool tryagain, bool returnErrorOnNotFound) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::File::FillAttributeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.IO", "File", "FillAttributeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(tryagain), ::il2cpp_utils::ExtractType(returnErrorOnNotFound)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, data, tryagain, returnErrorOnNotFound);
}
// Writing MetadataGetter for method: File::AppendText
// Il2CppName: AppendText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamWriter* (*)(::Il2CppString*)>(&File::AppendText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "AppendText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*)>(&File::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*, int)>(&File::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: File::CreateText
// Il2CppName: CreateText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamWriter* (*)(::Il2CppString*)>(&File::CreateText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "CreateText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&File::Delete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::Exists
// Il2CppName: Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&File::Exists)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileAttributes (*)(::Il2CppString*)>(&File::GetAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::GetCreationTime
// Il2CppName: GetCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)(::Il2CppString*)>(&File::GetCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "GetCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::GetLastWriteTime
// Il2CppName: GetLastWriteTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)(::Il2CppString*)>(&File::GetLastWriteTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "GetLastWriteTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*, System::IO::FileMode)>(&File::Open)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileMode>()});
  }
};
// Writing MetadataGetter for method: File::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*, System::IO::FileMode, System::IO::FileAccess, System::IO::FileShare)>(&File::Open)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileMode>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileAccess>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileShare>()});
  }
};
// Writing MetadataGetter for method: File::OpenRead
// Il2CppName: OpenRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*)>(&File::OpenRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "OpenRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::OpenText
// Il2CppName: OpenText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamReader* (*)(::Il2CppString*)>(&File::OpenText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "OpenText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&File::Replace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, bool)>(&File::Replace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: File::ReadAllBytes
// Il2CppName: ReadAllBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Il2CppString*)>(&File::ReadAllBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "ReadAllBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::ReadAllLines
// Il2CppName: ReadAllLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*)>(&File::ReadAllLines)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "ReadAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::ReadAllLines
// Il2CppName: ReadAllLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(System::IO::StreamReader*)>(&File::ReadAllLines)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "ReadAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::StreamReader*>()});
  }
};
// Writing MetadataGetter for method: File::ReadAllText
// Il2CppName: ReadAllText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&File::ReadAllText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "ReadAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::WriteAllBytes
// Il2CppName: WriteAllBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<uint8_t>*)>(&File::WriteAllBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "WriteAllBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: File::WriteAllLines
// Il2CppName: WriteAllLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<::Il2CppString*>*)>(&File::WriteAllLines)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "WriteAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: File::WriteAllLines
// Il2CppName: WriteAllLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IO::StreamWriter*, ::Array<::Il2CppString*>*)>(&File::WriteAllLines)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "WriteAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::StreamWriter*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: File::WriteAllText
// Il2CppName: WriteAllText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*)>(&File::WriteAllText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "WriteAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: File::WriteAllText
// Il2CppName: WriteAllText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, System::Text::Encoding*)>(&File::WriteAllText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "WriteAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
  }
};
// Writing MetadataGetter for method: File::get_DefaultLocalFileTime
// Il2CppName: get_DefaultLocalFileTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)()>(&File::get_DefaultLocalFileTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "get_DefaultLocalFileTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: File::AppendAllLines
// Il2CppName: AppendAllLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&File::AppendAllLines)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "AppendAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: File::FillAttributeInfo
// Il2CppName: FillAttributeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, System::IO::MonoIOStat&, bool, bool)>(&File::FillAttributeInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(File*), "FillAttributeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::MonoIOStat&>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.IO.FileAccess
#include "System/IO/FileAccess.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.IO.FileAccess Read
System::IO::FileAccess System::IO::FileAccess::_get_Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAccess::_get_Read");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAccess>("System.IO", "FileAccess", "Read"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAccess Read
void System::IO::FileAccess::_set_Read(System::IO::FileAccess value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAccess::_set_Read");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAccess", "Read", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAccess Write
System::IO::FileAccess System::IO::FileAccess::_get_Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAccess::_get_Write");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAccess>("System.IO", "FileAccess", "Write"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAccess Write
void System::IO::FileAccess::_set_Write(System::IO::FileAccess value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAccess::_set_Write");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAccess", "Write", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAccess ReadWrite
System::IO::FileAccess System::IO::FileAccess::_get_ReadWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAccess::_get_ReadWrite");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAccess>("System.IO", "FileAccess", "ReadWrite"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAccess ReadWrite
void System::IO::FileAccess::_set_ReadWrite(System::IO::FileAccess value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAccess::_set_ReadWrite");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAccess", "ReadWrite", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.IO.FileAttributes
#include "System/IO/FileAttributes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes Archive
System::IO::FileAttributes System::IO::FileAttributes::_get_Archive() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_Archive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "Archive"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes Archive
void System::IO::FileAttributes::_set_Archive(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_Archive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "Archive", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes Compressed
System::IO::FileAttributes System::IO::FileAttributes::_get_Compressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_Compressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "Compressed"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes Compressed
void System::IO::FileAttributes::_set_Compressed(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_Compressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "Compressed", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes Device
System::IO::FileAttributes System::IO::FileAttributes::_get_Device() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_Device");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "Device"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes Device
void System::IO::FileAttributes::_set_Device(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_Device");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "Device", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes Directory
System::IO::FileAttributes System::IO::FileAttributes::_get_Directory() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_Directory");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "Directory"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes Directory
void System::IO::FileAttributes::_set_Directory(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_Directory");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "Directory", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes Encrypted
System::IO::FileAttributes System::IO::FileAttributes::_get_Encrypted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_Encrypted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "Encrypted"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes Encrypted
void System::IO::FileAttributes::_set_Encrypted(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_Encrypted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "Encrypted", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes Hidden
System::IO::FileAttributes System::IO::FileAttributes::_get_Hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_Hidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "Hidden"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes Hidden
void System::IO::FileAttributes::_set_Hidden(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_Hidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "Hidden", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes Normal
System::IO::FileAttributes System::IO::FileAttributes::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes Normal
void System::IO::FileAttributes::_set_Normal(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes NotContentIndexed
System::IO::FileAttributes System::IO::FileAttributes::_get_NotContentIndexed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_NotContentIndexed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "NotContentIndexed"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes NotContentIndexed
void System::IO::FileAttributes::_set_NotContentIndexed(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_NotContentIndexed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "NotContentIndexed", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes Offline
System::IO::FileAttributes System::IO::FileAttributes::_get_Offline() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_Offline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "Offline"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes Offline
void System::IO::FileAttributes::_set_Offline(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_Offline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "Offline", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes ReadOnly
System::IO::FileAttributes System::IO::FileAttributes::_get_ReadOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_ReadOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "ReadOnly"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes ReadOnly
void System::IO::FileAttributes::_set_ReadOnly(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_ReadOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "ReadOnly", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes ReparsePoint
System::IO::FileAttributes System::IO::FileAttributes::_get_ReparsePoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_ReparsePoint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "ReparsePoint"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes ReparsePoint
void System::IO::FileAttributes::_set_ReparsePoint(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_ReparsePoint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "ReparsePoint", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes SparseFile
System::IO::FileAttributes System::IO::FileAttributes::_get_SparseFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_SparseFile");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "SparseFile"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes SparseFile
void System::IO::FileAttributes::_set_SparseFile(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_SparseFile");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "SparseFile", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes System
System::IO::FileAttributes System::IO::FileAttributes::_get_System() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_System");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "System"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes System
void System::IO::FileAttributes::_set_System(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_System");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "System", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes Temporary
System::IO::FileAttributes System::IO::FileAttributes::_get_Temporary() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_Temporary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "Temporary"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes Temporary
void System::IO::FileAttributes::_set_Temporary(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_Temporary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "Temporary", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes IntegrityStream
System::IO::FileAttributes System::IO::FileAttributes::_get_IntegrityStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_IntegrityStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "IntegrityStream"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes IntegrityStream
void System::IO::FileAttributes::_set_IntegrityStream(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_IntegrityStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "IntegrityStream", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileAttributes NoScrubData
System::IO::FileAttributes System::IO::FileAttributes::_get_NoScrubData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_get_NoScrubData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileAttributes>("System.IO", "FileAttributes", "NoScrubData"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileAttributes NoScrubData
void System::IO::FileAttributes::_set_NoScrubData(System::IO::FileAttributes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileAttributes::_set_NoScrubData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileAttributes", "NoScrubData", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.IO.FileMode
#include "System/IO/FileMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.IO.FileMode CreateNew
System::IO::FileMode System::IO::FileMode::_get_CreateNew() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_get_CreateNew");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileMode>("System.IO", "FileMode", "CreateNew"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileMode CreateNew
void System::IO::FileMode::_set_CreateNew(System::IO::FileMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_set_CreateNew");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileMode", "CreateNew", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileMode Create
System::IO::FileMode System::IO::FileMode::_get_Create() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_get_Create");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileMode>("System.IO", "FileMode", "Create"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileMode Create
void System::IO::FileMode::_set_Create(System::IO::FileMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_set_Create");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileMode", "Create", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileMode Open
System::IO::FileMode System::IO::FileMode::_get_Open() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_get_Open");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileMode>("System.IO", "FileMode", "Open"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileMode Open
void System::IO::FileMode::_set_Open(System::IO::FileMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_set_Open");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileMode", "Open", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileMode OpenOrCreate
System::IO::FileMode System::IO::FileMode::_get_OpenOrCreate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_get_OpenOrCreate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileMode>("System.IO", "FileMode", "OpenOrCreate"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileMode OpenOrCreate
void System::IO::FileMode::_set_OpenOrCreate(System::IO::FileMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_set_OpenOrCreate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileMode", "OpenOrCreate", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileMode Truncate
System::IO::FileMode System::IO::FileMode::_get_Truncate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_get_Truncate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileMode>("System.IO", "FileMode", "Truncate"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileMode Truncate
void System::IO::FileMode::_set_Truncate(System::IO::FileMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_set_Truncate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileMode", "Truncate", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileMode Append
System::IO::FileMode System::IO::FileMode::_get_Append() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_get_Append");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileMode>("System.IO", "FileMode", "Append"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileMode Append
void System::IO::FileMode::_set_Append(System::IO::FileMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileMode::_set_Append");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileMode", "Append", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.IO.FileOptions
#include "System/IO/FileOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.IO.FileOptions None
System::IO::FileOptions System::IO::FileOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileOptions>("System.IO", "FileOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileOptions None
void System::IO::FileOptions::_set_None(System::IO::FileOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileOptions Encrypted
System::IO::FileOptions System::IO::FileOptions::_get_Encrypted() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_get_Encrypted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileOptions>("System.IO", "FileOptions", "Encrypted"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileOptions Encrypted
void System::IO::FileOptions::_set_Encrypted(System::IO::FileOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_set_Encrypted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileOptions", "Encrypted", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileOptions DeleteOnClose
System::IO::FileOptions System::IO::FileOptions::_get_DeleteOnClose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_get_DeleteOnClose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileOptions>("System.IO", "FileOptions", "DeleteOnClose"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileOptions DeleteOnClose
void System::IO::FileOptions::_set_DeleteOnClose(System::IO::FileOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_set_DeleteOnClose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileOptions", "DeleteOnClose", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileOptions SequentialScan
System::IO::FileOptions System::IO::FileOptions::_get_SequentialScan() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_get_SequentialScan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileOptions>("System.IO", "FileOptions", "SequentialScan"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileOptions SequentialScan
void System::IO::FileOptions::_set_SequentialScan(System::IO::FileOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_set_SequentialScan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileOptions", "SequentialScan", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileOptions RandomAccess
System::IO::FileOptions System::IO::FileOptions::_get_RandomAccess() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_get_RandomAccess");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileOptions>("System.IO", "FileOptions", "RandomAccess"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileOptions RandomAccess
void System::IO::FileOptions::_set_RandomAccess(System::IO::FileOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_set_RandomAccess");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileOptions", "RandomAccess", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileOptions Asynchronous
System::IO::FileOptions System::IO::FileOptions::_get_Asynchronous() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_get_Asynchronous");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileOptions>("System.IO", "FileOptions", "Asynchronous"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileOptions Asynchronous
void System::IO::FileOptions::_set_Asynchronous(System::IO::FileOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_set_Asynchronous");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileOptions", "Asynchronous", value));
}
// Autogenerated static field getter
// Get static field: static public System.IO.FileOptions WriteThrough
System::IO::FileOptions System::IO::FileOptions::_get_WriteThrough() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_get_WriteThrough");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::IO::FileOptions>("System.IO", "FileOptions", "WriteThrough"));
}
// Autogenerated static field setter
// Set static field: static public System.IO.FileOptions WriteThrough
void System::IO::FileOptions::_set_WriteThrough(System::IO::FileOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::IO::FileOptions::_set_WriteThrough");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.IO", "FileOptions", "WriteThrough", value));
}
