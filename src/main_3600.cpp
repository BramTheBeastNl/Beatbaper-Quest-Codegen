// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockServerSettings
#include "GlobalNamespace/MockServerSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerMockSettings
#include "GlobalNamespace/MultiplayerMockSettings.hpp"
// Including type: MockPlayerSettings
#include "GlobalNamespace/MockPlayerSettings.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MockServerSettings
#include "GlobalNamespace/MockServerSettings.hpp"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
// Including type: MasterServerQuickPlaySetupData
#include "GlobalNamespace/MasterServerQuickPlaySetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isEnabled
bool& GlobalNamespace::MultiplayerMockSettings::dyn__isEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::dyn__isEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MockPlayerSettings _localPlayer
GlobalNamespace::MockPlayerSettings*& GlobalNamespace::MultiplayerMockSettings::dyn__localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::dyn__localPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayer"))->offset;
  return *reinterpret_cast<GlobalNamespace::MockPlayerSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<MockPlayerSettings> _otherPlayers
System::Collections::Generic::List_1<GlobalNamespace::MockPlayerSettings*>*& GlobalNamespace::MultiplayerMockSettings::dyn__otherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::dyn__otherPlayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_otherPlayers"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::MockPlayerSettings*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MockServerSettings _quickplayServer
GlobalNamespace::MockServerSettings*& GlobalNamespace::MultiplayerMockSettings::dyn__quickplayServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::dyn__quickplayServer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_quickplayServer"))->offset;
  return *reinterpret_cast<GlobalNamespace::MockServerSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MasterServerAvailabilityData _masterServerAvailabilityData
GlobalNamespace::MasterServerAvailabilityData*& GlobalNamespace::MultiplayerMockSettings::dyn__masterServerAvailabilityData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::dyn__masterServerAvailabilityData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_masterServerAvailabilityData"))->offset;
  return *reinterpret_cast<GlobalNamespace::MasterServerAvailabilityData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MasterServerQuickPlaySetupData _masterServerQuickPlaySetupData
GlobalNamespace::MasterServerQuickPlaySetupData*& GlobalNamespace::MultiplayerMockSettings::dyn__masterServerQuickPlaySetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::dyn__masterServerQuickPlaySetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_masterServerQuickPlaySetupData"))->offset;
  return *reinterpret_cast<GlobalNamespace::MasterServerQuickPlaySetupData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerMockSettings.get_quickplayServer
GlobalNamespace::MockServerSettings* GlobalNamespace::MultiplayerMockSettings::get_quickplayServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_quickplayServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_quickplayServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MockServerSettings*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.get_localPlayer
GlobalNamespace::MockPlayerSettings* GlobalNamespace::MultiplayerMockSettings::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_localPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MockPlayerSettings*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.get_masterServerQuickPlaySetupData
GlobalNamespace::MasterServerQuickPlaySetupData* GlobalNamespace::MultiplayerMockSettings::get_masterServerQuickPlaySetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_masterServerQuickPlaySetupData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerQuickPlaySetupData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MasterServerQuickPlaySetupData*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.set_masterServerQuickPlaySetupData
void GlobalNamespace::MultiplayerMockSettings::set_masterServerQuickPlaySetupData(GlobalNamespace::MasterServerQuickPlaySetupData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::set_masterServerQuickPlaySetupData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_masterServerQuickPlaySetupData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerMockSettings.get_masterServerAvailabilityData
GlobalNamespace::MasterServerAvailabilityData* GlobalNamespace::MultiplayerMockSettings::get_masterServerAvailabilityData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_masterServerAvailabilityData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerAvailabilityData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MasterServerAvailabilityData*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.set_masterServerAvailabilityData
void GlobalNamespace::MultiplayerMockSettings::set_masterServerAvailabilityData(GlobalNamespace::MasterServerAvailabilityData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::set_masterServerAvailabilityData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_masterServerAvailabilityData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerMockSettings.get_otherPlayers
System::Collections::Generic::List_1<GlobalNamespace::MockPlayerSettings*>* GlobalNamespace::MultiplayerMockSettings::get_otherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_otherPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::MockPlayerSettings*>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.get_isEnabled
bool GlobalNamespace::MultiplayerMockSettings::get_isEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::get_isEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerMockSettings.set_isEnabled
void GlobalNamespace::MultiplayerMockSettings::set_isEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::set_isEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerMockSettings.SharedSettings
GlobalNamespace::MultiplayerMockSettings* GlobalNamespace::MultiplayerMockSettings::SharedSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMockSettings::SharedSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerMockSettings", "SharedSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerMockSettings*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerActivePlayersTimeOffsetAverage
#include "GlobalNamespace/MultiplayerActivePlayersTimeOffsetAverage.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastReturnedOffsetSyncTime
float& GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::dyn__lastReturnedOffsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::dyn__lastReturnedOffsetSyncTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastReturnedOffsetSyncTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timeOfLastValidReturnedTime
float& GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::dyn__timeOfLastValidReturnedTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::dyn__timeOfLastValidReturnedTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeOfLastValidReturnedTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerActivePlayersTimeOffsetAverage.get_offsetSyncTime
float GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerActivePlayersTimeOffsetAverage.get_isFailed
bool GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_isFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_isFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBigAvatarAnimator
#include "GlobalNamespace/MultiplayerBigAvatarAnimator.hpp"
// Including type: HologramRays
#include "GlobalNamespace/HologramRays.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Tweening.TimeTweeningManager
#include "Tweening/TimeTweeningManager.hpp"
// Including type: Tweening.Tween`1
#include "Tweening/Tween_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _displayedScale
float& GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__displayedScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__displayedScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_displayedScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HologramRays _hologramRays
GlobalNamespace::HologramRays*& GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__hologramRays() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__hologramRays");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hologramRays"))->offset;
  return *reinterpret_cast<GlobalNamespace::HologramRays**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _avatarTransform
UnityEngine::Transform*& GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__avatarTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__avatarTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_avatarTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.TimeTweeningManager _tweeningManager
Tweening::TimeTweeningManager*& GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<Tweening::TimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<System.Single> _scaleUpTween
Tweening::Tween_1<float>*& GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__scaleUpTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__scaleUpTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scaleUpTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<System.Single> _scaleDownTween
Tweening::Tween_1<float>*& GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__scaleDownTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__scaleDownTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scaleDownTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initialized
bool& GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::dyn__initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.OnDestroy
void GlobalNamespace::MultiplayerBigAvatarAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.InitIfNeeded
void GlobalNamespace::MultiplayerBigAvatarAnimator::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.SetPositionAndRotation
void GlobalNamespace::MultiplayerBigAvatarAnimator::SetPositionAndRotation(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::SetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, position, rotation);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.HideInstant
void GlobalNamespace::MultiplayerBigAvatarAnimator::HideInstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::HideInstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideInstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.Animate
void GlobalNamespace::MultiplayerBigAvatarAnimator::Animate(bool show, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::Animate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Animate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(show), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, show, duration, easeType);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.<InitIfNeeded>b__8_0
void GlobalNamespace::MultiplayerBigAvatarAnimator::$InitIfNeeded$b__8_0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::<InitIfNeeded>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.<InitIfNeeded>b__8_1
void GlobalNamespace::MultiplayerBigAvatarAnimator::$InitIfNeeded$b__8_1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::<InitIfNeeded>b__8_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__8_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: MultiplayerBigAvatarAnimator.<InitIfNeeded>b__8_2
void GlobalNamespace::MultiplayerBigAvatarAnimator::$InitIfNeeded$b__8_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarAnimator::<InitIfNeeded>b__8_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__8_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerBigAvatarInstaller
#include "GlobalNamespace/MultiplayerBigAvatarInstaller.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: PlayersSpecificSettingsAtGameStartModel
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel.hpp"
// Including type: SaberManager/InitData
#include "GlobalNamespace/SaberManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerBigAvatarInstaller::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarInstaller::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager/InitData _saberManagerInitData
GlobalNamespace::SaberManager::InitData*& GlobalNamespace::MultiplayerBigAvatarInstaller::dyn__saberManagerInitData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarInstaller::dyn__saberManagerInitData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManagerInitData"))->offset;
  return *reinterpret_cast<GlobalNamespace::SaberManager::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayersSpecificSettingsAtGameStartModel _playerSpecificSettings
GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*& GlobalNamespace::MultiplayerBigAvatarInstaller::dyn__playerSpecificSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarInstaller::dyn__playerSpecificSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerSpecificSettings"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayersSpecificSettingsAtGameStartModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerBigAvatarInstaller.InstallBindings
void GlobalNamespace::MultiplayerBigAvatarInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBigAvatarInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerCenterResizeController
#include "GlobalNamespace/MultiplayerCenterResizeController.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: MultiplayerPlayerLayout
#include "GlobalNamespace/MultiplayerPlayerLayout.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _platformWidth
float& GlobalNamespace::MultiplayerCenterResizeController::dyn__platformWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::dyn__platformWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_platformWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLayoutProvider _layoutProvider
GlobalNamespace::MultiplayerLayoutProvider*& GlobalNamespace::MultiplayerCenterResizeController::dyn__layoutProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::dyn__layoutProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layoutProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLayoutProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Single> edgeDistanceFromCenterWasCalculatedEvent
System::Action_1<float>*& GlobalNamespace::MultiplayerCenterResizeController::dyn_edgeDistanceFromCenterWasCalculatedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::dyn_edgeDistanceFromCenterWasCalculatedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "edgeDistanceFromCenterWasCalculatedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isEdgeDistanceFromCenterCalculated>k__BackingField
bool& GlobalNamespace::MultiplayerCenterResizeController::dyn_$isEdgeDistanceFromCenterCalculated$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::dyn_$isEdgeDistanceFromCenterCalculated$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isEdgeDistanceFromCenterCalculated>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <edgeDistanceFromCenter>k__BackingField
float& GlobalNamespace::MultiplayerCenterResizeController::dyn_$edgeDistanceFromCenter$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::dyn_$edgeDistanceFromCenter$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<edgeDistanceFromCenter>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerCenterResizeController.get_isEdgeDistanceFromCenterCalculated
bool GlobalNamespace::MultiplayerCenterResizeController::get_isEdgeDistanceFromCenterCalculated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::get_isEdgeDistanceFromCenterCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEdgeDistanceFromCenterCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerCenterResizeController.set_isEdgeDistanceFromCenterCalculated
void GlobalNamespace::MultiplayerCenterResizeController::set_isEdgeDistanceFromCenterCalculated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::set_isEdgeDistanceFromCenterCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isEdgeDistanceFromCenterCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerCenterResizeController.get_edgeDistanceFromCenter
float GlobalNamespace::MultiplayerCenterResizeController::get_edgeDistanceFromCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::get_edgeDistanceFromCenter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_edgeDistanceFromCenter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerCenterResizeController.set_edgeDistanceFromCenter
void GlobalNamespace::MultiplayerCenterResizeController::set_edgeDistanceFromCenter(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::set_edgeDistanceFromCenter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_edgeDistanceFromCenter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerCenterResizeController.add_edgeDistanceFromCenterWasCalculatedEvent
void GlobalNamespace::MultiplayerCenterResizeController::add_edgeDistanceFromCenterWasCalculatedEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::add_edgeDistanceFromCenterWasCalculatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_edgeDistanceFromCenterWasCalculatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerCenterResizeController.remove_edgeDistanceFromCenterWasCalculatedEvent
void GlobalNamespace::MultiplayerCenterResizeController::remove_edgeDistanceFromCenterWasCalculatedEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::remove_edgeDistanceFromCenterWasCalculatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_edgeDistanceFromCenterWasCalculatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerCenterResizeController.Start
void GlobalNamespace::MultiplayerCenterResizeController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerCenterResizeController.OnDestroy
void GlobalNamespace::MultiplayerCenterResizeController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerCenterResizeController.HandlePlayersLayoutWasCalculated
void GlobalNamespace::MultiplayerCenterResizeController::HandlePlayersLayoutWasCalculated(GlobalNamespace::MultiplayerPlayerLayout layout, int numberOfPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterResizeController::HandlePlayersLayoutWasCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayersLayoutWasCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layout), ::il2cpp_utils::ExtractType(numberOfPlayers)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, layout, numberOfPlayers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerCenterTextAnimator
#include "GlobalNamespace/MultiplayerCenterTextAnimator.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Tweening.TimeTweeningManager
#include "Tweening/TimeTweeningManager.hpp"
// Including type: Tweening.Tween`1
#include "Tweening/Tween_1.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshPro _text
TMPro::TextMeshPro*& GlobalNamespace::MultiplayerCenterTextAnimator::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<TMPro::TextMeshPro**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _scalingTarget
UnityEngine::Transform*& GlobalNamespace::MultiplayerCenterTextAnimator::dyn__scalingTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::dyn__scalingTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scalingTarget"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.TimeTweeningManager _tweeningManager
Tweening::TimeTweeningManager*& GlobalNamespace::MultiplayerCenterTextAnimator::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<Tweening::TimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<System.Single> _fadeInTween
Tweening::Tween_1<float>*& GlobalNamespace::MultiplayerCenterTextAnimator::dyn__fadeInTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::dyn__fadeInTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<System.Single> _fadeOutTween
Tweening::Tween_1<float>*& GlobalNamespace::MultiplayerCenterTextAnimator::dyn__fadeOutTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::dyn__fadeOutTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<System.Single> _fontSizeTween
Tweening::Tween_1<float>*& GlobalNamespace::MultiplayerCenterTextAnimator::dyn__fontSizeTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::dyn__fontSizeTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fontSizeTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<UnityEngine.Color> _colorTween
Tweening::Tween_1<UnityEngine::Color>*& GlobalNamespace::MultiplayerCenterTextAnimator::dyn__colorTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::dyn__colorTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<UnityEngine.Vector3> _offsetTween
Tweening::Tween_1<UnityEngine::Vector3>*& GlobalNamespace::MultiplayerCenterTextAnimator::dyn__offsetTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::dyn__offsetTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offsetTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerCenterTextAnimator.Awake
void GlobalNamespace::MultiplayerCenterTextAnimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerCenterTextAnimator.OnDestroy
void GlobalNamespace::MultiplayerCenterTextAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerCenterTextAnimator.AnimateTextColor
void GlobalNamespace::MultiplayerCenterTextAnimator::AnimateTextColor(UnityEngine::Color color, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::AnimateTextColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateTextColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, color, duration, easeType);
}
// Autogenerated method: MultiplayerCenterTextAnimator.AnimateFontSize
void GlobalNamespace::MultiplayerCenterTextAnimator::AnimateFontSize(float fontSize, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::AnimateFontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateFontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fontSize), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, fontSize, duration, easeType);
}
// Autogenerated method: MultiplayerCenterTextAnimator.AnimatePositionOffsetSize
void GlobalNamespace::MultiplayerCenterTextAnimator::AnimatePositionOffsetSize(UnityEngine::Vector3 offset, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::AnimatePositionOffsetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimatePositionOffsetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, offset, duration, easeType);
}
// Autogenerated method: MultiplayerCenterTextAnimator.AnimateEnabled
void GlobalNamespace::MultiplayerCenterTextAnimator::AnimateEnabled(bool isEnabled, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::AnimateEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isEnabled), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, isEnabled, duration, easeType);
}
// Autogenerated method: MultiplayerCenterTextAnimator.SetText
void GlobalNamespace::MultiplayerCenterTextAnimator::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, text);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_0
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_1
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_5
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_2
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_2(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_3
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_3(UnityEngine::Color val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: MultiplayerCenterTextAnimator.<Awake>b__8_4
void GlobalNamespace::MultiplayerCenterTextAnimator::$Awake$b__8_4(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCenterTextAnimator::<Awake>b__8_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__8_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConditionalActiveByLayout
#include "GlobalNamespace/MultiplayerConditionalActiveByLayout.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerConditionalActiveByLayout/Condition _condition
GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition& GlobalNamespace::MultiplayerConditionalActiveByLayout::dyn__condition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::dyn__condition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_condition"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerPlayerLayout _layout
GlobalNamespace::MultiplayerPlayerLayout& GlobalNamespace::MultiplayerConditionalActiveByLayout::dyn__layout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::dyn__layout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layout"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayerLayout*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLayoutProvider _layoutProvider
GlobalNamespace::MultiplayerLayoutProvider*& GlobalNamespace::MultiplayerConditionalActiveByLayout::dyn__layoutProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::dyn__layoutProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layoutProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLayoutProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConditionalActiveByLayout.Start
void GlobalNamespace::MultiplayerConditionalActiveByLayout::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerConditionalActiveByLayout.HandlePlayersLayoutWasCalculated
void GlobalNamespace::MultiplayerConditionalActiveByLayout::HandlePlayersLayoutWasCalculated(GlobalNamespace::MultiplayerPlayerLayout layout, int playersCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::HandlePlayersLayoutWasCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayersLayoutWasCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layout), ::il2cpp_utils::ExtractType(playersCount)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, layout, playersCount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConditionalActiveByLayout/Condition
#include "GlobalNamespace/MultiplayerConditionalActiveByLayout.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerConditionalActiveByLayout/Condition ShowIf
GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_get_ShowIf() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_get_ShowIf");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition>("", "MultiplayerConditionalActiveByLayout/Condition", "ShowIf"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerConditionalActiveByLayout/Condition ShowIf
void GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_set_ShowIf(GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_set_ShowIf");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConditionalActiveByLayout/Condition", "ShowIf", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerConditionalActiveByLayout/Condition HideIf
GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_get_HideIf() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_get_HideIf");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition>("", "MultiplayerConditionalActiveByLayout/Condition", "HideIf"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerConditionalActiveByLayout/Condition HideIf
void GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_set_HideIf(GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::_set_HideIf");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerConditionalActiveByLayout/Condition", "HideIf", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConditionalActiveByLayout::Condition::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerConnectedPlayerObservable
#include "GlobalNamespace/MultiplayerConnectedPlayerObservable.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerConnectedPlayerObservable::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerObservable::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerObservable.get_offsetSyncTime
float GlobalNamespace::MultiplayerConnectedPlayerObservable::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerObservable::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerObservable.get_isFailed
bool GlobalNamespace::MultiplayerConnectedPlayerObservable::get_isFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerObservable::get_isFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: MultiplayerController/<PerformSongStartSync>d__37
#include "GlobalNamespace/MultiplayerController_-PerformSongStartSync-d__37.hpp"
// Including type: MultiplayerController/<>c__DisplayClass42_0
#include "GlobalNamespace/MultiplayerController_--c__DisplayClass42_0.hpp"
// Including type: MultiplayerController/<>c
#include "GlobalNamespace/MultiplayerController_--c.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: MultiplayerLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MultiplayerLevelScenesTransitionSetupDataSO.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: SceneStartSyncController
#include "GlobalNamespace/SceneStartSyncController.hpp"
// Including type: SongStartSyncController
#include "GlobalNamespace/SongStartSyncController.hpp"
// Including type: MultiplayerLevelFinishedController
#include "GlobalNamespace/MultiplayerLevelFinishedController.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: MultiplayerIntroAnimationController
#include "GlobalNamespace/MultiplayerIntroAnimationController.hpp"
// Including type: MultiplayerOutroAnimationController
#include "GlobalNamespace/MultiplayerOutroAnimationController.hpp"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: MultiplayerBadgesProvider
#include "GlobalNamespace/MultiplayerBadgesProvider.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: PlayersSpecificSettingsAtGameStartModel
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: MultiplayerGameState
#include "GlobalNamespace/MultiplayerGameState.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSongTimeToSongStartSyncTimeOffset
float GlobalNamespace::MultiplayerController::_get_kSongTimeToSongStartSyncTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_get_kSongTimeToSongStartSyncTimeOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerController", "kSongTimeToSongStartSyncTimeOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSongTimeToSongStartSyncTimeOffset
void GlobalNamespace::MultiplayerController::_set_kSongTimeToSongStartSyncTimeOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_set_kSongTimeToSongStartSyncTimeOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController", "kSongTimeToSongStartSyncTimeOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinAnimationDurationPercentage
float GlobalNamespace::MultiplayerController::_get_kMinAnimationDurationPercentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_get_kMinAnimationDurationPercentage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerController", "kMinAnimationDurationPercentage"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinAnimationDurationPercentage
void GlobalNamespace::MultiplayerController::_set_kMinAnimationDurationPercentage(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_set_kMinAnimationDurationPercentage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController", "kMinAnimationDurationPercentage", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kGetMultiplayerGameStateTimeout
float GlobalNamespace::MultiplayerController::_get_kGetMultiplayerGameStateTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_get_kGetMultiplayerGameStateTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerController", "kGetMultiplayerGameStateTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kGetMultiplayerGameStateTimeout
void GlobalNamespace::MultiplayerController::_set_kGetMultiplayerGameStateTimeout(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::_set_kGetMultiplayerGameStateTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController", "kGetMultiplayerGameStateTimeout", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _loadingEnvironment
UnityEngine::GameObject*& GlobalNamespace::MultiplayerController::dyn__loadingEnvironment() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__loadingEnvironment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_loadingEnvironment"))->offset;
  return *reinterpret_cast<UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerLevelScenesTransitionSetupDataSO _multiplayerLevelSceneSetupData
GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*& GlobalNamespace::MultiplayerController::dyn__multiplayerLevelSceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__multiplayerLevelSceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerLevelSceneSetupData"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameScenesManager _gameScenesManager
GlobalNamespace::GameScenesManager*& GlobalNamespace::MultiplayerController::dyn__gameScenesManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__gameScenesManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameScenesManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameScenesManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayersManager _playersManager
GlobalNamespace::MultiplayerPlayersManager*& GlobalNamespace::MultiplayerController::dyn__playersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__playersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playersManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SceneStartSyncController _sceneStartSyncController
GlobalNamespace::SceneStartSyncController*& GlobalNamespace::MultiplayerController::dyn__sceneStartSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__sceneStartSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneStartSyncController"))->offset;
  return *reinterpret_cast<GlobalNamespace::SceneStartSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SongStartSyncController _songStartSyncController
GlobalNamespace::SongStartSyncController*& GlobalNamespace::MultiplayerController::dyn__songStartSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__songStartSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songStartSyncController"))->offset;
  return *reinterpret_cast<GlobalNamespace::SongStartSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLevelFinishedController _multiplayerLevelFinishedController
GlobalNamespace::MultiplayerLevelFinishedController*& GlobalNamespace::MultiplayerController::dyn__multiplayerLevelFinishedController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__multiplayerLevelFinishedController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerLevelFinishedController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLevelFinishedController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly FadeInOutController _fadeInOutController
GlobalNamespace::FadeInOutController*& GlobalNamespace::MultiplayerController::dyn__fadeInOutController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__fadeInOutController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInOutController"))->offset;
  return *reinterpret_cast<GlobalNamespace::FadeInOutController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerController::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerIntroAnimationController _introAnimationController
GlobalNamespace::MultiplayerIntroAnimationController*& GlobalNamespace::MultiplayerController::dyn__introAnimationController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__introAnimationController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_introAnimationController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerIntroAnimationController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerOutroAnimationController _outroAnimationController
GlobalNamespace::MultiplayerOutroAnimationController*& GlobalNamespace::MultiplayerController::dyn__outroAnimationController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__outroAnimationController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outroAnimationController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerOutroAnimationController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMenuRpcManager _menuRpcManager
GlobalNamespace::IMenuRpcManager*& GlobalNamespace::MultiplayerController::dyn__menuRpcManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__menuRpcManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_menuRpcManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMenuRpcManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IGameplayRpcManager _gameplayRpcManager
GlobalNamespace::IGameplayRpcManager*& GlobalNamespace::MultiplayerController::dyn__gameplayRpcManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__gameplayRpcManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayRpcManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IGameplayRpcManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameplayCoreSceneSetupData _sceneSetupData
GlobalNamespace::GameplayCoreSceneSetupData*& GlobalNamespace::MultiplayerController::dyn__sceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__sceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneSetupData"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayCoreSceneSetupData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _diContainer
Zenject::DiContainer*& GlobalNamespace::MultiplayerController::dyn__diContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__diContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_diContainer"))->offset;
  return *reinterpret_cast<Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerBadgesProvider _badgesProvider
GlobalNamespace::MultiplayerBadgesProvider*& GlobalNamespace::MultiplayerController::dyn__badgesProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__badgesProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgesProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerBadgesProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MultiplayerController/State> stateChangedEvent
System::Action_1<GlobalNamespace::MultiplayerController::State>*& GlobalNamespace::MultiplayerController::dyn_stateChangedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn_stateChangedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stateChangedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::MultiplayerController::State>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _startTime
float& GlobalNamespace::MultiplayerController::dyn__startTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__startTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerPlayerStartState _localPlayerSyncStartState
GlobalNamespace::MultiplayerPlayerStartState& GlobalNamespace::MultiplayerController::dyn__localPlayerSyncStartState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__localPlayerSyncStartState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerSyncStartState"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayerStartState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerController/State _state
GlobalNamespace::MultiplayerController::State& GlobalNamespace::MultiplayerController::dyn__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_state"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerController::State*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _sessionGameId
::Il2CppString*& GlobalNamespace::MultiplayerController::dyn__sessionGameId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__sessionGameId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sessionGameId"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerResultsData _resultsData
GlobalNamespace::MultiplayerResultsData*& GlobalNamespace::MultiplayerController::dyn__resultsData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__resultsData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resultsData"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerResultsData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PlayersSpecificSettingsAtGameStartModel _playersSpecificSettingsAtGameStartModel
GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*& GlobalNamespace::MultiplayerController::dyn__playersSpecificSettingsAtGameStartModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__playersSpecificSettingsAtGameStartModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playersSpecificSettingsAtGameStartModel"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayersSpecificSettingsAtGameStartModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine _timeoutGetGameStateCoroutine
UnityEngine::Coroutine*& GlobalNamespace::MultiplayerController::dyn__timeoutGetGameStateCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::dyn__timeoutGetGameStateCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeoutGetGameStateCoroutine"))->offset;
  return *reinterpret_cast<UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerController.get_state
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::get_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerController::State, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController.add_stateChangedEvent
void GlobalNamespace::MultiplayerController::add_stateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerController::State>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::add_stateChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_stateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerController.remove_stateChangedEvent
void GlobalNamespace::MultiplayerController::remove_stateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerController::State>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::remove_stateChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_stateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerController.Start
void GlobalNamespace::MultiplayerController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController.OnDestroy
void GlobalNamespace::MultiplayerController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController.HandleSetMultiplayerGameState
void GlobalNamespace::MultiplayerController::HandleSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState gameState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSetMultiplayerGameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(gameState)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, userId, gameState);
}
// Autogenerated method: MultiplayerController.CreateAndBindPlayersSpecificSettingsAtGameStartModel
void GlobalNamespace::MultiplayerController::CreateAndBindPlayersSpecificSettingsAtGameStartModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::CreateAndBindPlayersSpecificSettingsAtGameStartModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndBindPlayersSpecificSettingsAtGameStartModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController.StartSceneLoadSync
void GlobalNamespace::MultiplayerController::StartSceneLoadSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::StartSceneLoadSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSceneLoadSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController.PerformSongStartSync
System::Collections::IEnumerator* GlobalNamespace::MultiplayerController::PerformSongStartSync(GlobalNamespace::MultiplayerPlayerStartState localPlayerSyncState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::PerformSongStartSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformSongStartSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPlayerSyncState)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(___instance_arg, ___internal__method, localPlayerSyncState);
}
// Autogenerated method: MultiplayerController.HandleDidSwitchPlayerToInactive
void GlobalNamespace::MultiplayerController::HandleDidSwitchPlayerToInactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleDidSwitchPlayerToInactive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidSwitchPlayerToInactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController.HandleSceneStartSyncControllerSyncStartDidSuccess
void GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidSuccess(::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSceneStartSyncControllerSyncStartDidSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionGameId)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sessionGameId);
}
// Autogenerated method: MultiplayerController.HandleSceneStartSyncControllerSyncStartDidReceiveTooLate
void GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidReceiveTooLate(::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidReceiveTooLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSceneStartSyncControllerSyncStartDidReceiveTooLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionGameId)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, sessionGameId);
}
// Autogenerated method: MultiplayerController.HandleSceneStartSyncControllerSyncStartDidFail
void GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSceneStartSyncControllerSyncStartDidFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController.HandleSongStartSyncControllerSyncStartSuccess
void GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartSuccess(float introAnimationStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongStartSyncControllerSyncStartSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(introAnimationStartSyncTime)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, introAnimationStartSyncTime);
}
// Autogenerated method: MultiplayerController.HandleSongStartSyncControllerSyncResume
void GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncResume(float introAnimationStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongStartSyncControllerSyncResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(introAnimationStartSyncTime)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, introAnimationStartSyncTime);
}
// Autogenerated method: MultiplayerController.HandleSongStartSyncControllerSyncStartFailed
void GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongStartSyncControllerSyncStartFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController.StartGameplay
void GlobalNamespace::MultiplayerController::StartGameplay(float introAnimationStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::StartGameplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartGameplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(introAnimationStartSyncTime)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, introAnimationStartSyncTime);
}
// Autogenerated method: MultiplayerController.HandleAllResultsCollected
void GlobalNamespace::MultiplayerController::HandleAllResultsCollected(GlobalNamespace::MultiplayerLevelCompletionResults* localPlayerResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* otherPlayerResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleAllResultsCollected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleAllResultsCollected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPlayerResults), ::il2cpp_utils::ExtractType(otherPlayerResults)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, localPlayerResults, otherPlayerResults);
}
// Autogenerated method: MultiplayerController.EndGameplay
void GlobalNamespace::MultiplayerController::EndGameplay(GlobalNamespace::MultiplayerLevelCompletionResults* localPlayerResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* otherPlayerResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::EndGameplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndGameplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPlayerResults), ::il2cpp_utils::ExtractType(otherPlayerResults)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, localPlayerResults, otherPlayerResults);
}
// Autogenerated method: MultiplayerController.HandleOutroAnimationDidFinish
void GlobalNamespace::MultiplayerController::HandleOutroAnimationDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleOutroAnimationDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleOutroAnimationDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController.HandleRpcReturnToMenu
void GlobalNamespace::MultiplayerController::HandleRpcReturnToMenu(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleRpcReturnToMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRpcReturnToMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, userId);
}
// Autogenerated method: MultiplayerController.HandleDisconnected
void GlobalNamespace::MultiplayerController::HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::HandleDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, disconnectedReason);
}
// Autogenerated method: MultiplayerController.ChangeState
void GlobalNamespace::MultiplayerController::ChangeState(GlobalNamespace::MultiplayerController::State newState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::ChangeState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newState)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, newState);
}
// Autogenerated method: MultiplayerController.GetCurrentSongTime
float GlobalNamespace::MultiplayerController::GetCurrentSongTime(float songStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::GetCurrentSongTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentSongTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songStartSyncTime)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method, songStartSyncTime);
}
// Autogenerated method: MultiplayerController.GetSongStartSyncTime
float GlobalNamespace::MultiplayerController::GetSongStartSyncTime(float introAnimationStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::GetSongStartSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSongStartSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(introAnimationStartSyncTime)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method, introAnimationStartSyncTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerController/State
#include "GlobalNamespace/MultiplayerController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State CheckingLobbyState
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_CheckingLobbyState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_CheckingLobbyState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "CheckingLobbyState"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State CheckingLobbyState
void GlobalNamespace::MultiplayerController::State::_set_CheckingLobbyState(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_CheckingLobbyState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "CheckingLobbyState", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State WaitingForPlayers
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_WaitingForPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_WaitingForPlayers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "WaitingForPlayers"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State WaitingForPlayers
void GlobalNamespace::MultiplayerController::State::_set_WaitingForPlayers(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_WaitingForPlayers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "WaitingForPlayers", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State SongStartSync
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_SongStartSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_SongStartSync");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "SongStartSync"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State SongStartSync
void GlobalNamespace::MultiplayerController::State::_set_SongStartSync(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_SongStartSync");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "SongStartSync", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State Intro
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_Intro() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_Intro");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "Intro"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State Intro
void GlobalNamespace::MultiplayerController::State::_set_Intro(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_Intro");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "Intro", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State Gameplay
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_Gameplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_Gameplay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "Gameplay"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State Gameplay
void GlobalNamespace::MultiplayerController::State::_set_Gameplay(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_Gameplay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "Gameplay", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State Outro
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_Outro() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_Outro");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "Outro"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State Outro
void GlobalNamespace::MultiplayerController::State::_set_Outro(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_Outro");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "Outro", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerController/State Finished
GlobalNamespace::MultiplayerController::State GlobalNamespace::MultiplayerController::State::_get_Finished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_get_Finished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::State>("", "MultiplayerController/State", "Finished"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerController/State Finished
void GlobalNamespace::MultiplayerController::State::_set_Finished(GlobalNamespace::MultiplayerController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::_set_Finished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerController/State", "Finished", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& GlobalNamespace::MultiplayerController::State::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::State::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerController/<PerformSongStartSync>d__37
#include "GlobalNamespace/MultiplayerController_-PerformSongStartSync-d__37.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int& GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
::Il2CppObject*& GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerController <>4__this
GlobalNamespace::MultiplayerController*& GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerPlayerStartState localPlayerSyncState
GlobalNamespace::MultiplayerPlayerStartState& GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::dyn_localPlayerSyncState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::dyn_localPlayerSyncState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localPlayerSyncState"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayerStartState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerController/<PerformSongStartSync>d__37.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController/<PerformSongStartSync>d__37.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController/<PerformSongStartSync>d__37.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController/<PerformSongStartSync>d__37.MoveNext
bool GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerController/<PerformSongStartSync>d__37.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerController/<>c__DisplayClass42_0
#include "GlobalNamespace/MultiplayerController_--c__DisplayClass42_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public MultiplayerController <>4__this
GlobalNamespace::MultiplayerController*& GlobalNamespace::MultiplayerController::$$c__DisplayClass42_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c__DisplayClass42_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single introAnimationStartSyncTime
float& GlobalNamespace::MultiplayerController::$$c__DisplayClass42_0::dyn_introAnimationStartSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c__DisplayClass42_0::dyn_introAnimationStartSyncTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "introAnimationStartSyncTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerController/<>c__DisplayClass42_0.<HandleSongStartSyncControllerSyncStartSuccess>b__0
void GlobalNamespace::MultiplayerController::$$c__DisplayClass42_0::$HandleSongStartSyncControllerSyncStartSuccess$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c__DisplayClass42_0::<HandleSongStartSyncControllerSyncStartSuccess>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleSongStartSyncControllerSyncStartSuccess>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerController/<>c
#include "GlobalNamespace/MultiplayerController_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerController/<>c <>9
GlobalNamespace::MultiplayerController::$$c* GlobalNamespace::MultiplayerController::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerController::$$c*>("", "MultiplayerController/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerController/<>c <>9
void GlobalNamespace::MultiplayerController::$$c::_set_$$9(GlobalNamespace::MultiplayerController::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerController/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MultiplayerLevelCompletionResults,System.Boolean> <>9__47_0
System::Func_2<GlobalNamespace::MultiplayerLevelCompletionResults*, bool>* GlobalNamespace::MultiplayerController::$$c::_get_$$9__47_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::_get_$$9__47_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MultiplayerLevelCompletionResults*, bool>*>("", "MultiplayerController/<>c", "<>9__47_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MultiplayerLevelCompletionResults,System.Boolean> <>9__47_0
void GlobalNamespace::MultiplayerController::$$c::_set_$$9__47_0(System::Func_2<GlobalNamespace::MultiplayerLevelCompletionResults*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::_set_$$9__47_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerController/<>c", "<>9__47_0", value)));
}
// Autogenerated method: MultiplayerController/<>c..cctor
void GlobalNamespace::MultiplayerController::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerController/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerController/<>c.<EndGameplay>b__47_0
bool GlobalNamespace::MultiplayerController::$$c::$EndGameplay$b__47_0(GlobalNamespace::MultiplayerLevelCompletionResults* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::$$c::<EndGameplay>b__47_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<EndGameplay>b__47_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerEffectPoolsInstaller
#include "GlobalNamespace/MultiplayerEffectPoolsInstaller.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: NoteDebris
#include "GlobalNamespace/NoteDebris.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BoolSO _noteDebrisHDConditionVariable
GlobalNamespace::BoolSO*& GlobalNamespace::MultiplayerEffectPoolsInstaller::dyn__noteDebrisHDConditionVariable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEffectPoolsInstaller::dyn__noteDebrisHDConditionVariable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteDebrisHDConditionVariable"))->offset;
  return *reinterpret_cast<GlobalNamespace::BoolSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteDebris _noteDebrisHDPrefab
GlobalNamespace::NoteDebris*& GlobalNamespace::MultiplayerEffectPoolsInstaller::dyn__noteDebrisHDPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEffectPoolsInstaller::dyn__noteDebrisHDPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteDebrisHDPrefab"))->offset;
  return *reinterpret_cast<GlobalNamespace::NoteDebris**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NoteDebris _noteDebrisLWPrefab
GlobalNamespace::NoteDebris*& GlobalNamespace::MultiplayerEffectPoolsInstaller::dyn__noteDebrisLWPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEffectPoolsInstaller::dyn__noteDebrisLWPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteDebrisLWPrefab"))->offset;
  return *reinterpret_cast<GlobalNamespace::NoteDebris**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerEffectPoolsInstaller.InstallBindings
void GlobalNamespace::MultiplayerEffectPoolsInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEffectPoolsInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerEnvironmentResizeController
#include "GlobalNamespace/MultiplayerEnvironmentResizeController.hpp"
// Including type: MultiplayerEnvironmentResizeController/ResizeType
#include "GlobalNamespace/MultiplayerEnvironmentResizeController_ResizeType.hpp"
// Including type: MultiplayerEnvironmentResizeController/ResizeData
#include "GlobalNamespace/MultiplayerEnvironmentResizeController_ResizeData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: MultiplayerCenterResizeController
#include "GlobalNamespace/MultiplayerCenterResizeController.hpp"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _platformEnd
UnityEngine::Transform*& GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__platformEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__platformEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_platformEnd"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerEnvironmentResizeController/ResizeData[] _resizeData
::ArrayW<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData*>& GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__resizeData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__resizeData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resizeData"))->offset;
  return *reinterpret_cast<::ArrayW<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerCenterResizeController _centerResizeController
GlobalNamespace::MultiplayerCenterResizeController*& GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__centerResizeController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__centerResizeController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_centerResizeController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerCenterResizeController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectSpawnCenter _beatmapObjectSpawnCenter
GlobalNamespace::BeatmapObjectSpawnCenter*& GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__beatmapObjectSpawnCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__beatmapObjectSpawnCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectSpawnCenter"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapObjectSpawnCenter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action resizingDidFinishEvent
System::Action*& GlobalNamespace::MultiplayerEnvironmentResizeController::dyn_resizingDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::dyn_resizingDidFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resizingDidFinishEvent"))->offset;
  return *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isResizingFinished
bool& GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__isResizingFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__isResizingFinished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isResizingFinished"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _edgeDistanceFromCenterFound
bool& GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__edgeDistanceFromCenterFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__edgeDistanceFromCenterFound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_edgeDistanceFromCenterFound"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _spawnCenterDistanceFound
bool& GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__spawnCenterDistanceFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::dyn__spawnCenterDistanceFound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnCenterDistanceFound"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.get_isResizingFinished
bool GlobalNamespace::MultiplayerEnvironmentResizeController::get_isResizingFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::get_isResizingFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isResizingFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.add_resizingDidFinishEvent
void GlobalNamespace::MultiplayerEnvironmentResizeController::add_resizingDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::add_resizingDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_resizingDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.remove_resizingDidFinishEvent
void GlobalNamespace::MultiplayerEnvironmentResizeController::remove_resizingDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::remove_resizingDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_resizingDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.Start
void GlobalNamespace::MultiplayerEnvironmentResizeController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.OnDestroy
void GlobalNamespace::MultiplayerEnvironmentResizeController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.HandleEdgeDistanceFromCenterWasCalculated
void GlobalNamespace::MultiplayerEnvironmentResizeController::HandleEdgeDistanceFromCenterWasCalculated(float edgeDistanceFromCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::HandleEdgeDistanceFromCenterWasCalculated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEdgeDistanceFromCenterWasCalculated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edgeDistanceFromCenter)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, edgeDistanceFromCenter);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.HandleSpawnCenterDistanceWasFound
void GlobalNamespace::MultiplayerEnvironmentResizeController::HandleSpawnCenterDistanceWasFound(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::HandleSpawnCenterDistanceWasFound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpawnCenterDistanceWasFound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, distance);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.TryResize
void GlobalNamespace::MultiplayerEnvironmentResizeController::TryResize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::TryResize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryResize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController.Resize
void GlobalNamespace::MultiplayerEnvironmentResizeController::Resize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::Resize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerEnvironmentResizeController/ResizeType
#include "GlobalNamespace/MultiplayerEnvironmentResizeController_ResizeType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerEnvironmentResizeController/ResizeType None
GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType>("", "MultiplayerEnvironmentResizeController/ResizeType", "None"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerEnvironmentResizeController/ResizeType None
void GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_None(GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerEnvironmentResizeController/ResizeType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerEnvironmentResizeController/ResizeType Position
GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_Position");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType>("", "MultiplayerEnvironmentResizeController/ResizeType", "Position"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerEnvironmentResizeController/ResizeType Position
void GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_Position(GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_Position");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerEnvironmentResizeController/ResizeType", "Position", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerEnvironmentResizeController/ResizeType Length
GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_get_Length");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType>("", "MultiplayerEnvironmentResizeController/ResizeType", "Length"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerEnvironmentResizeController/ResizeType Length
void GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_Length(GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::_set_Length");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerEnvironmentResizeController/ResizeType", "Length", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerEnvironmentResizeController/ResizeData
#include "GlobalNamespace/MultiplayerEnvironmentResizeController_ResizeData.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerEnvironmentResizeController/ResizeType _resizeType
GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType& GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::dyn__resizeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::dyn__resizeType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resizeType"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _offset
float& GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::dyn__offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::dyn__offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_offset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TubeBloomPrePassLight[] _lights
::ArrayW<GlobalNamespace::TubeBloomPrePassLight*>& GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::dyn__lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::dyn__lights");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lights"))->offset;
  return *reinterpret_cast<::ArrayW<GlobalNamespace::TubeBloomPrePassLight*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] _otherTransforms
::ArrayW<UnityEngine::Transform*>& GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::dyn__otherTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::dyn__otherTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_otherTransforms"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerEnvironmentResizeController/ResizeData.get_resizeType
GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_resizeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_resizeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resizeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController/ResizeData.get_offset
float GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_offset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController/ResizeData.get_lights
::ArrayW<GlobalNamespace::TubeBloomPrePassLight*> GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_lights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_lights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::ArrayW<GlobalNamespace::TubeBloomPrePassLight*>, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentResizeController/ResizeData.get_otherTransforms
::ArrayW<UnityEngine::Transform*> GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_otherTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData::get_otherTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::ArrayW<UnityEngine::Transform*>, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerGameplayAnimator
#include "GlobalNamespace/MultiplayerGameplayAnimator.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: LightsAnimator
#include "GlobalNamespace/LightsAnimator.hpp"
// Including type: MultiplayerLeadPlayerProvider
#include "GlobalNamespace/MultiplayerLeadPlayerProvider.hpp"
// Including type: Tweening.TimeTweeningManager
#include "Tweening/TimeTweeningManager.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected ColorSO _activeLightsColor
GlobalNamespace::ColorSO*& GlobalNamespace::MultiplayerGameplayAnimator::dyn__activeLightsColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::dyn__activeLightsColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeLightsColor"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected ColorSO _leadingLightsColor
GlobalNamespace::ColorSO*& GlobalNamespace::MultiplayerGameplayAnimator::dyn__leadingLightsColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::dyn__leadingLightsColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leadingLightsColor"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected ColorSO _failedLightsColor
GlobalNamespace::ColorSO*& GlobalNamespace::MultiplayerGameplayAnimator::dyn__failedLightsColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::dyn__failedLightsColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failedLightsColor"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _leadingSwitchCrossFadeDuration
float& GlobalNamespace::MultiplayerGameplayAnimator::dyn__leadingSwitchCrossFadeDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::dyn__leadingSwitchCrossFadeDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leadingSwitchCrossFadeDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected LightsAnimator[] _gameplayLightsAnimators
::ArrayW<GlobalNamespace::LightsAnimator*>& GlobalNamespace::MultiplayerGameplayAnimator::dyn__gameplayLightsAnimators() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::dyn__gameplayLightsAnimators");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayLightsAnimators"))->offset;
  return *reinterpret_cast<::ArrayW<GlobalNamespace::LightsAnimator*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected LightsAnimator[] _allLightsAnimators
::ArrayW<GlobalNamespace::LightsAnimator*>& GlobalNamespace::MultiplayerGameplayAnimator::dyn__allLightsAnimators() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::dyn__allLightsAnimators");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allLightsAnimators"))->offset;
  return *reinterpret_cast<::ArrayW<GlobalNamespace::LightsAnimator*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLeadPlayerProvider _leadPlayerProvider
GlobalNamespace::MultiplayerLeadPlayerProvider*& GlobalNamespace::MultiplayerGameplayAnimator::dyn__leadPlayerProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::dyn__leadPlayerProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leadPlayerProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLeadPlayerProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerController _multiplayerController
GlobalNamespace::MultiplayerController*& GlobalNamespace::MultiplayerGameplayAnimator::dyn__multiplayerController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::dyn__multiplayerController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected readonly Tweening.TimeTweeningManager tweeningManager
Tweening::TimeTweeningManager*& GlobalNamespace::MultiplayerGameplayAnimator::dyn_tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::dyn_tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tweeningManager"))->offset;
  return *reinterpret_cast<Tweening::TimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected readonly IConnectedPlayer connectedPlayer
GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerGameplayAnimator::dyn_connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::dyn_connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectedPlayer"))->offset;
  return *reinterpret_cast<GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerGameplayAnimator.Start
void GlobalNamespace::MultiplayerGameplayAnimator::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerGameplayAnimator.OnDestroy
void GlobalNamespace::MultiplayerGameplayAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerGameplayAnimator.AnimateNewLeaderSelected
void GlobalNamespace::MultiplayerGameplayAnimator::AnimateNewLeaderSelected(bool isLeading) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::AnimateNewLeaderSelected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateNewLeaderSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeading)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, isLeading);
}
// Autogenerated method: MultiplayerGameplayAnimator.HandleStateChanged
void GlobalNamespace::MultiplayerGameplayAnimator::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::HandleStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, state);
}
// Autogenerated method: MultiplayerGameplayAnimator.HandleNewLeaderWasSelected
void GlobalNamespace::MultiplayerGameplayAnimator::HandleNewLeaderWasSelected(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::HandleNewLeaderWasSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNewLeaderWasSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, userId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroAnimationController
#include "GlobalNamespace/MultiplayerIntroAnimationController.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: MultiplayerScoreRingManager
#include "GlobalNamespace/MultiplayerScoreRingManager.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: MultiplayerTimelineMock
#include "GlobalNamespace/MultiplayerTimelineMock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableDirector _introPlayableDirector
UnityEngine::Playables::PlayableDirector*& GlobalNamespace::MultiplayerIntroAnimationController::dyn__introPlayableDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__introPlayableDirector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_introPlayableDirector"))->offset;
  return *reinterpret_cast<UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String[] _playerTimelineTrackNames
::ArrayW<::Il2CppString*>& GlobalNamespace::MultiplayerIntroAnimationController::dyn__playerTimelineTrackNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__playerTimelineTrackNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTimelineTrackNames"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppString*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String[] _ringTimelineTrackNames
::ArrayW<::Il2CppString*>& GlobalNamespace::MultiplayerIntroAnimationController::dyn__ringTimelineTrackNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__ringTimelineTrackNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ringTimelineTrackNames"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppString*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.PropertyName[] _playerTimelinePropertyNames
::ArrayW<UnityEngine::PropertyName>& GlobalNamespace::MultiplayerIntroAnimationController::dyn__playerTimelinePropertyNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__playerTimelinePropertyNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTimelinePropertyNames"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::PropertyName>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _localPlayerTrackName
::Il2CppString*& GlobalNamespace::MultiplayerIntroAnimationController::dyn__localPlayerTrackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__localPlayerTrackName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerTrackName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _localPlayerRingTrackName
::Il2CppString*& GlobalNamespace::MultiplayerIntroAnimationController::dyn__localPlayerRingTrackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__localPlayerRingTrackName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerRingTrackName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.PropertyName _localPlayerTimelinePropertyName
UnityEngine::PropertyName& GlobalNamespace::MultiplayerIntroAnimationController::dyn__localPlayerTimelinePropertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__localPlayerTimelinePropertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerTimelinePropertyName"))->offset;
  return *reinterpret_cast<UnityEngine::PropertyName*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _firstConnectedPlayerStart
float& GlobalNamespace::MultiplayerIntroAnimationController::dyn__firstConnectedPlayerStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__firstConnectedPlayerStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstConnectedPlayerStart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _spawnDuration
float& GlobalNamespace::MultiplayerIntroAnimationController::dyn__spawnDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__spawnDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _endMarkerName
::Il2CppString*& GlobalNamespace::MultiplayerIntroAnimationController::dyn__endMarkerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__endMarkerName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endMarkerName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerScoreRingManager _scoreRingManager
GlobalNamespace::MultiplayerScoreRingManager*& GlobalNamespace::MultiplayerIntroAnimationController::dyn__scoreRingManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__scoreRingManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreRingManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreRingManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayersManager _multiplayerPlayersManager
GlobalNamespace::MultiplayerPlayersManager*& GlobalNamespace::MultiplayerIntroAnimationController::dyn__multiplayerPlayersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__multiplayerPlayersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerPlayersManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerIntroAnimationController::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLayoutProvider _layoutProvider
GlobalNamespace::MultiplayerLayoutProvider*& GlobalNamespace::MultiplayerIntroAnimationController::dyn__layoutProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__layoutProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layoutProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLayoutProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action _onCompleted
System::Action*& GlobalNamespace::MultiplayerIntroAnimationController::dyn__onCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__onCompleted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_onCompleted"))->offset;
  return *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _introDuration
float& GlobalNamespace::MultiplayerIntroAnimationController::dyn__introDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__introDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_introDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _bindingFinished
bool& GlobalNamespace::MultiplayerIntroAnimationController::dyn__bindingFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::dyn__bindingFinished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindingFinished"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerIntroAnimationController.OnValidate
void GlobalNamespace::MultiplayerIntroAnimationController::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroAnimationController.SetBeforeIntroValue
void GlobalNamespace::MultiplayerIntroAnimationController::SetBeforeIntroValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::SetBeforeIntroValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBeforeIntroValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroAnimationController.PlayIntroAnimation
void GlobalNamespace::MultiplayerIntroAnimationController::PlayIntroAnimation(float maxDesiredIntroAnimationDuration, System::Action* onCompleted) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::PlayIntroAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayIntroAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxDesiredIntroAnimationDuration), ::il2cpp_utils::ExtractType(onCompleted)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, maxDesiredIntroAnimationDuration, onCompleted);
}
// Autogenerated method: MultiplayerIntroAnimationController.GetFullIntroAnimationTime
float GlobalNamespace::MultiplayerIntroAnimationController::GetFullIntroAnimationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::GetFullIntroAnimationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFullIntroAnimationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroAnimationController.BindTimeline
void GlobalNamespace::MultiplayerIntroAnimationController::BindTimeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::BindTimeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindTimeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroAnimationController.BindRingsAndSetTiming
void GlobalNamespace::MultiplayerIntroAnimationController::BindRingsAndSetTiming(int connectedPlayersCount, ::ArrayW<UnityEngine::GameObject*> connectedRings, UnityEngine::GameObject* localRing) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::BindRingsAndSetTiming");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindRingsAndSetTiming", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayersCount), ::il2cpp_utils::ExtractType(connectedRings), ::il2cpp_utils::ExtractType(localRing)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, connectedPlayersCount, connectedRings, localRing);
}
// Autogenerated method: MultiplayerIntroAnimationController.TransitionToAfterIntroAnimationState
void GlobalNamespace::MultiplayerIntroAnimationController::TransitionToAfterIntroAnimationState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::TransitionToAfterIntroAnimationState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToAfterIntroAnimationState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroAnimationController.CalculatePlayerIndexSequence
System::Collections::Generic::Queue_1<int>* GlobalNamespace::MultiplayerIntroAnimationController::CalculatePlayerIndexSequence(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* allActivePlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::CalculatePlayerIndexSequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculatePlayerIndexSequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allActivePlayer)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::Queue_1<int>*, false>(___instance_arg, ___internal__method, allActivePlayer);
}
// Autogenerated method: MultiplayerIntroAnimationController.SetTimelineMock
void GlobalNamespace::MultiplayerIntroAnimationController::SetTimelineMock(GlobalNamespace::MultiplayerTimelineMock* multiplayerIntroTimelineMock, bool isDuel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::SetTimelineMock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTimelineMock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerIntroTimelineMock), ::il2cpp_utils::ExtractType(isDuel)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, multiplayerIntroTimelineMock, isDuel);
}
// Autogenerated method: MultiplayerIntroAnimationController.Completed
void GlobalNamespace::MultiplayerIntroAnimationController::Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroAnimationController::Completed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Completed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroCountdown
#include "GlobalNamespace/MultiplayerIntroCountdown.hpp"
// Including type: MultiplayerIntroCountdown/<CountdownRoutine>d__23
#include "GlobalNamespace/MultiplayerIntroCountdown_-CountdownRoutine-d__23.hpp"
// Including type: MultiplayerIntroCountdown/<PlayDelayed>d__24
#include "GlobalNamespace/MultiplayerIntroCountdown_-PlayDelayed-d__24.hpp"
// Including type: MultiplayerIntroCountdown/<>c__DisplayClass25_0
#include "GlobalNamespace/MultiplayerIntroCountdown_--c__DisplayClass25_0.hpp"
// Including type: MultiplayerIntroCountdown/<PhaseRoutine>d__25
#include "GlobalNamespace/MultiplayerIntroCountdown_-PhaseRoutine-d__25.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: MultiplayerIntroCountdownTextController
#include "GlobalNamespace/MultiplayerIntroCountdownTextController.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: MultiplayerOffsetPositionByLocalPlayerPosition
#include "GlobalNamespace/MultiplayerOffsetPositionByLocalPlayerPosition.hpp"
// Including type: Tweening.TimeTweeningManager
#include "Tweening/TimeTweeningManager.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _textAppearDuration
float& GlobalNamespace::MultiplayerIntroCountdown::dyn__textAppearDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__textAppearDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textAppearDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _textDisappearDuration
float& GlobalNamespace::MultiplayerIntroCountdown::dyn__textDisappearDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__textDisappearDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textDisappearDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _goDisappearDuration
float& GlobalNamespace::MultiplayerIntroCountdown::dyn__goDisappearDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__goDisappearDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_goDisappearDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _partsDistance
float& GlobalNamespace::MultiplayerIntroCountdown::dyn__partsDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__partsDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_partsDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _startLocalPosition
UnityEngine::Vector3& GlobalNamespace::MultiplayerIntroCountdown::dyn__startLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__startLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startLocalPosition"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _targetLocalPosition
UnityEngine::Vector3& GlobalNamespace::MultiplayerIntroCountdown::dyn__targetLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__targetLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetLocalPosition"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _readyClip
UnityEngine::AudioClip*& GlobalNamespace::MultiplayerIntroCountdown::dyn__readyClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__readyClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_readyClip"))->offset;
  return *reinterpret_cast<UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _setClip
UnityEngine::AudioClip*& GlobalNamespace::MultiplayerIntroCountdown::dyn__setClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__setClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setClip"))->offset;
  return *reinterpret_cast<UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _goClip
UnityEngine::AudioClip*& GlobalNamespace::MultiplayerIntroCountdown::dyn__goClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__goClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_goClip"))->offset;
  return *reinterpret_cast<UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _buildUpClip
UnityEngine::AudioClip*& GlobalNamespace::MultiplayerIntroCountdown::dyn__buildUpClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__buildUpClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buildUpClip"))->offset;
  return *reinterpret_cast<UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerIntroCountdownTextController _textController0
GlobalNamespace::MultiplayerIntroCountdownTextController*& GlobalNamespace::MultiplayerIntroCountdown::dyn__textController0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__textController0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textController0"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerIntroCountdownTextController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerIntroCountdownTextController _textController1
GlobalNamespace::MultiplayerIntroCountdownTextController*& GlobalNamespace::MultiplayerIntroCountdown::dyn__textController1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__textController1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textController1"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerIntroCountdownTextController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource _audioSource
UnityEngine::AudioSource*& GlobalNamespace::MultiplayerIntroCountdown::dyn__audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioSource"))->offset;
  return *reinterpret_cast<UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerOffsetPositionByLocalPlayerPosition _multiplayerOffsetByLocalPlayerPosition
GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition*& GlobalNamespace::MultiplayerIntroCountdown::dyn__multiplayerOffsetByLocalPlayerPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__multiplayerOffsetByLocalPlayerPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerOffsetByLocalPlayerPosition"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.TimeTweeningManager _tweeningManager
Tweening::TimeTweeningManager*& GlobalNamespace::MultiplayerIntroCountdown::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<Tweening::TimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerIntroCountdownTextController _currentTextController
GlobalNamespace::MultiplayerIntroCountdownTextController*& GlobalNamespace::MultiplayerIntroCountdown::dyn__currentTextController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__currentTextController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTextController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerIntroCountdownTextController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fontSize
float& GlobalNamespace::MultiplayerIntroCountdown::dyn__fontSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__fontSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fontSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _alpha
float& GlobalNamespace::MultiplayerIntroCountdown::dyn__alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::dyn__alpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerIntroCountdown.get_textAppearDuration
float GlobalNamespace::MultiplayerIntroCountdown::get_textAppearDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::get_textAppearDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textAppearDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown.Awake
void GlobalNamespace::MultiplayerIntroCountdown::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown.OnDestroy
void GlobalNamespace::MultiplayerIntroCountdown::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown.StartCountdown
void GlobalNamespace::MultiplayerIntroCountdown::StartCountdown(float seconds, float delay, float durationMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::StartCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(delay), ::il2cpp_utils::ExtractType(durationMultiplier)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, seconds, delay, durationMultiplier);
}
// Autogenerated method: MultiplayerIntroCountdown.CountdownRoutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerIntroCountdown::CountdownRoutine(float seconds, float delay, float durationMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::CountdownRoutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CountdownRoutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(delay), ::il2cpp_utils::ExtractType(durationMultiplier)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(___instance_arg, ___internal__method, seconds, delay, durationMultiplier);
}
// Autogenerated method: MultiplayerIntroCountdown.PlayDelayed
System::Collections::IEnumerator* GlobalNamespace::MultiplayerIntroCountdown::PlayDelayed(UnityEngine::AudioClip* audioClip, float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::PlayDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioClip), ::il2cpp_utils::ExtractType(delay)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(___instance_arg, ___internal__method, audioClip, delay);
}
// Autogenerated method: MultiplayerIntroCountdown.PhaseRoutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerIntroCountdown::PhaseRoutine(::Il2CppString* text, float appearDuration, float disappearDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::PhaseRoutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PhaseRoutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(appearDuration), ::il2cpp_utils::ExtractType(disappearDuration)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(___instance_arg, ___internal__method, text, appearDuration, disappearDuration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroCountdown/<CountdownRoutine>d__23
#include "GlobalNamespace/MultiplayerIntroCountdown_-CountdownRoutine-d__23.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int& GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
::Il2CppObject*& GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerIntroCountdown <>4__this
GlobalNamespace::MultiplayerIntroCountdown*& GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerIntroCountdown**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delay
float& GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single seconds
float& GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_seconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_seconds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seconds"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single durationMultiplier
float& GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_durationMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_durationMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "durationMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <soundDelayAfterText>5__2
float& GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_$soundDelayAfterText$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::dyn_$soundDelayAfterText$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<soundDelayAfterText>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerIntroCountdown/<CountdownRoutine>d__23.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<CountdownRoutine>d__23.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<CountdownRoutine>d__23.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<CountdownRoutine>d__23.MoveNext
bool GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<CountdownRoutine>d__23.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroCountdown/<PlayDelayed>d__24
#include "GlobalNamespace/MultiplayerIntroCountdown_-PlayDelayed-d__24.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int& GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
::Il2CppObject*& GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delay
float& GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::dyn_delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::dyn_delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerIntroCountdown <>4__this
GlobalNamespace::MultiplayerIntroCountdown*& GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerIntroCountdown**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip audioClip
UnityEngine::AudioClip*& GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::dyn_audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::dyn_audioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioClip"))->offset;
  return *reinterpret_cast<UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerIntroCountdown/<PlayDelayed>d__24.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PlayDelayed>d__24.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PlayDelayed>d__24.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PlayDelayed>d__24.MoveNext
bool GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PlayDelayed>d__24.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerIntroCountdown/<>c__DisplayClass25_0
#include "GlobalNamespace/MultiplayerIntroCountdown_--c__DisplayClass25_0.hpp"
// Including type: MultiplayerIntroCountdownTextController
#include "GlobalNamespace/MultiplayerIntroCountdownTextController.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public MultiplayerIntroCountdownTextController textController
GlobalNamespace::MultiplayerIntroCountdownTextController*& GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::dyn_textController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::dyn_textController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerIntroCountdownTextController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerIntroCountdown <>4__this
GlobalNamespace::MultiplayerIntroCountdown*& GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerIntroCountdown**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerIntroCountdown/<>c__DisplayClass25_0.<PhaseRoutine>b__0
void GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::$PhaseRoutine$b__0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::<PhaseRoutine>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PhaseRoutine>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: MultiplayerIntroCountdown/<>c__DisplayClass25_0.<PhaseRoutine>b__1
void GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::$PhaseRoutine$b__1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::<PhaseRoutine>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PhaseRoutine>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: MultiplayerIntroCountdown/<>c__DisplayClass25_0.<PhaseRoutine>b__2
void GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::$PhaseRoutine$b__2(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::<PhaseRoutine>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PhaseRoutine>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, pos);
}
// Autogenerated method: MultiplayerIntroCountdown/<>c__DisplayClass25_0.<PhaseRoutine>b__3
void GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::$PhaseRoutine$b__3(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::<PhaseRoutine>b__3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PhaseRoutine>b__3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, f);
}
// Autogenerated method: MultiplayerIntroCountdown/<>c__DisplayClass25_0.<PhaseRoutine>b__4
void GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::$PhaseRoutine$b__4(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0::<PhaseRoutine>b__4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PhaseRoutine>b__4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroCountdown/<PhaseRoutine>d__25
#include "GlobalNamespace/MultiplayerIntroCountdown_-PhaseRoutine-d__25.hpp"
// Including type: MultiplayerIntroCountdown/<>c__DisplayClass25_0
#include "GlobalNamespace/MultiplayerIntroCountdown_--c__DisplayClass25_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int& GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
::Il2CppObject*& GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerIntroCountdown <>4__this
GlobalNamespace::MultiplayerIntroCountdown*& GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerIntroCountdown**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String text
::Il2CppString*& GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "text"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single appearDuration
float& GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_appearDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_appearDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "appearDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single disappearDuration
float& GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_disappearDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_disappearDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disappearDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerIntroCountdown/<>c__DisplayClass25_0 <>8__1
GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0*& GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_$$8__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::dyn_$$8__1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>8__1"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerIntroCountdown/<PhaseRoutine>d__25.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PhaseRoutine>d__25.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PhaseRoutine>d__25.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PhaseRoutine>d__25.MoveNext
bool GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdown/<PhaseRoutine>d__25.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerIntroCountdownTextController
#include "GlobalNamespace/MultiplayerIntroCountdownTextController.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshPro[] _texts
::ArrayW<TMPro::TextMeshPro*>& GlobalNamespace::MultiplayerIntroCountdownTextController::dyn__texts() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::dyn__texts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_texts"))->offset;
  return *reinterpret_cast<::ArrayW<TMPro::TextMeshPro*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.set_hide
void GlobalNamespace::MultiplayerIntroCountdownTextController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.get_fontSize
float GlobalNamespace::MultiplayerIntroCountdownTextController::get_fontSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::get_fontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.set_fontSize
void GlobalNamespace::MultiplayerIntroCountdownTextController::set_fontSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::set_fontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.get_alpha
float GlobalNamespace::MultiplayerIntroCountdownTextController::get_alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::get_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.set_alpha
void GlobalNamespace::MultiplayerIntroCountdownTextController::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.SetText
void GlobalNamespace::MultiplayerIntroCountdownTextController::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, text);
}
// Autogenerated method: MultiplayerIntroCountdownTextController.SetDistances
void GlobalNamespace::MultiplayerIntroCountdownTextController::SetDistances(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdownTextController::SetDistances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDistances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, distance);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerPlayerLayout <layout>k__BackingField
GlobalNamespace::MultiplayerPlayerLayout& GlobalNamespace::MultiplayerLayoutProvider::dyn_$layout$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::dyn_$layout$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<layout>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayerLayout*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <activePlayerSpotsCount>k__BackingField
int& GlobalNamespace::MultiplayerLayoutProvider::dyn_$activePlayerSpotsCount$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::dyn_$activePlayerSpotsCount$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<activePlayerSpotsCount>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<MultiplayerPlayerLayout,System.Int32> playersLayoutWasCalculatedEvent
System::Action_2<GlobalNamespace::MultiplayerPlayerLayout, int>*& GlobalNamespace::MultiplayerLayoutProvider::dyn_playersLayoutWasCalculatedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::dyn_playersLayoutWasCalculatedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playersLayoutWasCalculatedEvent"))->offset;
  return *reinterpret_cast<System::Action_2<GlobalNamespace::MultiplayerPlayerLayout, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLayoutProvider.get_layout
GlobalNamespace::MultiplayerPlayerLayout GlobalNamespace::MultiplayerLayoutProvider::get_layout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::get_layout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_layout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerPlayerLayout, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerLayoutProvider.set_layout
void GlobalNamespace::MultiplayerLayoutProvider::set_layout(GlobalNamespace::MultiplayerPlayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::set_layout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_layout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerLayoutProvider.get_activePlayerSpotsCount
int GlobalNamespace::MultiplayerLayoutProvider::get_activePlayerSpotsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::get_activePlayerSpotsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activePlayerSpotsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerLayoutProvider.set_activePlayerSpotsCount
void GlobalNamespace::MultiplayerLayoutProvider::set_activePlayerSpotsCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::set_activePlayerSpotsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_activePlayerSpotsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerLayoutProvider.add_playersLayoutWasCalculatedEvent
void GlobalNamespace::MultiplayerLayoutProvider::add_playersLayoutWasCalculatedEvent(System::Action_2<GlobalNamespace::MultiplayerPlayerLayout, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::add_playersLayoutWasCalculatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playersLayoutWasCalculatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerLayoutProvider.remove_playersLayoutWasCalculatedEvent
void GlobalNamespace::MultiplayerLayoutProvider::remove_playersLayoutWasCalculatedEvent(System::Action_2<GlobalNamespace::MultiplayerPlayerLayout, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::remove_playersLayoutWasCalculatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playersLayoutWasCalculatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerLayoutProvider.CalculateLayout
GlobalNamespace::MultiplayerPlayerLayout GlobalNamespace::MultiplayerLayoutProvider::CalculateLayout(int activePlayersCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLayoutProvider::CalculateLayout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(activePlayersCount)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerPlayerLayout, false>(___instance_arg, ___internal__method, activePlayersCount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLeadPlayerProvider
#include "GlobalNamespace/MultiplayerLeadPlayerProvider.hpp"
// Including type: MultiplayerController/State
#include "GlobalNamespace/MultiplayerController.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _timeToGainFirstLead
float& GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__timeToGainFirstLead() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__timeToGainFirstLead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeToGainFirstLead"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timeToLooseLead
float& GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__timeToLooseLead() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__timeToLooseLead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeToLooseLead"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerScoreProvider _scoreProvider
GlobalNamespace::MultiplayerScoreProvider*& GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__scoreProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__scoreProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerController _multiplayerController
GlobalNamespace::MultiplayerController*& GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__multiplayerController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__multiplayerController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.String> newLeaderWasSelectedEvent
System::Action_1<::Il2CppString*>*& GlobalNamespace::MultiplayerLeadPlayerProvider::dyn_newLeaderWasSelectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::dyn_newLeaderWasSelectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "newLeaderWasSelectedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _currentLeadingPlayerStartTime
float& GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__currentLeadingPlayerStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__currentLeadingPlayerStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentLeadingPlayerStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerScoreProvider/RankedPlayer _currentlyDisplayedUser
GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*& GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__currentlyDisplayedUser() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__currentlyDisplayedUser");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentlyDisplayedUser"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerScoreProvider/RankedPlayer _currentlyLeadingUser
GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*& GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__currentlyLeadingUser() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::dyn__currentlyLeadingUser");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentlyLeadingUser"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.add_newLeaderWasSelectedEvent
void GlobalNamespace::MultiplayerLeadPlayerProvider::add_newLeaderWasSelectedEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::add_newLeaderWasSelectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_newLeaderWasSelectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.remove_newLeaderWasSelectedEvent
void GlobalNamespace::MultiplayerLeadPlayerProvider::remove_newLeaderWasSelectedEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::remove_newLeaderWasSelectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_newLeaderWasSelectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.Start
void GlobalNamespace::MultiplayerLeadPlayerProvider::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.OnDestroy
void GlobalNamespace::MultiplayerLeadPlayerProvider::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.Update
void GlobalNamespace::MultiplayerLeadPlayerProvider::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.StopProviding
void GlobalNamespace::MultiplayerLeadPlayerProvider::StopProviding() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::StopProviding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopProviding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.StartProviding
void GlobalNamespace::MultiplayerLeadPlayerProvider::StartProviding() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::StartProviding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartProviding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.HandleStateChanged
void GlobalNamespace::MultiplayerLeadPlayerProvider::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, state);
}
// Autogenerated method: MultiplayerLeadPlayerProvider.HandleFirstPlayerDidChange
void GlobalNamespace::MultiplayerLeadPlayerProvider::HandleFirstPlayerDidChange(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* firstPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeadPlayerProvider::HandleFirstPlayerDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFirstPlayerDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstPlayer)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, firstPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerObjectInstaller
#include "GlobalNamespace/MultiplayerObjectInstaller.hpp"
// Including type: MultiplayerScoreRingItem
#include "GlobalNamespace/MultiplayerScoreRingItem.hpp"
// Including type: FireworkItemController
#include "GlobalNamespace/FireworkItemController.hpp"
// Including type: MultiplayerResultsPyramidViewAvatar
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerScoreRingItem _inEnvironmentTextsPrefab
GlobalNamespace::MultiplayerScoreRingItem*& GlobalNamespace::MultiplayerObjectInstaller::dyn__inEnvironmentTextsPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerObjectInstaller::dyn__inEnvironmentTextsPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inEnvironmentTextsPrefab"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreRingItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FireworkItemController _fireworkItemControllerPrefab
GlobalNamespace::FireworkItemController*& GlobalNamespace::MultiplayerObjectInstaller::dyn__fireworkItemControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerObjectInstaller::dyn__fireworkItemControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fireworkItemControllerPrefab"))->offset;
  return *reinterpret_cast<GlobalNamespace::FireworkItemController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerResultsPyramidViewAvatar _multiplayerResultsPyramidViewAvatarPrefab
GlobalNamespace::MultiplayerResultsPyramidViewAvatar*& GlobalNamespace::MultiplayerObjectInstaller::dyn__multiplayerResultsPyramidViewAvatarPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerObjectInstaller::dyn__multiplayerResultsPyramidViewAvatarPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerResultsPyramidViewAvatarPrefab"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerResultsPyramidViewAvatar**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerObjectInstaller.InstallBindings
void GlobalNamespace::MultiplayerObjectInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerObjectInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerOffsetPositionByLocalPlayerPosition
#include "GlobalNamespace/MultiplayerOffsetPositionByLocalPlayerPosition.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayersManager _multiplayerPlayersManager
GlobalNamespace::MultiplayerPlayersManager*& GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::dyn__multiplayerPlayersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::dyn__multiplayerPlayersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerPlayersManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _positionOffset
UnityEngine::Vector3& GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::dyn__positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::dyn__positionOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positionOffset"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _rotationOffset
UnityEngine::Quaternion& GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::dyn__rotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::dyn__rotationOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotationOffset"))->offset;
  return *reinterpret_cast<UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _lastParentPosition
UnityEngine::Vector3& GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::dyn__lastParentPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::dyn__lastParentPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastParentPosition"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _lastParentRotation
UnityEngine::Quaternion& GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::dyn__lastParentRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::dyn__lastParentRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastParentRotation"))->offset;
  return *reinterpret_cast<UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerOffsetPositionByLocalPlayerPosition.Awake
void GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOffsetPositionByLocalPlayerPosition.Update
void GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOffsetPositionByLocalPlayerPosition.SetEnabled
void GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::SetEnabled(bool isEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::SetEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isEnabled)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, isEnabled);
}
// Autogenerated method: MultiplayerOffsetPositionByLocalPlayerPosition.UpdatePositionAndRotationIfNeeded
void GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::UpdatePositionAndRotationIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition::UpdatePositionAndRotationIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePositionAndRotationIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerOtherPlayersScoreDiffTextManager
#include "GlobalNamespace/MultiplayerOtherPlayersScoreDiffTextManager.hpp"
// Including type: MultiplayerOtherPlayersScoreDiffTextManager/<>c
#include "GlobalNamespace/MultiplayerOtherPlayersScoreDiffTextManager_--c.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kUpdateInterval
float GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::_get_kUpdateInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::_get_kUpdateInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerOtherPlayersScoreDiffTextManager", "kUpdateInterval"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kUpdateInterval
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::_set_kUpdateInterval(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::_set_kUpdateInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerOtherPlayersScoreDiffTextManager", "kUpdateInterval", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerController _multiplayerController
GlobalNamespace::MultiplayerController*& GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__multiplayerController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__multiplayerController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayersManager _playersManager
GlobalNamespace::MultiplayerPlayersManager*& GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__playersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__playersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playersManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerScoreProvider _scoreProvider
GlobalNamespace::MultiplayerScoreProvider*& GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__scoreProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__scoreProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLayoutProvider _layoutProvider
GlobalNamespace::MultiplayerLayoutProvider*& GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__layoutProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__layoutProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layoutProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLayoutProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly CoreGameHUDController/InitData _initData
GlobalNamespace::CoreGameHUDController::InitData*& GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<GlobalNamespace::CoreGameHUDController::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timeToNextUpdate
float& GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__timeToNextUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::dyn__timeToNextUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeToNextUpdate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.Start
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.OnDestroy
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.Update
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.InitLeftRightPositions
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::InitLeftRightPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::InitLeftRightPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitLeftRightPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.HideAll
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::HideAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::HideAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager.HandleStateChanged
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::HandleStateChanged(GlobalNamespace::MultiplayerController::State newState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newState)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, newState);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerOtherPlayersScoreDiffTextManager/<>c
#include "GlobalNamespace/MultiplayerOtherPlayersScoreDiffTextManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerOtherPlayersScoreDiffTextManager/<>c <>9
GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c* GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c*>("", "MultiplayerOtherPlayersScoreDiffTextManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerOtherPlayersScoreDiffTextManager/<>c <>9
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_set_$$9(GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerOtherPlayersScoreDiffTextManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MultiplayerScoreProvider/RankedPlayer,System.Boolean> <>9__10_0
System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>* GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_get_$$9__10_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_get_$$9__10_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>*>("", "MultiplayerOtherPlayersScoreDiffTextManager/<>c", "<>9__10_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MultiplayerScoreProvider/RankedPlayer,System.Boolean> <>9__10_0
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_set_$$9__10_0(System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_set_$$9__10_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerOtherPlayersScoreDiffTextManager/<>c", "<>9__10_0", value)));
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager/<>c..cctor
void GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerOtherPlayersScoreDiffTextManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerOtherPlayersScoreDiffTextManager/<>c.<Update>b__10_0
bool GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::$Update$b__10_0(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOtherPlayersScoreDiffTextManager::$$c::<Update>b__10_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Update>b__10_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, p);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerOutroAnimationController
#include "GlobalNamespace/MultiplayerOutroAnimationController.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: MultiplayerScoreRingManager
#include "GlobalNamespace/MultiplayerScoreRingManager.hpp"
// Including type: MultiplayerResultsPyramidView
#include "GlobalNamespace/MultiplayerResultsPyramidView.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: MultiplayerTimelineMock
#include "GlobalNamespace/MultiplayerTimelineMock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableDirector _outroPlayableDirector
UnityEngine::Playables::PlayableDirector*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__outroPlayableDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__outroPlayableDirector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outroPlayableDirector"))->offset;
  return *reinterpret_cast<UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String[] _playerTimelineTrackNames
::ArrayW<::Il2CppString*>& GlobalNamespace::MultiplayerOutroAnimationController::dyn__playerTimelineTrackNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__playerTimelineTrackNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTimelineTrackNames"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppString*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String[] _ringTimelineTrackNames
::ArrayW<::Il2CppString*>& GlobalNamespace::MultiplayerOutroAnimationController::dyn__ringTimelineTrackNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__ringTimelineTrackNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ringTimelineTrackNames"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppString*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String[] _resultsTimelineTrackNames
::ArrayW<::Il2CppString*>& GlobalNamespace::MultiplayerOutroAnimationController::dyn__resultsTimelineTrackNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__resultsTimelineTrackNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resultsTimelineTrackNames"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppString*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.PropertyName[] _playerTimelinePropertyNames
::ArrayW<UnityEngine::PropertyName>& GlobalNamespace::MultiplayerOutroAnimationController::dyn__playerTimelinePropertyNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__playerTimelinePropertyNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTimelinePropertyNames"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::PropertyName>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.PropertyName[] _resultsTimelinePropertyNames
::ArrayW<UnityEngine::PropertyName>& GlobalNamespace::MultiplayerOutroAnimationController::dyn__resultsTimelinePropertyNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__resultsTimelinePropertyNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resultsTimelinePropertyNames"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::PropertyName>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _localPlayerTrackName
::Il2CppString*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__localPlayerTrackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__localPlayerTrackName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerTrackName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.PropertyName _localPlayerTimelinePropertyName
UnityEngine::PropertyName& GlobalNamespace::MultiplayerOutroAnimationController::dyn__localPlayerTimelinePropertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__localPlayerTimelinePropertyName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerTimelinePropertyName"))->offset;
  return *reinterpret_cast<UnityEngine::PropertyName*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String[] _badgeTimelineTrackNames
::ArrayW<::Il2CppString*>& GlobalNamespace::MultiplayerOutroAnimationController::dyn__badgeTimelineTrackNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__badgeTimelineTrackNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeTimelineTrackNames"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppString*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.PropertyName[] _badgeTimelinePropertyNames
::ArrayW<UnityEngine::PropertyName>& GlobalNamespace::MultiplayerOutroAnimationController::dyn__badgeTimelinePropertyNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__badgeTimelinePropertyNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeTimelinePropertyNames"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::PropertyName>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _badgeStartTransform
UnityEngine::Transform*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__badgeStartTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__badgeStartTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeStartTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _badgeMidTransform
UnityEngine::Transform*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__badgeMidTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__badgeMidTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeMidTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _songPreviewTrackName
::Il2CppString*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__songPreviewTrackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__songPreviewTrackName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songPreviewTrackName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _resultsMocksActivationTrack
::Il2CppString*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__resultsMocksActivationTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__resultsMocksActivationTrack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resultsMocksActivationTrack"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerScoreRingManager _multiplayerScoreRingManager
GlobalNamespace::MultiplayerScoreRingManager*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__multiplayerScoreRingManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__multiplayerScoreRingManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerScoreRingManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreRingManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerResultsPyramidView _multiplayerResultsPyramidView
GlobalNamespace::MultiplayerResultsPyramidView*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__multiplayerResultsPyramidView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__multiplayerResultsPyramidView");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerResultsPyramidView"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerResultsPyramidView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayersManager _multiplayerPlayersManager
GlobalNamespace::MultiplayerPlayersManager*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__multiplayerPlayersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__multiplayerPlayersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerPlayersManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameplayCoreSceneSetupData _sceneSetupData
GlobalNamespace::GameplayCoreSceneSetupData*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__sceneSetupData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__sceneSetupData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneSetupData"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayCoreSceneSetupData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action _onCompleted
System::Action*& GlobalNamespace::MultiplayerOutroAnimationController::dyn__onCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::dyn__onCompleted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_onCompleted"))->offset;
  return *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerOutroAnimationController.Start
void GlobalNamespace::MultiplayerOutroAnimationController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOutroAnimationController.OnValidate
void GlobalNamespace::MultiplayerOutroAnimationController::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOutroAnimationController.OnDestroy
void GlobalNamespace::MultiplayerOutroAnimationController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOutroAnimationController.AnimateOutro
void GlobalNamespace::MultiplayerOutroAnimationController::AnimateOutro(GlobalNamespace::MultiplayerResultsData* multiplayerResultsData, System::Action* onCompleted) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::AnimateOutro");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateOutro", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerResultsData), ::il2cpp_utils::ExtractType(onCompleted)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, multiplayerResultsData, onCompleted);
}
// Autogenerated method: MultiplayerOutroAnimationController.BindOutroTimeline
void GlobalNamespace::MultiplayerOutroAnimationController::BindOutroTimeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::BindOutroTimeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindOutroTimeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOutroAnimationController.BindRingsAndAudio
void GlobalNamespace::MultiplayerOutroAnimationController::BindRingsAndAudio(::ArrayW<UnityEngine::GameObject*> rings, bool isMock, bool isDuel, GlobalNamespace::MultiplayerTimelineMock* timelineMock) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::BindRingsAndAudio");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindRingsAndAudio", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rings), ::il2cpp_utils::ExtractType(isMock), ::il2cpp_utils::ExtractType(isDuel), ::il2cpp_utils::ExtractType(timelineMock)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, rings, isMock, isDuel, timelineMock);
}
// Autogenerated method: MultiplayerOutroAnimationController.SetTimelineMock
void GlobalNamespace::MultiplayerOutroAnimationController::SetTimelineMock(GlobalNamespace::MultiplayerTimelineMock* multiplayerIntroTimelineMock, bool isDuel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::SetTimelineMock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTimelineMock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerIntroTimelineMock), ::il2cpp_utils::ExtractType(isDuel)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, multiplayerIntroTimelineMock, isDuel);
}
// Autogenerated method: MultiplayerOutroAnimationController.Completed
void GlobalNamespace::MultiplayerOutroAnimationController::Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::Completed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Completed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerOutroAnimationController.HandlePlayerSpawningDidFinish
void GlobalNamespace::MultiplayerOutroAnimationController::HandlePlayerSpawningDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::HandlePlayerSpawningDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerSpawningDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPlayerLayout
#include "GlobalNamespace/MultiplayerPlayerLayout.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerPlayerLayout NotDetermined
GlobalNamespace::MultiplayerPlayerLayout GlobalNamespace::MultiplayerPlayerLayout::_get_NotDetermined() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_get_NotDetermined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerLayout>("", "MultiplayerPlayerLayout", "NotDetermined"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerPlayerLayout NotDetermined
void GlobalNamespace::MultiplayerPlayerLayout::_set_NotDetermined(GlobalNamespace::MultiplayerPlayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_set_NotDetermined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerPlayerLayout", "NotDetermined", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerPlayerLayout Circle
GlobalNamespace::MultiplayerPlayerLayout GlobalNamespace::MultiplayerPlayerLayout::_get_Circle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_get_Circle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerLayout>("", "MultiplayerPlayerLayout", "Circle"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerPlayerLayout Circle
void GlobalNamespace::MultiplayerPlayerLayout::_set_Circle(GlobalNamespace::MultiplayerPlayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_set_Circle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerPlayerLayout", "Circle", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerPlayerLayout Duel
GlobalNamespace::MultiplayerPlayerLayout GlobalNamespace::MultiplayerPlayerLayout::_get_Duel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_get_Duel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerLayout>("", "MultiplayerPlayerLayout", "Duel"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerPlayerLayout Duel
void GlobalNamespace::MultiplayerPlayerLayout::_set_Duel(GlobalNamespace::MultiplayerPlayerLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::_set_Duel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerPlayerLayout", "Duel", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& GlobalNamespace::MultiplayerPlayerLayout::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerLayout::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPlayerPlacement
#include "GlobalNamespace/MultiplayerPlayerPlacement.hpp"
// Including type: MultiplayerPlayerPlacement/<>c
#include "GlobalNamespace/MultiplayerPlayerPlacement_--c.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: MultiplayerPlayerLayout
#include "GlobalNamespace/MultiplayerPlayerLayout.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerPlayerPlacement.GetPlayerWorldPosition
UnityEngine::Vector3 GlobalNamespace::MultiplayerPlayerPlacement::GetPlayerWorldPosition(float outerCircleRadius, float outerCirclePositionAngle, GlobalNamespace::MultiplayerPlayerLayout layout) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::GetPlayerWorldPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "GetPlayerWorldPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outerCircleRadius), ::il2cpp_utils::ExtractType(outerCirclePositionAngle), ::il2cpp_utils::ExtractType(layout)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, outerCircleRadius, outerCirclePositionAngle, layout);
}
// Autogenerated method: MultiplayerPlayerPlacement.GetOuterCirclePositionAngleForPlayer
float GlobalNamespace::MultiplayerPlayerPlacement::GetOuterCirclePositionAngleForPlayer(int playerIndex, int localPlayerIndex, float angleBetweenPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::GetOuterCirclePositionAngleForPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "GetOuterCirclePositionAngleForPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerIndex), ::il2cpp_utils::ExtractType(localPlayerIndex), ::il2cpp_utils::ExtractType(angleBetweenPlayers)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, playerIndex, localPlayerIndex, angleBetweenPlayers);
}
// Autogenerated method: MultiplayerPlayerPlacement.GetOuterCircleRadius
float GlobalNamespace::MultiplayerPlayerPlacement::GetOuterCircleRadius(float angleBetweenPlayers, float innerCircleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::GetOuterCircleRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "GetOuterCircleRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angleBetweenPlayers), ::il2cpp_utils::ExtractType(innerCircleRadius)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, angleBetweenPlayers, innerCircleRadius);
}
// Autogenerated method: MultiplayerPlayerPlacement.GetAngleBetweenPlayersWithEvenAdjustment
float GlobalNamespace::MultiplayerPlayerPlacement::GetAngleBetweenPlayersWithEvenAdjustment(int numberOfPlayers, GlobalNamespace::MultiplayerPlayerLayout layout) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::GetAngleBetweenPlayersWithEvenAdjustment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "GetAngleBetweenPlayersWithEvenAdjustment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numberOfPlayers), ::il2cpp_utils::ExtractType(layout)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, numberOfPlayers, layout);
}
// Autogenerated method: MultiplayerPlayerPlacement.SortPlayers
void GlobalNamespace::MultiplayerPlayerPlacement::SortPlayers(System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* players) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::SortPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "SortPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(players)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, players);
}
// Autogenerated method: MultiplayerPlayerPlacement.GetLocalPlayerIndex
int GlobalNamespace::MultiplayerPlayerPlacement::GetLocalPlayerIndex(System::Collections::Generic::IList_1<GlobalNamespace::IConnectedPlayer*>* otherPlayers, GlobalNamespace::IConnectedPlayer* localPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::GetLocalPlayerIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement", "GetLocalPlayerIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(otherPlayers), ::il2cpp_utils::ExtractType(localPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, otherPlayers, localPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPlayerPlacement/<>c
#include "GlobalNamespace/MultiplayerPlayerPlacement_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerPlayerPlacement/<>c <>9
GlobalNamespace::MultiplayerPlayerPlacement::$$c* GlobalNamespace::MultiplayerPlayerPlacement::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerPlacement::$$c*>("", "MultiplayerPlayerPlacement/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerPlayerPlacement/<>c <>9
void GlobalNamespace::MultiplayerPlayerPlacement::$$c::_set_$$9(GlobalNamespace::MultiplayerPlayerPlacement::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerPlayerPlacement/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<IConnectedPlayer> <>9__4_0
System::Comparison_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::MultiplayerPlayerPlacement::$$c::_get_$$9__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::_get_$$9__4_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Comparison_1<GlobalNamespace::IConnectedPlayer*>*>("", "MultiplayerPlayerPlacement/<>c", "<>9__4_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<IConnectedPlayer> <>9__4_0
void GlobalNamespace::MultiplayerPlayerPlacement::$$c::_set_$$9__4_0(System::Comparison_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::_set_$$9__4_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerPlayerPlacement/<>c", "<>9__4_0", value)));
}
// Autogenerated method: MultiplayerPlayerPlacement/<>c..cctor
void GlobalNamespace::MultiplayerPlayerPlacement::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerPlayerPlacement/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerPlayerPlacement/<>c.<SortPlayers>b__4_0
int GlobalNamespace::MultiplayerPlayerPlacement::$$c::$SortPlayers$b__4_0(GlobalNamespace::IConnectedPlayer* p1, GlobalNamespace::IConnectedPlayer* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerPlacement::$$c::<SortPlayers>b__4_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortPlayers>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, p1, p2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: MultiplayerBadgeAwardData
#include "GlobalNamespace/MultiplayerBadgeAwardData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly IConnectedPlayer connectedPlayer
GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerPlayerResultsData::dyn_connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerResultsData::dyn_connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectedPlayer"))->offset;
  return *reinterpret_cast<GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly MultiplayerLevelCompletionResults multiplayerLevelCompletionResults
GlobalNamespace::MultiplayerLevelCompletionResults*& GlobalNamespace::MultiplayerPlayerResultsData::dyn_multiplayerLevelCompletionResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerResultsData::dyn_multiplayerLevelCompletionResults");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "multiplayerLevelCompletionResults"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLevelCompletionResults**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerBadgeAwardData badge
GlobalNamespace::MultiplayerBadgeAwardData*& GlobalNamespace::MultiplayerPlayerResultsData::dyn_badge() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerResultsData::dyn_badge");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "badge"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerBadgeAwardData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerPlayerResultsData.CompareTo
int GlobalNamespace::MultiplayerPlayerResultsData::CompareTo(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerResultsData::CompareTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPlayerStartState
#include "GlobalNamespace/MultiplayerPlayerStartState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerPlayerStartState InSync
GlobalNamespace::MultiplayerPlayerStartState GlobalNamespace::MultiplayerPlayerStartState::_get_InSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerStartState::_get_InSync");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerStartState>("", "MultiplayerPlayerStartState", "InSync"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerPlayerStartState InSync
void GlobalNamespace::MultiplayerPlayerStartState::_set_InSync(GlobalNamespace::MultiplayerPlayerStartState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerStartState::_set_InSync");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerPlayerStartState", "InSync", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerPlayerStartState Late
GlobalNamespace::MultiplayerPlayerStartState GlobalNamespace::MultiplayerPlayerStartState::_get_Late() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerStartState::_get_Late");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerPlayerStartState>("", "MultiplayerPlayerStartState", "Late"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerPlayerStartState Late
void GlobalNamespace::MultiplayerPlayerStartState::_set_Late(GlobalNamespace::MultiplayerPlayerStartState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerStartState::_set_Late");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerPlayerStartState", "Late", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& GlobalNamespace::MultiplayerPlayerStartState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayerStartState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51
#include "GlobalNamespace/MultiplayerPlayersManager_-SwitchLocalPlayerToInactiveCoroutine-d__51.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: IStartSeekSongControllerProvider
#include "GlobalNamespace/IStartSeekSongControllerProvider.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: MultiplayerPlayerStartState
#include "GlobalNamespace/MultiplayerPlayerStartState.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: MultiplayerPlayerLayout
#include "GlobalNamespace/MultiplayerPlayerLayout.hpp"
// Including type: MultiplayerLocalActivePlayerFacade/Factory
#include "GlobalNamespace/MultiplayerLocalActivePlayerFacade_Factory.hpp"
// Including type: MultiplayerLocalInactivePlayerFacade/Factory
#include "GlobalNamespace/MultiplayerLocalInactivePlayerFacade_Factory.hpp"
// Including type: MultiplayerConnectedPlayerFacade/Factory
#include "GlobalNamespace/MultiplayerConnectedPlayerFacade_Factory.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerLocalActivePlayerFacade _activeLocalPlayerControllerPrefab
GlobalNamespace::MultiplayerLocalActivePlayerFacade*& GlobalNamespace::MultiplayerPlayersManager::dyn__activeLocalPlayerControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__activeLocalPlayerControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeLocalPlayerControllerPrefab"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLocalActivePlayerFacade**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerLocalActivePlayerFacade _activeLocalPlayerDuelControllerPrefab
GlobalNamespace::MultiplayerLocalActivePlayerFacade*& GlobalNamespace::MultiplayerPlayersManager::dyn__activeLocalPlayerDuelControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__activeLocalPlayerDuelControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeLocalPlayerDuelControllerPrefab"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLocalActivePlayerFacade**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerLocalInactivePlayerFacade _inactiveLocalPlayerControllerPrefab
GlobalNamespace::MultiplayerLocalInactivePlayerFacade*& GlobalNamespace::MultiplayerPlayersManager::dyn__inactiveLocalPlayerControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__inactiveLocalPlayerControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inactiveLocalPlayerControllerPrefab"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLocalInactivePlayerFacade**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerFacade _connectedPlayerControllerPrefab
GlobalNamespace::MultiplayerConnectedPlayerFacade*& GlobalNamespace::MultiplayerPlayersManager::dyn__connectedPlayerControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__connectedPlayerControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayerControllerPrefab"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerConnectedPlayerFacade**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerFacade _connectedPlayerDuelControllerPrefab
GlobalNamespace::MultiplayerConnectedPlayerFacade*& GlobalNamespace::MultiplayerPlayersManager::dyn__connectedPlayerDuelControllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__connectedPlayerDuelControllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayerDuelControllerPrefab"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerConnectedPlayerFacade**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerPlayersManager::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectSpawnCenter _beatmapObjectSpawnCenter
GlobalNamespace::BeatmapObjectSpawnCenter*& GlobalNamespace::MultiplayerPlayersManager::dyn__beatmapObjectSpawnCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__beatmapObjectSpawnCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectSpawnCenter"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapObjectSpawnCenter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLayoutProvider _layoutProvider
GlobalNamespace::MultiplayerLayoutProvider*& GlobalNamespace::MultiplayerPlayersManager::dyn__layoutProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__layoutProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layoutProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLayoutProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly FadeInOutController _fadeInOutController
GlobalNamespace::FadeInOutController*& GlobalNamespace::MultiplayerPlayersManager::dyn__fadeInOutController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__fadeInOutController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInOutController"))->offset;
  return *reinterpret_cast<GlobalNamespace::FadeInOutController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
Zenject::DiContainer*& GlobalNamespace::MultiplayerPlayersManager::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <playerSpawningFinished>k__BackingField
bool& GlobalNamespace::MultiplayerPlayersManager::dyn_$playerSpawningFinished$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn_$playerSpawningFinished$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<playerSpawningFinished>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action playerSpawningDidFinishEvent
System::Action*& GlobalNamespace::MultiplayerPlayersManager::dyn_playerSpawningDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn_playerSpawningDidFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerSpawningDidFinishEvent"))->offset;
  return *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action didSwitchPlayerToInactiveEvent
System::Action*& GlobalNamespace::MultiplayerPlayersManager::dyn_didSwitchPlayerToInactiveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn_didSwitchPlayerToInactiveEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didSwitchPlayerToInactiveEvent"))->offset;
  return *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MultiplayerLevelCompletionResults> playerDidFinishEvent
System::Action_1<GlobalNamespace::MultiplayerLevelCompletionResults*>*& GlobalNamespace::MultiplayerPlayersManager::dyn_playerDidFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn_playerDidFinishEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerDidFinishEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::MultiplayerLevelCompletionResults*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<PlayerNetworkFailReason> playerNetworkDidFailedEvent
System::Action_1<GlobalNamespace::PlayerNetworkFailReason>*& GlobalNamespace::MultiplayerPlayersManager::dyn_playerNetworkDidFailedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn_playerNetworkDidFailedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerNetworkDidFailedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::PlayerNetworkFailReason>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerLocalActivePlayerFacade _activeLocalPlayerFacade
GlobalNamespace::MultiplayerLocalActivePlayerFacade*& GlobalNamespace::MultiplayerPlayersManager::dyn__activeLocalPlayerFacade() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__activeLocalPlayerFacade");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeLocalPlayerFacade"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLocalActivePlayerFacade**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerLocalInactivePlayerFacade _inactiveLocalPlayerFacade
GlobalNamespace::MultiplayerLocalInactivePlayerFacade*& GlobalNamespace::MultiplayerPlayersManager::dyn__inactiveLocalPlayerFacade() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__inactiveLocalPlayerFacade");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inactiveLocalPlayerFacade"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLocalInactivePlayerFacade**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IMultiplayerLevelEndActionsPublisher _currentEventsPublisher
GlobalNamespace::IMultiplayerLevelEndActionsPublisher*& GlobalNamespace::MultiplayerPlayersManager::dyn__currentEventsPublisher() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__currentEventsPublisher");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentEventsPublisher"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerLevelEndActionsPublisher**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IStartSeekSongControllerProvider _currentStartSeekSongControllerProvider
GlobalNamespace::IStartSeekSongControllerProvider*& GlobalNamespace::MultiplayerPlayersManager::dyn__currentStartSeekSongControllerProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__currentStartSeekSongControllerProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentStartSeekSongControllerProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::IStartSeekSongControllerProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerLocalActivePlayerFacade/Factory _activeLocalPlayerFactory
GlobalNamespace::MultiplayerLocalActivePlayerFacade::Factory*& GlobalNamespace::MultiplayerPlayersManager::dyn__activeLocalPlayerFactory() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__activeLocalPlayerFactory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeLocalPlayerFactory"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLocalActivePlayerFacade::Factory**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerLocalInactivePlayerFacade/Factory _inactiveLocalPlayerFactory
GlobalNamespace::MultiplayerLocalInactivePlayerFacade::Factory*& GlobalNamespace::MultiplayerPlayersManager::dyn__inactiveLocalPlayerFactory() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__inactiveLocalPlayerFactory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inactiveLocalPlayerFactory"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLocalInactivePlayerFacade::Factory**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerConnectedPlayerFacade/Factory _connectedPlayerFactory
GlobalNamespace::MultiplayerConnectedPlayerFacade::Factory*& GlobalNamespace::MultiplayerPlayersManager::dyn__connectedPlayerFactory() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__connectedPlayerFactory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayerFactory"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerConnectedPlayerFacade::Factory**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,MultiplayerConnectedPlayerFacade> _connectedPlayerControllersMap
System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerConnectedPlayerFacade*>*& GlobalNamespace::MultiplayerPlayersManager::dyn__connectedPlayerControllersMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__connectedPlayerControllersMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayerControllersMap"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerConnectedPlayerFacade*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,System.Single> _connectedPlayerCenterFacingRotationsMap
System::Collections::Generic::Dictionary_2<::Il2CppString*, float>*& GlobalNamespace::MultiplayerPlayersManager::dyn__connectedPlayerCenterFacingRotationsMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__connectedPlayerCenterFacingRotationsMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayerCenterFacingRotationsMap"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<::Il2CppString*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IReadOnlyList`1<IConnectedPlayer> _allActiveAtGameStartPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>*& GlobalNamespace::MultiplayerPlayersManager::dyn__allActiveAtGameStartPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::dyn__allActiveAtGameStartPlayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allActiveAtGameStartPlayers"))->offset;
  return *reinterpret_cast<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerPlayersManager.get_playerSpawningFinished
bool GlobalNamespace::MultiplayerPlayersManager::get_playerSpawningFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_playerSpawningFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playerSpawningFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.set_playerSpawningFinished
void GlobalNamespace::MultiplayerPlayersManager::set_playerSpawningFinished(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::set_playerSpawningFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_playerSpawningFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.get_allActiveAtGameStartPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::MultiplayerPlayersManager::get_allActiveAtGameStartPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_allActiveAtGameStartPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allActiveAtGameStartPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.get_localPlayerStartSeekSongController
GlobalNamespace::IStartSeekSongControllerProvider* GlobalNamespace::MultiplayerPlayersManager::get_localPlayerStartSeekSongController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_localPlayerStartSeekSongController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerStartSeekSongController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IStartSeekSongControllerProvider*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.get_activeLocalPlayerFacade
GlobalNamespace::MultiplayerLocalActivePlayerFacade* GlobalNamespace::MultiplayerPlayersManager::get_activeLocalPlayerFacade() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_activeLocalPlayerFacade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeLocalPlayerFacade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerLocalActivePlayerFacade*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.get_inactivePlayerFacade
GlobalNamespace::MultiplayerLocalInactivePlayerFacade* GlobalNamespace::MultiplayerPlayersManager::get_inactivePlayerFacade() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_inactivePlayerFacade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inactivePlayerFacade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerLocalInactivePlayerFacade*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.get_localPlayerTransform
UnityEngine::Transform* GlobalNamespace::MultiplayerPlayersManager::get_localPlayerTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::get_localPlayerTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.add_playerSpawningDidFinishEvent
void GlobalNamespace::MultiplayerPlayersManager::add_playerSpawningDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::add_playerSpawningDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerSpawningDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.remove_playerSpawningDidFinishEvent
void GlobalNamespace::MultiplayerPlayersManager::remove_playerSpawningDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::remove_playerSpawningDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerSpawningDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.add_didSwitchPlayerToInactiveEvent
void GlobalNamespace::MultiplayerPlayersManager::add_didSwitchPlayerToInactiveEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::add_didSwitchPlayerToInactiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSwitchPlayerToInactiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.remove_didSwitchPlayerToInactiveEvent
void GlobalNamespace::MultiplayerPlayersManager::remove_didSwitchPlayerToInactiveEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::remove_didSwitchPlayerToInactiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSwitchPlayerToInactiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.add_playerDidFinishEvent
void GlobalNamespace::MultiplayerPlayersManager::add_playerDidFinishEvent(System::Action_1<GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::add_playerDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.remove_playerDidFinishEvent
void GlobalNamespace::MultiplayerPlayersManager::remove_playerDidFinishEvent(System::Action_1<GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::remove_playerDidFinishEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.add_playerNetworkDidFailedEvent
void GlobalNamespace::MultiplayerPlayersManager::add_playerNetworkDidFailedEvent(System::Action_1<GlobalNamespace::PlayerNetworkFailReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::add_playerNetworkDidFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.remove_playerNetworkDidFailedEvent
void GlobalNamespace::MultiplayerPlayersManager::remove_playerNetworkDidFailedEvent(System::Action_1<GlobalNamespace::PlayerNetworkFailReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::remove_playerNetworkDidFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerPlayersManager.SpawnPlayers
void GlobalNamespace::MultiplayerPlayersManager::SpawnPlayers(GlobalNamespace::MultiplayerPlayerStartState localPlayerStartState, System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* allActiveAtGameStartPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::SpawnPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPlayerStartState), ::il2cpp_utils::ExtractType(allActiveAtGameStartPlayers)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, localPlayerStartState, allActiveAtGameStartPlayers);
}
// Autogenerated method: MultiplayerPlayersManager.TryGetConnectedPlayerController
bool GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedPlayerController(::Il2CppString* userId, ByRef<GlobalNamespace::MultiplayerConnectedPlayerFacade*> connectedPlayerController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedPlayerController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetConnectedPlayerController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerConnectedPlayerFacade*&>()})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, userId, byref(connectedPlayerController));
}
// Autogenerated method: MultiplayerPlayersManager.TryGetConnectedCenterFacingRotation
bool GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedCenterFacingRotation(::Il2CppString* userId, ByRef<float> centerFacingRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedCenterFacingRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetConnectedCenterFacingRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, userId, byref(centerFacingRotation));
}
// Autogenerated method: MultiplayerPlayersManager.SwitchLocalPlayerToInactive
void GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchLocalPlayerToInactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.ReportLocalPlayerNetworkDidFailed
void GlobalNamespace::MultiplayerPlayersManager::ReportLocalPlayerNetworkDidFailed(GlobalNamespace::PlayerNetworkFailReason failReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::ReportLocalPlayerNetworkDidFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportLocalPlayerNetworkDidFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(failReason)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, failReason);
}
// Autogenerated method: MultiplayerPlayersManager.SwitchLocalPlayerToInactiveCoroutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactiveCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactiveCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchLocalPlayerToInactiveCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager.BindPlayerFactories
void GlobalNamespace::MultiplayerPlayersManager::BindPlayerFactories(GlobalNamespace::MultiplayerPlayerLayout layout) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::BindPlayerFactories");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindPlayerFactories", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layout)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, layout);
}
// Autogenerated method: MultiplayerPlayersManager.HandlePlayerDidFinish
void GlobalNamespace::MultiplayerPlayersManager::HandlePlayerDidFinish(GlobalNamespace::MultiplayerLevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::HandlePlayerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, levelCompletionResults);
}
// Autogenerated method: MultiplayerPlayersManager.HandlePlayerNetworkDidFailed
void GlobalNamespace::MultiplayerPlayersManager::HandlePlayerNetworkDidFailed(GlobalNamespace::PlayerNetworkFailReason failReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::HandlePlayerNetworkDidFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerNetworkDidFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(failReason)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, failReason);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51
#include "GlobalNamespace/MultiplayerPlayersManager_-SwitchLocalPlayerToInactiveCoroutine-d__51.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int& GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
::Il2CppObject*& GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerPlayersManager <>4__this
GlobalNamespace::MultiplayerPlayersManager*& GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51.MoveNext
bool GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPlayersManager/<SwitchLocalPlayerToInactiveCoroutine>d__51.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPositionDisplay
#include "GlobalNamespace/MultiplayerPositionDisplay.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshPro _text
TMPro::TextMeshPro*& GlobalNamespace::MultiplayerPositionDisplay::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<TMPro::TextMeshPro**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _normalColor
UnityEngine::Color& GlobalNamespace::MultiplayerPositionDisplay::dyn__normalColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__normalColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_normalColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _leadingColor
UnityEngine::Color& GlobalNamespace::MultiplayerPositionDisplay::dyn__leadingColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__leadingColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leadingColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _failedColor
UnityEngine::Color& GlobalNamespace::MultiplayerPositionDisplay::dyn__failedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__failedColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failedColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeInDuration
float& GlobalNamespace::MultiplayerPositionDisplay::dyn__fadeInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__fadeInDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _crossFadeDuration
float& GlobalNamespace::MultiplayerPositionDisplay::dyn__crossFadeDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__crossFadeDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_crossFadeDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeOutDuration
float& GlobalNamespace::MultiplayerPositionDisplay::dyn__fadeOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__fadeOutDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeOutDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerScoreProvider _scoreProvider
GlobalNamespace::MultiplayerScoreProvider*& GlobalNamespace::MultiplayerPositionDisplay::dyn__scoreProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__scoreProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerPositionDisplay::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _wasFirst
bool& GlobalNamespace::MultiplayerPositionDisplay::dyn__wasFirst() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__wasFirst");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_wasFirst"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isFailed
bool& GlobalNamespace::MultiplayerPositionDisplay::dyn__isFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__isFailed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isFailed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _updatingColor
bool& GlobalNamespace::MultiplayerPositionDisplay::dyn__updatingColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__updatingColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updatingColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _startColor
UnityEngine::Color& GlobalNamespace::MultiplayerPositionDisplay::dyn__startColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__startColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _targetColor
UnityEngine::Color& GlobalNamespace::MultiplayerPositionDisplay::dyn__targetColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__targetColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _colorAnimationStartTime
float& GlobalNamespace::MultiplayerPositionDisplay::dyn__colorAnimationStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__colorAnimationStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorAnimationStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _colorAnimationStartDuration
float& GlobalNamespace::MultiplayerPositionDisplay::dyn__colorAnimationStartDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::dyn__colorAnimationStartDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorAnimationStartDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerPositionDisplay.Start
void GlobalNamespace::MultiplayerPositionDisplay::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.OnDestroy
void GlobalNamespace::MultiplayerPositionDisplay::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.Update
void GlobalNamespace::MultiplayerPositionDisplay::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.UpdateColors
void GlobalNamespace::MultiplayerPositionDisplay::UpdateColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::UpdateColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.UpdatePosition
void GlobalNamespace::MultiplayerPositionDisplay::UpdatePosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::UpdatePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.HandlePlayerFailed
void GlobalNamespace::MultiplayerPositionDisplay::HandlePlayerFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::HandlePlayerFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerPositionDisplay.HandleFirstPlayerDidChange
void GlobalNamespace::MultiplayerPositionDisplay::HandleFirstPlayerDidChange(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::HandleFirstPlayerDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFirstPlayerDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, obj);
}
// Autogenerated method: MultiplayerPositionDisplay.ChangeColor
void GlobalNamespace::MultiplayerPositionDisplay::ChangeColor(UnityEngine::Color toColor, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::ChangeColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toColor), ::il2cpp_utils::ExtractType(duration)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, toColor, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPsPlusFeatureNotifier
#include "GlobalNamespace/MultiplayerPsPlusFeatureNotifier.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerResultsAvatarController
#include "GlobalNamespace/MultiplayerResultsAvatarController.hpp"
// Including type: AvatarVisualController
#include "GlobalNamespace/AvatarVisualController.hpp"
// Including type: MultiplayerAvatarPoseController
#include "GlobalNamespace/MultiplayerAvatarPoseController.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private AvatarVisualController _avatarVisualController
GlobalNamespace::AvatarVisualController*& GlobalNamespace::MultiplayerResultsAvatarController::dyn__avatarVisualController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsAvatarController::dyn__avatarVisualController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_avatarVisualController"))->offset;
  return *reinterpret_cast<GlobalNamespace::AvatarVisualController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerAvatarPoseController _multiplayerAvatarPoseController
GlobalNamespace::MultiplayerAvatarPoseController*& GlobalNamespace::MultiplayerResultsAvatarController::dyn__multiplayerAvatarPoseController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsAvatarController::dyn__multiplayerAvatarPoseController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerAvatarPoseController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerAvatarPoseController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerResultsAvatarController.SetScale
void GlobalNamespace::MultiplayerResultsAvatarController::SetScale(float scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsAvatarController::SetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, scale);
}
// Autogenerated method: MultiplayerResultsAvatarController.Setup
void GlobalNamespace::MultiplayerResultsAvatarController::Setup(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsAvatarController::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, connectedPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: MultiplayerBadgesProvider
#include "GlobalNamespace/MultiplayerBadgesProvider.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.String _gameId
::Il2CppString*& GlobalNamespace::MultiplayerResultsData::dyn__gameId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::dyn__gameId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameId"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayerResultsData _localPlayerResultData
GlobalNamespace::MultiplayerPlayerResultsData*& GlobalNamespace::MultiplayerResultsData::dyn__localPlayerResultData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::dyn__localPlayerResultData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerResultData"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayerResultsData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<MultiplayerPlayerResultsData> _otherPlayersData
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>*& GlobalNamespace::MultiplayerResultsData::dyn__otherPlayersData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::dyn__otherPlayersData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_otherPlayersData"))->offset;
  return *reinterpret_cast<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<MultiplayerPlayerResultsData> _allPlayersSortedData
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>*& GlobalNamespace::MultiplayerResultsData::dyn__allPlayersSortedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::dyn__allPlayersSortedData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allPlayersSortedData"))->offset;
  return *reinterpret_cast<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerResultsData.get_gameId
::Il2CppString* GlobalNamespace::MultiplayerResultsData::get_gameId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::get_gameId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerResultsData.get_localPlayerResultData
GlobalNamespace::MultiplayerPlayerResultsData* GlobalNamespace::MultiplayerResultsData::get_localPlayerResultData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::get_localPlayerResultData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerResultData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerPlayerResultsData*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerResultsData.get_otherPlayersData
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* GlobalNamespace::MultiplayerResultsData::get_otherPlayersData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::get_otherPlayersData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherPlayersData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerResultsData.get_allPlayersSortedData
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* GlobalNamespace::MultiplayerResultsData::get_allPlayersSortedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsData::get_allPlayersSortedData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allPlayersSortedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerResultsPyramidView
#include "GlobalNamespace/MultiplayerResultsPyramidView.hpp"
// Including type: MultiplayerOffsetPositionByLocalPlayerPosition
#include "GlobalNamespace/MultiplayerOffsetPositionByLocalPlayerPosition.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: MultiplayerResultsPyramidViewAvatar/Factory
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar_Factory.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MultiplayerOffsetPositionByLocalPlayerPosition _multiplayerOffsetByLocalPlayerPosition
GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition*& GlobalNamespace::MultiplayerResultsPyramidView::dyn__multiplayerOffsetByLocalPlayerPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::dyn__multiplayerOffsetByLocalPlayerPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerOffsetByLocalPlayerPosition"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] _spawnPoints
::ArrayW<UnityEngine::Transform*>& GlobalNamespace::MultiplayerResultsPyramidView::dyn__spawnPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::dyn__spawnPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnPoints"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _spawnPointsParent
UnityEngine::Transform*& GlobalNamespace::MultiplayerResultsPyramidView::dyn__spawnPointsParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::dyn__spawnPointsParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnPointsParent"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _evenCountOffset
float& GlobalNamespace::MultiplayerResultsPyramidView::dyn__evenCountOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::dyn__evenCountOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_evenCountOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerResultsPyramidViewAvatar/Factory _avatarsFactory
GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Factory*& GlobalNamespace::MultiplayerResultsPyramidView::dyn__avatarsFactory() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::dyn__avatarsFactory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_avatarsFactory"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Factory**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,MultiplayerResultsPyramidViewAvatar> _avatarsDictionary
System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerResultsPyramidViewAvatar*>*& GlobalNamespace::MultiplayerResultsPyramidView::dyn__avatarsDictionary() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::dyn__avatarsDictionary");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_avatarsDictionary"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerResultsPyramidViewAvatar*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] _resultAvatarDirectors
::ArrayW<UnityEngine::GameObject*>& GlobalNamespace::MultiplayerResultsPyramidView::dyn__resultAvatarDirectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::dyn__resultAvatarDirectors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resultAvatarDirectors"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] _badgeTimelines
::ArrayW<UnityEngine::GameObject*>& GlobalNamespace::MultiplayerResultsPyramidView::dyn__badgeTimelines() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::dyn__badgeTimelines");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeTimelines"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerResultsPyramidViewAvatar _anyResultsAvatar
GlobalNamespace::MultiplayerResultsPyramidViewAvatar*& GlobalNamespace::MultiplayerResultsPyramidView::dyn__anyResultsAvatar() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::dyn__anyResultsAvatar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_anyResultsAvatar"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerResultsPyramidViewAvatar**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerResultsPyramidView.get_resultAvatarDirectors
::ArrayW<UnityEngine::GameObject*> GlobalNamespace::MultiplayerResultsPyramidView::get_resultAvatarDirectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::get_resultAvatarDirectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultAvatarDirectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::ArrayW<UnityEngine::GameObject*>, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerResultsPyramidView.get_badgeTimelines
::ArrayW<UnityEngine::GameObject*> GlobalNamespace::MultiplayerResultsPyramidView::get_badgeTimelines() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::get_badgeTimelines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_badgeTimelines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::ArrayW<UnityEngine::GameObject*>, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerResultsPyramidView.PrespawnAvatars
void GlobalNamespace::MultiplayerResultsPyramidView::PrespawnAvatars(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* activePlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::PrespawnAvatars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrespawnAvatars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(activePlayers)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, activePlayers);
}
// Autogenerated method: MultiplayerResultsPyramidView.SetupResults
void GlobalNamespace::MultiplayerResultsPyramidView::SetupResults(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, UnityEngine::Transform* badgeStartTransform, UnityEngine::Transform* badgeMidTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::SetupResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsData), ::il2cpp_utils::ExtractType(badgeStartTransform), ::il2cpp_utils::ExtractType(badgeMidTransform)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, resultsData, badgeStartTransform, badgeMidTransform);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerResultsPyramidViewAvatar
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar.hpp"
// Including type: MultiplayerResultsPyramidViewAvatar/Factory
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar_Factory.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: GhostDuplicationEffect
#include "GlobalNamespace/GhostDuplicationEffect.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: Tweening.Vector3Tween
#include "Tweening/Vector3Tween.hpp"
// Including type: Tweening.FloatTween
#include "Tweening/FloatTween.hpp"
// Including type: Tweening.ColorTween
#include "Tweening/ColorTween.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableDirector _badgeDirector
UnityEngine::Playables::PlayableDirector*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeDirector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeDirector"))->offset;
  return *reinterpret_cast<UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _ghostFirstTrackName
::Il2CppString*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__ghostFirstTrackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__ghostFirstTrackName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ghostFirstTrackName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _ghostSecondTrackName
::Il2CppString*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__ghostSecondTrackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__ghostSecondTrackName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ghostSecondTrackName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _standWithAvatarTransform
UnityEngine::Transform*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__standWithAvatarTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__standWithAvatarTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_standWithAvatarTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _perPositionRotation
float& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__perPositionRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__perPositionRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_perPositionRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _localPlayerColor
UnityEngine::Color& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__localPlayerColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__localPlayerColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _positionText
TMPro::TextMeshProUGUI*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__positionText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__positionText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positionText"))->offset;
  return *reinterpret_cast<TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _nameText
TMPro::TextMeshProUGUI*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__nameText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__nameText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nameText"))->offset;
  return *reinterpret_cast<TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ImageView _nameBackground
HMUI::ImageView*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__nameBackground() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__nameBackground");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nameBackground"))->offset;
  return *reinterpret_cast<HMUI::ImageView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CanvasGroup _badgeCanvas
UnityEngine::CanvasGroup*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeCanvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeCanvas"))->offset;
  return *reinterpret_cast<UnityEngine::CanvasGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI[] _badgeTitles
::ArrayW<TMPro::TextMeshProUGUI*>& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeTitles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeTitles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeTitles"))->offset;
  return *reinterpret_cast<::ArrayW<TMPro::TextMeshProUGUI*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ImageView[] _badgeImages
::ArrayW<HMUI::ImageView*>& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeImages() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeImages");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeImages"))->offset;
  return *reinterpret_cast<::ArrayW<HMUI::ImageView*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _badgeSubtitleText
TMPro::TextMeshProUGUI*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeSubtitleText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeSubtitleText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeSubtitleText"))->offset;
  return *reinterpret_cast<TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CanvasGroup _badgeSubtitleCanvas
UnityEngine::CanvasGroup*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeSubtitleCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeSubtitleCanvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeSubtitleCanvas"))->offset;
  return *reinterpret_cast<UnityEngine::CanvasGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GhostDuplicationEffect _ghostDuplicationEffect
GlobalNamespace::GhostDuplicationEffect*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__ghostDuplicationEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__ghostDuplicationEffect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ghostDuplicationEffect"))->offset;
  return *reinterpret_cast<GlobalNamespace::GhostDuplicationEffect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GhostDuplicationEffect/GhostEffectParams _ghostAppear
GlobalNamespace::GhostDuplicationEffect::GhostEffectParams& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__ghostAppear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__ghostAppear");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ghostAppear"))->offset;
  return *reinterpret_cast<GlobalNamespace::GhostDuplicationEffect::GhostEffectParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GhostDuplicationEffect/GhostEffectParams _ghostReceive
GlobalNamespace::GhostDuplicationEffect::GhostEffectParams& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__ghostReceive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__ghostReceive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ghostReceive"))->offset;
  return *reinterpret_cast<GlobalNamespace::GhostDuplicationEffect::GhostEffectParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HMUI.ImageView _trophyImage
HMUI::ImageView*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__trophyImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__trophyImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trophyImage"))->offset;
  return *reinterpret_cast<HMUI::ImageView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _firstPlaceTrophy
UnityEngine::Sprite*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__firstPlaceTrophy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__firstPlaceTrophy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstPlaceTrophy"))->offset;
  return *reinterpret_cast<UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _secondPlaceTrophy
UnityEngine::Sprite*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__secondPlaceTrophy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__secondPlaceTrophy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_secondPlaceTrophy"))->offset;
  return *reinterpret_cast<UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Sprite _thirdPlaceTrophy
UnityEngine::Sprite*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__thirdPlaceTrophy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__thirdPlaceTrophy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thirdPlaceTrophy"))->offset;
  return *reinterpret_cast<UnityEngine::Sprite**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _firstPlaceColor
UnityEngine::Color& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__firstPlaceColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__firstPlaceColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstPlaceColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _personalBestVisual
UnityEngine::GameObject*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__personalBestVisual() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__personalBestVisual");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_personalBestVisual"))->offset;
  return *reinterpret_cast<UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerDataModel _playerDataModel
GlobalNamespace::PlayerDataModel*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__playerDataModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__playerDataModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerDataModel"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayerDataModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IDifficultyBeatmap _difficultyBeatmap
GlobalNamespace::IDifficultyBeatmap*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__difficultyBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__difficultyBeatmap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_difficultyBeatmap"))->offset;
  return *reinterpret_cast<GlobalNamespace::IDifficultyBeatmap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Vector3Tween _riseTween
Tweening::Vector3Tween*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__riseTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__riseTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_riseTween"))->offset;
  return *reinterpret_cast<Tweening::Vector3Tween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Vector3Tween _avatarRiseTween
Tweening::Vector3Tween*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__avatarRiseTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__avatarRiseTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_avatarRiseTween"))->offset;
  return *reinterpret_cast<Tweening::Vector3Tween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Vector3Tween _badgePositionTween
Tweening::Vector3Tween*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgePositionTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgePositionTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgePositionTween"))->offset;
  return *reinterpret_cast<Tweening::Vector3Tween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.FloatTween _badgeOpacityTween
Tweening::FloatTween*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeOpacityTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__badgeOpacityTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badgeOpacityTween"))->offset;
  return *reinterpret_cast<Tweening::FloatTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.FloatTween _nameOpacityTween
Tweening::FloatTween*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__nameOpacityTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__nameOpacityTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nameOpacityTween"))->offset;
  return *reinterpret_cast<Tweening::FloatTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Vector3Tween _namePositionTween
Tweening::Vector3Tween*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__namePositionTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__namePositionTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_namePositionTween"))->offset;
  return *reinterpret_cast<Tweening::Vector3Tween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.ColorTween _localGlowTween
Tweening::ColorTween*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__localGlowTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__localGlowTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localGlowTween"))->offset;
  return *reinterpret_cast<Tweening::ColorTween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Vector3Tween _titleMakingSpaceForBadgeTween
Tweening::Vector3Tween*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__titleMakingSpaceForBadgeTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__titleMakingSpaceForBadgeTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_titleMakingSpaceForBadgeTween"))->offset;
  return *reinterpret_cast<Tweening::Vector3Tween**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _originalBadgeLocalPos
UnityEngine::Vector3& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__originalBadgeLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__originalBadgeLocalPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalBadgeLocalPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerResultsPyramidViewAvatar.get_badgeDirector
UnityEngine::Playables::PlayableDirector* GlobalNamespace::MultiplayerResultsPyramidViewAvatar::get_badgeDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::get_badgeDirector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_badgeDirector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableDirector*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerResultsPyramidViewAvatar.Awake
void GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerResultsPyramidViewAvatar.Setup
void GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Setup(GlobalNamespace::MultiplayerPlayerResultsData* resultData, int position, int playerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultData), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(playerCount)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, resultData, position, playerCount);
}
// Autogenerated method: MultiplayerResultsPyramidViewAvatar.SetupBadgeTimeline
void GlobalNamespace::MultiplayerResultsPyramidViewAvatar::SetupBadgeTimeline(UnityEngine::Transform* startTransform, UnityEngine::Transform* midTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::SetupBadgeTimeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupBadgeTimeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTransform), ::il2cpp_utils::ExtractType(midTransform)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, startTransform, midTransform);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerResultsPyramidViewAvatar/Factory
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar_Factory.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerResultsPyramidViewAvatarInstaller
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatarInstaller.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerResultsPyramidViewAvatarInstaller::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatarInstaller::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerResultsPyramidViewAvatarInstaller.InstallBindings
void GlobalNamespace::MultiplayerResultsPyramidViewAvatarInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatarInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: MultiplayerScoreProvider/<>c
#include "GlobalNamespace/MultiplayerScoreProvider_--c.hpp"
// Including type: MultiplayerScoreProvider/<>c__DisplayClass18_0
#include "GlobalNamespace/MultiplayerScoreProvider_--c__DisplayClass18_0.hpp"
// Including type: IScoreSyncStateManager
#include "GlobalNamespace/IScoreSyncStateManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IScoreSyncStateManager _scoreSyncStateManager
GlobalNamespace::IScoreSyncStateManager*& GlobalNamespace::MultiplayerScoreProvider::dyn__scoreSyncStateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::dyn__scoreSyncStateManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreSyncStateManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IScoreSyncStateManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerScoreProvider/RankedPlayer <firstPlayer>k__BackingField
GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*& GlobalNamespace::MultiplayerScoreProvider::dyn_$firstPlayer$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::dyn_$firstPlayer$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<firstPlayer>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<MultiplayerScoreProvider/RankedPlayer> firstPlayerDidChangeEvent
System::Action_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>*& GlobalNamespace::MultiplayerScoreProvider::dyn_firstPlayerDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::dyn_firstPlayerDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "firstPlayerDidChangeEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _sharedOffsetSyncTime
float& GlobalNamespace::MultiplayerScoreProvider::dyn__sharedOffsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::dyn__sharedOffsetSyncTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sharedOffsetSyncTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<MultiplayerScoreProvider/RankedPlayer> _rankedPlayers
System::Collections::Generic::List_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>*& GlobalNamespace::MultiplayerScoreProvider::dyn__rankedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::dyn__rankedPlayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rankedPlayers"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,MultiplayerScoreProvider/RankedPlayer> _players
System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>*& GlobalNamespace::MultiplayerScoreProvider::dyn__players() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::dyn__players");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_players"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerScoreProvider.get_scoresAvailable
bool GlobalNamespace::MultiplayerScoreProvider::get_scoresAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::get_scoresAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scoresAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider.get_firstPlayer
GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* GlobalNamespace::MultiplayerScoreProvider::get_firstPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::get_firstPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider.set_firstPlayer
void GlobalNamespace::MultiplayerScoreProvider::set_firstPlayer(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::set_firstPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_firstPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerScoreProvider.get_rankedPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* GlobalNamespace::MultiplayerScoreProvider::get_rankedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::get_rankedPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rankedPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider.add_firstPlayerDidChangeEvent
void GlobalNamespace::MultiplayerScoreProvider::add_firstPlayerDidChangeEvent(System::Action_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::add_firstPlayerDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_firstPlayerDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerScoreProvider.remove_firstPlayerDidChangeEvent
void GlobalNamespace::MultiplayerScoreProvider::remove_firstPlayerDidChangeEvent(System::Action_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::remove_firstPlayerDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_firstPlayerDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerScoreProvider.Update
void GlobalNamespace::MultiplayerScoreProvider::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider.TryGetScore
bool GlobalNamespace::MultiplayerScoreProvider::TryGetScore(::Il2CppString* userId, ByRef<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::TryGetScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*&>()})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, userId, byref(data));
}
// Autogenerated method: MultiplayerScoreProvider.GetPositionOfPlayer
int GlobalNamespace::MultiplayerScoreProvider::GetPositionOfPlayer(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::GetPositionOfPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPositionOfPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, userId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: MultiplayerSyncState`3
#include "GlobalNamespace/MultiplayerSyncState_3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerSyncState`3<StandardScoreSyncState,StandardScoreSyncState/Score,System.Int32> _multiplayerSyncState
GlobalNamespace::MultiplayerSyncState_3<GlobalNamespace::StandardScoreSyncState, GlobalNamespace::StandardScoreSyncState_Score, int>*& GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::dyn__multiplayerSyncState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::dyn__multiplayerSyncState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSyncState"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerSyncState_3<GlobalNamespace::StandardScoreSyncState, GlobalNamespace::StandardScoreSyncState_Score, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerScoreProvider _scoreSyncManager
GlobalNamespace::MultiplayerScoreProvider*& GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::dyn__scoreSyncManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::dyn__scoreSyncManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreSyncManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_offsetSyncTime
float GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_offsetSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_lastScoreTime
float GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_lastScoreTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_lastScoreTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastScoreTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_score
int GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_score() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_score");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_score", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_isConnected
bool GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_isActiveOrFinished
bool GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isActiveOrFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isActiveOrFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActiveOrFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_isFailed
bool GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_wasActiveAtLevelStart
bool GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_wasActiveAtLevelStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_wasActiveAtLevelStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wasActiveAtLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_isMe
bool GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_isMe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_userId
::Il2CppString* GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.get_userName
::Il2CppString* GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::get_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/RankedPlayer.CompareTo
int GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::CompareTo(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::RankedPlayer::CompareTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerScoreProvider/<>c
#include "GlobalNamespace/MultiplayerScoreProvider_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerScoreProvider/<>c <>9
GlobalNamespace::MultiplayerScoreProvider::$$c* GlobalNamespace::MultiplayerScoreProvider::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerScoreProvider::$$c*>("", "MultiplayerScoreProvider/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerScoreProvider/<>c <>9
void GlobalNamespace::MultiplayerScoreProvider::$$c::_set_$$9(GlobalNamespace::MultiplayerScoreProvider::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerScoreProvider/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MultiplayerScoreProvider/RankedPlayer,System.Boolean> <>9__16_0
System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>* GlobalNamespace::MultiplayerScoreProvider::$$c::_get_$$9__16_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::_get_$$9__16_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>*>("", "MultiplayerScoreProvider/<>c", "<>9__16_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MultiplayerScoreProvider/RankedPlayer,System.Boolean> <>9__16_0
void GlobalNamespace::MultiplayerScoreProvider::$$c::_set_$$9__16_0(System::Func_2<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::_set_$$9__16_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerScoreProvider/<>c", "<>9__16_0", value)));
}
// Autogenerated method: MultiplayerScoreProvider/<>c..cctor
void GlobalNamespace::MultiplayerScoreProvider::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerScoreProvider/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerScoreProvider/<>c.<Update>b__16_0
bool GlobalNamespace::MultiplayerScoreProvider::$$c::$Update$b__16_0(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c::<Update>b__16_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Update>b__16_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, p);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreProvider/<>c__DisplayClass18_0
#include "GlobalNamespace/MultiplayerScoreProvider_--c__DisplayClass18_0.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String userId
::Il2CppString*& GlobalNamespace::MultiplayerScoreProvider::$$c__DisplayClass18_0::dyn_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c__DisplayClass18_0::dyn_userId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userId"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerScoreProvider/<>c__DisplayClass18_0.<GetPositionOfPlayer>b__0
bool GlobalNamespace::MultiplayerScoreProvider::$$c__DisplayClass18_0::$GetPositionOfPlayer$b__0(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreProvider::$$c__DisplayClass18_0::<GetPositionOfPlayer>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetPositionOfPlayer>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, p);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreRingItem
#include "GlobalNamespace/MultiplayerScoreRingItem.hpp"
// Including type: MultiplayerScoreRingItem/Pool
#include "GlobalNamespace/MultiplayerScoreRingItem_Pool.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: Tweening.TimeTweeningManager
#include "Tweening/TimeTweeningManager.hpp"
// Including type: Tweening.Tween`1
#include "Tweening/Tween_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _scoreText
TMPro::TextMeshProUGUI*& GlobalNamespace::MultiplayerScoreRingItem::dyn__scoreText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::dyn__scoreText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreText"))->offset;
  return *reinterpret_cast<TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI _nameText
TMPro::TextMeshProUGUI*& GlobalNamespace::MultiplayerScoreRingItem::dyn__nameText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::dyn__nameText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nameText"))->offset;
  return *reinterpret_cast<TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.TimeTweeningManager _tweeningManager
Tweening::TimeTweeningManager*& GlobalNamespace::MultiplayerScoreRingItem::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<Tweening::TimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<UnityEngine.Color> _nameColorTween
Tweening::Tween_1<UnityEngine::Color>*& GlobalNamespace::MultiplayerScoreRingItem::dyn__nameColorTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::dyn__nameColorTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nameColorTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<UnityEngine.Color> _scoreColorTween
Tweening::Tween_1<UnityEngine::Color>*& GlobalNamespace::MultiplayerScoreRingItem::dyn__scoreColorTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::dyn__scoreColorTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreColorTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerScoreRingItem.Awake
void GlobalNamespace::MultiplayerScoreRingItem::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingItem.OnDestroy
void GlobalNamespace::MultiplayerScoreRingItem::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingItem.SetPositionAndRotation
void GlobalNamespace::MultiplayerScoreRingItem::SetPositionAndRotation(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::SetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, position, rotation);
}
// Autogenerated method: MultiplayerScoreRingItem.AnimateColors
void GlobalNamespace::MultiplayerScoreRingItem::AnimateColors(UnityEngine::Color nameColor, UnityEngine::Color scoreColor, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::AnimateColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameColor), ::il2cpp_utils::ExtractType(scoreColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, nameColor, scoreColor, duration, easeType);
}
// Autogenerated method: MultiplayerScoreRingItem.SetName
void GlobalNamespace::MultiplayerScoreRingItem::SetName(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::SetName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, text);
}
// Autogenerated method: MultiplayerScoreRingItem.SetScore
void GlobalNamespace::MultiplayerScoreRingItem::SetScore(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::SetScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, text);
}
// Autogenerated method: MultiplayerScoreRingItem.<Awake>b__6_0
void GlobalNamespace::MultiplayerScoreRingItem::$Awake$b__6_0(UnityEngine::Color val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::<Awake>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: MultiplayerScoreRingItem.<Awake>b__6_1
void GlobalNamespace::MultiplayerScoreRingItem::$Awake$b__6_1(UnityEngine::Color val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingItem::<Awake>b__6_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__6_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerScoreRingItem/Pool
#include "GlobalNamespace/MultiplayerScoreRingItem_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerScoreRingManager
#include "GlobalNamespace/MultiplayerScoreRingManager.hpp"
// Including type: MultiplayerScoreRingItem/Pool
#include "GlobalNamespace/MultiplayerScoreRingItem_Pool.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: MultiplayerController/State
#include "GlobalNamespace/MultiplayerController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _delayBetweenScoreUpdates
float& GlobalNamespace::MultiplayerScoreRingManager::dyn__delayBetweenScoreUpdates() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__delayBetweenScoreUpdates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_delayBetweenScoreUpdates"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _centerDistanceOffset
float& GlobalNamespace::MultiplayerScoreRingManager::dyn__centerDistanceOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__centerDistanceOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_centerDistanceOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerController _multiplayerController
GlobalNamespace::MultiplayerController*& GlobalNamespace::MultiplayerScoreRingManager::dyn__multiplayerController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__multiplayerController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayersManager _multiplayerPlayersManager
GlobalNamespace::MultiplayerPlayersManager*& GlobalNamespace::MultiplayerScoreRingManager::dyn__multiplayerPlayersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__multiplayerPlayersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerPlayersManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerScoreRingManager::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectSpawnCenter _spawnCenter
GlobalNamespace::BeatmapObjectSpawnCenter*& GlobalNamespace::MultiplayerScoreRingManager::dyn__spawnCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__spawnCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnCenter"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapObjectSpawnCenter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLayoutProvider _layoutProvider
GlobalNamespace::MultiplayerLayoutProvider*& GlobalNamespace::MultiplayerScoreRingManager::dyn__layoutProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__layoutProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layoutProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLayoutProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerScoreProvider _scoreProvider
GlobalNamespace::MultiplayerScoreProvider*& GlobalNamespace::MultiplayerScoreRingManager::dyn__scoreProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__scoreProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerScoreRingItem/Pool _scoreRingItemPool
GlobalNamespace::MultiplayerScoreRingItem::Pool*& GlobalNamespace::MultiplayerScoreRingManager::dyn__scoreRingItemPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__scoreRingItemPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreRingItemPool"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreRingItem::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,MultiplayerScoreRingItem> _scoreRingItems
System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerScoreRingItem*>*& GlobalNamespace::MultiplayerScoreRingManager::dyn__scoreRingItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__scoreRingItems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreRingItems"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerScoreRingItem*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<IConnectedPlayer> _allActivePlayers
System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>*& GlobalNamespace::MultiplayerScoreRingManager::dyn__allActivePlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__allActivePlayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allActivePlayers"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _currentlyScoreUpdateIndex
int& GlobalNamespace::MultiplayerScoreRingManager::dyn__currentlyScoreUpdateIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__currentlyScoreUpdateIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentlyScoreUpdateIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timeSinceLastScoreUpdate
float& GlobalNamespace::MultiplayerScoreRingManager::dyn__timeSinceLastScoreUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__timeSinceLastScoreUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeSinceLastScoreUpdate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerScoreRingItem _firstPlayerItem
GlobalNamespace::MultiplayerScoreRingItem*& GlobalNamespace::MultiplayerScoreRingManager::dyn__firstPlayerItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__firstPlayerItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstPlayerItem"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreRingItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _spawnCenterDistanceFound
bool& GlobalNamespace::MultiplayerScoreRingManager::dyn__spawnCenterDistanceFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__spawnCenterDistanceFound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spawnCenterDistanceFound"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _playersSpawned
bool& GlobalNamespace::MultiplayerScoreRingManager::dyn__playersSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::dyn__playersSpawned");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playersSpawned"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerScoreRingManager.Start
void GlobalNamespace::MultiplayerScoreRingManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.OnDestroy
void GlobalNamespace::MultiplayerScoreRingManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.Update
void GlobalNamespace::MultiplayerScoreRingManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.UpdateScore
void GlobalNamespace::MultiplayerScoreRingManager::UpdateScore(GlobalNamespace::IConnectedPlayer* playerToUpdate) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::UpdateScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerToUpdate)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, playerToUpdate);
}
// Autogenerated method: MultiplayerScoreRingManager.AnimateColorsForPlayer
void GlobalNamespace::MultiplayerScoreRingManager::AnimateColorsForPlayer(::Il2CppString* userId, UnityEngine::Color nameColor, UnityEngine::Color scoreColor, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::AnimateColorsForPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateColorsForPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(nameColor), ::il2cpp_utils::ExtractType(scoreColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, userId, nameColor, scoreColor, duration, easeType);
}
// Autogenerated method: MultiplayerScoreRingManager.GetScoreRingItem
GlobalNamespace::MultiplayerScoreRingItem* GlobalNamespace::MultiplayerScoreRingManager::GetScoreRingItem(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::GetScoreRingItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScoreRingItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerScoreRingItem*, false>(___instance_arg, ___internal__method, userId);
}
// Autogenerated method: MultiplayerScoreRingManager.GetScoreRingItems
::ArrayW<UnityEngine::GameObject*> GlobalNamespace::MultiplayerScoreRingManager::GetScoreRingItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::GetScoreRingItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScoreRingItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::ArrayW<UnityEngine::GameObject*>, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.AnimateColorsForAllPlayers
void GlobalNamespace::MultiplayerScoreRingManager::AnimateColorsForAllPlayers(UnityEngine::Color nameColor, UnityEngine::Color scoreColor, float duration, Tweening::EaseType easeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::AnimateColorsForAllPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateColorsForAllPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameColor), ::il2cpp_utils::ExtractType(scoreColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, nameColor, scoreColor, duration, easeType);
}
// Autogenerated method: MultiplayerScoreRingManager.SetPlayerToFailedState
void GlobalNamespace::MultiplayerScoreRingManager::SetPlayerToFailedState(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::SetPlayerToFailedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerToFailedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player);
}
// Autogenerated method: MultiplayerScoreRingManager.TrySpawnTexts
void GlobalNamespace::MultiplayerScoreRingManager::TrySpawnTexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::TrySpawnTexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySpawnTexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.SpawnTexts
void GlobalNamespace::MultiplayerScoreRingManager::SpawnTexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::SpawnTexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnTexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.HandleStateChanged
void GlobalNamespace::MultiplayerScoreRingManager::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, state);
}
// Autogenerated method: MultiplayerScoreRingManager.HandleSpawnCenterDistanceWasFound
void GlobalNamespace::MultiplayerScoreRingManager::HandleSpawnCenterDistanceWasFound(float spawnCenterDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::HandleSpawnCenterDistanceWasFound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpawnCenterDistanceWasFound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spawnCenterDistance)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, spawnCenterDistance);
}
// Autogenerated method: MultiplayerScoreRingManager.HandlePlayerSpawningDidFinish
void GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerSpawningDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerSpawningDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerSpawningDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerScoreRingManager.HandlePlayerStateChanged
void GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerStateChanged(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player);
}
// Autogenerated method: MultiplayerScoreRingManager.HandlePlayerDisconnected
void GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::HandlePlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSongEntitlementsStatus
#include "GlobalNamespace/MultiplayerSongEntitlementsStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerSongEntitlementsStatus Ok
GlobalNamespace::MultiplayerSongEntitlementsStatus GlobalNamespace::MultiplayerSongEntitlementsStatus::_get_Ok() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSongEntitlementsStatus::_get_Ok");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSongEntitlementsStatus>("", "MultiplayerSongEntitlementsStatus", "Ok"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSongEntitlementsStatus Ok
void GlobalNamespace::MultiplayerSongEntitlementsStatus::_set_Ok(GlobalNamespace::MultiplayerSongEntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSongEntitlementsStatus::_set_Ok");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSongEntitlementsStatus", "Ok", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerSongEntitlementsStatus Invalid
GlobalNamespace::MultiplayerSongEntitlementsStatus GlobalNamespace::MultiplayerSongEntitlementsStatus::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSongEntitlementsStatus::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSongEntitlementsStatus>("", "MultiplayerSongEntitlementsStatus", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSongEntitlementsStatus Invalid
void GlobalNamespace::MultiplayerSongEntitlementsStatus::_set_Invalid(GlobalNamespace::MultiplayerSongEntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSongEntitlementsStatus::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSongEntitlementsStatus", "Invalid", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& GlobalNamespace::MultiplayerSongEntitlementsStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSongEntitlementsStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerVerticalPlayerMovementManager
#include "GlobalNamespace/MultiplayerVerticalPlayerMovementManager.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: MultiplayerScoreProvider/RankedPlayer
#include "GlobalNamespace/MultiplayerScoreProvider_RankedPlayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MultiplayerConnectedPlayerFacade
#include "GlobalNamespace/MultiplayerConnectedPlayerFacade.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _movementRange
float& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__movementRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__movementRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_movementRange"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _duelMovementRange
float& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__duelMovementRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__duelMovementRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_duelMovementRange"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxMoveSpeedMetersPerSecond
float& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__maxMoveSpeedMetersPerSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__maxMoveSpeedMetersPerSecond");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxMoveSpeedMetersPerSecond"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _accelerationMetersPerSecondSquared
float& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__accelerationMetersPerSecondSquared() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__accelerationMetersPerSecondSquared");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_accelerationMetersPerSecondSquared"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _decelerationMetersPerSecondSquared
float& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__decelerationMetersPerSecondSquared() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__decelerationMetersPerSecondSquared");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_decelerationMetersPerSecondSquared"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minScoreDifference
float& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__minScoreDifference() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__minScoreDifference");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minScoreDifference"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerPlayersManager _multiplayerPlayersManager
GlobalNamespace::MultiplayerPlayersManager*& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__multiplayerPlayersManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__multiplayerPlayersManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerPlayersManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerPlayersManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerScoreProvider _scoreProvider
GlobalNamespace::MultiplayerScoreProvider*& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__scoreProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__scoreProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerScoreProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLayoutProvider _layoutProvider
GlobalNamespace::MultiplayerLayoutProvider*& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__layoutProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__layoutProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layoutProvider"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLayoutProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerController _multiplayerController
GlobalNamespace::MultiplayerController*& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__multiplayerController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__multiplayerController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<MultiplayerScoreProvider/RankedPlayer> _reusablePlayersList
System::Collections::Generic::List_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>*& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__reusablePlayersList() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__reusablePlayersList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reusablePlayersList"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<MultiplayerConnectedPlayerFacade,System.Single> _currentSpeedsDictionary
System::Collections::Generic::Dictionary_2<GlobalNamespace::MultiplayerConnectedPlayerFacade*, float>*& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__currentSpeedsDictionary() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__currentSpeedsDictionary");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentSpeedsDictionary"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<GlobalNamespace::MultiplayerConnectedPlayerFacade*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastFrameBaseScore
float& GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__lastFrameBaseScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::dyn__lastFrameBaseScore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFrameBaseScore"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerVerticalPlayerMovementManager.Start
void GlobalNamespace::MultiplayerVerticalPlayerMovementManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerVerticalPlayerMovementManager.OnDestroy
void GlobalNamespace::MultiplayerVerticalPlayerMovementManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerVerticalPlayerMovementManager.Update
void GlobalNamespace::MultiplayerVerticalPlayerMovementManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerVerticalPlayerMovementManager.HandleStateChanged
void GlobalNamespace::MultiplayerVerticalPlayerMovementManager::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScaleAnimator
#include "GlobalNamespace/ScaleAnimator.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Tweening.TimeTweeningManager
#include "Tweening/TimeTweeningManager.hpp"
// Including type: Tweening.Tween`1
#include "Tweening/Tween_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _displayedScale
float& GlobalNamespace::ScaleAnimator::dyn__displayedScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::dyn__displayedScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_displayedScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _targetTransform
UnityEngine::Transform*& GlobalNamespace::ScaleAnimator::dyn__targetTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::dyn__targetTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_targetTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Tweening.TimeTweeningManager _tweeningManager
Tweening::TimeTweeningManager*& GlobalNamespace::ScaleAnimator::dyn__tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::dyn__tweeningManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweeningManager"))->offset;
  return *reinterpret_cast<Tweening::TimeTweeningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<System.Single> _scaleUpTween
Tweening::Tween_1<float>*& GlobalNamespace::ScaleAnimator::dyn__scaleUpTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::dyn__scaleUpTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scaleUpTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Tweening.Tween`1<System.Single> _scaleDownTween
Tweening::Tween_1<float>*& GlobalNamespace::ScaleAnimator::dyn__scaleDownTween() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::dyn__scaleDownTween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scaleDownTween"))->offset;
  return *reinterpret_cast<Tweening::Tween_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _initialized
bool& GlobalNamespace::ScaleAnimator::dyn__initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::dyn__initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScaleAnimator.OnDestroy
void GlobalNamespace::ScaleAnimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: ScaleAnimator.InitIfNeeded
void GlobalNamespace::ScaleAnimator::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: ScaleAnimator.SetPositionAndRotation
void GlobalNamespace::ScaleAnimator::SetPositionAndRotation(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::SetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, position, rotation);
}
// Autogenerated method: ScaleAnimator.HideInstant
void GlobalNamespace::ScaleAnimator::HideInstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::HideInstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideInstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: ScaleAnimator.ShowInstant
void GlobalNamespace::ScaleAnimator::ShowInstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::ShowInstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowInstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: ScaleAnimator.Animate
void GlobalNamespace::ScaleAnimator::Animate(bool show, float duration, Tweening::EaseType easeType, float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::Animate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Animate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(show), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(easeType), ::il2cpp_utils::ExtractType(delay)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, show, duration, easeType, delay);
}
// Autogenerated method: ScaleAnimator.<InitIfNeeded>b__7_0
void GlobalNamespace::ScaleAnimator::$InitIfNeeded$b__7_0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::<InitIfNeeded>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: ScaleAnimator.<InitIfNeeded>b__7_2
void GlobalNamespace::ScaleAnimator::$InitIfNeeded$b__7_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::<InitIfNeeded>b__7_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__7_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: ScaleAnimator.<InitIfNeeded>b__7_1
void GlobalNamespace::ScaleAnimator::$InitIfNeeded$b__7_1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::<InitIfNeeded>b__7_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__7_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, val);
}
// Autogenerated method: ScaleAnimator.<InitIfNeeded>b__7_3
void GlobalNamespace::ScaleAnimator::$InitIfNeeded$b__7_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleAnimator::<InitIfNeeded>b__7_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitIfNeeded>b__7_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
// Including type: IMultiplayerObservable
#include "GlobalNamespace/IMultiplayerObservable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMultiplayerSpectatingSpot.get_isMain
bool GlobalNamespace::IMultiplayerSpectatingSpot::get_isMain() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::get_isMain");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IMultiplayerSpectatingSpot.get_observable
GlobalNamespace::IMultiplayerObservable* GlobalNamespace::IMultiplayerSpectatingSpot::get_observable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::get_observable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_observable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerObservable*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IMultiplayerSpectatingSpot.get_transform
UnityEngine::Transform* GlobalNamespace::IMultiplayerSpectatingSpot::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IMultiplayerSpectatingSpot.get_spotName
::Il2CppString* GlobalNamespace::IMultiplayerSpectatingSpot::get_spotName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::get_spotName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spotName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IMultiplayerSpectatingSpot.add_hasBeenRemovedEvent
void GlobalNamespace::IMultiplayerSpectatingSpot::add_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::add_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSpectatingSpot.remove_hasBeenRemovedEvent
void GlobalNamespace::IMultiplayerSpectatingSpot::remove_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::remove_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSpectatingSpot.SetIsObserved
void GlobalNamespace::IMultiplayerSpectatingSpot::SetIsObserved(bool isObserved) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSpectatingSpot::SetIsObserved");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsObserved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isObserved)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, isObserved);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerConnectedPlayerSpectatingSpot
#include "GlobalNamespace/MultiplayerConnectedPlayerSpectatingSpot.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: MultiplayerSpectatingSpotManager
#include "GlobalNamespace/MultiplayerSpectatingSpotManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IMultiplayerObservable
#include "GlobalNamespace/IMultiplayerObservable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly IConnectedPlayer _connectedPlayer
GlobalNamespace::IConnectedPlayer*& GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn__connectedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn__connectedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPlayer"))->offset;
  return *reinterpret_cast<GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager*& GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerSpectatingSpotManager _spectatingSpotManager
GlobalNamespace::MultiplayerSpectatingSpotManager*& GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn__spectatingSpotManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn__spectatingSpotManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spectatingSpotManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerSpectatingSpotManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<IMultiplayerSpectatingSpot> hasBeenRemovedEvent
System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*& GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn_hasBeenRemovedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn_hasBeenRemovedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasBeenRemovedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Boolean> isObservedChangedEvent
System::Action_1<bool>*& GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn_isObservedChangedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn_isObservedChangedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isObservedChangedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IMultiplayerObservable <observable>k__BackingField
GlobalNamespace::IMultiplayerObservable*& GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn_$observable$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn_$observable$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<observable>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerObservable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _playerFailed
bool& GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn__playerFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::dyn__playerFailed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerFailed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.get_observable
GlobalNamespace::IMultiplayerObservable* GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_observable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_observable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_observable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerObservable*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.set_observable
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::set_observable(GlobalNamespace::IMultiplayerObservable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::set_observable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_observable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.get_spotName
::Il2CppString* GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_spotName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_spotName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spotName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.get_isMain
bool GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_isMain() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::get_isMain");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.IMultiplayerSpectatingSpot.get_transform
UnityEngine::Transform* GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::IMultiplayerSpectatingSpot_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::IMultiplayerSpectatingSpot.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IMultiplayerSpectatingSpot.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.add_hasBeenRemovedEvent
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::add_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::add_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.remove_hasBeenRemovedEvent
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::remove_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::remove_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.add_isObservedChangedEvent
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::add_isObservedChangedEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::add_isObservedChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_isObservedChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.remove_isObservedChangedEvent
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::remove_isObservedChangedEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::remove_isObservedChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_isObservedChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.Start
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.OnDestroy
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.SetIsObserved
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::SetIsObserved(bool isObserved) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::SetIsObserved");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsObserved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isObserved)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, isObserved);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.ReloadBasedOnPlayerCurrentState
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::ReloadBasedOnPlayerCurrentState(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::ReloadBasedOnPlayerCurrentState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadBasedOnPlayerCurrentState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, connectedPlayer);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.HandlePlayerStateChanged
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerStateChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, connectedPlayer);
}
// Autogenerated method: MultiplayerConnectedPlayerSpectatingSpot.HandlePlayerDisconnected
void GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, connectedPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerEnvironmentSpectatingSpot
#include "GlobalNamespace/MultiplayerEnvironmentSpectatingSpot.hpp"
// Including type: MultiplayerSpectatingSpotManager
#include "GlobalNamespace/MultiplayerSpectatingSpotManager.hpp"
// Including type: MultiplayerActivePlayersTimeOffsetAverage
#include "GlobalNamespace/MultiplayerActivePlayersTimeOffsetAverage.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IMultiplayerObservable
#include "GlobalNamespace/IMultiplayerObservable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _preferredSpectatingSpot
bool& GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn__preferredSpectatingSpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn__preferredSpectatingSpot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_preferredSpectatingSpot"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _displaySpotNumber
bool& GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn__displaySpotNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn__displaySpotNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_displaySpotNumber"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _spotNumber
int& GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn__spotNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn__spotNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spotNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerSpectatingSpotManager _spectatingSpotManager
GlobalNamespace::MultiplayerSpectatingSpotManager*& GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn__spectatingSpotManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn__spectatingSpotManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spectatingSpotManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerSpectatingSpotManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerActivePlayersTimeOffsetAverage _activePlayersTimeOffsetAverage
GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage*& GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn__activePlayersTimeOffsetAverage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn__activePlayersTimeOffsetAverage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activePlayersTimeOffsetAverage"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<IMultiplayerSpectatingSpot> hasBeenRemovedEvent
System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*& GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn_hasBeenRemovedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::dyn_hasBeenRemovedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasBeenRemovedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.get_observable
GlobalNamespace::IMultiplayerObservable* GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_observable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_observable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_observable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerObservable*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.get_spotName
::Il2CppString* GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_spotName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_spotName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spotName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.get_isMain
bool GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_isMain() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::get_isMain");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.IMultiplayerSpectatingSpot.get_transform
UnityEngine::Transform* GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::IMultiplayerSpectatingSpot_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::IMultiplayerSpectatingSpot.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IMultiplayerSpectatingSpot.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.add_hasBeenRemovedEvent
void GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::add_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::add_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.remove_hasBeenRemovedEvent
void GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::remove_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::remove_hasBeenRemovedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hasBeenRemovedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.Start
void GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.OnDisable
void GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerEnvironmentSpectatingSpot.SetIsObserved
void GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::SetIsObserved(bool isObserved) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::SetIsObserved");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsObserved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isObserved)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, isObserved);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSpectatingSpotManager
#include "GlobalNamespace/MultiplayerSpectatingSpotManager.hpp"
// Including type: MultiplayerSpectatingSpotManager/<>c
#include "GlobalNamespace/MultiplayerSpectatingSpotManager_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<IMultiplayerSpectatingSpot> _spectatingSpots
System::Collections::Generic::List_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*& GlobalNamespace::MultiplayerSpectatingSpotManager::dyn__spectatingSpots() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::dyn__spectatingSpots");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spectatingSpots"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::IMultiplayerSpectatingSpot*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<IMultiplayerSpectatingSpot,System.Int32> _spotIndexBySpot
System::Collections::Generic::Dictionary_2<GlobalNamespace::IMultiplayerSpectatingSpot*, int>*& GlobalNamespace::MultiplayerSpectatingSpotManager::dyn__spotIndexBySpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::dyn__spotIndexBySpot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spotIndexBySpot"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<GlobalNamespace::IMultiplayerSpectatingSpot*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.get_spectatingSpots
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* GlobalNamespace::MultiplayerSpectatingSpotManager::get_spectatingSpots() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::get_spectatingSpots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spectatingSpots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.get_defaultSpot
GlobalNamespace::IMultiplayerSpectatingSpot* GlobalNamespace::MultiplayerSpectatingSpotManager::get_defaultSpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::get_defaultSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerSpectatingSpot*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.RegisterSpectatingSpot
void GlobalNamespace::MultiplayerSpectatingSpotManager::RegisterSpectatingSpot(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::RegisterSpectatingSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterSpectatingSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, spectatingSpot);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.GetAdjacentSpot
GlobalNamespace::IMultiplayerSpectatingSpot* GlobalNamespace::MultiplayerSpectatingSpotManager::GetAdjacentSpot(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot, int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::GetAdjacentSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAdjacentSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot), ::il2cpp_utils::ExtractType(offset)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerSpectatingSpot*, false>(___instance_arg, ___internal__method, spectatingSpot, offset);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.GetIndexBySpot
int GlobalNamespace::MultiplayerSpectatingSpotManager::GetIndexBySpot(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::GetIndexBySpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexBySpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, spectatingSpot);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.UpdateIndexBySpotDictionary
void GlobalNamespace::MultiplayerSpectatingSpotManager::UpdateIndexBySpotDictionary() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::UpdateIndexBySpotDictionary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateIndexBySpotDictionary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotManager.SpotOnHasBeenRemoved
void GlobalNamespace::MultiplayerSpectatingSpotManager::SpotOnHasBeenRemoved(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::SpotOnHasBeenRemoved");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpotOnHasBeenRemoved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, spectatingSpot);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSpectatingSpotManager/<>c
#include "GlobalNamespace/MultiplayerSpectatingSpotManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerSpectatingSpotManager/<>c <>9
GlobalNamespace::MultiplayerSpectatingSpotManager::$$c* GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSpectatingSpotManager::$$c*>("", "MultiplayerSpectatingSpotManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerSpectatingSpotManager/<>c <>9
void GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_set_$$9(GlobalNamespace::MultiplayerSpectatingSpotManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerSpectatingSpotManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IMultiplayerSpectatingSpot,System.Boolean> <>9__3_0
System::Func_2<GlobalNamespace::IMultiplayerSpectatingSpot*, bool>* GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::IMultiplayerSpectatingSpot*, bool>*>("", "MultiplayerSpectatingSpotManager/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IMultiplayerSpectatingSpot,System.Boolean> <>9__3_0
void GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_set_$$9__3_0(System::Func_2<GlobalNamespace::IMultiplayerSpectatingSpot*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerSpectatingSpotManager/<>c", "<>9__3_0", value)));
}
// Autogenerated method: MultiplayerSpectatingSpotManager/<>c..cctor
void GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerSpectatingSpotManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotManager/<>c.<get_defaultSpot>b__3_0
bool GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::$get_defaultSpot$b__3_0(GlobalNamespace::IMultiplayerSpectatingSpot* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotManager::$$c::<get_defaultSpot>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_defaultSpot>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, s);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSpectatorController
#include "GlobalNamespace/MultiplayerSpectatorController.hpp"
// Including type: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17
#include "GlobalNamespace/MultiplayerSpectatorController_-SwitchToDefaultSpotWithFadeCoroutine-d__17.hpp"
// Including type: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18
#include "GlobalNamespace/MultiplayerSpectatorController_-SwitchToDefaultSpotCoroutine-d__18.hpp"
// Including type: MultiplayerSpectatingSpotManager
#include "GlobalNamespace/MultiplayerSpectatingSpotManager.hpp"
// Including type: MultiplayerLocalInactivePlayerSongSyncController
#include "GlobalNamespace/MultiplayerLocalInactivePlayerSongSyncController.hpp"
// Including type: MultiplayerController/State
#include "GlobalNamespace/MultiplayerController.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerSpectatingSpotManager _spotManager
GlobalNamespace::MultiplayerSpectatingSpotManager*& GlobalNamespace::MultiplayerSpectatorController::dyn__spotManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::dyn__spotManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spotManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerSpectatingSpotManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerLocalInactivePlayerSongSyncController _songController
GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController*& GlobalNamespace::MultiplayerSpectatorController::dyn__songController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::dyn__songController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_songController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerController _multiplayerController
GlobalNamespace::MultiplayerController*& GlobalNamespace::MultiplayerSpectatorController::dyn__multiplayerController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::dyn__multiplayerController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerController"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly FadeInOutController _fadeInOutController
GlobalNamespace::FadeInOutController*& GlobalNamespace::MultiplayerSpectatorController::dyn__fadeInOutController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::dyn__fadeInOutController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInOutController"))->offset;
  return *reinterpret_cast<GlobalNamespace::FadeInOutController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<IMultiplayerSpectatingSpot> spectatingSpotDidChangeEvent
System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*& GlobalNamespace::MultiplayerSpectatorController::dyn_spectatingSpotDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::dyn_spectatingSpotDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spectatingSpotDidChangeEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _transform
UnityEngine::Transform*& GlobalNamespace::MultiplayerSpectatorController::dyn__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::dyn__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_transform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IMultiplayerSpectatingSpot _currentSpot
GlobalNamespace::IMultiplayerSpectatingSpot*& GlobalNamespace::MultiplayerSpectatorController::dyn__currentSpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::dyn__currentSpot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentSpot"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSpectatingSpot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerSpectatorController.get_currentSpot
GlobalNamespace::IMultiplayerSpectatingSpot* GlobalNamespace::MultiplayerSpectatorController::get_currentSpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::get_currentSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerSpectatingSpot*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.add_spectatingSpotDidChangeEvent
void GlobalNamespace::MultiplayerSpectatorController::add_spectatingSpotDidChangeEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::add_spectatingSpotDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_spectatingSpotDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerSpectatorController.remove_spectatingSpotDidChangeEvent
void GlobalNamespace::MultiplayerSpectatorController::remove_spectatingSpotDidChangeEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::remove_spectatingSpotDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_spectatingSpotDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: MultiplayerSpectatorController.Awake
void GlobalNamespace::MultiplayerSpectatorController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.Start
void GlobalNamespace::MultiplayerSpectatorController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.OnDestroy
void GlobalNamespace::MultiplayerSpectatorController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToDefaultSpot
void GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToDefaultSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToPrev
void GlobalNamespace::MultiplayerSpectatorController::SwitchToPrev() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToPrev");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToPrev", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToNext
void GlobalNamespace::MultiplayerSpectatorController::SwitchToNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToNext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToDefaultSpotWithFadeCoroutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotWithFadeCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotWithFadeCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToDefaultSpotWithFadeCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToDefaultSpotCoroutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToDefaultSpotCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController.SwitchToSpectatingSpot
void GlobalNamespace::MultiplayerSpectatorController::SwitchToSpectatingSpot(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::SwitchToSpectatingSpot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToSpectatingSpot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, spectatingSpot);
}
// Autogenerated method: MultiplayerSpectatorController.HandleStateChanged
void GlobalNamespace::MultiplayerSpectatorController::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17
#include "GlobalNamespace/MultiplayerSpectatorController_-SwitchToDefaultSpotWithFadeCoroutine-d__17.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int& GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
::Il2CppObject*& GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerSpectatorController <>4__this
GlobalNamespace::MultiplayerSpectatorController*& GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerSpectatorController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private IMultiplayerSpectatingSpot <defaultSpot>5__2
GlobalNamespace::IMultiplayerSpectatingSpot*& GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::dyn_$defaultSpot$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::dyn_$defaultSpot$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<defaultSpot>5__2"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSpectatingSpot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17.MoveNext
bool GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotWithFadeCoroutine>d__17.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18
#include "GlobalNamespace/MultiplayerSpectatorController_-SwitchToDefaultSpotCoroutine-d__18.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
int& GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
::Il2CppObject*& GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerSpectatorController <>4__this
GlobalNamespace::MultiplayerSpectatorController*& GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerSpectatorController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18.MoveNext
bool GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatorController/<SwitchToDefaultSpotCoroutine>d__18.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: GameEnergyCounter/InitData
#include "GlobalNamespace/GameEnergyCounter_InitData.hpp"
// Including type: SaberClashChecker
#include "GlobalNamespace/SaberClashChecker.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: PlayerHeadAndObstacleInteraction
#include "GlobalNamespace/PlayerHeadAndObstacleInteraction.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _badNoteEnergyDrain
float& GlobalNamespace::GameEnergyCounter::dyn__badNoteEnergyDrain() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__badNoteEnergyDrain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_badNoteEnergyDrain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _missNoteEnergyDrain
float& GlobalNamespace::GameEnergyCounter::dyn__missNoteEnergyDrain() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__missNoteEnergyDrain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missNoteEnergyDrain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _hitBombEnergyDrain
float& GlobalNamespace::GameEnergyCounter::dyn__hitBombEnergyDrain() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__hitBombEnergyDrain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hitBombEnergyDrain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _goodNoteEnergyCharge
float& GlobalNamespace::GameEnergyCounter::dyn__goodNoteEnergyCharge() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__goodNoteEnergyCharge");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_goodNoteEnergyCharge"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _obstacleEnergyDrainPerSecond
float& GlobalNamespace::GameEnergyCounter::dyn__obstacleEnergyDrainPerSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__obstacleEnergyDrainPerSecond");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obstacleEnergyDrainPerSecond"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _batteryLives
int& GlobalNamespace::GameEnergyCounter::dyn__batteryLives() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__batteryLives");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_batteryLives"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameEnergyCounter/InitData _initData
GlobalNamespace::GameEnergyCounter::InitData*& GlobalNamespace::GameEnergyCounter::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameEnergyCounter::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberClashChecker _saberClashChecker
GlobalNamespace::SaberClashChecker*& GlobalNamespace::GameEnergyCounter::dyn__saberClashChecker() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__saberClashChecker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberClashChecker"))->offset;
  return *reinterpret_cast<GlobalNamespace::SaberClashChecker**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::GameEnergyCounter::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerHeadAndObstacleInteraction _playerHeadAndObstacleInteraction
GlobalNamespace::PlayerHeadAndObstacleInteraction*& GlobalNamespace::GameEnergyCounter::dyn__playerHeadAndObstacleInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__playerHeadAndObstacleInteraction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerHeadAndObstacleInteraction"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayerHeadAndObstacleInteraction**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action didInitEvent
System::Action*& GlobalNamespace::GameEnergyCounter::dyn_didInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn_didInitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didInitEvent"))->offset;
  return *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action gameEnergyDidReach0Event
System::Action*& GlobalNamespace::GameEnergyCounter::dyn_gameEnergyDidReach0Event() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn_gameEnergyDidReach0Event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameEnergyDidReach0Event"))->offset;
  return *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Single> gameEnergyDidChangeEvent
System::Action_1<float>*& GlobalNamespace::GameEnergyCounter::dyn_gameEnergyDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn_gameEnergyDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameEnergyDidChangeEvent"))->offset;
  return *reinterpret_cast<System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <energy>k__BackingField
float& GlobalNamespace::GameEnergyCounter::dyn_$energy$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn_$energy$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<energy>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GameplayModifiers/EnergyType <energyType>k__BackingField
GlobalNamespace::GameplayModifiers::EnergyType& GlobalNamespace::GameEnergyCounter::dyn_$energyType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn_$energyType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<energyType>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayModifiers::EnergyType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <noFail>k__BackingField
bool& GlobalNamespace::GameEnergyCounter::dyn_$noFail$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn_$noFail$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noFail>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <instaFail>k__BackingField
bool& GlobalNamespace::GameEnergyCounter::dyn_$instaFail$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn_$instaFail$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<instaFail>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <failOnSaberClash>k__BackingField
bool& GlobalNamespace::GameEnergyCounter::dyn_$failOnSaberClash$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn_$failOnSaberClash$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<failOnSaberClash>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isInitialized
bool& GlobalNamespace::GameEnergyCounter::dyn__isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _didReach0Energy
bool& GlobalNamespace::GameEnergyCounter::dyn__didReach0Energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__didReach0Energy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_didReach0Energy"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _nextFrameEnergyChange
float& GlobalNamespace::GameEnergyCounter::dyn__nextFrameEnergyChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::dyn__nextFrameEnergyChange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nextFrameEnergyChange"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GameEnergyCounter.get_isInitialized
bool GlobalNamespace::GameEnergyCounter::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_isInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.get_energy
float GlobalNamespace::GameEnergyCounter::get_energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_energy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.set_energy
void GlobalNamespace::GameEnergyCounter::set_energy(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::set_energy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_energy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.get_batteryEnergy
int GlobalNamespace::GameEnergyCounter::get_batteryEnergy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_batteryEnergy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_batteryEnergy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.get_batteryLives
int GlobalNamespace::GameEnergyCounter::get_batteryLives() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_batteryLives");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_batteryLives", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.get_energyType
GlobalNamespace::GameplayModifiers::EnergyType GlobalNamespace::GameEnergyCounter::get_energyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_energyType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers::EnergyType, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.set_energyType
void GlobalNamespace::GameEnergyCounter::set_energyType(GlobalNamespace::GameplayModifiers::EnergyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::set_energyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_energyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.get_noFail
bool GlobalNamespace::GameEnergyCounter::get_noFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_noFail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.set_noFail
void GlobalNamespace::GameEnergyCounter::set_noFail(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::set_noFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_noFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.get_instaFail
bool GlobalNamespace::GameEnergyCounter::get_instaFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_instaFail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instaFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.set_instaFail
void GlobalNamespace::GameEnergyCounter::set_instaFail(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::set_instaFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_instaFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.get_failOnSaberClash
bool GlobalNamespace::GameEnergyCounter::get_failOnSaberClash() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::get_failOnSaberClash");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_failOnSaberClash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.set_failOnSaberClash
void GlobalNamespace::GameEnergyCounter::set_failOnSaberClash(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::set_failOnSaberClash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_failOnSaberClash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.add_didInitEvent
void GlobalNamespace::GameEnergyCounter::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::add_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.remove_didInitEvent
void GlobalNamespace::GameEnergyCounter::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::remove_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.add_gameEnergyDidReach0Event
void GlobalNamespace::GameEnergyCounter::add_gameEnergyDidReach0Event(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::add_gameEnergyDidReach0Event");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameEnergyDidReach0Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.remove_gameEnergyDidReach0Event
void GlobalNamespace::GameEnergyCounter::remove_gameEnergyDidReach0Event(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::remove_gameEnergyDidReach0Event");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameEnergyDidReach0Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.add_gameEnergyDidChangeEvent
void GlobalNamespace::GameEnergyCounter::add_gameEnergyDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::add_gameEnergyDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameEnergyDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.remove_gameEnergyDidChangeEvent
void GlobalNamespace::GameEnergyCounter::remove_gameEnergyDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::remove_gameEnergyDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameEnergyDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: GameEnergyCounter.Start
void GlobalNamespace::GameEnergyCounter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.OnDestroy
void GlobalNamespace::GameEnergyCounter::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.LateUpdate
void GlobalNamespace::GameEnergyCounter::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: GameEnergyCounter.HandleNoteWasCut
void GlobalNamespace::GameEnergyCounter::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, ByRef<GlobalNamespace::NoteCutInfo> noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, noteController, byref(noteCutInfo));
}
// Autogenerated method: GameEnergyCounter.HandleNoteWasMissed
void GlobalNamespace::GameEnergyCounter::HandleNoteWasMissed(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, noteController);
}
// Autogenerated method: GameEnergyCounter.ProcessEnergyChange
void GlobalNamespace::GameEnergyCounter::ProcessEnergyChange(float energyChange) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::ProcessEnergyChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEnergyChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(energyChange)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, energyChange);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameEnergyCounter/InitData
#include "GlobalNamespace/GameEnergyCounter_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly GameplayModifiers/EnergyType energyType
GlobalNamespace::GameplayModifiers::EnergyType& GlobalNamespace::GameEnergyCounter::InitData::dyn_energyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::InitData::dyn_energyType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "energyType"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayModifiers::EnergyType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean noFail
bool& GlobalNamespace::GameEnergyCounter::InitData::dyn_noFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::InitData::dyn_noFail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noFail"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean instaFail
bool& GlobalNamespace::GameEnergyCounter::InitData::dyn_instaFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::InitData::dyn_instaFail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instaFail"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean failOnSaberClash
bool& GlobalNamespace::GameEnergyCounter::InitData::dyn_failOnSaberClash() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::InitData::dyn_failOnSaberClash");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "failOnSaberClash"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IGameEnergyCounter
#include "GlobalNamespace/IGameEnergyCounter.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: GameplayModifiers/EnergyType
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IGameEnergyCounter.get_isInitialized
bool GlobalNamespace::IGameEnergyCounter::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_isInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_energy
float GlobalNamespace::IGameEnergyCounter::get_energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_energy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_batteryEnergy
int GlobalNamespace::IGameEnergyCounter::get_batteryEnergy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_batteryEnergy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_batteryEnergy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_batteryLives
int GlobalNamespace::IGameEnergyCounter::get_batteryLives() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_batteryLives");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_batteryLives", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_energyType
GlobalNamespace::GameplayModifiers::EnergyType GlobalNamespace::IGameEnergyCounter::get_energyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_energyType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers::EnergyType, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_noFail
bool GlobalNamespace::IGameEnergyCounter::get_noFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_noFail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_instaFail
bool GlobalNamespace::IGameEnergyCounter::get_instaFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_instaFail");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instaFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.get_failOnSaberClash
bool GlobalNamespace::IGameEnergyCounter::get_failOnSaberClash() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::get_failOnSaberClash");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_failOnSaberClash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: IGameEnergyCounter.add_didInitEvent
void GlobalNamespace::IGameEnergyCounter::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::add_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.remove_didInitEvent
void GlobalNamespace::IGameEnergyCounter::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::remove_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.add_gameEnergyDidReach0Event
void GlobalNamespace::IGameEnergyCounter::add_gameEnergyDidReach0Event(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::add_gameEnergyDidReach0Event");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameEnergyDidReach0Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.remove_gameEnergyDidReach0Event
void GlobalNamespace::IGameEnergyCounter::remove_gameEnergyDidReach0Event(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::remove_gameEnergyDidReach0Event");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameEnergyDidReach0Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.add_gameEnergyDidChangeEvent
void GlobalNamespace::IGameEnergyCounter::add_gameEnergyDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::add_gameEnergyDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameEnergyDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: IGameEnergyCounter.remove_gameEnergyDidChangeEvent
void GlobalNamespace::IGameEnergyCounter::remove_gameEnergyDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameEnergyCounter::remove_gameEnergyDidChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameEnergyDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MoveBackWall
#include "GlobalNamespace/MoveBackWall.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _fadeInRegion
float& GlobalNamespace::MoveBackWall::dyn__fadeInRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MoveBackWall::dyn__fadeInRegion");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fadeInRegion"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer _meshRenderer
UnityEngine::MeshRenderer*& GlobalNamespace::MoveBackWall::dyn__meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MoveBackWall::dyn__meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_meshRenderer"))->offset;
  return *reinterpret_cast<UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
GlobalNamespace::PlayerTransforms*& GlobalNamespace::MoveBackWall::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MoveBackWall::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _thisZ
float& GlobalNamespace::MoveBackWall::dyn__thisZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MoveBackWall::dyn__thisZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thisZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isVisible
bool& GlobalNamespace::MoveBackWall::dyn__isVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MoveBackWall::dyn__isVisible");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isVisible"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _material
UnityEngine::Material*& GlobalNamespace::MoveBackWall::dyn__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MoveBackWall::dyn__material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_material"))->offset;
  return *reinterpret_cast<UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MoveBackWall.Start
void GlobalNamespace::MoveBackWall::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MoveBackWall::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MoveBackWall.Update
void GlobalNamespace::MoveBackWall::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MoveBackWall::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplierValuesRecorder
#include "GlobalNamespace/MultiplierValuesRecorder.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private IScoreController _scoreController
GlobalNamespace::IScoreController*& GlobalNamespace::MultiplierValuesRecorder::dyn__scoreController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::dyn__scoreController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreController"))->offset;
  return *reinterpret_cast<GlobalNamespace::IScoreController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private AudioTimeSyncController _audioTimeSyncController
GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::MultiplierValuesRecorder::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<MultiplierValuesRecorder/MultiplierValue> _multiplierValues
System::Collections::Generic::List_1<GlobalNamespace::MultiplierValuesRecorder::MultiplierValue>*& GlobalNamespace::MultiplierValuesRecorder::dyn__multiplierValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::dyn__multiplierValues");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplierValues"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::MultiplierValuesRecorder::MultiplierValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplierValuesRecorder.get_multiplierValues
System::Collections::Generic::List_1<GlobalNamespace::MultiplierValuesRecorder::MultiplierValue>* GlobalNamespace::MultiplierValuesRecorder::get_multiplierValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::get_multiplierValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplierValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::MultiplierValuesRecorder::MultiplierValue>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplierValuesRecorder.Start
void GlobalNamespace::MultiplierValuesRecorder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplierValuesRecorder.OnDestroy
void GlobalNamespace::MultiplierValuesRecorder::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MultiplierValuesRecorder.HandleScoreControllerMultiplierDidChange
void GlobalNamespace::MultiplierValuesRecorder::HandleScoreControllerMultiplierDidChange(int multiplier, float multiplierProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::HandleScoreControllerMultiplierDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreControllerMultiplierDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplier), ::il2cpp_utils::ExtractType(multiplierProgress)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, multiplier, multiplierProgress);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplierValuesRecorder/MultiplierValue
#include "GlobalNamespace/MultiplierValuesRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 multiplier
int& GlobalNamespace::MultiplierValuesRecorder::MultiplierValue::dyn_multiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::MultiplierValue::dyn_multiplier");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "multiplier"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single time
float& GlobalNamespace::MultiplierValuesRecorder::MultiplierValue::dyn_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplierValuesRecorder::MultiplierValue::dyn_time");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MultiplierValuesRecorder/MultiplierValue..ctor
// ABORTED elsewhere.  GlobalNamespace::MultiplierValuesRecorder::MultiplierValue::MultiplierValue(int multiplier, float time)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerHeadAndObstacleInteraction
#include "GlobalNamespace/PlayerHeadAndObstacleInteraction.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
GlobalNamespace::PlayerTransforms*& GlobalNamespace::PlayerHeadAndObstacleInteraction::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeadAndObstacleInteraction::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectManager _beatmapObjectManager
GlobalNamespace::BeatmapObjectManager*& GlobalNamespace::PlayerHeadAndObstacleInteraction::dyn__beatmapObjectManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeadAndObstacleInteraction::dyn__beatmapObjectManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapObjectManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastFrameNumCheck
int& GlobalNamespace::PlayerHeadAndObstacleInteraction::dyn__lastFrameNumCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeadAndObstacleInteraction::dyn__lastFrameNumCheck");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFrameNumCheck"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<ObstacleController> _intersectingObstacles
System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>*& GlobalNamespace::PlayerHeadAndObstacleInteraction::dyn__intersectingObstacles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeadAndObstacleInteraction::dyn__intersectingObstacles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_intersectingObstacles"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayerHeadAndObstacleInteraction.get_intersectingObstacles
System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* GlobalNamespace::PlayerHeadAndObstacleInteraction::get_intersectingObstacles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeadAndObstacleInteraction::get_intersectingObstacles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intersectingObstacles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerHeadAndObstacleInteraction.GetObstaclesContainingPoint
void GlobalNamespace::PlayerHeadAndObstacleInteraction::GetObstaclesContainingPoint(UnityEngine::Vector3 worldPos, System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* obstacleControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeadAndObstacleInteraction::GetObstaclesContainingPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObstaclesContainingPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPos), ::il2cpp_utils::ExtractType(obstacleControllers)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, worldPos, obstacleControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PrepareLevelCompletionResults
#include "GlobalNamespace/PrepareLevelCompletionResults.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: SaberActivityCounter
#include "GlobalNamespace/SaberActivityCounter.hpp"
// Including type: BeatmapObjectExecutionRatingsRecorder
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder.hpp"
// Including type: MultiplierValuesRecorder
#include "GlobalNamespace/MultiplierValuesRecorder.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: LevelCompletionResults/LevelEndStateType
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: LevelCompletionResults/LevelEndAction
// Already included the same include: GlobalNamespace/LevelCompletionResults.hpp
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GameplayModifiersModelSO _gameplayModifiersModelSO
GlobalNamespace::GameplayModifiersModelSO*& GlobalNamespace::PrepareLevelCompletionResults::dyn__gameplayModifiersModelSO() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::dyn__gameplayModifiersModelSO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayModifiersModelSO"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayModifiersModelSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberActivityCounter _saberActivityCounter
GlobalNamespace::SaberActivityCounter*& GlobalNamespace::PrepareLevelCompletionResults::dyn__saberActivityCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::dyn__saberActivityCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberActivityCounter"))->offset;
  return *reinterpret_cast<GlobalNamespace::SaberActivityCounter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectExecutionRatingsRecorder _beatmapObjectExecutionRatingsRecorder
GlobalNamespace::BeatmapObjectExecutionRatingsRecorder*& GlobalNamespace::PrepareLevelCompletionResults::dyn__beatmapObjectExecutionRatingsRecorder() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::dyn__beatmapObjectExecutionRatingsRecorder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectExecutionRatingsRecorder"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapObjectExecutionRatingsRecorder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplierValuesRecorder _multiplierValuesRecorder
GlobalNamespace::MultiplierValuesRecorder*& GlobalNamespace::PrepareLevelCompletionResults::dyn__multiplierValuesRecorder() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::dyn__multiplierValuesRecorder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplierValuesRecorder"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplierValuesRecorder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IScoreController _scoreController
GlobalNamespace::IScoreController*& GlobalNamespace::PrepareLevelCompletionResults::dyn__scoreController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::dyn__scoreController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreController"))->offset;
  return *reinterpret_cast<GlobalNamespace::IScoreController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameEnergyCounter _gameEnergyCounter
GlobalNamespace::GameEnergyCounter*& GlobalNamespace::PrepareLevelCompletionResults::dyn__gameEnergyCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::dyn__gameEnergyCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameEnergyCounter"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameEnergyCounter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameSongController _gameSongController
GlobalNamespace::GameSongController*& GlobalNamespace::PrepareLevelCompletionResults::dyn__gameSongController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::dyn__gameSongController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameSongController"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameSongController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IReadonlyBeatmapData _beatmapData
GlobalNamespace::IReadonlyBeatmapData*& GlobalNamespace::PrepareLevelCompletionResults::dyn__beatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::dyn__beatmapData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapData"))->offset;
  return *reinterpret_cast<GlobalNamespace::IReadonlyBeatmapData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly AudioTimeSyncController _audioTimeSyncController
GlobalNamespace::AudioTimeSyncController*& GlobalNamespace::PrepareLevelCompletionResults::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<GlobalNamespace::AudioTimeSyncController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly GameplayModifiers _gameplayModifiers
GlobalNamespace::GameplayModifiers*& GlobalNamespace::PrepareLevelCompletionResults::dyn__gameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::dyn__gameplayModifiers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameplayModifiers"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayModifiers**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PrepareLevelCompletionResults.FillLevelCompletionResults
GlobalNamespace::LevelCompletionResults* GlobalNamespace::PrepareLevelCompletionResults::FillLevelCompletionResults(GlobalNamespace::LevelCompletionResults::LevelEndStateType levelEndStateType, GlobalNamespace::LevelCompletionResults::LevelEndAction levelEndAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PrepareLevelCompletionResults::FillLevelCompletionResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillLevelCompletionResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelEndStateType), ::il2cpp_utils::ExtractType(levelEndAction)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LevelCompletionResults*, false>(___instance_arg, ___internal__method, levelEndStateType, levelEndAction);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ShowTextOnGameEventController
#include "GlobalNamespace/ShowTextOnGameEventController.hpp"
// Including type: ShowTextOnGameEventController/EventTextBinding
#include "GlobalNamespace/ShowTextOnGameEventController_EventTextBinding.hpp"
// Including type: TextFadeTransitions
#include "GlobalNamespace/TextFadeTransitions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TextFadeTransitions _textFadeTransitions
GlobalNamespace::TextFadeTransitions*& GlobalNamespace::ShowTextOnGameEventController::dyn__textFadeTransitions() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::dyn__textFadeTransitions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textFadeTransitions"))->offset;
  return *reinterpret_cast<GlobalNamespace::TextFadeTransitions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ShowTextOnGameEventController/EventTextBinding[] _eventTextBindings
::ArrayW<GlobalNamespace::ShowTextOnGameEventController::EventTextBinding*>& GlobalNamespace::ShowTextOnGameEventController::dyn__eventTextBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::dyn__eventTextBindings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventTextBindings"))->offset;
  return *reinterpret_cast<::ArrayW<GlobalNamespace::ShowTextOnGameEventController::EventTextBinding*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ShowTextOnGameEventController.Awake
void GlobalNamespace::ShowTextOnGameEventController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: ShowTextOnGameEventController.OnDestroy
void GlobalNamespace::ShowTextOnGameEventController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShowTextOnGameEventController/EventTextBinding
#include "GlobalNamespace/ShowTextOnGameEventController_EventTextBinding.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: TextFadeTransitions
#include "GlobalNamespace/TextFadeTransitions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Signal _signal
GlobalNamespace::Signal*& GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::dyn__signal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::dyn__signal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signal"))->offset;
  return *reinterpret_cast<GlobalNamespace::Signal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _text
::Il2CppString*& GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TextFadeTransitions _textFadeTransitions
GlobalNamespace::TextFadeTransitions*& GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::dyn__textFadeTransitions() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::dyn__textFadeTransitions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_textFadeTransitions"))->offset;
  return *reinterpret_cast<GlobalNamespace::TextFadeTransitions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ShowTextOnGameEventController/EventTextBinding.Init
void GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::Init(GlobalNamespace::TextFadeTransitions* textFadeTransitions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textFadeTransitions)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, textFadeTransitions);
}
// Autogenerated method: ShowTextOnGameEventController/EventTextBinding.Deinit
void GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::Deinit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::Deinit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deinit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: ShowTextOnGameEventController/EventTextBinding.HandleGameEvent
void GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::HandleGameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowTextOnGameEventController::EventTextBinding::HandleGameEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnRotationProcessor
#include "GlobalNamespace/SpawnRotationProcessor.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _rotation
float& GlobalNamespace::SpawnRotationProcessor::dyn__rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationProcessor::dyn__rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single[] _rotations
::ArrayW<float>& GlobalNamespace::SpawnRotationProcessor::dyn__rotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationProcessor::dyn__rotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotations"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpawnRotationProcessor.get_rotation
float GlobalNamespace::SpawnRotationProcessor::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationProcessor::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SpawnRotationProcessor.ProcessBeatmapEventData
bool GlobalNamespace::SpawnRotationProcessor::ProcessBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationProcessor::ProcessBeatmapEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessBeatmapEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, beatmapEventData);
}
// Autogenerated method: SpawnRotationProcessor.RotationForEventValue
float GlobalNamespace::SpawnRotationProcessor::RotationForEventValue(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationProcessor::RotationForEventValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotationForEventValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method, index);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VariableBpmProcessor
#include "GlobalNamespace/VariableBpmProcessor.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _currentBpm
float& GlobalNamespace::VariableBpmProcessor::dyn__currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VariableBpmProcessor::dyn__currentBpm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentBpm"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VariableBpmProcessor.get_currentBpm
float GlobalNamespace::VariableBpmProcessor::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VariableBpmProcessor::get_currentBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: VariableBpmProcessor.SetBpm
void GlobalNamespace::VariableBpmProcessor::SetBpm(float newBpm) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VariableBpmProcessor::SetBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBpm)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, newBpm);
}
// Autogenerated method: VariableBpmProcessor.ProcessBeatmapEventData
bool GlobalNamespace::VariableBpmProcessor::ProcessBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VariableBpmProcessor::ProcessBeatmapEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessBeatmapEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, beatmapEventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerSpaceConvertor
#include "GlobalNamespace/PlayerSpaceConvertor.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _worldToPlayerSpaceRotation
UnityEngine::Quaternion& GlobalNamespace::PlayerSpaceConvertor::dyn__worldToPlayerSpaceRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpaceConvertor::dyn__worldToPlayerSpaceRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_worldToPlayerSpaceRotation"))->offset;
  return *reinterpret_cast<UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayerSpaceConvertor.get_worldToPlayerSpaceRotation
UnityEngine::Quaternion GlobalNamespace::PlayerSpaceConvertor::get_worldToPlayerSpaceRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpaceConvertor::get_worldToPlayerSpaceRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldToPlayerSpaceRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerSpaceConvertor.Start
void GlobalNamespace::PlayerSpaceConvertor::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpaceConvertor::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _headTransform
UnityEngine::Transform*& GlobalNamespace::PlayerTransforms::dyn__headTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__headTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _originTransform
UnityEngine::Transform*& GlobalNamespace::PlayerTransforms::dyn__originTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__originTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _leftHandTransform
UnityEngine::Transform*& GlobalNamespace::PlayerTransforms::dyn__leftHandTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__leftHandTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftHandTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _rightHandTransform
UnityEngine::Transform*& GlobalNamespace::PlayerTransforms::dyn__rightHandTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__rightHandTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightHandTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _overrideHeadPos
bool& GlobalNamespace::PlayerTransforms::dyn__overrideHeadPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__overrideHeadPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overrideHeadPos"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _overriddenHeadPos
UnityEngine::Vector3& GlobalNamespace::PlayerTransforms::dyn__overriddenHeadPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__overriddenHeadPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overriddenHeadPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _headWorldPos
UnityEngine::Vector3& GlobalNamespace::PlayerTransforms::dyn__headWorldPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__headWorldPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headWorldPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _headWorldRot
UnityEngine::Quaternion& GlobalNamespace::PlayerTransforms::dyn__headWorldRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__headWorldRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headWorldRot"))->offset;
  return *reinterpret_cast<UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _headPseudoLocalPos
UnityEngine::Vector3& GlobalNamespace::PlayerTransforms::dyn__headPseudoLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__headPseudoLocalPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headPseudoLocalPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _headPseudoLocalRot
UnityEngine::Quaternion& GlobalNamespace::PlayerTransforms::dyn__headPseudoLocalRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__headPseudoLocalRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headPseudoLocalRot"))->offset;
  return *reinterpret_cast<UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _leftHandPseudoLocalPos
UnityEngine::Vector3& GlobalNamespace::PlayerTransforms::dyn__leftHandPseudoLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__leftHandPseudoLocalPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftHandPseudoLocalPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _leftHandPseudoLocalRot
UnityEngine::Quaternion& GlobalNamespace::PlayerTransforms::dyn__leftHandPseudoLocalRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__leftHandPseudoLocalRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftHandPseudoLocalRot"))->offset;
  return *reinterpret_cast<UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _rightHandPseudoLocalPos
UnityEngine::Vector3& GlobalNamespace::PlayerTransforms::dyn__rightHandPseudoLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__rightHandPseudoLocalPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightHandPseudoLocalPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _rightHandPseudoLocalRot
UnityEngine::Quaternion& GlobalNamespace::PlayerTransforms::dyn__rightHandPseudoLocalRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__rightHandPseudoLocalRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightHandPseudoLocalRot"))->offset;
  return *reinterpret_cast<UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _originParentTransform
UnityEngine::Transform*& GlobalNamespace::PlayerTransforms::dyn__originParentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__originParentTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originParentTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _useOriginParentTransformForPseudoLocalCalculations
bool& GlobalNamespace::PlayerTransforms::dyn__useOriginParentTransformForPseudoLocalCalculations() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::dyn__useOriginParentTransformForPseudoLocalCalculations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useOriginParentTransformForPseudoLocalCalculations"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayerTransforms.get_headWorldPos
UnityEngine::Vector3 GlobalNamespace::PlayerTransforms::get_headWorldPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_headWorldPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headWorldPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_headWorldRot
UnityEngine::Quaternion GlobalNamespace::PlayerTransforms::get_headWorldRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_headWorldRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headWorldRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_headPseudoLocalPos
UnityEngine::Vector3 GlobalNamespace::PlayerTransforms::get_headPseudoLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_headPseudoLocalPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headPseudoLocalPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_headPseudoLocalRot
UnityEngine::Quaternion GlobalNamespace::PlayerTransforms::get_headPseudoLocalRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_headPseudoLocalRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headPseudoLocalRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_leftHandPseudoLocalPos
UnityEngine::Vector3 GlobalNamespace::PlayerTransforms::get_leftHandPseudoLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_leftHandPseudoLocalPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHandPseudoLocalPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_leftHandPseudoLocalRot
UnityEngine::Quaternion GlobalNamespace::PlayerTransforms::get_leftHandPseudoLocalRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_leftHandPseudoLocalRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHandPseudoLocalRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_rightHandPseudoLocalPos
UnityEngine::Vector3 GlobalNamespace::PlayerTransforms::get_rightHandPseudoLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_rightHandPseudoLocalPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightHandPseudoLocalPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerTransforms.get_rightHandPseudoLocalRot
UnityEngine::Quaternion GlobalNamespace::PlayerTransforms::get_rightHandPseudoLocalRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::get_rightHandPseudoLocalRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightHandPseudoLocalRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerTransforms.Awake
void GlobalNamespace::PlayerTransforms::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerTransforms.OverrideHeadPos
void GlobalNamespace::PlayerTransforms::OverrideHeadPos(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::OverrideHeadPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OverrideHeadPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, pos);
}
// Autogenerated method: PlayerTransforms.Update
void GlobalNamespace::PlayerTransforms::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerTransforms.MoveTowardsHead
float GlobalNamespace::PlayerTransforms::MoveTowardsHead(float start, float end, UnityEngine::Quaternion noteInverseWorldRotation, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::MoveTowardsHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveTowardsHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(noteInverseWorldRotation), ::il2cpp_utils::ExtractType(t)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method, start, end, noteInverseWorldRotation, t);
}
// Autogenerated method: PlayerTransforms.GetZPosOffsetByHeadPosAtTime
float GlobalNamespace::PlayerTransforms::GetZPosOffsetByHeadPosAtTime(float start, float end, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::GetZPosOffsetByHeadPosAtTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetZPosOffsetByHeadPosAtTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(t)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method, start, end, t);
}
// Autogenerated method: PlayerTransforms.GetZPos
float GlobalNamespace::PlayerTransforms::GetZPos(float start, float end, float headOffsetZ, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::GetZPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetZPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(headOffsetZ), ::il2cpp_utils::ExtractType(t)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method, start, end, headOffsetZ, t);
}
// Autogenerated method: PlayerTransforms.HeadOffsetZ
float GlobalNamespace::PlayerTransforms::HeadOffsetZ(UnityEngine::Quaternion noteInverseWorldRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::HeadOffsetZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HeadOffsetZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteInverseWorldRotation)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method, noteInverseWorldRotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerVRControllersManager
#include "GlobalNamespace/PlayerVRControllersManager.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VRController _leftHandVRController
GlobalNamespace::VRController*& GlobalNamespace::PlayerVRControllersManager::dyn__leftHandVRController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerVRControllersManager::dyn__leftHandVRController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftHandVRController"))->offset;
  return *reinterpret_cast<GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRController _rightHandVRController
GlobalNamespace::VRController*& GlobalNamespace::PlayerVRControllersManager::dyn__rightHandVRController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerVRControllersManager::dyn__rightHandVRController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightHandVRController"))->offset;
  return *reinterpret_cast<GlobalNamespace::VRController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayerVRControllersManager.DisableAllVRControllers
void GlobalNamespace::PlayerVRControllersManager::DisableAllVRControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerVRControllersManager::DisableAllVRControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableAllVRControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnControllerPlayerHeightSetter
#include "GlobalNamespace/BeatmapObjectSpawnControllerPlayerHeightSetter.hpp"
// Including type: BeatmapObjectSpawnController
#include "GlobalNamespace/BeatmapObjectSpawnController.hpp"
// Including type: PlayerHeightDetector
#include "GlobalNamespace/PlayerHeightDetector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly BeatmapObjectSpawnController _beatmapObjectSpawnController
GlobalNamespace::BeatmapObjectSpawnController*& GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::dyn__beatmapObjectSpawnController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::dyn__beatmapObjectSpawnController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectSpawnController"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapObjectSpawnController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerHeightDetector _playerHeightDetector
GlobalNamespace::PlayerHeightDetector*& GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::dyn__playerHeightDetector() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::dyn__playerHeightDetector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerHeightDetector"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayerHeightDetector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeatmapObjectSpawnControllerPlayerHeightSetter.Start
void GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnControllerPlayerHeightSetter.OnDestroy
void GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnControllerPlayerHeightSetter.HandlePlayerHeightDidChange
void GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::HandlePlayerHeightDidChange(float playerHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::HandlePlayerHeightDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerHeightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerHeight)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, playerHeight);
}
// Autogenerated method: BeatmapObjectSpawnControllerPlayerHeightSetter.JumpOffsetYForPlayerHeight
float GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::JumpOffsetYForPlayerHeight(float playerHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter::JumpOffsetYForPlayerHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapObjectSpawnControllerPlayerHeightSetter", "JumpOffsetYForPlayerHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerHeight)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, playerHeight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerHeightDetector
#include "GlobalNamespace/PlayerHeightDetector.hpp"
// Including type: PlayerHeightDetector/InitData
#include "GlobalNamespace/PlayerHeightDetector_InitData.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly PlayerTransforms _playerTransforms
GlobalNamespace::PlayerTransforms*& GlobalNamespace::PlayerHeightDetector::dyn__playerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::dyn__playerTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerTransforms"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayerTransforms**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IBeatmapObjectCallbackController _beatmapObjectCallbackController
GlobalNamespace::IBeatmapObjectCallbackController*& GlobalNamespace::PlayerHeightDetector::dyn__beatmapObjectCallbackController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::dyn__beatmapObjectCallbackController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectCallbackController"))->offset;
  return *reinterpret_cast<GlobalNamespace::IBeatmapObjectCallbackController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly IAudioTimeSource _audioTimeSyncController
GlobalNamespace::IAudioTimeSource*& GlobalNamespace::PlayerHeightDetector::dyn__audioTimeSyncController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::dyn__audioTimeSyncController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioTimeSyncController"))->offset;
  return *reinterpret_cast<GlobalNamespace::IAudioTimeSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly PlayerHeightDetector/InitData _initData
GlobalNamespace::PlayerHeightDetector::InitData*& GlobalNamespace::PlayerHeightDetector::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayerHeightDetector::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Single> playerHeightDidChangeEvent
System::Action_1<float>*& GlobalNamespace::PlayerHeightDetector::dyn_playerHeightDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::dyn_playerHeightDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerHeightDidChangeEvent"))->offset;
  return *reinterpret_cast<System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeatmapObjectCallbackData _beatmapObjectCallbackData
GlobalNamespace::BeatmapObjectCallbackData*& GlobalNamespace::PlayerHeightDetector::dyn__beatmapObjectCallbackData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::dyn__beatmapObjectCallbackData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectCallbackData"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapObjectCallbackData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _noTopObstaclesStartTime
float& GlobalNamespace::PlayerHeightDetector::dyn__noTopObstaclesStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::dyn__noTopObstaclesStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noTopObstaclesStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _computedPlayerHeight
float& GlobalNamespace::PlayerHeightDetector::dyn__computedPlayerHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::dyn__computedPlayerHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_computedPlayerHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _changeWeight
float& GlobalNamespace::PlayerHeightDetector::dyn__changeWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::dyn__changeWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_changeWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastReportedHeight
float& GlobalNamespace::PlayerHeightDetector::dyn__lastReportedHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::dyn__lastReportedHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastReportedHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayerHeightDetector.get_playerHeight
float GlobalNamespace::PlayerHeightDetector::get_playerHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::get_playerHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playerHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerHeightDetector.add_playerHeightDidChangeEvent
void GlobalNamespace::PlayerHeightDetector::add_playerHeightDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::add_playerHeightDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerHeightDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: PlayerHeightDetector.remove_playerHeightDidChangeEvent
void GlobalNamespace::PlayerHeightDetector::remove_playerHeightDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::remove_playerHeightDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerHeightDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: PlayerHeightDetector.Start
void GlobalNamespace::PlayerHeightDetector::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerHeightDetector.OnDestroy
void GlobalNamespace::PlayerHeightDetector::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerHeightDetector.LateUpdate
void GlobalNamespace::PlayerHeightDetector::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: PlayerHeightDetector.BeatmapObjectSpawnCallback
void GlobalNamespace::PlayerHeightDetector::BeatmapObjectSpawnCallback(GlobalNamespace::BeatmapObjectData* beatmapObjectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::BeatmapObjectSpawnCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeatmapObjectSpawnCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapObjectData)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, beatmapObjectData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerHeightDetector/InitData
#include "GlobalNamespace/PlayerHeightDetector_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Single headPosToPlayerHeightOffset
float& GlobalNamespace::PlayerHeightDetector::InitData::dyn_headPosToPlayerHeightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::InitData::dyn_headPosToPlayerHeightOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headPosToPlayerHeightOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BlocksBlade
#include "GlobalNamespace/BlocksBlade.hpp"
// Including type: BlocksBlade/Element
#include "GlobalNamespace/BlocksBlade_Element.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xF0A5B4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _positionPropertyID
int GlobalNamespace::BlocksBlade::_get__positionPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_get__positionPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlocksBlade", "_positionPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _positionPropertyID
void GlobalNamespace::BlocksBlade::_set__positionPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_set__positionPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlocksBlade", "_positionPropertyID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xF0A5C4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sizePropertyID
int GlobalNamespace::BlocksBlade::_get__sizePropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_get__sizePropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlocksBlade", "_sizePropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sizePropertyID
void GlobalNamespace::BlocksBlade::_set__sizePropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_set__sizePropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlocksBlade", "_sizePropertyID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xF0A5D4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorPropertyID
int GlobalNamespace::BlocksBlade::_get__colorPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_get__colorPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlocksBlade", "_colorPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorPropertyID
void GlobalNamespace::BlocksBlade::_set__colorPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_set__colorPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlocksBlade", "_colorPropertyID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xF0A5E4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _zClipPropertyID
int GlobalNamespace::BlocksBlade::_get__zClipPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_get__zClipPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BlocksBlade", "_zClipPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _zClipPropertyID
void GlobalNamespace::BlocksBlade::_set__zClipPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::_set__zClipPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BlocksBlade", "_zClipPropertyID", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _elementMesh
UnityEngine::Mesh*& GlobalNamespace::BlocksBlade::dyn__elementMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__elementMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elementMesh"))->offset;
  return *reinterpret_cast<UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _material
UnityEngine::Material*& GlobalNamespace::BlocksBlade::dyn__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_material"))->offset;
  return *reinterpret_cast<UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _numberOfElements
int& GlobalNamespace::BlocksBlade::dyn__numberOfElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__numberOfElements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfElements"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _radius
float& GlobalNamespace::BlocksBlade::dyn__radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__radius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_radius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _length
float& GlobalNamespace::BlocksBlade::dyn__length() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_length"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minVelocity
float& GlobalNamespace::BlocksBlade::dyn__minVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__minVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxVelocity
float& GlobalNamespace::BlocksBlade::dyn__maxVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__maxVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _elementWidth
float& GlobalNamespace::BlocksBlade::dyn__elementWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__elementWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elementWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minElementLength
float& GlobalNamespace::BlocksBlade::dyn__minElementLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__minElementLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minElementLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _maxElementLength
float& GlobalNamespace::BlocksBlade::dyn__maxElementLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__maxElementLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxElementLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color <color>k__BackingField
UnityEngine::Color& GlobalNamespace::BlocksBlade::dyn_$color$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn_$color$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<color>k__BackingField"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<BlocksBlade/Element> _elements
System::Collections::Generic::List_1<GlobalNamespace::BlocksBlade::Element*>*& GlobalNamespace::BlocksBlade::dyn__elements() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__elements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elements"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::BlocksBlade::Element*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _positions
::ArrayW<UnityEngine::Vector4>& GlobalNamespace::BlocksBlade::dyn__positions() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__positions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positions"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _sizes
::ArrayW<UnityEngine::Vector4>& GlobalNamespace::BlocksBlade::dyn__sizes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__sizes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sizes"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] _colors
::ArrayW<UnityEngine::Vector4>& GlobalNamespace::BlocksBlade::dyn__colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__colors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colors"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4[] _matrices
::ArrayW<UnityEngine::Matrix4x4>& GlobalNamespace::BlocksBlade::dyn__matrices() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__matrices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_matrices"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::Matrix4x4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
UnityEngine::MaterialPropertyBlock*& GlobalNamespace::BlocksBlade::dyn__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__materialPropertyBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_materialPropertyBlock"))->offset;
  return *reinterpret_cast<UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _layer
int& GlobalNamespace::BlocksBlade::dyn__layer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::dyn__layer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BlocksBlade.get_color
UnityEngine::Color GlobalNamespace::BlocksBlade::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: BlocksBlade.set_color
void GlobalNamespace::BlocksBlade::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: BlocksBlade.Start
void GlobalNamespace::BlocksBlade::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: BlocksBlade.Update
void GlobalNamespace::BlocksBlade::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: BlocksBlade.SetUpElement
void GlobalNamespace::BlocksBlade::SetUpElement(GlobalNamespace::BlocksBlade::Element* element, float velocity, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::SetUpElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUpElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element), ::il2cpp_utils::ExtractType(velocity), ::il2cpp_utils::ExtractType(color)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, element, velocity, color);
}
// Autogenerated method: BlocksBlade.RandomPointOnCircle
UnityEngine::Vector2 GlobalNamespace::BlocksBlade::RandomPointOnCircle(float radius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::RandomPointOnCircle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RandomPointOnCircle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(radius)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(___instance_arg, ___internal__method, radius);
}
// Autogenerated method: BlocksBlade..cctor
void GlobalNamespace::BlocksBlade::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BlocksBlade", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BlocksBlade/Element
#include "GlobalNamespace/BlocksBlade_Element.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 idx
int& GlobalNamespace::BlocksBlade::Element::dyn_idx() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::Element::dyn_idx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "idx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single velocity
float& GlobalNamespace::BlocksBlade::Element::dyn_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BlocksBlade::Element::dyn_velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoxCuttableBySaber
#include "GlobalNamespace/BoxCuttableBySaber.hpp"
// Including type: UnityEngine.BoxCollider
#include "UnityEngine/BoxCollider.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.BoxCollider _collider
UnityEngine::BoxCollider*& GlobalNamespace::BoxCuttableBySaber::dyn__collider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::dyn__collider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_collider"))->offset;
  return *reinterpret_cast<UnityEngine::BoxCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _canBeCut
bool& GlobalNamespace::BoxCuttableBySaber::dyn__canBeCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::dyn__canBeCut");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canBeCut"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _radius
float& GlobalNamespace::BoxCuttableBySaber::dyn__radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::dyn__radius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_radius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BoxCuttableBySaber.get_colliderSize
UnityEngine::Vector3 GlobalNamespace::BoxCuttableBySaber::get_colliderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::get_colliderSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colliderSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: BoxCuttableBySaber.set_colliderSize
void GlobalNamespace::BoxCuttableBySaber::set_colliderSize(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::set_colliderSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_colliderSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: BoxCuttableBySaber.Awake
void GlobalNamespace::BoxCuttableBySaber::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: BoxCuttableBySaber.SetColliderCenterAndSize
void GlobalNamespace::BoxCuttableBySaber::SetColliderCenterAndSize(UnityEngine::Vector3 center, UnityEngine::Vector3 size) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::SetColliderCenterAndSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColliderCenterAndSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(center), ::il2cpp_utils::ExtractType(size)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, center, size);
}
// Autogenerated method: BoxCuttableBySaber.RefreshRadius
void GlobalNamespace::BoxCuttableBySaber::RefreshRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::RefreshRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: BoxCuttableBySaber.get_radius
float GlobalNamespace::BoxCuttableBySaber::get_radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::get_radius");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_radius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: BoxCuttableBySaber.get_canBeCut
bool GlobalNamespace::BoxCuttableBySaber::get_canBeCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::get_canBeCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBeCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: BoxCuttableBySaber.set_canBeCut
void GlobalNamespace::BoxCuttableBySaber::set_canBeCut(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::set_canBeCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canBeCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: BoxCuttableBySaber.Cut
void GlobalNamespace::BoxCuttableBySaber::Cut(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::Cut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CuttableBySaber
#include "GlobalNamespace/CuttableBySaber.hpp"
// Including type: CuttableBySaber/WasCutBySaberDelegate
#include "GlobalNamespace/CuttableBySaber_WasCutBySaberDelegate.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private CuttableBySaber/WasCutBySaberDelegate wasCutBySaberEvent
GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate*& GlobalNamespace::CuttableBySaber::dyn_wasCutBySaberEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::dyn_wasCutBySaberEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasCutBySaberEvent"))->offset;
  return *reinterpret_cast<GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CuttableBySaber.get_canBeCut
bool GlobalNamespace::CuttableBySaber::get_canBeCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::get_canBeCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBeCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: CuttableBySaber.set_canBeCut
void GlobalNamespace::CuttableBySaber::set_canBeCut(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::set_canBeCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_canBeCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: CuttableBySaber.get_radius
float GlobalNamespace::CuttableBySaber::get_radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::get_radius");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_radius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: CuttableBySaber.add_wasCutBySaberEvent
void GlobalNamespace::CuttableBySaber::add_wasCutBySaberEvent(GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::add_wasCutBySaberEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_wasCutBySaberEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: CuttableBySaber.remove_wasCutBySaberEvent
void GlobalNamespace::CuttableBySaber::remove_wasCutBySaberEvent(GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::remove_wasCutBySaberEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_wasCutBySaberEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: CuttableBySaber.CallWasCutBySaberEvent
void GlobalNamespace::CuttableBySaber::CallWasCutBySaberEvent(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::CallWasCutBySaberEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CallWasCutBySaberEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: CuttableBySaber.Cut
void GlobalNamespace::CuttableBySaber::Cut(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::Cut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CuttableBySaber/WasCutBySaberDelegate
#include "GlobalNamespace/CuttableBySaber_WasCutBySaberDelegate.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CuttableBySaber/WasCutBySaberDelegate.Invoke
void GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::Invoke(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: CuttableBySaber/WasCutBySaberDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::BeginInvoke(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(___instance_arg, ___internal__method, saber, cutPoint, orientation, cutDirVec, callback, object);
}
// Autogenerated method: CuttableBySaber/WasCutBySaberDelegate.EndInvoke
void GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttableBySaber::WasCutBySaberDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CuttingManager
#include "GlobalNamespace/CuttingManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: NoteCutter
#include "GlobalNamespace/NoteCutter.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SaberManager _saberManager
GlobalNamespace::SaberManager*& GlobalNamespace::CuttingManager::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttingManager::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly NoteCutter _noteCutter
GlobalNamespace::NoteCutter*& GlobalNamespace::CuttingManager::dyn__noteCutter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttingManager::dyn__noteCutter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noteCutter"))->offset;
  return *reinterpret_cast<GlobalNamespace::NoteCutter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CuttingManager.OnEnable
void GlobalNamespace::CuttingManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttingManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: CuttingManager.OnDisable
void GlobalNamespace::CuttingManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttingManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: CuttingManager.HandleSaberManagerDidUpdateSaberPositions
void GlobalNamespace::CuttingManager::HandleSaberManagerDidUpdateSaberPositions(GlobalNamespace::Saber* leftSaber, GlobalNamespace::Saber* rightSaber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CuttingManager::HandleSaberManagerDidUpdateSaberPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSaberManagerDidUpdateSaberPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftSaber), ::il2cpp_utils::ExtractType(rightSaber)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, leftSaber, rightSaber);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MovementHistoryRecorder
#include "GlobalNamespace/MovementHistoryRecorder.hpp"
// Including type: AveragingValueRecorder
#include "GlobalNamespace/AveragingValueRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private AveragingValueRecorder _averagingValueRecorer
GlobalNamespace::AveragingValueRecorder*& GlobalNamespace::MovementHistoryRecorder::dyn__averagingValueRecorer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementHistoryRecorder::dyn__averagingValueRecorer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_averagingValueRecorer"))->offset;
  return *reinterpret_cast<GlobalNamespace::AveragingValueRecorder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _increaseSpeed
float& GlobalNamespace::MovementHistoryRecorder::dyn__increaseSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementHistoryRecorder::dyn__increaseSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_increaseSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _decreaseSpeed
float& GlobalNamespace::MovementHistoryRecorder::dyn__decreaseSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementHistoryRecorder::dyn__decreaseSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_decreaseSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _accum
float& GlobalNamespace::MovementHistoryRecorder::dyn__accum() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementHistoryRecorder::dyn__accum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_accum"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MovementHistoryRecorder.get_averagingValueRecorer
GlobalNamespace::AveragingValueRecorder* GlobalNamespace::MovementHistoryRecorder::get_averagingValueRecorer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementHistoryRecorder::get_averagingValueRecorer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_averagingValueRecorer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AveragingValueRecorder*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: MovementHistoryRecorder.AddMovement
void GlobalNamespace::MovementHistoryRecorder::AddMovement(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementHistoryRecorder::AddMovement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, distance);
}
// Autogenerated method: MovementHistoryRecorder.ManualUpdate
void GlobalNamespace::MovementHistoryRecorder::ManualUpdate(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementHistoryRecorder::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutter
#include "GlobalNamespace/NoteCutter.hpp"
// Including type: NoteCutter/CuttableBySaberSortParams
#include "GlobalNamespace/NoteCutter_CuttableBySaberSortParams.hpp"
// Including type: NoteCutter/CuttableBySaberSortParamsComparer
#include "GlobalNamespace/NoteCutter_CuttableBySaberSortParamsComparer.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxNumberOfColliders
int GlobalNamespace::NoteCutter::_get_kMaxNumberOfColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::_get_kMaxNumberOfColliders");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteCutter", "kMaxNumberOfColliders"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxNumberOfColliders
void GlobalNamespace::NoteCutter::_set_kMaxNumberOfColliders(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::_set_kMaxNumberOfColliders");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutter", "kMaxNumberOfColliders", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Collider[] _colliders
::ArrayW<UnityEngine::Collider*>& GlobalNamespace::NoteCutter::dyn__colliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::dyn__colliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colliders"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly NoteCutter/CuttableBySaberSortParams[] _cuttableBySaberSortParams
::ArrayW<GlobalNamespace::NoteCutter::CuttableBySaberSortParams*>& GlobalNamespace::NoteCutter::dyn__cuttableBySaberSortParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::dyn__cuttableBySaberSortParams");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cuttableBySaberSortParams"))->offset;
  return *reinterpret_cast<::ArrayW<GlobalNamespace::NoteCutter::CuttableBySaberSortParams*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly NoteCutter/CuttableBySaberSortParamsComparer _comparer
GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer*& GlobalNamespace::NoteCutter::dyn__comparer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::dyn__comparer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comparer"))->offset;
  return *reinterpret_cast<GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: NoteCutter.Cut
void GlobalNamespace::NoteCutter::Cut(GlobalNamespace::Saber* saber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::Cut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, saber);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutter/CuttableBySaberSortParams
#include "GlobalNamespace/NoteCutter_CuttableBySaberSortParams.hpp"
// Including type: CuttableBySaber
#include "GlobalNamespace/CuttableBySaber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public CuttableBySaber cuttableBySaber
GlobalNamespace::CuttableBySaber*& GlobalNamespace::NoteCutter::CuttableBySaberSortParams::dyn_cuttableBySaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::CuttableBySaberSortParams::dyn_cuttableBySaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cuttableBySaber"))->offset;
  return *reinterpret_cast<GlobalNamespace::CuttableBySaber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single distance
float& GlobalNamespace::NoteCutter::CuttableBySaberSortParams::dyn_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::CuttableBySaberSortParams::dyn_distance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 pos
UnityEngine::Vector3& GlobalNamespace::NoteCutter::CuttableBySaberSortParams::dyn_pos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::CuttableBySaberSortParams::dyn_pos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteCutter/CuttableBySaberSortParamsComparer
#include "GlobalNamespace/NoteCutter_CuttableBySaberSortParamsComparer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteCutter/CuttableBySaberSortParamsComparer.Compare
int GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer::Compare(::Il2CppObject* p0, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer::Compare");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<int, false>(___instance_arg, ___internal__method, p0, p1);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SaberTypeObject
#include "GlobalNamespace/SaberTypeObject.hpp"
// Including type: SaberMovementData
#include "GlobalNamespace/SaberMovementData.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _saberBladeTopTransform
UnityEngine::Transform*& GlobalNamespace::Saber::dyn__saberBladeTopTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::dyn__saberBladeTopTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberBladeTopTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _saberBladeBottomTransform
UnityEngine::Transform*& GlobalNamespace::Saber::dyn__saberBladeBottomTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::dyn__saberBladeBottomTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberBladeBottomTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _handleTransform
UnityEngine::Transform*& GlobalNamespace::Saber::dyn__handleTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::dyn__handleTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handleTransform"))->offset;
  return *reinterpret_cast<UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SaberTypeObject _saberType
GlobalNamespace::SaberTypeObject*& GlobalNamespace::Saber::dyn__saberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::dyn__saberType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberType"))->offset;
  return *reinterpret_cast<GlobalNamespace::SaberTypeObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <disableCutting>k__BackingField
bool& GlobalNamespace::Saber::dyn_$disableCutting$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::dyn_$disableCutting$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<disableCutting>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberMovementData _movementData
GlobalNamespace::SaberMovementData*& GlobalNamespace::Saber::dyn__movementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::dyn__movementData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_movementData"))->offset;
  return *reinterpret_cast<GlobalNamespace::SaberMovementData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _saberBladeTopPos
UnityEngine::Vector3& GlobalNamespace::Saber::dyn__saberBladeTopPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::dyn__saberBladeTopPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberBladeTopPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _saberBladeBottomPos
UnityEngine::Vector3& GlobalNamespace::Saber::dyn__saberBladeBottomPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::dyn__saberBladeBottomPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberBladeBottomPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _handlePos
UnityEngine::Vector3& GlobalNamespace::Saber::dyn__handlePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::dyn__handlePos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handlePos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _handleRot
UnityEngine::Quaternion& GlobalNamespace::Saber::dyn__handleRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::dyn__handleRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handleRot"))->offset;
  return *reinterpret_cast<UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Saber.get_saberType
GlobalNamespace::SaberType GlobalNamespace::Saber::get_saberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_saberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SaberType, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Saber.get_saberBladeTopPos
UnityEngine::Vector3 GlobalNamespace::Saber::get_saberBladeTopPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_saberBladeTopPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberBladeTopPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Saber.get_saberBladeBottomPos
UnityEngine::Vector3 GlobalNamespace::Saber::get_saberBladeBottomPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_saberBladeBottomPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberBladeBottomPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Saber.get_handlePos
UnityEngine::Vector3 GlobalNamespace::Saber::get_handlePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_handlePos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handlePos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Saber.get_handleRot
UnityEngine::Quaternion GlobalNamespace::Saber::get_handleRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_handleRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Saber.get_bladeSpeed
float GlobalNamespace::Saber::get_bladeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_bladeSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bladeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Saber.get_movementData
GlobalNamespace::SaberMovementData* GlobalNamespace::Saber::get_movementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_movementData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_movementData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SaberMovementData*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Saber.get_disableCutting
bool GlobalNamespace::Saber::get_disableCutting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::get_disableCutting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disableCutting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Saber.set_disableCutting
void GlobalNamespace::Saber::set_disableCutting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::set_disableCutting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disableCutting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: Saber.ManualUpdate
void GlobalNamespace::Saber::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: Saber.OverridePositionAndRotation
void GlobalNamespace::Saber::OverridePositionAndRotation(UnityEngine::Vector3 pos, UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Saber::OverridePositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OverridePositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, pos, rot);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberActivityCounter
#include "GlobalNamespace/SaberActivityCounter.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: MovementHistoryRecorder
#include "GlobalNamespace/MovementHistoryRecorder.hpp"
// Including type: AveragingValueRecorder
#include "GlobalNamespace/AveragingValueRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _averageWindowDuration
float& GlobalNamespace::SaberActivityCounter::dyn__averageWindowDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__averageWindowDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_averageWindowDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _valuesPerSecond
float& GlobalNamespace::SaberActivityCounter::dyn__valuesPerSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__valuesPerSecond");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_valuesPerSecond"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _increaseSpeed
float& GlobalNamespace::SaberActivityCounter::dyn__increaseSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__increaseSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_increaseSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _deceraseSpeed
float& GlobalNamespace::SaberActivityCounter::dyn__deceraseSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__deceraseSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deceraseSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _movementSensitivityThreshold
float& GlobalNamespace::SaberActivityCounter::dyn__movementSensitivityThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__movementSensitivityThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_movementSensitivityThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager _saberManager
GlobalNamespace::SaberManager*& GlobalNamespace::SaberActivityCounter::dyn__saberManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__saberManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::SaberManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Single> totalDistanceDidChangeEvent
System::Action_1<float>*& GlobalNamespace::SaberActivityCounter::dyn_totalDistanceDidChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn_totalDistanceDidChangeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "totalDistanceDidChangeEvent"))->offset;
  return *reinterpret_cast<System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber _leftSaber
GlobalNamespace::Saber*& GlobalNamespace::SaberActivityCounter::dyn__leftSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__leftSaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftSaber"))->offset;
  return *reinterpret_cast<GlobalNamespace::Saber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber _rightSaber
GlobalNamespace::Saber*& GlobalNamespace::SaberActivityCounter::dyn__rightSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__rightSaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightSaber"))->offset;
  return *reinterpret_cast<GlobalNamespace::Saber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _prevLeftSaberTipPos
UnityEngine::Vector3& GlobalNamespace::SaberActivityCounter::dyn__prevLeftSaberTipPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__prevLeftSaberTipPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevLeftSaberTipPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _prevRightSaberTipPos
UnityEngine::Vector3& GlobalNamespace::SaberActivityCounter::dyn__prevRightSaberTipPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__prevRightSaberTipPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevRightSaberTipPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _prevLeftHandPos
UnityEngine::Vector3& GlobalNamespace::SaberActivityCounter::dyn__prevLeftHandPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__prevLeftHandPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevLeftHandPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _prevRightHandPos
UnityEngine::Vector3& GlobalNamespace::SaberActivityCounter::dyn__prevRightHandPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__prevRightHandPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevRightHandPos"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasPrevPos
bool& GlobalNamespace::SaberActivityCounter::dyn__hasPrevPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__hasPrevPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasPrevPos"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _leftSaberMovementDistance
float& GlobalNamespace::SaberActivityCounter::dyn__leftSaberMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__leftSaberMovementDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftSaberMovementDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rightSaberMovementDistance
float& GlobalNamespace::SaberActivityCounter::dyn__rightSaberMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__rightSaberMovementDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightSaberMovementDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _leftHandMovementDistance
float& GlobalNamespace::SaberActivityCounter::dyn__leftHandMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__leftHandMovementDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftHandMovementDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _rightHandMovementDistance
float& GlobalNamespace::SaberActivityCounter::dyn__rightHandMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__rightHandMovementDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightHandMovementDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MovementHistoryRecorder _saberMovementHistoryRecorder
GlobalNamespace::MovementHistoryRecorder*& GlobalNamespace::SaberActivityCounter::dyn__saberMovementHistoryRecorder() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__saberMovementHistoryRecorder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saberMovementHistoryRecorder"))->offset;
  return *reinterpret_cast<GlobalNamespace::MovementHistoryRecorder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MovementHistoryRecorder _handMovementHistoryRecorder
GlobalNamespace::MovementHistoryRecorder*& GlobalNamespace::SaberActivityCounter::dyn__handMovementHistoryRecorder() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::dyn__handMovementHistoryRecorder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handMovementHistoryRecorder"))->offset;
  return *reinterpret_cast<GlobalNamespace::MovementHistoryRecorder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SaberActivityCounter.get_leftSaberMovementDistance
float GlobalNamespace::SaberActivityCounter::get_leftSaberMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_leftSaberMovementDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftSaberMovementDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.get_rightSaberMovementDistance
float GlobalNamespace::SaberActivityCounter::get_rightSaberMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_rightSaberMovementDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightSaberMovementDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.get_leftHandMovementDistance
float GlobalNamespace::SaberActivityCounter::get_leftHandMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_leftHandMovementDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHandMovementDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.get_rightHandMovementDistance
float GlobalNamespace::SaberActivityCounter::get_rightHandMovementDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_rightHandMovementDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightHandMovementDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.get_saberMovementAveragingValueRecorder
GlobalNamespace::AveragingValueRecorder* GlobalNamespace::SaberActivityCounter::get_saberMovementAveragingValueRecorder() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_saberMovementAveragingValueRecorder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberMovementAveragingValueRecorder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AveragingValueRecorder*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.get_handMovementAveragingValueRecorder
GlobalNamespace::AveragingValueRecorder* GlobalNamespace::SaberActivityCounter::get_handMovementAveragingValueRecorder() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::get_handMovementAveragingValueRecorder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handMovementAveragingValueRecorder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AveragingValueRecorder*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.add_totalDistanceDidChangeEvent
void GlobalNamespace::SaberActivityCounter::add_totalDistanceDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::add_totalDistanceDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_totalDistanceDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: SaberActivityCounter.remove_totalDistanceDidChangeEvent
void GlobalNamespace::SaberActivityCounter::remove_totalDistanceDidChangeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::remove_totalDistanceDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_totalDistanceDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: SaberActivityCounter.Awake
void GlobalNamespace::SaberActivityCounter::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.Start
void GlobalNamespace::SaberActivityCounter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberActivityCounter.Update
void GlobalNamespace::SaberActivityCounter::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberClashChecker
#include "GlobalNamespace/SaberClashChecker.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMinDistanceToClash
float GlobalNamespace::SaberClashChecker::_get_kMinDistanceToClash() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::_get_kMinDistanceToClash");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SaberClashChecker", "kMinDistanceToClash"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinDistanceToClash
void GlobalNamespace::SaberClashChecker::_set_kMinDistanceToClash(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::_set_kMinDistanceToClash");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberClashChecker", "kMinDistanceToClash", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kIgnoredTime
float GlobalNamespace::SaberClashChecker::_get_kIgnoredTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::_get_kIgnoredTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SaberClashChecker", "kIgnoredTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kIgnoredTime
void GlobalNamespace::SaberClashChecker::_set_kIgnoredTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::_set_kIgnoredTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberClashChecker", "kIgnoredTime", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _sabersAreClashing
bool& GlobalNamespace::SaberClashChecker::dyn__sabersAreClashing() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::dyn__sabersAreClashing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sabersAreClashing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _clashingPoint
UnityEngine::Vector3& GlobalNamespace::SaberClashChecker::dyn__clashingPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::dyn__clashingPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_clashingPoint"))->offset;
  return *reinterpret_cast<UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber _leftSaber
GlobalNamespace::Saber*& GlobalNamespace::SaberClashChecker::dyn__leftSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::dyn__leftSaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftSaber"))->offset;
  return *reinterpret_cast<GlobalNamespace::Saber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber _rightSaber
GlobalNamespace::Saber*& GlobalNamespace::SaberClashChecker::dyn__rightSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::dyn__rightSaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightSaber"))->offset;
  return *reinterpret_cast<GlobalNamespace::Saber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _prevGetFrameNum
int& GlobalNamespace::SaberClashChecker::dyn__prevGetFrameNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::dyn__prevGetFrameNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevGetFrameNum"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SaberClashChecker.Init
void GlobalNamespace::SaberClashChecker::Init(GlobalNamespace::SaberManager* saberManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberManager)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, saberManager);
}
// Autogenerated method: SaberClashChecker.AreSabersClashing
bool GlobalNamespace::SaberClashChecker::AreSabersClashing(ByRef<UnityEngine::Vector3> clashingPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::AreSabersClashing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AreSabersClashing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, byref(clashingPoint));
}
// Autogenerated method: SaberClashChecker.SegmentToSegmentDist
float GlobalNamespace::SaberClashChecker::SegmentToSegmentDist(UnityEngine::Vector3 fromA, UnityEngine::Vector3 toA, UnityEngine::Vector3 fromB, UnityEngine::Vector3 toB, ByRef<UnityEngine::Vector3> inbetweenPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashChecker::SegmentToSegmentDist");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SegmentToSegmentDist", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromA), ::il2cpp_utils::ExtractType(toA), ::il2cpp_utils::ExtractType(fromB), ::il2cpp_utils::ExtractType(toB), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<float, false>(___instance_arg, ___internal__method, fromA, toA, fromB, toB, byref(inbetweenPoint));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: SaberManager/InitData
#include "GlobalNamespace/SaberManager_InitData.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Saber _leftSaber
GlobalNamespace::Saber*& GlobalNamespace::SaberManager::dyn__leftSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::dyn__leftSaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftSaber"))->offset;
  return *reinterpret_cast<GlobalNamespace::Saber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Saber _rightSaber
GlobalNamespace::Saber*& GlobalNamespace::SaberManager::dyn__rightSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::dyn__rightSaber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightSaber"))->offset;
  return *reinterpret_cast<GlobalNamespace::Saber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly SaberManager/InitData _initData
GlobalNamespace::SaberManager::InitData*& GlobalNamespace::SaberManager::dyn__initData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::dyn__initData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initData"))->offset;
  return *reinterpret_cast<GlobalNamespace::SaberManager::InitData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _started
bool& GlobalNamespace::SaberManager::dyn__started() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::dyn__started");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_started"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<Saber,Saber> didUpdateSaberPositionsEvent
System::Action_2<GlobalNamespace::Saber*, GlobalNamespace::Saber*>*& GlobalNamespace::SaberManager::dyn_didUpdateSaberPositionsEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::dyn_didUpdateSaberPositionsEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didUpdateSaberPositionsEvent"))->offset;
  return *reinterpret_cast<System::Action_2<GlobalNamespace::Saber*, GlobalNamespace::Saber*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SaberManager.get_leftSaber
GlobalNamespace::Saber* GlobalNamespace::SaberManager::get_leftSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::get_leftSaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftSaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Saber*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberManager.get_rightSaber
GlobalNamespace::Saber* GlobalNamespace::SaberManager::get_rightSaber() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::get_rightSaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightSaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Saber*, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberManager.set_disableSabers
void GlobalNamespace::SaberManager::set_disableSabers(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::set_disableSabers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disableSabers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: SaberManager.add_didUpdateSaberPositionsEvent
void GlobalNamespace::SaberManager::add_didUpdateSaberPositionsEvent(System::Action_2<GlobalNamespace::Saber*, GlobalNamespace::Saber*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::add_didUpdateSaberPositionsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didUpdateSaberPositionsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: SaberManager.remove_didUpdateSaberPositionsEvent
void GlobalNamespace::SaberManager::remove_didUpdateSaberPositionsEvent(System::Action_2<GlobalNamespace::Saber*, GlobalNamespace::Saber*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::remove_didUpdateSaberPositionsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didUpdateSaberPositionsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, value);
}
// Autogenerated method: SaberManager.Start
void GlobalNamespace::SaberManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberManager.OnDisable
void GlobalNamespace::SaberManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberManager.OnEnable
void GlobalNamespace::SaberManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberManager.Update
void GlobalNamespace::SaberManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated method: SaberManager.SaberForType
GlobalNamespace::Saber* GlobalNamespace::SaberManager::SaberForType(GlobalNamespace::SaberType saberType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::SaberForType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaberForType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberType)})));
  auto ___instance_arg = this;
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Saber*, false>(___instance_arg, ___internal__method, saberType);
}
// Autogenerated method: SaberManager.RefreshSabers
void GlobalNamespace::SaberManager::RefreshSabers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::RefreshSabers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshSabers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  auto ___instance_arg = this;
  ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberManager/InitData
#include "GlobalNamespace/SaberManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean oneSaberMode
bool& GlobalNamespace::SaberManager::InitData::dyn_oneSaberMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::InitData::dyn_oneSaberMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oneSaberMode"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly SaberType oneSaberType
GlobalNamespace::SaberType& GlobalNamespace::SaberManager::InitData::dyn_oneSaberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberManager::InitData::dyn_oneSaberType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oneSaberType"))->offset;
  return *reinterpret_cast<GlobalNamespace::SaberType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
