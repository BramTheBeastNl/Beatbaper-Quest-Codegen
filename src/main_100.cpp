// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: INetworkConfig
#include "GlobalNamespace/INetworkConfig.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INetworkConfig.get_maxPartySize
int GlobalNamespace::INetworkConfig::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkConfig::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: INetworkConfig.get_discoveryPort
int GlobalNamespace::INetworkConfig::get_discoveryPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkConfig::get_discoveryPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: INetworkConfig.get_partyPort
int GlobalNamespace::INetworkConfig::get_partyPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkConfig::get_partyPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_partyPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: INetworkConfig.get_multiplayerPort
int GlobalNamespace::INetworkConfig::get_multiplayerPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkConfig::get_multiplayerPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: INetworkConfig.get_masterServerEndPoint
GlobalNamespace::MasterServerEndPoint* GlobalNamespace::INetworkConfig::get_masterServerEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkConfig::get_masterServerEndPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MasterServerEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: INetworkConfig.get_masterServerStatusUrl
::Il2CppString* GlobalNamespace::INetworkConfig::get_masterServerStatusUrl() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkConfig::get_masterServerStatusUrl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerStatusUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: INetworkConfig::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (INetworkConfig::*)()>(&INetworkConfig::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkConfig*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkConfig::get_discoveryPort
// Il2CppName: get_discoveryPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (INetworkConfig::*)()>(&INetworkConfig::get_discoveryPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkConfig*), "get_discoveryPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkConfig::get_partyPort
// Il2CppName: get_partyPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (INetworkConfig::*)()>(&INetworkConfig::get_partyPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkConfig*), "get_partyPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkConfig::get_multiplayerPort
// Il2CppName: get_multiplayerPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (INetworkConfig::*)()>(&INetworkConfig::get_multiplayerPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkConfig*), "get_multiplayerPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkConfig::get_masterServerEndPoint
// Il2CppName: get_masterServerEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MasterServerEndPoint* (INetworkConfig::*)()>(&INetworkConfig::get_masterServerEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkConfig*), "get_masterServerEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkConfig::get_masterServerStatusUrl
// Il2CppName: get_masterServerStatusUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (INetworkConfig::*)()>(&INetworkConfig::get_masterServerStatusUrl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkConfig*), "get_masterServerStatusUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INetworkPlayer.get_userId
::Il2CppString* GlobalNamespace::INetworkPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_userName
::Il2CppString* GlobalNamespace::INetworkPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_isMe
bool GlobalNamespace::INetworkPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_currentPartySize
int GlobalNamespace::INetworkPlayer::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_maxPartySize
int GlobalNamespace::INetworkPlayer::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_isMyPartyOwner
bool GlobalNamespace::INetworkPlayer::get_isMyPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_isMyPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_isOpenParty
bool GlobalNamespace::INetworkPlayer::get_isOpenParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_isOpenParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOpenParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_isConnected
bool GlobalNamespace::INetworkPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_isPlayer
bool GlobalNamespace::INetworkPlayer::get_isPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_isPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_isDedicatedServer
bool GlobalNamespace::INetworkPlayer::get_isDedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_isDedicatedServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_isSpectating
bool GlobalNamespace::INetworkPlayer::get_isSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_isSpectating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_difficulties
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::INetworkPlayer::get_difficulties() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_difficulties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_modifiers
GlobalNamespace::GameplayModifierMask GlobalNamespace::INetworkPlayer::get_modifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_modifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_modifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifierMask, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_songPacks
GlobalNamespace::SongPackMask GlobalNamespace::INetworkPlayer::get_songPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_songPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_canJoin
bool GlobalNamespace::INetworkPlayer::get_canJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_canJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.Join
void GlobalNamespace::INetworkPlayer::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_requiresPassword
bool GlobalNamespace::INetworkPlayer::get_requiresPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_requiresPassword");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.Join
void GlobalNamespace::INetworkPlayer::Join(::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, password);
}
// Autogenerated method: INetworkPlayer.get_isWaitingOnJoin
bool GlobalNamespace::INetworkPlayer::get_isWaitingOnJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_isWaitingOnJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_canInvite
bool GlobalNamespace::INetworkPlayer::get_canInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_canInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.Invite
void GlobalNamespace::INetworkPlayer::Invite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::Invite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_isWaitingOnInvite
bool GlobalNamespace::INetworkPlayer::get_isWaitingOnInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_isWaitingOnInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_canKick
bool GlobalNamespace::INetworkPlayer::get_canKick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_canKick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.Kick
void GlobalNamespace::INetworkPlayer::Kick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::Kick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Kick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_canLeave
bool GlobalNamespace::INetworkPlayer::get_canLeave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_canLeave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.Leave
void GlobalNamespace::INetworkPlayer::Leave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::Leave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Leave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_canBlock
bool GlobalNamespace::INetworkPlayer::get_canBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_canBlock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.Block
void GlobalNamespace::INetworkPlayer::Block() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::Block");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.get_canUnblock
bool GlobalNamespace::INetworkPlayer::get_canUnblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::get_canUnblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.Unblock
void GlobalNamespace::INetworkPlayer::Unblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::Unblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayer.SendJoinResponse
void GlobalNamespace::INetworkPlayer::SendJoinResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::SendJoinResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: INetworkPlayer.SendInviteResponse
void GlobalNamespace::INetworkPlayer::SendInviteResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayer::SendInviteResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Writing MetadataGetter for method: INetworkPlayer::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (INetworkPlayer::*)()>(&INetworkPlayer::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (INetworkPlayer::*)()>(&INetworkPlayer::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_isMe
// Il2CppName: get_isMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_isMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_isMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (INetworkPlayer::*)()>(&INetworkPlayer::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (INetworkPlayer::*)()>(&INetworkPlayer::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_isMyPartyOwner
// Il2CppName: get_isMyPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_isMyPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_isMyPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_isOpenParty
// Il2CppName: get_isOpenParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_isOpenParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_isOpenParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_isPlayer
// Il2CppName: get_isPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_isPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_isPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_isDedicatedServer
// Il2CppName: get_isDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_isDedicatedServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_isDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_isSpectating
// Il2CppName: get_isSpectating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_isSpectating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_isSpectating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_difficulties
// Il2CppName: get_difficulties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficultyMask (INetworkPlayer::*)()>(&INetworkPlayer::get_difficulties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_difficulties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_modifiers
// Il2CppName: get_modifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifierMask (INetworkPlayer::*)()>(&INetworkPlayer::get_modifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_modifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_songPacks
// Il2CppName: get_songPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (INetworkPlayer::*)()>(&INetworkPlayer::get_songPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_songPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_canJoin
// Il2CppName: get_canJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_canJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_canJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayer::*)()>(&INetworkPlayer::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_requiresPassword
// Il2CppName: get_requiresPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_requiresPassword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_requiresPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayer::*)(::Il2CppString*)>(&INetworkPlayer::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_isWaitingOnJoin
// Il2CppName: get_isWaitingOnJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_isWaitingOnJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_isWaitingOnJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_canInvite
// Il2CppName: get_canInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_canInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_canInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::Invite
// Il2CppName: Invite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayer::*)()>(&INetworkPlayer::Invite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "Invite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_isWaitingOnInvite
// Il2CppName: get_isWaitingOnInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_isWaitingOnInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_isWaitingOnInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_canKick
// Il2CppName: get_canKick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_canKick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_canKick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::Kick
// Il2CppName: Kick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayer::*)()>(&INetworkPlayer::Kick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "Kick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_canLeave
// Il2CppName: get_canLeave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_canLeave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_canLeave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayer::*)()>(&INetworkPlayer::Leave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_canBlock
// Il2CppName: get_canBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_canBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_canBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::Block
// Il2CppName: Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayer::*)()>(&INetworkPlayer::Block)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::get_canUnblock
// Il2CppName: get_canUnblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayer::*)()>(&INetworkPlayer::get_canUnblock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "get_canUnblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::Unblock
// Il2CppName: Unblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayer::*)()>(&INetworkPlayer::Unblock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "Unblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::SendJoinResponse
// Il2CppName: SendJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayer::*)(bool)>(&INetworkPlayer::SendJoinResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "SendJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayer::SendInviteResponse
// Il2CppName: SendInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayer::*)(bool)>(&INetworkPlayer::SendInviteResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayer*), "SendInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INetworkPlayerModel
#include "GlobalNamespace/INetworkPlayerModel.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: INetworkPlayerModelPartyConfig`1
#include "GlobalNamespace/INetworkPlayerModelPartyConfig_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INetworkPlayerModel.get_discoveryEnabled
bool GlobalNamespace::INetworkPlayerModel::get_discoveryEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::get_discoveryEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayerModel.set_discoveryEnabled
void GlobalNamespace::INetworkPlayerModel::set_discoveryEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::set_discoveryEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_discoveryEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.get_localPlayerIsPartyOwner
bool GlobalNamespace::INetworkPlayerModel::get_localPlayerIsPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::get_localPlayerIsPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayerModel.get_maxPartySize
int GlobalNamespace::INetworkPlayerModel::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayerModel.get_configuration
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::INetworkPlayerModel::get_configuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::get_configuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayerModel.get_currentPartySize
int GlobalNamespace::INetworkPlayerModel::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayerModel.get_partyPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::INetworkPlayerModel::get_partyPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::get_partyPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_partyPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayerModel.get_otherPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::INetworkPlayerModel::get_otherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::get_otherPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayerModel.get_connectedPlayerManager
GlobalNamespace::ConnectedPlayerManager* GlobalNamespace::INetworkPlayerModel::get_connectedPlayerManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::get_connectedPlayerManager");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager*, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayerModel.add_connectedPlayerManagerCreatedEvent
void GlobalNamespace::INetworkPlayerModel::add_connectedPlayerManagerCreatedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::add_connectedPlayerManagerCreatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerManagerCreatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.remove_connectedPlayerManagerCreatedEvent
void GlobalNamespace::INetworkPlayerModel::remove_connectedPlayerManagerCreatedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::remove_connectedPlayerManagerCreatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerManagerCreatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.add_connectedPlayerManagerDestroyedEvent
void GlobalNamespace::INetworkPlayerModel::add_connectedPlayerManagerDestroyedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::add_connectedPlayerManagerDestroyedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerManagerDestroyedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.remove_connectedPlayerManagerDestroyedEvent
void GlobalNamespace::INetworkPlayerModel::remove_connectedPlayerManagerDestroyedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::remove_connectedPlayerManagerDestroyedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerManagerDestroyedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.add_partyChangedEvent
void GlobalNamespace::INetworkPlayerModel::add_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::add_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.remove_partyChangedEvent
void GlobalNamespace::INetworkPlayerModel::remove_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::remove_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.add_partySizeChangedEvent
void GlobalNamespace::INetworkPlayerModel::add_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::add_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.remove_partySizeChangedEvent
void GlobalNamespace::INetworkPlayerModel::remove_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::remove_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.add_joinRequestedEvent
void GlobalNamespace::INetworkPlayerModel::add_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::add_joinRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.remove_joinRequestedEvent
void GlobalNamespace::INetworkPlayerModel::remove_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::remove_joinRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.add_inviteRequestedEvent
void GlobalNamespace::INetworkPlayerModel::add_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::add_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.remove_inviteRequestedEvent
void GlobalNamespace::INetworkPlayerModel::remove_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::remove_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: INetworkPlayerModel.DestroyParty
void GlobalNamespace::INetworkPlayerModel::DestroyParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::DestroyParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: INetworkPlayerModel.Disconnect
void GlobalNamespace::INetworkPlayerModel::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INetworkPlayerModel::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: INetworkPlayerModel::get_discoveryEnabled
// Il2CppName: get_discoveryEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayerModel::*)()>(&INetworkPlayerModel::get_discoveryEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "get_discoveryEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::set_discoveryEnabled
// Il2CppName: set_discoveryEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(bool)>(&INetworkPlayerModel::set_discoveryEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "set_discoveryEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::get_localPlayerIsPartyOwner
// Il2CppName: get_localPlayerIsPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (INetworkPlayerModel::*)()>(&INetworkPlayerModel::get_localPlayerIsPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (INetworkPlayerModel::*)()>(&INetworkPlayerModel::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerConfiguration (INetworkPlayerModel::*)()>(&INetworkPlayerModel::get_configuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (INetworkPlayerModel::*)()>(&INetworkPlayerModel::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::get_partyPlayers
// Il2CppName: get_partyPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (INetworkPlayerModel::*)()>(&INetworkPlayerModel::get_partyPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "get_partyPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::get_otherPlayers
// Il2CppName: get_otherPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (INetworkPlayerModel::*)()>(&INetworkPlayerModel::get_otherPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "get_otherPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::get_connectedPlayerManager
// Il2CppName: get_connectedPlayerManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager* (INetworkPlayerModel::*)()>(&INetworkPlayerModel::get_connectedPlayerManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "get_connectedPlayerManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::add_connectedPlayerManagerCreatedEvent
// Il2CppName: add_connectedPlayerManagerCreatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&INetworkPlayerModel::add_connectedPlayerManagerCreatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "add_connectedPlayerManagerCreatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::remove_connectedPlayerManagerCreatedEvent
// Il2CppName: remove_connectedPlayerManagerCreatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&INetworkPlayerModel::remove_connectedPlayerManagerCreatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "remove_connectedPlayerManagerCreatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::add_connectedPlayerManagerDestroyedEvent
// Il2CppName: add_connectedPlayerManagerDestroyedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&INetworkPlayerModel::add_connectedPlayerManagerDestroyedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "add_connectedPlayerManagerDestroyedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::remove_connectedPlayerManagerDestroyedEvent
// Il2CppName: remove_connectedPlayerManagerDestroyedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&INetworkPlayerModel::remove_connectedPlayerManagerDestroyedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "remove_connectedPlayerManagerDestroyedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::add_partyChangedEvent
// Il2CppName: add_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&INetworkPlayerModel::add_partyChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "add_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::remove_partyChangedEvent
// Il2CppName: remove_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&INetworkPlayerModel::remove_partyChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "remove_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::add_partySizeChangedEvent
// Il2CppName: add_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<int>*)>(&INetworkPlayerModel::add_partySizeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "add_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::remove_partySizeChangedEvent
// Il2CppName: remove_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<int>*)>(&INetworkPlayerModel::remove_partySizeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "remove_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::add_joinRequestedEvent
// Il2CppName: add_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&INetworkPlayerModel::add_joinRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "add_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::remove_joinRequestedEvent
// Il2CppName: remove_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&INetworkPlayerModel::remove_joinRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "remove_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::add_inviteRequestedEvent
// Il2CppName: add_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&INetworkPlayerModel::add_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "add_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::remove_inviteRequestedEvent
// Il2CppName: remove_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&INetworkPlayerModel::remove_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "remove_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::CreateParty
// Il2CppName: CreateParty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: INetworkPlayerModel::DestroyParty
// Il2CppName: DestroyParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)()>(&INetworkPlayerModel::DestroyParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "DestroyParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: INetworkPlayerModel::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INetworkPlayerModel::*)()>(&INetworkPlayerModel::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INetworkPlayerModel*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IPoolablePacket
#include "GlobalNamespace/IPoolablePacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IPoolablePacket.Release
void GlobalNamespace::IPoolablePacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPoolablePacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IPoolablePacket::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPoolablePacket::*)()>(&IPoolablePacket::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPoolablePacket*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IPacketPool
#include "GlobalNamespace/IPacketPool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IPacketPool.Release
void GlobalNamespace::IPacketPool::Release(::Il2CppObject* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPacketPool::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: IPacketPool::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPacketPool::*)(::Il2CppObject*)>(&IPacketPool::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPacketPool*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IRemoteProcedureCall
#include "GlobalNamespace/IRemoteProcedureCall.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IRemoteProcedureCall.get_syncTime
float GlobalNamespace::IRemoteProcedureCall::get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IRemoteProcedureCall::get_syncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IRemoteProcedureCall::get_syncTime
// Il2CppName: get_syncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IRemoteProcedureCall::*)()>(&IRemoteProcedureCall::get_syncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IRemoteProcedureCall*), "get_syncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IServerBeatmapProvider
#include "GlobalNamespace/IServerBeatmapProvider.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IServerBeatmapProvider.VerifyBeatmapForConfiguration
bool GlobalNamespace::IServerBeatmapProvider::VerifyBeatmapForConfiguration(GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IServerBeatmapProvider::VerifyBeatmapForConfiguration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerifyBeatmapForConfiguration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapId), ::il2cpp_utils::ExtractType(configuration)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, beatmapId, configuration);
}
// Autogenerated method: IServerBeatmapProvider.SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks
GlobalNamespace::BeatmapIdentifierNetSerializable* GlobalNamespace::IServerBeatmapProvider::SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks(int playerCount, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* beatmapsSuggestedByPlayers, GlobalNamespace::GameplayServerConfiguration configuration, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::SongPackMask>* playerOwnedSongPacks) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IServerBeatmapProvider::SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerCount), ::il2cpp_utils::ExtractType(beatmapsSuggestedByPlayers), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(playerOwnedSongPacks)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapIdentifierNetSerializable*, false>(this, ___internal__method, playerCount, beatmapsSuggestedByPlayers, configuration, playerOwnedSongPacks);
}
// Writing MetadataGetter for method: IServerBeatmapProvider::VerifyBeatmapForConfiguration
// Il2CppName: VerifyBeatmapForConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IServerBeatmapProvider::*)(GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayServerConfiguration)>(&IServerBeatmapProvider::VerifyBeatmapForConfiguration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IServerBeatmapProvider*), "VerifyBeatmapForConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: IServerBeatmapProvider::SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks
// Il2CppName: SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapIdentifierNetSerializable* (IServerBeatmapProvider::*)(int, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*, GlobalNamespace::GameplayServerConfiguration, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::SongPackMask>*)>(&IServerBeatmapProvider::SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IServerBeatmapProvider*), "SelectBeatmapFromSuggestionsConfigurationAndOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::SongPackMask>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IServerBeatmapProviderManager
#include "GlobalNamespace/IServerBeatmapProviderManager.hpp"
// Including type: IServerBeatmapProvider
#include "GlobalNamespace/IServerBeatmapProvider.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IServerBeatmapProviderManager.GetServerBeatmapProvider
GlobalNamespace::IServerBeatmapProvider* GlobalNamespace::IServerBeatmapProviderManager::GetServerBeatmapProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IServerBeatmapProviderManager::GetServerBeatmapProvider");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetServerBeatmapProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IServerBeatmapProvider*, false>(this, ___internal__method);
}
// Autogenerated method: IServerBeatmapProviderManager.RefreshAsync
System::Threading::Tasks::Task* GlobalNamespace::IServerBeatmapProviderManager::RefreshAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IServerBeatmapProviderManager::RefreshAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IServerBeatmapProviderManager::GetServerBeatmapProvider
// Il2CppName: GetServerBeatmapProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IServerBeatmapProvider* (IServerBeatmapProviderManager::*)()>(&IServerBeatmapProviderManager::GetServerBeatmapProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IServerBeatmapProviderManager*), "GetServerBeatmapProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IServerBeatmapProviderManager::RefreshAsync
// Il2CppName: RefreshAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (IServerBeatmapProviderManager::*)()>(&IServerBeatmapProviderManager::RefreshAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IServerBeatmapProviderManager*), "RefreshAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IUnconnectedSenderReceiver
#include "GlobalNamespace/IUnconnectedSenderReceiver.hpp"
// Including type: PacketEncryptionLayer
#include "GlobalNamespace/PacketEncryptionLayer.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IUnconnectedSenderReceiver.get_unconnectedPacketHeader
::Array<uint8_t>* GlobalNamespace::IUnconnectedSenderReceiver::get_unconnectedPacketHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnconnectedSenderReceiver::get_unconnectedPacketHeader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_unconnectedPacketHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: IUnconnectedSenderReceiver.get_encryptionLayer
GlobalNamespace::PacketEncryptionLayer* GlobalNamespace::IUnconnectedSenderReceiver::get_encryptionLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnconnectedSenderReceiver::get_encryptionLayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_encryptionLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketEncryptionLayer*, false>(this, ___internal__method);
}
// Autogenerated method: IUnconnectedSenderReceiver.get_port
int GlobalNamespace::IUnconnectedSenderReceiver::get_port() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnconnectedSenderReceiver::get_port");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_port", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IUnconnectedSenderReceiver.add_onReceiveUnconnectedDataEvent
void GlobalNamespace::IUnconnectedSenderReceiver::add_onReceiveUnconnectedDataEvent(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnconnectedSenderReceiver::add_onReceiveUnconnectedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onReceiveUnconnectedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IUnconnectedSenderReceiver.remove_onReceiveUnconnectedDataEvent
void GlobalNamespace::IUnconnectedSenderReceiver::remove_onReceiveUnconnectedDataEvent(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnconnectedSenderReceiver::remove_onReceiveUnconnectedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onReceiveUnconnectedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IUnconnectedSenderReceiver.SendUnconnected
void GlobalNamespace::IUnconnectedSenderReceiver::SendUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnconnectedSenderReceiver::SendUnconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, writer);
}
// Autogenerated method: IUnconnectedSenderReceiver.PollUpdate
void GlobalNamespace::IUnconnectedSenderReceiver::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnconnectedSenderReceiver::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IUnconnectedSenderReceiver::get_unconnectedPacketHeader
// Il2CppName: get_unconnectedPacketHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (IUnconnectedSenderReceiver::*)()>(&IUnconnectedSenderReceiver::get_unconnectedPacketHeader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnconnectedSenderReceiver*), "get_unconnectedPacketHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnconnectedSenderReceiver::get_encryptionLayer
// Il2CppName: get_encryptionLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketEncryptionLayer* (IUnconnectedSenderReceiver::*)()>(&IUnconnectedSenderReceiver::get_encryptionLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnconnectedSenderReceiver*), "get_encryptionLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnconnectedSenderReceiver::get_port
// Il2CppName: get_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IUnconnectedSenderReceiver::*)()>(&IUnconnectedSenderReceiver::get_port)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnconnectedSenderReceiver*), "get_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnconnectedSenderReceiver::add_onReceiveUnconnectedDataEvent
// Il2CppName: add_onReceiveUnconnectedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnconnectedSenderReceiver::*)(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>*)>(&IUnconnectedSenderReceiver::add_onReceiveUnconnectedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnconnectedSenderReceiver*), "add_onReceiveUnconnectedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>*>()});
  }
};
// Writing MetadataGetter for method: IUnconnectedSenderReceiver::remove_onReceiveUnconnectedDataEvent
// Il2CppName: remove_onReceiveUnconnectedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnconnectedSenderReceiver::*)(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>*)>(&IUnconnectedSenderReceiver::remove_onReceiveUnconnectedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnconnectedSenderReceiver*), "remove_onReceiveUnconnectedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>*>()});
  }
};
// Writing MetadataGetter for method: IUnconnectedSenderReceiver::SendUnconnected
// Il2CppName: SendUnconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnconnectedSenderReceiver::*)(System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataWriter*)>(&IUnconnectedSenderReceiver::SendUnconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnconnectedSenderReceiver*), "SendUnconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: IUnconnectedSenderReceiver::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnconnectedSenderReceiver::*)()>(&IUnconnectedSenderReceiver::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnconnectedSenderReceiver*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLibConnectionManager
#include "GlobalNamespace/LiteNetLibConnectionManager.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: LiteNetLibConnectionManager/LiteNetLibConnectionParamsBase
#include "GlobalNamespace/LiteNetLibConnectionManager_LiteNetLibConnectionParamsBase.hpp"
// Including type: LiteNetLibConnectionManager/StartServerParams
#include "GlobalNamespace/LiteNetLibConnectionManager_StartServerParams.hpp"
// Including type: LiteNetLibConnectionManager/StartRelayParams
#include "GlobalNamespace/LiteNetLibConnectionManager_StartRelayParams.hpp"
// Including type: LiteNetLibConnectionManager/StartClientParams
#include "GlobalNamespace/LiteNetLibConnectionManager_StartClientParams.hpp"
// Including type: LiteNetLibConnectionManager/ConnectToServerParams
#include "GlobalNamespace/LiteNetLibConnectionManager_ConnectToServerParams.hpp"
// Including type: LiteNetLibConnectionManager/NetPeerConnectionRequest
#include "GlobalNamespace/LiteNetLibConnectionManager_NetPeerConnectionRequest.hpp"
// Including type: LiteNetLibConnectionManager/NetPeerConnection
#include "GlobalNamespace/LiteNetLibConnectionManager_NetPeerConnection.hpp"
// Including type: LiteNetLibConnectionManager/StatisticsUpdated
#include "GlobalNamespace/LiteNetLibConnectionManager_StatisticsUpdated.hpp"
// Including type: LiteNetLibConnectionManager/<>c
#include "GlobalNamespace/LiteNetLibConnectionManager_--c.hpp"
// Including type: LiteNetLibConnectionManager/<BackgroundDisconnectSentry>d__129
#include "GlobalNamespace/LiteNetLibConnectionManager_-BackgroundDisconnectSentry-d__129.hpp"
// Including type: LiteNetLibConnectionManager/<BackgroundShutdownSentry>d__130
#include "GlobalNamespace/LiteNetLibConnectionManager_-BackgroundShutdownSentry-d__130.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: PacketEncryptionLayer
#include "GlobalNamespace/PacketEncryptionLayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: IConnectionInitParams`1
#include "GlobalNamespace/IConnectionInitParams_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: LiteNetLib.DisconnectInfo
#include "LiteNetLib/DisconnectInfo.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
// Including type: LiteNetLib.DisconnectReason
#include "LiteNetLib/DisconnectReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int64 kBackgroundDisconnectTimeout
int64_t GlobalNamespace::LiteNetLibConnectionManager::_get_kBackgroundDisconnectTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::_get_kBackgroundDisconnectTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "LiteNetLibConnectionManager", "kBackgroundDisconnectTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kBackgroundDisconnectTimeout
void GlobalNamespace::LiteNetLibConnectionManager::_set_kBackgroundDisconnectTimeout(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::_set_kBackgroundDisconnectTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager", "kBackgroundDisconnectTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kBackgroundShutdownTimeout
int64_t GlobalNamespace::LiteNetLibConnectionManager::_get_kBackgroundShutdownTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::_get_kBackgroundShutdownTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "LiteNetLibConnectionManager", "kBackgroundShutdownTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kBackgroundShutdownTimeout
void GlobalNamespace::LiteNetLibConnectionManager::_set_kBackgroundShutdownTimeout(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::_set_kBackgroundShutdownTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager", "kBackgroundShutdownTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kStatisticsUpdateInterval
int64_t GlobalNamespace::LiteNetLibConnectionManager::_get_kStatisticsUpdateInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::_get_kStatisticsUpdateInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "LiteNetLibConnectionManager", "kStatisticsUpdateInterval"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kStatisticsUpdateInterval
void GlobalNamespace::LiteNetLibConnectionManager::_set_kStatisticsUpdateInterval(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::_set_kStatisticsUpdateInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager", "kStatisticsUpdateInterval", value));
}
// Autogenerated method: LiteNetLibConnectionManager.add_onConnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onConnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::add_onConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onConnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.add_onDisconnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::add_onDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onDisconnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::remove_onDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.add_onConnectionFailedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onConnectionFailedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.add_onConnectionConnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onConnectionConnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.add_onConnectionDisconnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onConnectionDisconnectedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.add_onLatencyUpdatedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::add_onLatencyUpdatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onLatencyUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onLatencyUpdatedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::remove_onLatencyUpdatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onLatencyUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.add_onReceivedDataEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::add_onReceivedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onReceivedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onReceivedDataEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::remove_onReceivedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onReceivedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.add_onReceiveUnconnectedDataEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onReceiveUnconnectedDataEvent(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::add_onReceiveUnconnectedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onReceiveUnconnectedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onReceiveUnconnectedDataEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onReceiveUnconnectedDataEvent(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::remove_onReceiveUnconnectedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onReceiveUnconnectedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.add_onStatisticsUpdatedEvent
void GlobalNamespace::LiteNetLibConnectionManager::add_onStatisticsUpdatedEvent(GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::add_onStatisticsUpdatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onStatisticsUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.remove_onStatisticsUpdatedEvent
void GlobalNamespace::LiteNetLibConnectionManager::remove_onStatisticsUpdatedEvent(GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::remove_onStatisticsUpdatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onStatisticsUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLibConnectionManager.get_userId
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_userName
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_isConnected
bool GlobalNamespace::LiteNetLibConnectionManager::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_isConnecting
bool GlobalNamespace::LiteNetLibConnectionManager::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_isConnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_isDisconnecting
bool GlobalNamespace::LiteNetLibConnectionManager::get_isDisconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_isDisconnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_isConnectionOwner
bool GlobalNamespace::LiteNetLibConnectionManager::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_hasConnectionOwner
bool GlobalNamespace::LiteNetLibConnectionManager::get_hasConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_hasConnectionOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_isRelay
bool GlobalNamespace::LiteNetLibConnectionManager::get_isRelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_isRelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_isServer
bool GlobalNamespace::LiteNetLibConnectionManager::get_isServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_isServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_isClient
bool GlobalNamespace::LiteNetLibConnectionManager::get_isClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_isClient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isClient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_isDisposed
bool GlobalNamespace::LiteNetLibConnectionManager::get_isDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_isDisposed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_connectionCount
int GlobalNamespace::LiteNetLibConnectionManager::get_connectionCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_connectionCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_secret
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::get_secret() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_secret");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_port
int GlobalNamespace::LiteNetLibConnectionManager::get_port() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_port");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_port", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_unconnectedPacketHeader
::Array<uint8_t>* GlobalNamespace::LiteNetLibConnectionManager::get_unconnectedPacketHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_unconnectedPacketHeader");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_unconnectedPacketHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.get_encryptionLayer
GlobalNamespace::PacketEncryptionLayer* GlobalNamespace::LiteNetLibConnectionManager::get_encryptionLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::get_encryptionLayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_encryptionLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketEncryptionLayer*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.SendToAll
void GlobalNamespace::LiteNetLibConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::SendToAll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod);
}
// Autogenerated method: LiteNetLibConnectionManager.SendToAll
void GlobalNamespace::LiteNetLibConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::SendToAll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(excludingConnection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod, excludingConnection);
}
// Autogenerated method: LiteNetLibConnectionManager.SendUnconnected
void GlobalNamespace::LiteNetLibConnectionManager::SendUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::SendUnconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, writer);
}
// Autogenerated method: LiteNetLibConnectionManager.PollUpdate
void GlobalNamespace::LiteNetLibConnectionManager::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.SetSecret
void GlobalNamespace::LiteNetLibConnectionManager::SetSecret(::Il2CppString* secret) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::SetSecret");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(secret)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, secret);
}
// Autogenerated method: LiteNetLibConnectionManager.ConnectToEndPoint
void GlobalNamespace::LiteNetLibConnectionManager::ConnectToEndPoint(System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* remoteUserId, ::Il2CppString* remoteUserName, bool remoteUserIsConnectionOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ConnectToEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(remoteUserId), ::il2cpp_utils::ExtractType(remoteUserName), ::il2cpp_utils::ExtractType(remoteUserIsConnectionOwner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, remoteUserId, remoteUserName, remoteUserIsConnectionOwner);
}
// Autogenerated method: LiteNetLibConnectionManager.Dispose
void GlobalNamespace::LiteNetLibConnectionManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.DisposeAsync
System::Threading::Tasks::Task* GlobalNamespace::LiteNetLibConnectionManager::DisposeAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::DisposeAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisposeAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.DisposeInternal
void GlobalNamespace::LiteNetLibConnectionManager::DisposeInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::DisposeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisposeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.Disconnect
void GlobalNamespace::LiteNetLibConnectionManager::Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: LiteNetLibConnectionManager.DisconnectInternal
void GlobalNamespace::LiteNetLibConnectionManager::DisconnectInternal(GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::DisconnectInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason), ::il2cpp_utils::ExtractType(connectionFailedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason, connectionFailedReason);
}
// Autogenerated method: LiteNetLibConnectionManager.TryStartNetManager
bool GlobalNamespace::LiteNetLibConnectionManager::TryStartNetManager(int port, bool enableBackgroundSentry) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::TryStartNetManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryStartNetManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(enableBackgroundSentry)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, port, enableBackgroundSentry);
}
// Autogenerated method: LiteNetLibConnectionManager.StartBackgroundSentry
void GlobalNamespace::LiteNetLibConnectionManager::StartBackgroundSentry() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::StartBackgroundSentry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartBackgroundSentry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.CheckSentryState
void GlobalNamespace::LiteNetLibConnectionManager::CheckSentryState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::CheckSentryState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckSentryState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.UpdateStatistics
void GlobalNamespace::LiteNetLibConnectionManager::UpdateStatistics() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::UpdateStatistics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStatistics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.GetConnection
GlobalNamespace::IConnection* GlobalNamespace::LiteNetLibConnectionManager::GetConnection(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::GetConnection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnection*, false>(this, ___internal__method, index);
}
// Autogenerated method: LiteNetLibConnectionManager.IsConnectedToUser
bool GlobalNamespace::LiteNetLibConnectionManager::IsConnectedToUser(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::IsConnectedToUser");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsConnectedToUser", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId);
}
// Autogenerated method: LiteNetLibConnectionManager.HasConnectionToEndPoint
bool GlobalNamespace::LiteNetLibConnectionManager::HasConnectionToEndPoint(System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::HasConnectionToEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasConnectionToEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: LiteNetLibConnectionManager.HasPendingConnectionToEndPoint
bool GlobalNamespace::LiteNetLibConnectionManager::HasPendingConnectionToEndPoint(System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::HasPendingConnectionToEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasPendingConnectionToEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnPeerConnected
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerConnected(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib.INetEventListener.OnPeerConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnPeerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnNetworkError
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketError) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib.INetEventListener.OnNetworkError");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(socketError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, socketError);
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latencyMs) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib.INetEventListener.OnNetworkLatencyUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(latencyMs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, latencyMs);
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnConnectionRequest
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnConnectionRequest(LiteNetLib::ConnectionRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib.INetEventListener.OnConnectionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnConnectionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnPeerDisconnected
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib.INetEventListener.OnPeerDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnPeerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(disconnectInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, disconnectInfo);
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnNetworkReceive
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib.INetEventListener.OnNetworkReceive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkReceive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, reader, deliveryMethod);
}
// Autogenerated method: LiteNetLibConnectionManager.LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
void GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(messageType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, reader, messageType);
}
// Autogenerated method: LiteNetLibConnectionManager.GetConnection
GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection* GlobalNamespace::LiteNetLibConnectionManager::GetConnection(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::GetConnection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLibConnectionManager.AcceptAllPendingRequests
void GlobalNamespace::LiteNetLibConnectionManager::AcceptAllPendingRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::AcceptAllPendingRequests");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcceptAllPendingRequests", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.TryAccept
void GlobalNamespace::LiteNetLibConnectionManager::TryAccept(LiteNetLib::ConnectionRequest* request, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::TryAccept");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAccept", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(isConnectionOwner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request, userId, userName, isConnectionOwner);
}
// Autogenerated method: LiteNetLibConnectionManager.CreatePendingConnection
void GlobalNamespace::LiteNetLibConnectionManager::CreatePendingConnection(LiteNetLib::NetPeer* peer, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::CreatePendingConnection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePendingConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(isConnectionOwner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, userId, userName, isConnectionOwner);
}
// Autogenerated method: LiteNetLibConnectionManager.RemoveConnection
void GlobalNamespace::LiteNetLibConnectionManager::RemoveConnection(LiteNetLib::NetPeer* netPeer, LiteNetLib::DisconnectReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::RemoveConnection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(netPeer), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, netPeer, reason);
}
// Autogenerated method: LiteNetLibConnectionManager.TryDisconnect
void GlobalNamespace::LiteNetLibConnectionManager::TryDisconnect(LiteNetLib::DisconnectReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::TryDisconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDisconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: LiteNetLibConnectionManager.ToDisconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::LiteNetLibConnectionManager::ToDisconnectedReason(LiteNetLib::DisconnectReason disconnectReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ToDisconnectedReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToDisconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectReason)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DisconnectedReason, false>(this, ___internal__method, disconnectReason);
}
// Autogenerated method: LiteNetLibConnectionManager.ToConnectionFailedReason
GlobalNamespace::ConnectionFailedReason GlobalNamespace::LiteNetLibConnectionManager::ToConnectionFailedReason(LiteNetLib::DisconnectReason disconnectReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ToConnectionFailedReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToConnectionFailedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectReason)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectionFailedReason, false>(this, ___internal__method, disconnectReason);
}
// Autogenerated method: LiteNetLibConnectionManager.GetConnectionMessage
LiteNetLib::Utils::NetDataWriter* GlobalNamespace::LiteNetLibConnectionManager::GetConnectionMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::GetConnectionMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectionMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetDataWriter*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.ParseConnectionMessage
bool GlobalNamespace::LiteNetLibConnectionManager::ParseConnectionMessage(LiteNetLib::Utils::NetDataReader* reader, ::Il2CppString*& secret, ::Il2CppString*& userId, ::Il2CppString*& userName, bool& isConnectionOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ParseConnectionMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ParseConnectionMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, reader, secret, userId, userName, isConnectionOwner);
}
// Autogenerated method: LiteNetLibConnectionManager.BackgroundDisconnectSentry
System::Threading::Tasks::Task* GlobalNamespace::LiteNetLibConnectionManager::BackgroundDisconnectSentry() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::BackgroundDisconnectSentry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackgroundDisconnectSentry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.BackgroundShutdownSentry
System::Threading::Tasks::Task* GlobalNamespace::LiteNetLibConnectionManager::BackgroundShutdownSentry() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::BackgroundShutdownSentry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackgroundShutdownSentry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager.Log
void GlobalNamespace::LiteNetLibConnectionManager::Log(::Il2CppString* msg) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, msg);
}
// Autogenerated method: LiteNetLibConnectionManager.LogError
void GlobalNamespace::LiteNetLibConnectionManager::LogError(::Il2CppString* msg) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::LogError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, msg);
}
// Autogenerated method: LiteNetLibConnectionManager.<DisposeAsync>b__100_0
void GlobalNamespace::LiteNetLibConnectionManager::$DisposeAsync$b__100_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::<DisposeAsync>b__100_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DisposeAsync>b__100_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LiteNetLibConnectionManager::add_onConnectedEvent
// Il2CppName: add_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action*)>(&LiteNetLibConnectionManager::add_onConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "add_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::remove_onConnectedEvent
// Il2CppName: remove_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action*)>(&LiteNetLibConnectionManager::remove_onConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "remove_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::add_onDisconnectedEvent
// Il2CppName: add_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&LiteNetLibConnectionManager::add_onDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "add_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::remove_onDisconnectedEvent
// Il2CppName: remove_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&LiteNetLibConnectionManager::remove_onDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "remove_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::add_onConnectionFailedEvent
// Il2CppName: add_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&LiteNetLibConnectionManager::add_onConnectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "add_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::remove_onConnectionFailedEvent
// Il2CppName: remove_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&LiteNetLibConnectionManager::remove_onConnectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::add_onConnectionConnectedEvent
// Il2CppName: add_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_1<GlobalNamespace::IConnection*>*)>(&LiteNetLibConnectionManager::add_onConnectionConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnection*>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::remove_onConnectionConnectedEvent
// Il2CppName: remove_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_1<GlobalNamespace::IConnection*>*)>(&LiteNetLibConnectionManager::remove_onConnectionConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnection*>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::add_onConnectionDisconnectedEvent
// Il2CppName: add_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*)>(&LiteNetLibConnectionManager::add_onConnectionDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::remove_onConnectionDisconnectedEvent
// Il2CppName: remove_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*)>(&LiteNetLibConnectionManager::remove_onConnectionDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::add_onLatencyUpdatedEvent
// Il2CppName: add_onLatencyUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, float>*)>(&LiteNetLibConnectionManager::add_onLatencyUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "add_onLatencyUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, float>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::remove_onLatencyUpdatedEvent
// Il2CppName: remove_onLatencyUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, float>*)>(&LiteNetLibConnectionManager::remove_onLatencyUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "remove_onLatencyUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, float>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::add_onReceivedDataEvent
// Il2CppName: add_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)>(&LiteNetLibConnectionManager::add_onReceivedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "add_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::remove_onReceivedDataEvent
// Il2CppName: remove_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)>(&LiteNetLibConnectionManager::remove_onReceivedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "remove_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::add_onReceiveUnconnectedDataEvent
// Il2CppName: add_onReceiveUnconnectedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>*)>(&LiteNetLibConnectionManager::add_onReceiveUnconnectedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "add_onReceiveUnconnectedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::remove_onReceiveUnconnectedDataEvent
// Il2CppName: remove_onReceiveUnconnectedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>*)>(&LiteNetLibConnectionManager::remove_onReceiveUnconnectedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "remove_onReceiveUnconnectedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::add_onStatisticsUpdatedEvent
// Il2CppName: add_onStatisticsUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*)>(&LiteNetLibConnectionManager::add_onStatisticsUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "add_onStatisticsUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::remove_onStatisticsUpdatedEvent
// Il2CppName: remove_onStatisticsUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*)>(&LiteNetLibConnectionManager::remove_onStatisticsUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "remove_onStatisticsUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_isConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_isDisconnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_hasConnectionOwner
// Il2CppName: get_hasConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_hasConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_hasConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_isRelay
// Il2CppName: get_isRelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_isRelay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_isRelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_isServer
// Il2CppName: get_isServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_isServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_isServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_isClient
// Il2CppName: get_isClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_isClient)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_isClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_isDisposed
// Il2CppName: get_isDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_isDisposed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_isDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_connectionCount
// Il2CppName: get_connectionCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_connectionCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_connectionCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_secret
// Il2CppName: get_secret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_secret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_secret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_port
// Il2CppName: get_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_port)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_unconnectedPacketHeader
// Il2CppName: get_unconnectedPacketHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_unconnectedPacketHeader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_unconnectedPacketHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::get_encryptionLayer
// Il2CppName: get_encryptionLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketEncryptionLayer* (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::get_encryptionLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "get_encryptionLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(MasterServer::ITimeProvider*)>(&LiteNetLibConnectionManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(MasterServer::ITimeProvider*)>(&LiteNetLibConnectionManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod)>(&LiteNetLibConnectionManager::SendToAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod, GlobalNamespace::IConnection*)>(&LiteNetLibConnectionManager::SendToAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::SendUnconnected
// Il2CppName: SendUnconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataWriter*)>(&LiteNetLibConnectionManager::SendUnconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "SendUnconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::Init
// Il2CppName: Init
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LiteNetLibConnectionManager::SetSecret
// Il2CppName: SetSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(::Il2CppString*)>(&LiteNetLibConnectionManager::SetSecret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "SetSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::ConnectToEndPoint
// Il2CppName: ConnectToEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, bool)>(&LiteNetLibConnectionManager::ConnectToEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "ConnectToEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::DisposeAsync
// Il2CppName: DisposeAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::DisposeAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "DisposeAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::DisposeInternal
// Il2CppName: DisposeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::DisposeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "DisposeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(GlobalNamespace::DisconnectedReason)>(&LiteNetLibConnectionManager::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::DisconnectInternal
// Il2CppName: DisconnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(GlobalNamespace::DisconnectedReason, GlobalNamespace::ConnectionFailedReason)>(&LiteNetLibConnectionManager::DisconnectInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "DisconnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::TryStartNetManager
// Il2CppName: TryStartNetManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)(int, bool)>(&LiteNetLibConnectionManager::TryStartNetManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "TryStartNetManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::StartBackgroundSentry
// Il2CppName: StartBackgroundSentry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::StartBackgroundSentry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "StartBackgroundSentry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::CheckSentryState
// Il2CppName: CheckSentryState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::CheckSentryState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "CheckSentryState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::UpdateStatistics
// Il2CppName: UpdateStatistics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::UpdateStatistics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "UpdateStatistics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnection* (LiteNetLibConnectionManager::*)(int)>(&LiteNetLibConnectionManager::GetConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::IsConnectedToUser
// Il2CppName: IsConnectedToUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)(::Il2CppString*)>(&LiteNetLibConnectionManager::IsConnectedToUser)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "IsConnectedToUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::HasConnectionToEndPoint
// Il2CppName: HasConnectionToEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)(System::Net::IPEndPoint*)>(&LiteNetLibConnectionManager::HasConnectionToEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "HasConnectionToEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::HasPendingConnectionToEndPoint
// Il2CppName: HasPendingConnectionToEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)(System::Net::IPEndPoint*)>(&LiteNetLibConnectionManager::HasPendingConnectionToEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "HasPendingConnectionToEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerConnected
// Il2CppName: LiteNetLib.INetEventListener.OnPeerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::NetPeer*)>(&LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnPeerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkError
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Net::IPEndPoint*, System::Net::Sockets::SocketError)>(&LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnNetworkError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::NetPeer*, int)>(&LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnNetworkLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnConnectionRequest
// Il2CppName: LiteNetLib.INetEventListener.OnConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::ConnectionRequest*)>(&LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnConnectionRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::ConnectionRequest*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerDisconnected
// Il2CppName: LiteNetLib.INetEventListener.OnPeerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::NetPeer*, LiteNetLib::DisconnectInfo)>(&LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnPeerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DisconnectInfo>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceive
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::NetPeer*, LiteNetLib::NetPacketReader*, LiteNetLib::DeliveryMethod)>(&LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnNetworkReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPacketReader*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(System::Net::IPEndPoint*, LiteNetLib::NetPacketReader*, LiteNetLib::UnconnectedMessageType)>(&LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPacketReader*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::UnconnectedMessageType>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection* (LiteNetLibConnectionManager::*)(LiteNetLib::NetPeer*)>(&LiteNetLibConnectionManager::GetConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::AcceptAllPendingRequests
// Il2CppName: AcceptAllPendingRequests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::AcceptAllPendingRequests)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "AcceptAllPendingRequests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::TryAccept
// Il2CppName: TryAccept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::ConnectionRequest*, ::Il2CppString*, ::Il2CppString*, bool)>(&LiteNetLibConnectionManager::TryAccept)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "TryAccept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::ConnectionRequest*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::CreatePendingConnection
// Il2CppName: CreatePendingConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::NetPeer*, ::Il2CppString*, ::Il2CppString*, bool)>(&LiteNetLibConnectionManager::CreatePendingConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "CreatePendingConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::RemoveConnection
// Il2CppName: RemoveConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::NetPeer*, LiteNetLib::DisconnectReason)>(&LiteNetLibConnectionManager::RemoveConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "RemoveConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DisconnectReason>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::TryDisconnect
// Il2CppName: TryDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(LiteNetLib::DisconnectReason)>(&LiteNetLibConnectionManager::TryDisconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "TryDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::DisconnectReason>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::ToDisconnectedReason
// Il2CppName: ToDisconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DisconnectedReason (LiteNetLibConnectionManager::*)(LiteNetLib::DisconnectReason)>(&LiteNetLibConnectionManager::ToDisconnectedReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "ToDisconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::DisconnectReason>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::ToConnectionFailedReason
// Il2CppName: ToConnectionFailedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectionFailedReason (LiteNetLibConnectionManager::*)(LiteNetLib::DisconnectReason)>(&LiteNetLibConnectionManager::ToConnectionFailedReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "ToConnectionFailedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::DisconnectReason>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::GetConnectionMessage
// Il2CppName: GetConnectionMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::Utils::NetDataWriter* (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::GetConnectionMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "GetConnectionMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::ParseConnectionMessage
// Il2CppName: ParseConnectionMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::*)(LiteNetLib::Utils::NetDataReader*, ::Il2CppString*&, ::Il2CppString*&, ::Il2CppString*&, bool&)>(&LiteNetLibConnectionManager::ParseConnectionMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "ParseConnectionMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::BackgroundDisconnectSentry
// Il2CppName: BackgroundDisconnectSentry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::BackgroundDisconnectSentry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "BackgroundDisconnectSentry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::BackgroundShutdownSentry
// Il2CppName: BackgroundShutdownSentry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::BackgroundShutdownSentry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "BackgroundShutdownSentry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(::Il2CppString*)>(&LiteNetLibConnectionManager::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)(::Il2CppString*)>(&LiteNetLibConnectionManager::LogError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::$DisposeAsync$b__100_0
// Il2CppName: <DisposeAsync>b__100_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::$DisposeAsync$b__100_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), "<DisposeAsync>b__100_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::*)()>(&LiteNetLibConnectionManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLibConnectionManager/NetworkMode
#include "GlobalNamespace/LiteNetLibConnectionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLibConnectionManager/NetworkMode None
GlobalNamespace::LiteNetLibConnectionManager::NetworkMode GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LiteNetLibConnectionManager::NetworkMode>("", "LiteNetLibConnectionManager/NetworkMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLibConnectionManager/NetworkMode None
void GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_set_None(GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager/NetworkMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLibConnectionManager/NetworkMode Client
GlobalNamespace::LiteNetLibConnectionManager::NetworkMode GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_get_Client() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_get_Client");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LiteNetLibConnectionManager::NetworkMode>("", "LiteNetLibConnectionManager/NetworkMode", "Client"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLibConnectionManager/NetworkMode Client
void GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_set_Client(GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_set_Client");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager/NetworkMode", "Client", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLibConnectionManager/NetworkMode Server
GlobalNamespace::LiteNetLibConnectionManager::NetworkMode GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_get_Server() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_get_Server");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LiteNetLibConnectionManager::NetworkMode>("", "LiteNetLibConnectionManager/NetworkMode", "Server"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLibConnectionManager/NetworkMode Server
void GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_set_Server(GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_set_Server");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager/NetworkMode", "Server", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLibConnectionManager/NetworkMode Relay
GlobalNamespace::LiteNetLibConnectionManager::NetworkMode GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_get_Relay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_get_Relay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LiteNetLibConnectionManager::NetworkMode>("", "LiteNetLibConnectionManager/NetworkMode", "Relay"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLibConnectionManager/NetworkMode Relay
void GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_set_Relay(GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetworkMode::_set_Relay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager/NetworkMode", "Relay", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLibConnectionManager/ConnectionState
#include "GlobalNamespace/LiteNetLibConnectionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLibConnectionManager/ConnectionState Unconnected
GlobalNamespace::LiteNetLibConnectionManager::ConnectionState GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_get_Unconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_get_Unconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LiteNetLibConnectionManager::ConnectionState>("", "LiteNetLibConnectionManager/ConnectionState", "Unconnected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLibConnectionManager/ConnectionState Unconnected
void GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_set_Unconnected(GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_set_Unconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager/ConnectionState", "Unconnected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLibConnectionManager/ConnectionState Connecting
GlobalNamespace::LiteNetLibConnectionManager::ConnectionState GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_get_Connecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_get_Connecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LiteNetLibConnectionManager::ConnectionState>("", "LiteNetLibConnectionManager/ConnectionState", "Connecting"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLibConnectionManager/ConnectionState Connecting
void GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_set_Connecting(GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_set_Connecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager/ConnectionState", "Connecting", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLibConnectionManager/ConnectionState Connected
GlobalNamespace::LiteNetLibConnectionManager::ConnectionState GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LiteNetLibConnectionManager::ConnectionState>("", "LiteNetLibConnectionManager/ConnectionState", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLibConnectionManager/ConnectionState Connected
void GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_set_Connected(GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager/ConnectionState", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLibConnectionManager/ConnectionState Disconnecting
GlobalNamespace::LiteNetLibConnectionManager::ConnectionState GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_get_Disconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_get_Disconnecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LiteNetLibConnectionManager::ConnectionState>("", "LiteNetLibConnectionManager/ConnectionState", "Disconnecting"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLibConnectionManager/ConnectionState Disconnecting
void GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_set_Disconnecting(GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::ConnectionState::_set_Disconnecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager/ConnectionState", "Disconnecting", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLibConnectionManager/LiteNetLibConnectionParamsBase
#include "GlobalNamespace/LiteNetLibConnectionManager_LiteNetLibConnectionParamsBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LiteNetLibConnectionManager::LiteNetLibConnectionParamsBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::LiteNetLibConnectionParamsBase::*)()>(&LiteNetLibConnectionManager::LiteNetLibConnectionParamsBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::LiteNetLibConnectionParamsBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::LiteNetLibConnectionParamsBase::*)()>(&LiteNetLibConnectionManager::LiteNetLibConnectionParamsBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::LiteNetLibConnectionParamsBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLibConnectionManager/StartServerParams
#include "GlobalNamespace/LiteNetLibConnectionManager_StartServerParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LiteNetLibConnectionManager::StartServerParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::StartServerParams::*)()>(&LiteNetLibConnectionManager::StartServerParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StartServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::StartServerParams::*)()>(&LiteNetLibConnectionManager::StartServerParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StartServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLibConnectionManager/StartRelayParams
#include "GlobalNamespace/LiteNetLibConnectionManager_StartRelayParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LiteNetLibConnectionManager::StartRelayParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::StartRelayParams::*)()>(&LiteNetLibConnectionManager::StartRelayParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StartRelayParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::StartRelayParams::*)()>(&LiteNetLibConnectionManager::StartRelayParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StartRelayParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLibConnectionManager/StartClientParams
#include "GlobalNamespace/LiteNetLibConnectionManager_StartClientParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LiteNetLibConnectionManager::StartClientParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::StartClientParams::*)()>(&LiteNetLibConnectionManager::StartClientParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StartClientParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::StartClientParams::*)()>(&LiteNetLibConnectionManager::StartClientParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StartClientParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLibConnectionManager/ConnectToServerParams
#include "GlobalNamespace/LiteNetLibConnectionManager_ConnectToServerParams.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LiteNetLibConnectionManager::ConnectToServerParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::ConnectToServerParams::*)()>(&LiteNetLibConnectionManager::ConnectToServerParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::ConnectToServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::ConnectToServerParams::*)()>(&LiteNetLibConnectionManager::ConnectToServerParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::ConnectToServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLibConnectionManager/NetPeerConnectionRequest
#include "GlobalNamespace/LiteNetLibConnectionManager_NetPeerConnectionRequest.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest.get_userId
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest.get_userName
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest.get_isConnectionOwner
bool GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_isConnectionOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest.get_endPoint
System::Net::IPEndPoint* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_endPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::get_endPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_endPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnectionRequest.Accept
LiteNetLib::NetPeer* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::Accept() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest::Accept");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Accept", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnectionRequest::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LiteNetLibConnectionManager::NetPeerConnectionRequest::*)()>(&LiteNetLibConnectionManager::NetPeerConnectionRequest::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnectionRequest*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnectionRequest::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LiteNetLibConnectionManager::NetPeerConnectionRequest::*)()>(&LiteNetLibConnectionManager::NetPeerConnectionRequest::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnectionRequest*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnectionRequest::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::NetPeerConnectionRequest::*)()>(&LiteNetLibConnectionManager::NetPeerConnectionRequest::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnectionRequest*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnectionRequest::get_endPoint
// Il2CppName: get_endPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::IPEndPoint* (LiteNetLibConnectionManager::NetPeerConnectionRequest::*)()>(&LiteNetLibConnectionManager::NetPeerConnectionRequest::get_endPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnectionRequest*), "get_endPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnectionRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::NetPeerConnectionRequest::*)(LiteNetLib::ConnectionRequest*, ::Il2CppString*, ::Il2CppString*, bool)>(&LiteNetLibConnectionManager::NetPeerConnectionRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnectionRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::ConnectionRequest*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::NetPeerConnectionRequest::*)(LiteNetLib::ConnectionRequest*, ::Il2CppString*, ::Il2CppString*, bool)>(&LiteNetLibConnectionManager::NetPeerConnectionRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnectionRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::ConnectionRequest*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnectionRequest::Accept
// Il2CppName: Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::NetPeer* (LiteNetLibConnectionManager::NetPeerConnectionRequest::*)()>(&LiteNetLibConnectionManager::NetPeerConnectionRequest::Accept)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnectionRequest*), "Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLibConnectionManager/NetPeerConnection
#include "GlobalNamespace/LiteNetLibConnectionManager_NetPeerConnection.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnection.get_userId
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnection.get_userName
::Il2CppString* GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnection.get_isConnectionOwner
bool GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnection.Send
void GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::Send(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::Send");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnection.Equals
bool GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::Equals(GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnection.Disconnect
void GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnection.Equals
bool GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: LiteNetLibConnectionManager/NetPeerConnection.GetHashCode
int GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnection::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LiteNetLibConnectionManager::NetPeerConnection::*)()>(&LiteNetLibConnectionManager::NetPeerConnection::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnection*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnection::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LiteNetLibConnectionManager::NetPeerConnection::*)()>(&LiteNetLibConnectionManager::NetPeerConnection::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnection*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnection::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::NetPeerConnection::*)()>(&LiteNetLibConnectionManager::NetPeerConnection::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnection*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::NetPeerConnection::*)(LiteNetLib::NetPeer*, ::Il2CppString*, ::Il2CppString*, bool)>(&LiteNetLibConnectionManager::NetPeerConnection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::NetPeerConnection::*)(LiteNetLib::NetPeer*, ::Il2CppString*, ::Il2CppString*, bool)>(&LiteNetLibConnectionManager::NetPeerConnection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnection::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::NetPeerConnection::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod)>(&LiteNetLibConnectionManager::NetPeerConnection::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnection*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnection::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::NetPeerConnection::*)(GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*)>(&LiteNetLibConnectionManager::NetPeerConnection::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnection*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnection::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::NetPeerConnection::*)()>(&LiteNetLibConnectionManager::NetPeerConnection::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnection*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnection::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::NetPeerConnection::*)(::Il2CppObject*)>(&LiteNetLibConnectionManager::NetPeerConnection::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnection*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::NetPeerConnection::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLibConnectionManager::NetPeerConnection::*)()>(&LiteNetLibConnectionManager::NetPeerConnection::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::NetPeerConnection*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLibConnectionManager/StatisticsUpdated
#include "GlobalNamespace/LiteNetLibConnectionManager_StatisticsUpdated.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLibConnectionManager/StatisticsUpdated.Invoke
void GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated::Invoke(int64_t packetsSent, int64_t packetsReceived, int64_t bytesSent, int64_t bytesReceived, int64_t packetsLost, int64_t packetsSentEncrypted, int64_t packetsSentPlaintext, int64_t packetsSentRejected, int64_t packetsReceivedEncrypted, int64_t packetsReceivedPlaintext, int64_t packetsReceivedRejected, int64_t encryptionProcessingTime, int64_t decryptionProcessingTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packetsSent), ::il2cpp_utils::ExtractType(packetsReceived), ::il2cpp_utils::ExtractType(bytesSent), ::il2cpp_utils::ExtractType(bytesReceived), ::il2cpp_utils::ExtractType(packetsLost), ::il2cpp_utils::ExtractType(packetsSentEncrypted), ::il2cpp_utils::ExtractType(packetsSentPlaintext), ::il2cpp_utils::ExtractType(packetsSentRejected), ::il2cpp_utils::ExtractType(packetsReceivedEncrypted), ::il2cpp_utils::ExtractType(packetsReceivedPlaintext), ::il2cpp_utils::ExtractType(packetsReceivedRejected), ::il2cpp_utils::ExtractType(encryptionProcessingTime), ::il2cpp_utils::ExtractType(decryptionProcessingTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packetsSent, packetsReceived, bytesSent, bytesReceived, packetsLost, packetsSentEncrypted, packetsSentPlaintext, packetsSentRejected, packetsReceivedEncrypted, packetsReceivedPlaintext, packetsReceivedRejected, encryptionProcessingTime, decryptionProcessingTime);
}
// Autogenerated method: LiteNetLibConnectionManager/StatisticsUpdated.BeginInvoke
System::IAsyncResult* GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated::BeginInvoke(int64_t packetsSent, int64_t packetsReceived, int64_t bytesSent, int64_t bytesReceived, int64_t packetsLost, int64_t packetsSentEncrypted, int64_t packetsSentPlaintext, int64_t packetsSentRejected, int64_t packetsReceivedEncrypted, int64_t packetsReceivedPlaintext, int64_t packetsReceivedRejected, int64_t encryptionProcessingTime, int64_t decryptionProcessingTime, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packetsSent), ::il2cpp_utils::ExtractType(packetsReceived), ::il2cpp_utils::ExtractType(bytesSent), ::il2cpp_utils::ExtractType(bytesReceived), ::il2cpp_utils::ExtractType(packetsLost), ::il2cpp_utils::ExtractType(packetsSentEncrypted), ::il2cpp_utils::ExtractType(packetsSentPlaintext), ::il2cpp_utils::ExtractType(packetsSentRejected), ::il2cpp_utils::ExtractType(packetsReceivedEncrypted), ::il2cpp_utils::ExtractType(packetsReceivedPlaintext), ::il2cpp_utils::ExtractType(packetsReceivedRejected), ::il2cpp_utils::ExtractType(encryptionProcessingTime), ::il2cpp_utils::ExtractType(decryptionProcessingTime), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, packetsSent, packetsReceived, bytesSent, bytesReceived, packetsLost, packetsSentEncrypted, packetsSentPlaintext, packetsSentRejected, packetsReceivedEncrypted, packetsReceivedPlaintext, packetsReceivedRejected, encryptionProcessingTime, decryptionProcessingTime, callback, object);
}
// Autogenerated method: LiteNetLibConnectionManager/StatisticsUpdated.EndInvoke
void GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: LiteNetLibConnectionManager::StatisticsUpdated::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::StatisticsUpdated::*)(::Il2CppObject*, System::IntPtr)>(&LiteNetLibConnectionManager::StatisticsUpdated::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StatisticsUpdated*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::StatisticsUpdated::*)(::Il2CppObject*, System::IntPtr)>(&LiteNetLibConnectionManager::StatisticsUpdated::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StatisticsUpdated*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::StatisticsUpdated::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::StatisticsUpdated::*)(int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t)>(&LiteNetLibConnectionManager::StatisticsUpdated::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StatisticsUpdated*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::StatisticsUpdated::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (LiteNetLibConnectionManager::StatisticsUpdated::*)(int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, System::AsyncCallback*, ::Il2CppObject*)>(&LiteNetLibConnectionManager::StatisticsUpdated::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StatisticsUpdated*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::StatisticsUpdated::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::StatisticsUpdated::*)(System::IAsyncResult*)>(&LiteNetLibConnectionManager::StatisticsUpdated::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::StatisticsUpdated*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLibConnectionManager/<>c
#include "GlobalNamespace/LiteNetLibConnectionManager_--c.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: LiteNetLibConnectionManager/NetPeerConnection
#include "GlobalNamespace/LiteNetLibConnectionManager_NetPeerConnection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly LiteNetLibConnectionManager/<>c <>9
GlobalNamespace::LiteNetLibConnectionManager::$$c* GlobalNamespace::LiteNetLibConnectionManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::LiteNetLibConnectionManager::$$c*>("", "LiteNetLibConnectionManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly LiteNetLibConnectionManager/<>c <>9
void GlobalNamespace::LiteNetLibConnectionManager::$$c::_set_$$9(GlobalNamespace::LiteNetLibConnectionManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Predicate`1<LiteNetLibConnectionManager/NetPeerConnection> <>9__71_0
System::Predicate_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>* GlobalNamespace::LiteNetLibConnectionManager::$$c::_get_$$9__71_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::$$c::_get_$$9__71_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Predicate_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>*>("", "LiteNetLibConnectionManager/<>c", "<>9__71_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Predicate`1<LiteNetLibConnectionManager/NetPeerConnection> <>9__71_0
void GlobalNamespace::LiteNetLibConnectionManager::$$c::_set_$$9__71_0(System::Predicate_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::$$c::_set_$$9__71_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "LiteNetLibConnectionManager/<>c", "<>9__71_0", value)));
}
// Autogenerated method: LiteNetLibConnectionManager/<>c..cctor
void GlobalNamespace::LiteNetLibConnectionManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LiteNetLibConnectionManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/<>c.<get_hasConnectionOwner>b__71_0
bool GlobalNamespace::LiteNetLibConnectionManager::$$c::$get_hasConnectionOwner$b__71_0(GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::$$c::<get_hasConnectionOwner>b__71_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_hasConnectionOwner>b__71_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, c);
}
// Writing MetadataGetter for method: LiteNetLibConnectionManager::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LiteNetLibConnectionManager::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::$$c::$get_hasConnectionOwner$b__71_0
// Il2CppName: <get_hasConnectionOwner>b__71_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLibConnectionManager::$$c::*)(GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*)>(&LiteNetLibConnectionManager::$$c::$get_hasConnectionOwner$b__71_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::$$c*), "<get_hasConnectionOwner>b__71_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>()});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::$$c::*)()>(&LiteNetLibConnectionManager::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::$$c::*)()>(&LiteNetLibConnectionManager::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLibConnectionManager/<BackgroundDisconnectSentry>d__129
#include "GlobalNamespace/LiteNetLibConnectionManager_-BackgroundDisconnectSentry-d__129.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLibConnectionManager/<BackgroundDisconnectSentry>d__129.MoveNext
void GlobalNamespace::LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/<BackgroundDisconnectSentry>d__129.SetStateMachine
void GlobalNamespace::LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129::*)()>(&LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__129), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLibConnectionManager/<BackgroundShutdownSentry>d__130
#include "GlobalNamespace/LiteNetLibConnectionManager_-BackgroundShutdownSentry-d__130.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLibConnectionManager/<BackgroundShutdownSentry>d__130.MoveNext
void GlobalNamespace::LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: LiteNetLibConnectionManager/<BackgroundShutdownSentry>d__130.SetStateMachine
void GlobalNamespace::LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130::*)()>(&LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__130), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseMasterServerAcknowledgeMessage
#include "GlobalNamespace/BaseMasterServerAcknowledgeMessage.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseMasterServerAcknowledgeMessage.get_messageHandled
bool GlobalNamespace::BaseMasterServerAcknowledgeMessage::get_messageHandled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerAcknowledgeMessage::get_messageHandled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_messageHandled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerAcknowledgeMessage.set_messageHandled
void GlobalNamespace::BaseMasterServerAcknowledgeMessage::set_messageHandled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerAcknowledgeMessage::set_messageHandled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_messageHandled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseMasterServerAcknowledgeMessage.Init
GlobalNamespace::BaseMasterServerAcknowledgeMessage* GlobalNamespace::BaseMasterServerAcknowledgeMessage::Init(bool messageHandled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerAcknowledgeMessage::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageHandled)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseMasterServerAcknowledgeMessage*, false>(this, ___internal__method, messageHandled);
}
// Autogenerated method: BaseMasterServerAcknowledgeMessage.get_resultCode
uint8_t GlobalNamespace::BaseMasterServerAcknowledgeMessage::get_resultCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerAcknowledgeMessage::get_resultCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerAcknowledgeMessage.get_resultCodeString
::Il2CppString* GlobalNamespace::BaseMasterServerAcknowledgeMessage::get_resultCodeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerAcknowledgeMessage::get_resultCodeString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCodeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerAcknowledgeMessage.Serialize
void GlobalNamespace::BaseMasterServerAcknowledgeMessage::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerAcknowledgeMessage::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BaseMasterServerAcknowledgeMessage.Deserialize
void GlobalNamespace::BaseMasterServerAcknowledgeMessage::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerAcknowledgeMessage::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: BaseMasterServerAcknowledgeMessage::get_messageHandled
// Il2CppName: get_messageHandled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseMasterServerAcknowledgeMessage::*)()>(&BaseMasterServerAcknowledgeMessage::get_messageHandled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerAcknowledgeMessage*), "get_messageHandled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerAcknowledgeMessage::set_messageHandled
// Il2CppName: set_messageHandled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerAcknowledgeMessage::*)(bool)>(&BaseMasterServerAcknowledgeMessage::set_messageHandled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerAcknowledgeMessage*), "set_messageHandled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerAcknowledgeMessage::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseMasterServerAcknowledgeMessage* (BaseMasterServerAcknowledgeMessage::*)(bool)>(&BaseMasterServerAcknowledgeMessage::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerAcknowledgeMessage*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerAcknowledgeMessage::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (BaseMasterServerAcknowledgeMessage::*)()>(&BaseMasterServerAcknowledgeMessage::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerAcknowledgeMessage*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerAcknowledgeMessage::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (BaseMasterServerAcknowledgeMessage::*)()>(&BaseMasterServerAcknowledgeMessage::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerAcknowledgeMessage*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerAcknowledgeMessage::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerAcknowledgeMessage::*)(LiteNetLib::Utils::NetDataWriter*)>(&BaseMasterServerAcknowledgeMessage::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerAcknowledgeMessage*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerAcknowledgeMessage::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerAcknowledgeMessage::*)(LiteNetLib::Utils::NetDataReader*)>(&BaseMasterServerAcknowledgeMessage::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerAcknowledgeMessage*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerAcknowledgeMessage::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerAcknowledgeMessage::*)()>(&BaseMasterServerAcknowledgeMessage::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerAcknowledgeMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerAcknowledgeMessage::*)()>(&BaseMasterServerAcknowledgeMessage::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerAcknowledgeMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BaseMasterServerReliableRequest
#include "GlobalNamespace/BaseMasterServerReliableRequest.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseMasterServerReliableRequest.get_requestId
uint GlobalNamespace::BaseMasterServerReliableRequest::get_requestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableRequest::get_requestId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerReliableRequest.set_requestId
void GlobalNamespace::BaseMasterServerReliableRequest::set_requestId(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableRequest::set_requestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_requestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseMasterServerReliableRequest.Serialize
void GlobalNamespace::BaseMasterServerReliableRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BaseMasterServerReliableRequest.Deserialize
void GlobalNamespace::BaseMasterServerReliableRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BaseMasterServerReliableRequest.Release
void GlobalNamespace::BaseMasterServerReliableRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerReliableRequest.MasterServer.IMasterServerReliableRequest.WithRequestId
MasterServer::IMasterServerReliableRequest* GlobalNamespace::BaseMasterServerReliableRequest::MasterServer_IMasterServerReliableRequest_WithRequestId(uint requestId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableRequest::MasterServer.IMasterServerReliableRequest.WithRequestId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MasterServer.IMasterServerReliableRequest.WithRequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestId)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::IMasterServerReliableRequest*, false>(this, ___internal__method, requestId);
}
// Writing MetadataGetter for method: BaseMasterServerReliableRequest::get_requestId
// Il2CppName: get_requestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (BaseMasterServerReliableRequest::*)()>(&BaseMasterServerReliableRequest::get_requestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableRequest*), "get_requestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableRequest::set_requestId
// Il2CppName: set_requestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableRequest::*)(uint)>(&BaseMasterServerReliableRequest::set_requestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableRequest*), "set_requestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&BaseMasterServerReliableRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&BaseMasterServerReliableRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableRequest::*)()>(&BaseMasterServerReliableRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableRequest::MasterServer_IMasterServerReliableRequest_WithRequestId
// Il2CppName: MasterServer.IMasterServerReliableRequest.WithRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::IMasterServerReliableRequest* (BaseMasterServerReliableRequest::*)(uint)>(&BaseMasterServerReliableRequest::MasterServer_IMasterServerReliableRequest_WithRequestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableRequest*), "MasterServer.IMasterServerReliableRequest.WithRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableRequest::*)()>(&BaseMasterServerReliableRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableRequest::*)()>(&BaseMasterServerReliableRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseMasterServerReliableResponse
#include "GlobalNamespace/BaseMasterServerReliableResponse.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseMasterServerReliableResponse.get_requestId
uint GlobalNamespace::BaseMasterServerReliableResponse::get_requestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::get_requestId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerReliableResponse.set_requestId
void GlobalNamespace::BaseMasterServerReliableResponse::set_requestId(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::set_requestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_requestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseMasterServerReliableResponse.get_responseId
uint GlobalNamespace::BaseMasterServerReliableResponse::get_responseId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::get_responseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_responseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerReliableResponse.set_responseId
void GlobalNamespace::BaseMasterServerReliableResponse::set_responseId(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::set_responseId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_responseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseMasterServerReliableResponse.get_resultCode
uint8_t GlobalNamespace::BaseMasterServerReliableResponse::get_resultCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::get_resultCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerReliableResponse.get_resultCodeString
::Il2CppString* GlobalNamespace::BaseMasterServerReliableResponse::get_resultCodeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::get_resultCodeString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCodeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerReliableResponse.Serialize
void GlobalNamespace::BaseMasterServerReliableResponse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BaseMasterServerReliableResponse.Deserialize
void GlobalNamespace::BaseMasterServerReliableResponse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BaseMasterServerReliableResponse.Release
void GlobalNamespace::BaseMasterServerReliableResponse::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerReliableResponse.MasterServer.IMasterServerReliableRequest.WithRequestId
MasterServer::IMasterServerReliableRequest* GlobalNamespace::BaseMasterServerReliableResponse::MasterServer_IMasterServerReliableRequest_WithRequestId(uint requestId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::MasterServer.IMasterServerReliableRequest.WithRequestId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MasterServer.IMasterServerReliableRequest.WithRequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestId)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::IMasterServerReliableRequest*, false>(this, ___internal__method, requestId);
}
// Autogenerated method: BaseMasterServerReliableResponse.MasterServer.IMasterServerResponse.WithResponseId
MasterServer::IMasterServerResponse* GlobalNamespace::BaseMasterServerReliableResponse::MasterServer_IMasterServerResponse_WithResponseId(uint responseId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::MasterServer.IMasterServerResponse.WithResponseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MasterServer.IMasterServerResponse.WithResponseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(responseId)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::IMasterServerResponse*, false>(this, ___internal__method, responseId);
}
// Autogenerated method: BaseMasterServerReliableResponse.MasterServer.IMasterServerReliableResponse.WithRequestAndResponseId
MasterServer::IMasterServerReliableResponse* GlobalNamespace::BaseMasterServerReliableResponse::MasterServer_IMasterServerReliableResponse_WithRequestAndResponseId(uint requestId, uint responseId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerReliableResponse::MasterServer.IMasterServerReliableResponse.WithRequestAndResponseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MasterServer.IMasterServerReliableResponse.WithRequestAndResponseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestId), ::il2cpp_utils::ExtractType(responseId)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::IMasterServerReliableResponse*, false>(this, ___internal__method, requestId, responseId);
}
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::get_requestId
// Il2CppName: get_requestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (BaseMasterServerReliableResponse::*)()>(&BaseMasterServerReliableResponse::get_requestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "get_requestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::set_requestId
// Il2CppName: set_requestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableResponse::*)(uint)>(&BaseMasterServerReliableResponse::set_requestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "set_requestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::get_responseId
// Il2CppName: get_responseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (BaseMasterServerReliableResponse::*)()>(&BaseMasterServerReliableResponse::get_responseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "get_responseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::set_responseId
// Il2CppName: set_responseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableResponse::*)(uint)>(&BaseMasterServerReliableResponse::set_responseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "set_responseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (BaseMasterServerReliableResponse::*)()>(&BaseMasterServerReliableResponse::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (BaseMasterServerReliableResponse::*)()>(&BaseMasterServerReliableResponse::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&BaseMasterServerReliableResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&BaseMasterServerReliableResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableResponse::*)()>(&BaseMasterServerReliableResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::MasterServer_IMasterServerReliableRequest_WithRequestId
// Il2CppName: MasterServer.IMasterServerReliableRequest.WithRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::IMasterServerReliableRequest* (BaseMasterServerReliableResponse::*)(uint)>(&BaseMasterServerReliableResponse::MasterServer_IMasterServerReliableRequest_WithRequestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "MasterServer.IMasterServerReliableRequest.WithRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::MasterServer_IMasterServerResponse_WithResponseId
// Il2CppName: MasterServer.IMasterServerResponse.WithResponseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::IMasterServerResponse* (BaseMasterServerReliableResponse::*)(uint)>(&BaseMasterServerReliableResponse::MasterServer_IMasterServerResponse_WithResponseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "MasterServer.IMasterServerResponse.WithResponseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::MasterServer_IMasterServerReliableResponse_WithRequestAndResponseId
// Il2CppName: MasterServer.IMasterServerReliableResponse.WithRequestAndResponseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::IMasterServerReliableResponse* (BaseMasterServerReliableResponse::*)(uint, uint)>(&BaseMasterServerReliableResponse::MasterServer_IMasterServerReliableResponse_WithRequestAndResponseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), "MasterServer.IMasterServerReliableResponse.WithRequestAndResponseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerReliableResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableResponse::*)()>(&BaseMasterServerReliableResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerReliableResponse::*)()>(&BaseMasterServerReliableResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerReliableResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseMasterServerResponse
#include "GlobalNamespace/BaseMasterServerResponse.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseMasterServerResponse.get_responseId
uint GlobalNamespace::BaseMasterServerResponse::get_responseId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerResponse::get_responseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_responseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerResponse.set_responseId
void GlobalNamespace::BaseMasterServerResponse::set_responseId(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerResponse::set_responseId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_responseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseMasterServerResponse.get_resultCode
uint8_t GlobalNamespace::BaseMasterServerResponse::get_resultCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerResponse::get_resultCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerResponse.get_resultCodeString
::Il2CppString* GlobalNamespace::BaseMasterServerResponse::get_resultCodeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerResponse::get_resultCodeString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCodeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerResponse.Serialize
void GlobalNamespace::BaseMasterServerResponse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerResponse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BaseMasterServerResponse.Deserialize
void GlobalNamespace::BaseMasterServerResponse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerResponse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BaseMasterServerResponse.Release
void GlobalNamespace::BaseMasterServerResponse::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerResponse::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseMasterServerResponse.MasterServer.IMasterServerResponse.WithResponseId
MasterServer::IMasterServerResponse* GlobalNamespace::BaseMasterServerResponse::MasterServer_IMasterServerResponse_WithResponseId(uint responseId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseMasterServerResponse::MasterServer.IMasterServerResponse.WithResponseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MasterServer.IMasterServerResponse.WithResponseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(responseId)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::IMasterServerResponse*, false>(this, ___internal__method, responseId);
}
// Writing MetadataGetter for method: BaseMasterServerResponse::get_responseId
// Il2CppName: get_responseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (BaseMasterServerResponse::*)()>(&BaseMasterServerResponse::get_responseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerResponse*), "get_responseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerResponse::set_responseId
// Il2CppName: set_responseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerResponse::*)(uint)>(&BaseMasterServerResponse::set_responseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerResponse*), "set_responseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (BaseMasterServerResponse::*)()>(&BaseMasterServerResponse::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (BaseMasterServerResponse::*)()>(&BaseMasterServerResponse::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&BaseMasterServerResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&BaseMasterServerResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerResponse::*)()>(&BaseMasterServerResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerResponse::MasterServer_IMasterServerResponse_WithResponseId
// Il2CppName: MasterServer.IMasterServerResponse.WithResponseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::IMasterServerResponse* (BaseMasterServerResponse::*)(uint)>(&BaseMasterServerResponse::MasterServer_IMasterServerResponse_WithResponseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerResponse*), "MasterServer.IMasterServerResponse.WithResponseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerResponse::*)()>(&BaseMasterServerResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerResponse::*)()>(&BaseMasterServerResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DedicatedServerType
#include "GlobalNamespace/DedicatedServerType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DedicatedServerType RelayServer
GlobalNamespace::DedicatedServerType GlobalNamespace::DedicatedServerType::_get_RelayServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DedicatedServerType::_get_RelayServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DedicatedServerType>("", "DedicatedServerType", "RelayServer"));
}
// Autogenerated static field setter
// Set static field: static public DedicatedServerType RelayServer
void GlobalNamespace::DedicatedServerType::_set_RelayServer(GlobalNamespace::DedicatedServerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DedicatedServerType::_set_RelayServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DedicatedServerType", "RelayServer", value));
}
// Autogenerated static field getter
// Get static field: static public DedicatedServerType MatchmakingServer
GlobalNamespace::DedicatedServerType GlobalNamespace::DedicatedServerType::_get_MatchmakingServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DedicatedServerType::_get_MatchmakingServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DedicatedServerType>("", "DedicatedServerType", "MatchmakingServer"));
}
// Autogenerated static field setter
// Set static field: static public DedicatedServerType MatchmakingServer
void GlobalNamespace::DedicatedServerType::_set_MatchmakingServer(GlobalNamespace::DedicatedServerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DedicatedServerType::_set_MatchmakingServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DedicatedServerType", "MatchmakingServer", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DiscoveryPolicy Hidden
GlobalNamespace::DiscoveryPolicy GlobalNamespace::DiscoveryPolicy::_get_Hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiscoveryPolicy::_get_Hidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DiscoveryPolicy>("", "DiscoveryPolicy", "Hidden"));
}
// Autogenerated static field setter
// Set static field: static public DiscoveryPolicy Hidden
void GlobalNamespace::DiscoveryPolicy::_set_Hidden(GlobalNamespace::DiscoveryPolicy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiscoveryPolicy::_set_Hidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiscoveryPolicy", "Hidden", value));
}
// Autogenerated static field getter
// Get static field: static public DiscoveryPolicy WithCode
GlobalNamespace::DiscoveryPolicy GlobalNamespace::DiscoveryPolicy::_get_WithCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiscoveryPolicy::_get_WithCode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DiscoveryPolicy>("", "DiscoveryPolicy", "WithCode"));
}
// Autogenerated static field setter
// Set static field: static public DiscoveryPolicy WithCode
void GlobalNamespace::DiscoveryPolicy::_set_WithCode(GlobalNamespace::DiscoveryPolicy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiscoveryPolicy::_set_WithCode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiscoveryPolicy", "WithCode", value));
}
// Autogenerated static field getter
// Get static field: static public DiscoveryPolicy Public
GlobalNamespace::DiscoveryPolicy GlobalNamespace::DiscoveryPolicy::_get_Public() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiscoveryPolicy::_get_Public");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DiscoveryPolicy>("", "DiscoveryPolicy", "Public"));
}
// Autogenerated static field setter
// Set static field: static public DiscoveryPolicy Public
void GlobalNamespace::DiscoveryPolicy::_set_Public(GlobalNamespace::DiscoveryPolicy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiscoveryPolicy::_set_Public");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiscoveryPolicy", "Public", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InvitePolicy
#include "GlobalNamespace/InvitePolicy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public InvitePolicy OnlyConnectionOwnerCanInvite
GlobalNamespace::InvitePolicy GlobalNamespace::InvitePolicy::_get_OnlyConnectionOwnerCanInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InvitePolicy::_get_OnlyConnectionOwnerCanInvite");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::InvitePolicy>("", "InvitePolicy", "OnlyConnectionOwnerCanInvite"));
}
// Autogenerated static field setter
// Set static field: static public InvitePolicy OnlyConnectionOwnerCanInvite
void GlobalNamespace::InvitePolicy::_set_OnlyConnectionOwnerCanInvite(GlobalNamespace::InvitePolicy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InvitePolicy::_set_OnlyConnectionOwnerCanInvite");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "InvitePolicy", "OnlyConnectionOwnerCanInvite", value));
}
// Autogenerated static field getter
// Get static field: static public InvitePolicy AnyoneCanInvite
GlobalNamespace::InvitePolicy GlobalNamespace::InvitePolicy::_get_AnyoneCanInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InvitePolicy::_get_AnyoneCanInvite");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::InvitePolicy>("", "InvitePolicy", "AnyoneCanInvite"));
}
// Autogenerated static field setter
// Set static field: static public InvitePolicy AnyoneCanInvite
void GlobalNamespace::InvitePolicy::_set_AnyoneCanInvite(GlobalNamespace::InvitePolicy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InvitePolicy::_set_AnyoneCanInvite");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "InvitePolicy", "AnyoneCanInvite", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerConnectionManager
#include "GlobalNamespace/MasterServerConnectionManager.hpp"
// Including type: MasterServer.UserMessageHandler
#include "MasterServer/UserMessageHandler.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: MasterServerConnectionManager/MasterServerConnectionManagerParamsBase
#include "GlobalNamespace/MasterServerConnectionManager_MasterServerConnectionManagerParamsBase.hpp"
// Including type: MasterServerConnectionManager/StartServerParams
#include "GlobalNamespace/MasterServerConnectionManager_StartServerParams.hpp"
// Including type: MasterServerConnectionManager/ConnectToServerParams
#include "GlobalNamespace/MasterServerConnectionManager_ConnectToServerParams.hpp"
// Including type: MasterServerConnectionManager/ConnectToMatchmakingParams
#include "GlobalNamespace/MasterServerConnectionManager_ConnectToMatchmakingParams.hpp"
// Including type: MasterServerConnectionManager/StartClientParams
#include "GlobalNamespace/MasterServerConnectionManager_StartClientParams.hpp"
// Including type: MasterServerConnectionManager/<ConnectToEndPoint>d__114
#include "GlobalNamespace/MasterServerConnectionManager_-ConnectToEndPoint-d__114.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: LiteNetLibConnectionManager
#include "GlobalNamespace/LiteNetLibConnectionManager.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
// Including type: IAuthenticationTokenProvider
#include "GlobalNamespace/IAuthenticationTokenProvider.hpp"
// Including type: IConnectionInitParams`1
#include "GlobalNamespace/IConnectionInitParams_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: GameplayServerFilter
#include "GlobalNamespace/GameplayServerFilter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServerConnectionManager.add_onConnectedEvent
void GlobalNamespace::MasterServerConnectionManager::add_onConnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::add_onConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.remove_onConnectedEvent
void GlobalNamespace::MasterServerConnectionManager::remove_onConnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::remove_onConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.add_onDisconnectedEvent
void GlobalNamespace::MasterServerConnectionManager::add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::add_onDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.remove_onDisconnectedEvent
void GlobalNamespace::MasterServerConnectionManager::remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::remove_onDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.add_onConnectionFailedEvent
void GlobalNamespace::MasterServerConnectionManager::add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::add_onConnectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.remove_onConnectionFailedEvent
void GlobalNamespace::MasterServerConnectionManager::remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::remove_onConnectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.add_onConnectionConnectedEvent
void GlobalNamespace::MasterServerConnectionManager::add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::add_onConnectionConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.remove_onConnectionConnectedEvent
void GlobalNamespace::MasterServerConnectionManager::remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::remove_onConnectionConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.add_onConnectionDisconnectedEvent
void GlobalNamespace::MasterServerConnectionManager::add_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::add_onConnectionDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.remove_onConnectionDisconnectedEvent
void GlobalNamespace::MasterServerConnectionManager::remove_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::remove_onConnectionDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.add_onLatencyUpdatedEvent
void GlobalNamespace::MasterServerConnectionManager::add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::add_onLatencyUpdatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onLatencyUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.remove_onLatencyUpdatedEvent
void GlobalNamespace::MasterServerConnectionManager::remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::remove_onLatencyUpdatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onLatencyUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.add_onReceivedDataEvent
void GlobalNamespace::MasterServerConnectionManager::add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::add_onReceivedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onReceivedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.remove_onReceivedDataEvent
void GlobalNamespace::MasterServerConnectionManager::remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::remove_onReceivedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onReceivedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServerConnectionManager.get_userId
::Il2CppString* GlobalNamespace::MasterServerConnectionManager::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_userName
::Il2CppString* GlobalNamespace::MasterServerConnectionManager::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_isConnected
bool GlobalNamespace::MasterServerConnectionManager::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_isConnecting
bool GlobalNamespace::MasterServerConnectionManager::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_isConnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_isDisconnecting
bool GlobalNamespace::MasterServerConnectionManager::get_isDisconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_isDisconnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_connectionCount
int GlobalNamespace::MasterServerConnectionManager::get_connectionCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_connectionCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_isConnectionOwner
bool GlobalNamespace::MasterServerConnectionManager::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_isDisposed
bool GlobalNamespace::MasterServerConnectionManager::get_isDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_isDisposed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_port
int GlobalNamespace::MasterServerConnectionManager::get_port() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_port");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_port", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_secret
::Il2CppString* GlobalNamespace::MasterServerConnectionManager::get_secret() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_secret");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_serverName
::Il2CppString* GlobalNamespace::MasterServerConnectionManager::get_serverName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_serverName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_serverPassword
::Il2CppString* GlobalNamespace::MasterServerConnectionManager::get_serverPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_serverPassword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_maxPlayerCount
int GlobalNamespace::MasterServerConnectionManager::get_maxPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_maxPlayerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_discoveryPolicy
GlobalNamespace::DiscoveryPolicy GlobalNamespace::MasterServerConnectionManager::get_discoveryPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_discoveryPolicy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DiscoveryPolicy, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_invitePolicy
GlobalNamespace::InvitePolicy GlobalNamespace::MasterServerConnectionManager::get_invitePolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_invitePolicy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_invitePolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::InvitePolicy, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_configuration
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::MasterServerConnectionManager::get_configuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_configuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_code
::Il2CppString* GlobalNamespace::MasterServerConnectionManager::get_code() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_code");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_code", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_serverEndPoint
System::Net::IPEndPoint* GlobalNamespace::MasterServerConnectionManager::get_serverEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_serverEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_serverUserId
::Il2CppString* GlobalNamespace::MasterServerConnectionManager::get_serverUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_serverUserId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.get_serverUserName
::Il2CppString* GlobalNamespace::MasterServerConnectionManager::get_serverUserName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::get_serverUserName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverUserName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.SendToAll
void GlobalNamespace::MasterServerConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::SendToAll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod);
}
// Autogenerated method: MasterServerConnectionManager.SendToAll
void GlobalNamespace::MasterServerConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::SendToAll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(excludingConnection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod, excludingConnection);
}
// Autogenerated method: MasterServerConnectionManager.PollUpdate
void GlobalNamespace::MasterServerConnectionManager::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.InitMasterServerHandler
void GlobalNamespace::MasterServerConnectionManager::InitMasterServerHandler(GlobalNamespace::MasterServerEndPoint* masterServerEndPoint, GlobalNamespace::IAuthenticationTokenProvider* authenticationTokenProvider) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::InitMasterServerHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitMasterServerHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(masterServerEndPoint), ::il2cpp_utils::ExtractType(authenticationTokenProvider)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, masterServerEndPoint, authenticationTokenProvider);
}
// Autogenerated method: MasterServerConnectionManager.DisposeMasterServerHandler
void GlobalNamespace::MasterServerConnectionManager::DisposeMasterServerHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::DisposeMasterServerHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisposeMasterServerHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.SetServerStatus
void GlobalNamespace::MasterServerConnectionManager::SetServerStatus(::Il2CppString* serverName, ::Il2CppString* serverPassword, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::SetServerStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetServerStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(serverPassword), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverName, serverPassword, discoveryPolicy, invitePolicy, maxPlayerCount, configuration);
}
// Autogenerated method: MasterServerConnectionManager.SetCurrentPlayerCount
void GlobalNamespace::MasterServerConnectionManager::SetCurrentPlayerCount(int currentPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::SetCurrentPlayerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCurrentPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPlayerCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentPlayerCount);
}
// Autogenerated method: MasterServerConnectionManager.Dispose
void GlobalNamespace::MasterServerConnectionManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.Disconnect
void GlobalNamespace::MasterServerConnectionManager::Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: MasterServerConnectionManager.DisconnectInternal
void GlobalNamespace::MasterServerConnectionManager::DisconnectInternal(GlobalNamespace::ConnectionFailedReason connectionFailedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::DisconnectInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionFailedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectionFailedReason);
}
// Autogenerated method: MasterServerConnectionManager.DisconnectInternal
void GlobalNamespace::MasterServerConnectionManager::DisconnectInternal(GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::DisconnectInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason), ::il2cpp_utils::ExtractType(connectionFailedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason, connectionFailedReason);
}
// Autogenerated method: MasterServerConnectionManager.GetConnection
GlobalNamespace::IConnection* GlobalNamespace::MasterServerConnectionManager::GetConnection(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::GetConnection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnection*, false>(this, ___internal__method, index);
}
// Autogenerated method: MasterServerConnectionManager.HandleConnected
void GlobalNamespace::MasterServerConnectionManager::HandleConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::HandleConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.HandleConnectionConnected
void GlobalNamespace::MasterServerConnectionManager::HandleConnectionConnected(GlobalNamespace::IConnection* connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::HandleConnectionConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection);
}
// Autogenerated method: MasterServerConnectionManager.HandleConnectionDisconnected
void GlobalNamespace::MasterServerConnectionManager::HandleConnectionDisconnected(GlobalNamespace::IConnection* connection, GlobalNamespace::DisconnectedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::HandleConnectionDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection, reason);
}
// Autogenerated method: MasterServerConnectionManager.HandleConnectionFailed
void GlobalNamespace::MasterServerConnectionManager::HandleConnectionFailed(GlobalNamespace::ConnectionFailedReason failedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::HandleConnectionFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(failedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, failedReason);
}
// Autogenerated method: MasterServerConnectionManager.HandleLatencyUpdate
void GlobalNamespace::MasterServerConnectionManager::HandleLatencyUpdate(GlobalNamespace::IConnection* connection, float latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::HandleLatencyUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection, latency);
}
// Autogenerated method: MasterServerConnectionManager.HandleReceivedData
void GlobalNamespace::MasterServerConnectionManager::HandleReceivedData(GlobalNamespace::IConnection* connection, LiteNetLib::Utils::NetDataReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::HandleReceivedData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleReceivedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection, reader, deliveryMethod);
}
// Autogenerated method: MasterServerConnectionManager.HandleConnectToClient
void GlobalNamespace::MasterServerConnectionManager::HandleConnectToClient(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool isConnectionOwner, bool isDedicatedServer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::HandleConnectToClient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectToClient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(myRandom), ::il2cpp_utils::ExtractType(remoteRandom), ::il2cpp_utils::ExtractType(isConnectionOwner), ::il2cpp_utils::ExtractType(isDedicatedServer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, userName, remoteEndPoint, preMasterSecret, myRandom, remoteRandom, isConnectionOwner, isDedicatedServer);
}
// Autogenerated method: MasterServerConnectionManager.HandleBroadcastingStopped
void GlobalNamespace::MasterServerConnectionManager::HandleBroadcastingStopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::HandleBroadcastingStopped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBroadcastingStopped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.AttemptConnection
bool GlobalNamespace::MasterServerConnectionManager::AttemptConnection(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* endPoint, ::Il2CppString* secret, ::Il2CppString* code, ::Il2CppString* password, ::Il2CppString* serverUserId, ::Il2CppString* serverUserName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::AttemptConnection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttemptConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(serverUserId), ::il2cpp_utils::ExtractType(serverUserName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId, userName, endPoint, secret, code, password, serverUserId, serverUserName);
}
// Autogenerated method: MasterServerConnectionManager.SetConnectionAttempt
void GlobalNamespace::MasterServerConnectionManager::SetConnectionAttempt(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt connectionAttempt) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::SetConnectionAttempt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetConnectionAttempt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionAttempt)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectionAttempt);
}
// Autogenerated method: MasterServerConnectionManager.MasterServerConnectToMatchmaking
void GlobalNamespace::MasterServerConnectionManager::MasterServerConnectToMatchmaking(::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::GameplayServerConfiguration configuration, GlobalNamespace::DiscoveryPolicy discoveryPolicy, ::Il2CppString* secret, ::Il2CppString* code) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::MasterServerConnectToMatchmaking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MasterServerConnectToMatchmaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, userName, configuration, discoveryPolicy, secret, code);
}
// Autogenerated method: MasterServerConnectionManager.MasterServerConnectToServer
void GlobalNamespace::MasterServerConnectionManager::MasterServerConnectToServer(::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, ::Il2CppString* code, ::Il2CppString* password, bool useRelay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::MasterServerConnectToServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MasterServerConnectToServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(useRelay)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, userName, secret, code, password, useRelay);
}
// Autogenerated method: MasterServerConnectionManager.StartBroadcastingServer
void GlobalNamespace::MasterServerConnectionManager::StartBroadcastingServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::StartBroadcastingServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartBroadcastingServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager.HandleConnectToServerSuccess
void GlobalNamespace::MasterServerConnectionManager::HandleConnectToServerSuccess(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* secret, ::Il2CppString* code, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool isConnectionOwner, bool isDedicatedServer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::HandleConnectToServerSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectToServerSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(myRandom), ::il2cpp_utils::ExtractType(remoteRandom), ::il2cpp_utils::ExtractType(isConnectionOwner), ::il2cpp_utils::ExtractType(isDedicatedServer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, userName, remoteEndPoint, secret, code, discoveryPolicy, invitePolicy, maxPlayerCount, configuration, preMasterSecret, myRandom, remoteRandom, isConnectionOwner, isDedicatedServer);
}
// Autogenerated method: MasterServerConnectionManager.ConnectToEndPoint
void GlobalNamespace::MasterServerConnectionManager::ConnectToEndPoint(System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* userId, ::Il2CppString* userName, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool remoteUserIsConnectionOwner, bool isDedicatedServer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectToEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(myRandom), ::il2cpp_utils::ExtractType(remoteRandom), ::il2cpp_utils::ExtractType(remoteUserIsConnectionOwner), ::il2cpp_utils::ExtractType(isDedicatedServer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, userId, userName, preMasterSecret, myRandom, remoteRandom, remoteUserIsConnectionOwner, isDedicatedServer);
}
// Autogenerated method: MasterServerConnectionManager.GetPublicServers
void GlobalNamespace::MasterServerConnectionManager::GetPublicServers(System::Action_1<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onFailure, int offset, int count, GlobalNamespace::GameplayServerFilter filter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::GetPublicServers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPublicServers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onSuccess), ::il2cpp_utils::ExtractType(onFailure), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(filter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, onSuccess, onFailure, offset, count, filter);
}
// Autogenerated method: MasterServerConnectionManager.<StartBroadcastingServer>b__112_0
void GlobalNamespace::MasterServerConnectionManager::$StartBroadcastingServer$b__112_0(System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* code) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::<StartBroadcastingServer>b__112_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartBroadcastingServer>b__112_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(code)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, code);
}
// Autogenerated method: MasterServerConnectionManager.<StartBroadcastingServer>b__112_1
void GlobalNamespace::MasterServerConnectionManager::$StartBroadcastingServer$b__112_1(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::<StartBroadcastingServer>b__112_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartBroadcastingServer>b__112_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Writing MetadataGetter for method: MasterServerConnectionManager::add_onConnectedEvent
// Il2CppName: add_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action*)>(&MasterServerConnectionManager::add_onConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "add_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::remove_onConnectedEvent
// Il2CppName: remove_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action*)>(&MasterServerConnectionManager::remove_onConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "remove_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::add_onDisconnectedEvent
// Il2CppName: add_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&MasterServerConnectionManager::add_onDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "add_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::remove_onDisconnectedEvent
// Il2CppName: remove_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&MasterServerConnectionManager::remove_onDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "remove_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::add_onConnectionFailedEvent
// Il2CppName: add_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&MasterServerConnectionManager::add_onConnectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "add_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::remove_onConnectionFailedEvent
// Il2CppName: remove_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&MasterServerConnectionManager::remove_onConnectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::add_onConnectionConnectedEvent
// Il2CppName: add_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::IConnection*>*)>(&MasterServerConnectionManager::add_onConnectionConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnection*>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::remove_onConnectionConnectedEvent
// Il2CppName: remove_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::IConnection*>*)>(&MasterServerConnectionManager::remove_onConnectionConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnection*>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::add_onConnectionDisconnectedEvent
// Il2CppName: add_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*)>(&MasterServerConnectionManager::add_onConnectionDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::remove_onConnectionDisconnectedEvent
// Il2CppName: remove_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*)>(&MasterServerConnectionManager::remove_onConnectionDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::add_onLatencyUpdatedEvent
// Il2CppName: add_onLatencyUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, float>*)>(&MasterServerConnectionManager::add_onLatencyUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "add_onLatencyUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, float>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::remove_onLatencyUpdatedEvent
// Il2CppName: remove_onLatencyUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, float>*)>(&MasterServerConnectionManager::remove_onLatencyUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "remove_onLatencyUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, float>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::add_onReceivedDataEvent
// Il2CppName: add_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)>(&MasterServerConnectionManager::add_onReceivedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "add_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::remove_onReceivedDataEvent
// Il2CppName: remove_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)>(&MasterServerConnectionManager::remove_onReceivedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "remove_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_isConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_isDisconnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_connectionCount
// Il2CppName: get_connectionCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_connectionCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_connectionCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_isDisposed
// Il2CppName: get_isDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_isDisposed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_isDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_port
// Il2CppName: get_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_port)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_secret
// Il2CppName: get_secret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_secret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_secret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_serverName
// Il2CppName: get_serverName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_serverName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_serverName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_serverPassword
// Il2CppName: get_serverPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_serverPassword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_serverPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_maxPlayerCount
// Il2CppName: get_maxPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_maxPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_maxPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_discoveryPolicy
// Il2CppName: get_discoveryPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DiscoveryPolicy (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_discoveryPolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_discoveryPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_invitePolicy
// Il2CppName: get_invitePolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::InvitePolicy (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_invitePolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_invitePolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerConfiguration (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_configuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_code
// Il2CppName: get_code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_code)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_serverEndPoint
// Il2CppName: get_serverEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::IPEndPoint* (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_serverEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_serverEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_serverUserId
// Il2CppName: get_serverUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_serverUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_serverUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::get_serverUserName
// Il2CppName: get_serverUserName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::get_serverUserName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "get_serverUserName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod)>(&MasterServerConnectionManager::SendToAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod, GlobalNamespace::IConnection*)>(&MasterServerConnectionManager::SendToAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(MasterServer::ITimeProvider*)>(&MasterServerConnectionManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(MasterServer::ITimeProvider*)>(&MasterServerConnectionManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::InitMasterServerHandler
// Il2CppName: InitMasterServerHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::MasterServerEndPoint*, GlobalNamespace::IAuthenticationTokenProvider*)>(&MasterServerConnectionManager::InitMasterServerHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "InitMasterServerHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IAuthenticationTokenProvider*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::DisposeMasterServerHandler
// Il2CppName: DisposeMasterServerHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::DisposeMasterServerHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "DisposeMasterServerHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::Init
// Il2CppName: Init
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServerConnectionManager::SetServerStatus
// Il2CppName: SetServerStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration)>(&MasterServerConnectionManager::SetServerStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "SetServerStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::SetCurrentPlayerCount
// Il2CppName: SetCurrentPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(int)>(&MasterServerConnectionManager::SetCurrentPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "SetCurrentPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::DisconnectedReason)>(&MasterServerConnectionManager::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::DisconnectInternal
// Il2CppName: DisconnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::ConnectionFailedReason)>(&MasterServerConnectionManager::DisconnectInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "DisconnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::DisconnectInternal
// Il2CppName: DisconnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::DisconnectedReason, GlobalNamespace::ConnectionFailedReason)>(&MasterServerConnectionManager::DisconnectInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "DisconnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnection* (MasterServerConnectionManager::*)(int)>(&MasterServerConnectionManager::GetConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::HandleConnected
// Il2CppName: HandleConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::HandleConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "HandleConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::HandleConnectionConnected
// Il2CppName: HandleConnectionConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::IConnection*)>(&MasterServerConnectionManager::HandleConnectionConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "HandleConnectionConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::HandleConnectionDisconnected
// Il2CppName: HandleConnectionDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason)>(&MasterServerConnectionManager::HandleConnectionDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "HandleConnectionDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::HandleConnectionFailed
// Il2CppName: HandleConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::ConnectionFailedReason)>(&MasterServerConnectionManager::HandleConnectionFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "HandleConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::HandleLatencyUpdate
// Il2CppName: HandleLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::IConnection*, float)>(&MasterServerConnectionManager::HandleLatencyUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "HandleLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::HandleReceivedData
// Il2CppName: HandleReceivedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod)>(&MasterServerConnectionManager::HandleReceivedData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "HandleReceivedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::HandleConnectToClient
// Il2CppName: HandleConnectToClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool, bool)>(&MasterServerConnectionManager::HandleConnectToClient)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "HandleConnectToClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::HandleBroadcastingStopped
// Il2CppName: HandleBroadcastingStopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::HandleBroadcastingStopped)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "HandleBroadcastingStopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::AttemptConnection
// Il2CppName: AttemptConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerConnectionManager::*)(::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&MasterServerConnectionManager::AttemptConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "AttemptConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::SetConnectionAttempt
// Il2CppName: SetConnectionAttempt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt)>(&MasterServerConnectionManager::SetConnectionAttempt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "SetConnectionAttempt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::MasterServerConnectToMatchmaking
// Il2CppName: MasterServerConnectToMatchmaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::GameplayServerConfiguration, GlobalNamespace::DiscoveryPolicy, ::Il2CppString*, ::Il2CppString*)>(&MasterServerConnectionManager::MasterServerConnectToMatchmaking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "MasterServerConnectToMatchmaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::MasterServerConnectToServer
// Il2CppName: MasterServerConnectToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, bool)>(&MasterServerConnectionManager::MasterServerConnectToServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "MasterServerConnectToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::StartBroadcastingServer
// Il2CppName: StartBroadcastingServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::StartBroadcastingServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "StartBroadcastingServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::HandleConnectToServerSuccess
// Il2CppName: HandleConnectToServerSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool, bool)>(&MasterServerConnectionManager::HandleConnectToServerSuccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "HandleConnectToServerSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::ConnectToEndPoint
// Il2CppName: ConnectToEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool, bool)>(&MasterServerConnectionManager::ConnectToEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "ConnectToEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::GetPublicServers
// Il2CppName: GetPublicServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Action_1<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>*, System::Action_1<GlobalNamespace::ConnectionFailedReason>*, int, int, GlobalNamespace::GameplayServerFilter)>(&MasterServerConnectionManager::GetPublicServers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "GetPublicServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerFilter>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::$StartBroadcastingServer$b__112_0
// Il2CppName: <StartBroadcastingServer>b__112_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(System::Net::IPEndPoint*, ::Il2CppString*)>(&MasterServerConnectionManager::$StartBroadcastingServer$b__112_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "<StartBroadcastingServer>b__112_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::$StartBroadcastingServer$b__112_1
// Il2CppName: <StartBroadcastingServer>b__112_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)(GlobalNamespace::ConnectionFailedReason)>(&MasterServerConnectionManager::$StartBroadcastingServer$b__112_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), "<StartBroadcastingServer>b__112_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::*)()>(&MasterServerConnectionManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServerConnectionManager/ConnectionAttempt
#include "GlobalNamespace/MasterServerConnectionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServerConnectionManager/ConnectionAttempt None
GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt>("", "MasterServerConnectionManager/ConnectionAttempt", "None"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerConnectionManager/ConnectionAttempt None
void GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_set_None(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerConnectionManager/ConnectionAttempt", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServerConnectionManager/ConnectionAttempt NatPunchthrough
GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_get_NatPunchthrough() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_get_NatPunchthrough");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt>("", "MasterServerConnectionManager/ConnectionAttempt", "NatPunchthrough"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerConnectionManager/ConnectionAttempt NatPunchthrough
void GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_set_NatPunchthrough(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_set_NatPunchthrough");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerConnectionManager/ConnectionAttempt", "NatPunchthrough", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServerConnectionManager/ConnectionAttempt DedicatedServer
GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_get_DedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_get_DedicatedServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt>("", "MasterServerConnectionManager/ConnectionAttempt", "DedicatedServer"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerConnectionManager/ConnectionAttempt DedicatedServer
void GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_set_DedicatedServer(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt::_set_DedicatedServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerConnectionManager/ConnectionAttempt", "DedicatedServer", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServerConnectionManager/ConnectionState
#include "GlobalNamespace/MasterServerConnectionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServerConnectionManager/ConnectionState Unconnected
GlobalNamespace::MasterServerConnectionManager::ConnectionState GlobalNamespace::MasterServerConnectionManager::ConnectionState::_get_Unconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionState::_get_Unconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerConnectionManager::ConnectionState>("", "MasterServerConnectionManager/ConnectionState", "Unconnected"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerConnectionManager/ConnectionState Unconnected
void GlobalNamespace::MasterServerConnectionManager::ConnectionState::_set_Unconnected(GlobalNamespace::MasterServerConnectionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionState::_set_Unconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerConnectionManager/ConnectionState", "Unconnected", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServerConnectionManager/ConnectionState Connecting
GlobalNamespace::MasterServerConnectionManager::ConnectionState GlobalNamespace::MasterServerConnectionManager::ConnectionState::_get_Connecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionState::_get_Connecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerConnectionManager::ConnectionState>("", "MasterServerConnectionManager/ConnectionState", "Connecting"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerConnectionManager/ConnectionState Connecting
void GlobalNamespace::MasterServerConnectionManager::ConnectionState::_set_Connecting(GlobalNamespace::MasterServerConnectionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionState::_set_Connecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerConnectionManager/ConnectionState", "Connecting", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServerConnectionManager/ConnectionState Connected
GlobalNamespace::MasterServerConnectionManager::ConnectionState GlobalNamespace::MasterServerConnectionManager::ConnectionState::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionState::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerConnectionManager::ConnectionState>("", "MasterServerConnectionManager/ConnectionState", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerConnectionManager/ConnectionState Connected
void GlobalNamespace::MasterServerConnectionManager::ConnectionState::_set_Connected(GlobalNamespace::MasterServerConnectionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionState::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerConnectionManager/ConnectionState", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServerConnectionManager/ConnectionState Disconnecting
GlobalNamespace::MasterServerConnectionManager::ConnectionState GlobalNamespace::MasterServerConnectionManager::ConnectionState::_get_Disconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionState::_get_Disconnecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerConnectionManager::ConnectionState>("", "MasterServerConnectionManager/ConnectionState", "Disconnecting"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerConnectionManager/ConnectionState Disconnecting
void GlobalNamespace::MasterServerConnectionManager::ConnectionState::_set_Disconnecting(GlobalNamespace::MasterServerConnectionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::ConnectionState::_set_Disconnecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerConnectionManager/ConnectionState", "Disconnecting", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerConnectionManager/MasterServerConnectionManagerParamsBase
#include "GlobalNamespace/MasterServerConnectionManager_MasterServerConnectionManagerParamsBase.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
// Including type: IAuthenticationTokenProvider
#include "GlobalNamespace/IAuthenticationTokenProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerConnectionManager::MasterServerConnectionManagerParamsBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::MasterServerConnectionManagerParamsBase::*)()>(&MasterServerConnectionManager::MasterServerConnectionManagerParamsBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::MasterServerConnectionManagerParamsBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::MasterServerConnectionManagerParamsBase::*)()>(&MasterServerConnectionManager::MasterServerConnectionManagerParamsBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::MasterServerConnectionManagerParamsBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerConnectionManager/StartServerParams
#include "GlobalNamespace/MasterServerConnectionManager_StartServerParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerConnectionManager::StartServerParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::StartServerParams::*)()>(&MasterServerConnectionManager::StartServerParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::StartServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::StartServerParams::*)()>(&MasterServerConnectionManager::StartServerParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::StartServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerConnectionManager/ConnectToServerParams
#include "GlobalNamespace/MasterServerConnectionManager_ConnectToServerParams.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerConnectionManager::ConnectToServerParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::ConnectToServerParams::*)()>(&MasterServerConnectionManager::ConnectToServerParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::ConnectToServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::ConnectToServerParams::*)()>(&MasterServerConnectionManager::ConnectToServerParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::ConnectToServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerConnectionManager/ConnectToMatchmakingParams
#include "GlobalNamespace/MasterServerConnectionManager_ConnectToMatchmakingParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerConnectionManager::ConnectToMatchmakingParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::ConnectToMatchmakingParams::*)()>(&MasterServerConnectionManager::ConnectToMatchmakingParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::ConnectToMatchmakingParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::ConnectToMatchmakingParams::*)()>(&MasterServerConnectionManager::ConnectToMatchmakingParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::ConnectToMatchmakingParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServerConnectionManager/StartClientParams
#include "GlobalNamespace/MasterServerConnectionManager_StartClientParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerConnectionManager::StartClientParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::StartClientParams::*)()>(&MasterServerConnectionManager::StartClientParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::StartClientParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::StartClientParams::*)()>(&MasterServerConnectionManager::StartClientParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::StartClientParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerConnectionManager/<ConnectToEndPoint>d__114
#include "GlobalNamespace/MasterServerConnectionManager_-ConnectToEndPoint-d__114.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServerConnectionManager/<ConnectToEndPoint>d__114.MoveNext
void GlobalNamespace::MasterServerConnectionManager::$ConnectToEndPoint$d__114::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::$ConnectToEndPoint$d__114::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServerConnectionManager/<ConnectToEndPoint>d__114.SetStateMachine
void GlobalNamespace::MasterServerConnectionManager::$ConnectToEndPoint$d__114::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::$ConnectToEndPoint$d__114::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: MasterServerConnectionManager::$ConnectToEndPoint$d__114::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::$ConnectToEndPoint$d__114::*)()>(&MasterServerConnectionManager::$ConnectToEndPoint$d__114::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::$ConnectToEndPoint$d__114), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerConnectionManager::$ConnectToEndPoint$d__114::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerConnectionManager::$ConnectToEndPoint$d__114::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&MasterServerConnectionManager::$ConnectToEndPoint$d__114::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerConnectionManager::$ConnectToEndPoint$d__114), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServerEndPoint.get_endPoint
System::Net::IPEndPoint* GlobalNamespace::MasterServerEndPoint::get_endPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerEndPoint::get_endPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_endPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerEndPoint.GetEndPointAsync
System::Threading::Tasks::Task_1<System::Net::IPEndPoint*>* GlobalNamespace::MasterServerEndPoint::GetEndPointAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerEndPoint::GetEndPointAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEndPointAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<System::Net::IPEndPoint*>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerEndPoint.GetEndPoint
System::Net::IPEndPoint* GlobalNamespace::MasterServerEndPoint::GetEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerEndPoint::GetEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerEndPoint.GetEndPointInternal
System::Net::IPEndPoint* GlobalNamespace::MasterServerEndPoint::GetEndPointInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerEndPoint::GetEndPointInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEndPointInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerEndPoint.Equals
bool GlobalNamespace::MasterServerEndPoint::Equals(GlobalNamespace::MasterServerEndPoint* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerEndPoint::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: MasterServerEndPoint.ToString
::Il2CppString* GlobalNamespace::MasterServerEndPoint::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerEndPoint::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerEndPoint.Equals
bool GlobalNamespace::MasterServerEndPoint::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerEndPoint::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: MasterServerEndPoint.GetHashCode
int GlobalNamespace::MasterServerEndPoint::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerEndPoint::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MasterServerEndPoint::get_endPoint
// Il2CppName: get_endPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::IPEndPoint* (MasterServerEndPoint::*)()>(&MasterServerEndPoint::get_endPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), "get_endPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerEndPoint::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerEndPoint::*)(::Il2CppString*, int)>(&MasterServerEndPoint::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerEndPoint::*)(::Il2CppString*, int)>(&MasterServerEndPoint::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MasterServerEndPoint::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerEndPoint::*)(System::Net::IPEndPoint*)>(&MasterServerEndPoint::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerEndPoint::*)(System::Net::IPEndPoint*)>(&MasterServerEndPoint::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: MasterServerEndPoint::GetEndPointAsync
// Il2CppName: GetEndPointAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<System::Net::IPEndPoint*>* (MasterServerEndPoint::*)()>(&MasterServerEndPoint::GetEndPointAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), "GetEndPointAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerEndPoint::GetEndPoint
// Il2CppName: GetEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::IPEndPoint* (MasterServerEndPoint::*)()>(&MasterServerEndPoint::GetEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), "GetEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerEndPoint::GetEndPointInternal
// Il2CppName: GetEndPointInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::IPEndPoint* (MasterServerEndPoint::*)()>(&MasterServerEndPoint::GetEndPointInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), "GetEndPointInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerEndPoint::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerEndPoint::*)(GlobalNamespace::MasterServerEndPoint*)>(&MasterServerEndPoint::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerEndPoint*>()});
  }
};
// Writing MetadataGetter for method: MasterServerEndPoint::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MasterServerEndPoint::*)()>(&MasterServerEndPoint::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerEndPoint::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerEndPoint::*)(::Il2CppObject*)>(&MasterServerEndPoint::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MasterServerEndPoint::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MasterServerEndPoint::*)()>(&MasterServerEndPoint::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerEndPoint*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PublicServerInfo
#include "GlobalNamespace/PublicServerInfo.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PublicServerInfo.Serialize
void GlobalNamespace::PublicServerInfo::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PublicServerInfo::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: PublicServerInfo.CreateFromSerializedData
GlobalNamespace::PublicServerInfo GlobalNamespace::PublicServerInfo::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PublicServerInfo::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PublicServerInfo, false>(*this, ___internal__method, reader);
}
// Autogenerated method: PublicServerInfo.Deserialize
GlobalNamespace::PublicServerInfo GlobalNamespace::PublicServerInfo::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PublicServerInfo::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PublicServerInfo", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PublicServerInfo, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Writing MetadataGetter for method: PublicServerInfo::PublicServerInfo
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PublicServerInfo::*)(::Il2CppString*, ::Il2CppString*, int, int, bool, GlobalNamespace::GameplayServerConfiguration)>(&PublicServerInfo::PublicServerInfo<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicServerInfo), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PublicServerInfo::*)(::Il2CppString*, ::Il2CppString*, int, int, bool, GlobalNamespace::GameplayServerConfiguration)>(&PublicServerInfo::PublicServerInfo<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicServerInfo), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: PublicServerInfo::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PublicServerInfo::*)(LiteNetLib::Utils::NetDataWriter*)>(&PublicServerInfo::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicServerInfo), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: PublicServerInfo::CreateFromSerializedData
// Il2CppName: CreateFromSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PublicServerInfo (PublicServerInfo::*)(LiteNetLib::Utils::NetDataReader*)>(&PublicServerInfo::CreateFromSerializedData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicServerInfo), "CreateFromSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: PublicServerInfo::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PublicServerInfo (*)(LiteNetLib::Utils::NetDataReader*)>(&PublicServerInfo::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicServerInfo), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UserCertificateValidator
#include "GlobalNamespace/UserCertificateValidator.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UserCertificateValidator.ValidateCertificateChain
void GlobalNamespace::UserCertificateValidator::ValidateCertificateChain(GlobalNamespace::MasterServerEndPoint* endPoint, System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, ::Array<::Array<uint8_t>*>* certificateChain) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UserCertificateValidator::ValidateCertificateChain");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCertificateChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(certificateChain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, certificate, certificateChain);
}
// Autogenerated method: UserCertificateValidator.ValidateCertificateChainInternal
void GlobalNamespace::UserCertificateValidator::ValidateCertificateChainInternal(GlobalNamespace::MasterServerEndPoint* endPoint, System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, ::Array<::Array<uint8_t>*>* certificateChain) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UserCertificateValidator::ValidateCertificateChainInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCertificateChainInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(certificateChain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, certificate, certificateChain);
}
// Writing MetadataGetter for method: UserCertificateValidator::ValidateCertificateChain
// Il2CppName: ValidateCertificateChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserCertificateValidator::*)(GlobalNamespace::MasterServerEndPoint*, System::Security::Cryptography::X509Certificates::X509Certificate2*, ::Array<::Array<uint8_t>*>*)>(&UserCertificateValidator::ValidateCertificateChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserCertificateValidator*), "ValidateCertificateChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Array<uint8_t>*>*>()});
  }
};
// Writing MetadataGetter for method: UserCertificateValidator::ValidateCertificateChainInternal
// Il2CppName: ValidateCertificateChainInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserCertificateValidator::*)(GlobalNamespace::MasterServerEndPoint*, System::Security::Cryptography::X509Certificates::X509Certificate2*, ::Array<::Array<uint8_t>*>*)>(&UserCertificateValidator::ValidateCertificateChainInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserCertificateValidator*), "ValidateCertificateChainInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Array<uint8_t>*>*>()});
  }
};
// Writing MetadataGetter for method: UserCertificateValidator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserCertificateValidator::*)()>(&UserCertificateValidator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserCertificateValidator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserCertificateValidator::*)()>(&UserCertificateValidator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserCertificateValidator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuRpcManager
#include "GlobalNamespace/MenuRpcManager.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: MenuRpcManager/GetIsEntitledToLevelRpc
#include "GlobalNamespace/MenuRpcManager_GetIsEntitledToLevelRpc.hpp"
// Including type: MenuRpcManager/SetIsEntitledToLevelRpc
#include "GlobalNamespace/MenuRpcManager_SetIsEntitledToLevelRpc.hpp"
// Including type: MenuRpcManager/InvalidateLevelEntitlementStatusesRpc
#include "GlobalNamespace/MenuRpcManager_InvalidateLevelEntitlementStatusesRpc.hpp"
// Including type: MenuRpcManager/SelectLevelPackRpc
#include "GlobalNamespace/MenuRpcManager_SelectLevelPackRpc.hpp"
// Including type: MenuRpcManager/SelectBeatmapRpc
#include "GlobalNamespace/MenuRpcManager_SelectBeatmapRpc.hpp"
// Including type: MenuRpcManager/ClearSelectedBeatmapRpc
#include "GlobalNamespace/MenuRpcManager_ClearSelectedBeatmapRpc.hpp"
// Including type: MenuRpcManager/GetSelectedBeatmapRpc
#include "GlobalNamespace/MenuRpcManager_GetSelectedBeatmapRpc.hpp"
// Including type: MenuRpcManager/SelectGameplayModifiersRpc
#include "GlobalNamespace/MenuRpcManager_SelectGameplayModifiersRpc.hpp"
// Including type: MenuRpcManager/ClearSelectedGameplayModifiersRpc
#include "GlobalNamespace/MenuRpcManager_ClearSelectedGameplayModifiersRpc.hpp"
// Including type: MenuRpcManager/GetSelectedGameplayModifiersRpc
#include "GlobalNamespace/MenuRpcManager_GetSelectedGameplayModifiersRpc.hpp"
// Including type: MenuRpcManager/LevelLoadErrorRpc
#include "GlobalNamespace/MenuRpcManager_LevelLoadErrorRpc.hpp"
// Including type: MenuRpcManager/LevelLoadSuccessRpc
#include "GlobalNamespace/MenuRpcManager_LevelLoadSuccessRpc.hpp"
// Including type: MenuRpcManager/StartLevelRpc
#include "GlobalNamespace/MenuRpcManager_StartLevelRpc.hpp"
// Including type: MenuRpcManager/GetStartedLevelRpc
#include "GlobalNamespace/MenuRpcManager_GetStartedLevelRpc.hpp"
// Including type: MenuRpcManager/GetMultiplayerGameStateRpc
#include "GlobalNamespace/MenuRpcManager_GetMultiplayerGameStateRpc.hpp"
// Including type: MenuRpcManager/SetMultiplayerGameStateRpc
#include "GlobalNamespace/MenuRpcManager_SetMultiplayerGameStateRpc.hpp"
// Including type: MenuRpcManager/CancelCountdownRpc
#include "GlobalNamespace/MenuRpcManager_CancelCountdownRpc.hpp"
// Including type: MenuRpcManager/SetCountdownEndTimeRpc
#include "GlobalNamespace/MenuRpcManager_SetCountdownEndTimeRpc.hpp"
// Including type: MenuRpcManager/GetCountdownEndTimeRpc
#include "GlobalNamespace/MenuRpcManager_GetCountdownEndTimeRpc.hpp"
// Including type: MenuRpcManager/CancelLevelStartRpc
#include "GlobalNamespace/MenuRpcManager_CancelLevelStartRpc.hpp"
// Including type: MenuRpcManager/GetIsReadyRpc
#include "GlobalNamespace/MenuRpcManager_GetIsReadyRpc.hpp"
// Including type: MenuRpcManager/SetIsReadyRpc
#include "GlobalNamespace/MenuRpcManager_SetIsReadyRpc.hpp"
// Including type: MenuRpcManager/SetStartGameTimeRpc
#include "GlobalNamespace/MenuRpcManager_SetStartGameTimeRpc.hpp"
// Including type: MenuRpcManager/CancelStartGameTimeRpc
#include "GlobalNamespace/MenuRpcManager_CancelStartGameTimeRpc.hpp"
// Including type: MenuRpcManager/GetIsInLobbyRpc
#include "GlobalNamespace/MenuRpcManager_GetIsInLobbyRpc.hpp"
// Including type: MenuRpcManager/SetIsInLobbyRpc
#include "GlobalNamespace/MenuRpcManager_SetIsInLobbyRpc.hpp"
// Including type: MenuRpcManager/GetOwnedSongPacksRpc
#include "GlobalNamespace/MenuRpcManager_GetOwnedSongPacksRpc.hpp"
// Including type: MenuRpcManager/SetOwnedSongPacksRpc
#include "GlobalNamespace/MenuRpcManager_SetOwnedSongPacksRpc.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: RpcHandler`1
#include "GlobalNamespace/RpcHandler_1.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kMenuState
::Il2CppString* GlobalNamespace::MenuRpcManager::_get_kMenuState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::_get_kMenuState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MenuRpcManager", "kMenuState"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuState
void GlobalNamespace::MenuRpcManager::_set_kMenuState(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::_set_kMenuState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager", "kMenuState", value));
}
// Autogenerated method: MenuRpcManager.get_multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager* GlobalNamespace::MenuRpcManager::get_multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::get_multiplayerSessionManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerSessionManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerSessionManager*, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.get_enabled
bool GlobalNamespace::MenuRpcManager::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::get_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.set_enabled
void GlobalNamespace::MenuRpcManager::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::set_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.get_enabledForAllPlayers
bool GlobalNamespace::MenuRpcManager::get_enabledForAllPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::get_enabledForAllPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enabledForAllPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.get_syncTime
float GlobalNamespace::MenuRpcManager::get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::get_syncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.Dispose
void GlobalNamespace::MenuRpcManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.EnabledForPlayer
bool GlobalNamespace::MenuRpcManager::EnabledForPlayer(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::EnabledForPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnabledForPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, player);
}
// Autogenerated method: MenuRpcManager.add_getIsEntitledToLevelEvent
void GlobalNamespace::MenuRpcManager::add_getIsEntitledToLevelEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_getIsEntitledToLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getIsEntitledToLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_getIsEntitledToLevelEvent
void GlobalNamespace::MenuRpcManager::remove_getIsEntitledToLevelEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_getIsEntitledToLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getIsEntitledToLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.GetIsEntitledToLevel
void GlobalNamespace::MenuRpcManager::GetIsEntitledToLevel(::Il2CppString* levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::GetIsEntitledToLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIsEntitledToLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId);
}
// Autogenerated method: MenuRpcManager.InvokeGetIsEntitledToLevel
void GlobalNamespace::MenuRpcManager::InvokeGetIsEntitledToLevel(::Il2CppString* userId, ::Il2CppString* levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeGetIsEntitledToLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetIsEntitledToLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(levelId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, levelId);
}
// Autogenerated method: MenuRpcManager.add_setIsEntitledToLevelEvent
void GlobalNamespace::MenuRpcManager::add_setIsEntitledToLevelEvent(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_setIsEntitledToLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setIsEntitledToLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_setIsEntitledToLevelEvent
void GlobalNamespace::MenuRpcManager::remove_setIsEntitledToLevelEvent(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_setIsEntitledToLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setIsEntitledToLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.SetIsEntitledToLevel
void GlobalNamespace::MenuRpcManager::SetIsEntitledToLevel(::Il2CppString* levelId, GlobalNamespace::EntitlementsStatus entitlementStatus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::SetIsEntitledToLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsEntitledToLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(entitlementStatus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId, entitlementStatus);
}
// Autogenerated method: MenuRpcManager.InvokeSetIsEntitledToLevel
void GlobalNamespace::MenuRpcManager::InvokeSetIsEntitledToLevel(::Il2CppString* userId, ::Il2CppString* levelId, int entitlementStatus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeSetIsEntitledToLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetIsEntitledToLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(entitlementStatus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, levelId, entitlementStatus);
}
// Autogenerated method: MenuRpcManager.add_levelEntitlementStatusesInvalidatedEvent
void GlobalNamespace::MenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelEntitlementStatusesInvalidatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_levelEntitlementStatusesInvalidatedEvent
void GlobalNamespace::MenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelEntitlementStatusesInvalidatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.InvalidateLevelEntitlementStatuses
void GlobalNamespace::MenuRpcManager::InvalidateLevelEntitlementStatuses() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvalidateLevelEntitlementStatuses");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateLevelEntitlementStatuses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeLevelEntitlementStatusesInvalidated
void GlobalNamespace::MenuRpcManager::InvokeLevelEntitlementStatusesInvalidated(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeLevelEntitlementStatusesInvalidated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeLevelEntitlementStatusesInvalidated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_selectedLevelPackEvent
void GlobalNamespace::MenuRpcManager::add_selectedLevelPackEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_selectedLevelPackEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectedLevelPackEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_selectedLevelPackEvent
void GlobalNamespace::MenuRpcManager::remove_selectedLevelPackEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_selectedLevelPackEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectedLevelPackEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.SelectLevelPack
void GlobalNamespace::MenuRpcManager::SelectLevelPack(::Il2CppString* levelPackId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::SelectLevelPack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectLevelPack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelPackId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelPackId);
}
// Autogenerated method: MenuRpcManager.InvokeOnSelectedLevelPackEvent
void GlobalNamespace::MenuRpcManager::InvokeOnSelectedLevelPackEvent(::Il2CppString* userId, ::Il2CppString* levelPackId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeOnSelectedLevelPackEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeOnSelectedLevelPackEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(levelPackId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, levelPackId);
}
// Autogenerated method: MenuRpcManager.add_selectedBeatmapEvent
void GlobalNamespace::MenuRpcManager::add_selectedBeatmapEvent(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_selectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_selectedBeatmapEvent
void GlobalNamespace::MenuRpcManager::remove_selectedBeatmapEvent(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_selectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.SelectBeatmap
void GlobalNamespace::MenuRpcManager::SelectBeatmap(GlobalNamespace::BeatmapIdentifierNetSerializable* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::SelectBeatmap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, identifier);
}
// Autogenerated method: MenuRpcManager.InvokeSelectedBeatmap
void GlobalNamespace::MenuRpcManager::InvokeSelectedBeatmap(::Il2CppString* userId, GlobalNamespace::BeatmapIdentifierNetSerializable* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeSelectedBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSelectedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(identifier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, identifier);
}
// Autogenerated method: MenuRpcManager.add_clearSelectedBeatmapEvent
void GlobalNamespace::MenuRpcManager::add_clearSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_clearSelectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_clearSelectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_clearSelectedBeatmapEvent
void GlobalNamespace::MenuRpcManager::remove_clearSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_clearSelectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_clearSelectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.ClearSelectedBeatmap
void GlobalNamespace::MenuRpcManager::ClearSelectedBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::ClearSelectedBeatmap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelectedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeClearSelectedBeatmap
void GlobalNamespace::MenuRpcManager::InvokeClearSelectedBeatmap(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeClearSelectedBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeClearSelectedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_getSelectedBeatmapEvent
void GlobalNamespace::MenuRpcManager::add_getSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_getSelectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getSelectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_getSelectedBeatmapEvent
void GlobalNamespace::MenuRpcManager::remove_getSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_getSelectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getSelectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.GetSelectedBeatmap
void GlobalNamespace::MenuRpcManager::GetSelectedBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::GetSelectedBeatmap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSelectedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeGetSelectedBeatmap
void GlobalNamespace::MenuRpcManager::InvokeGetSelectedBeatmap(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeGetSelectedBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetSelectedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_selectedGameplayModifiersEvent
void GlobalNamespace::MenuRpcManager::add_selectedGameplayModifiersEvent(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_selectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_selectedGameplayModifiersEvent
void GlobalNamespace::MenuRpcManager::remove_selectedGameplayModifiersEvent(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_selectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.SelectGameplayModifiers
void GlobalNamespace::MenuRpcManager::SelectGameplayModifiers(GlobalNamespace::GameplayModifiers* gameplayModifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::SelectGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, gameplayModifiers);
}
// Autogenerated method: MenuRpcManager.InvokeOnSelectedGameplayModifiersEvent
void GlobalNamespace::MenuRpcManager::InvokeOnSelectedGameplayModifiersEvent(::Il2CppString* userId, GlobalNamespace::GameplayModifiers* gameplayModifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeOnSelectedGameplayModifiersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeOnSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(gameplayModifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, gameplayModifiers);
}
// Autogenerated method: MenuRpcManager.add_clearSelectedGameplayModifiersEvent
void GlobalNamespace::MenuRpcManager::add_clearSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_clearSelectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_clearSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_clearSelectedGameplayModifiersEvent
void GlobalNamespace::MenuRpcManager::remove_clearSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_clearSelectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_clearSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.ClearSelectedGameplayModifiers
void GlobalNamespace::MenuRpcManager::ClearSelectedGameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::ClearSelectedGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelectedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeClearSelectedGameplayModifiers
void GlobalNamespace::MenuRpcManager::InvokeClearSelectedGameplayModifiers(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeClearSelectedGameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeClearSelectedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_getSelectedGameplayModifiersEvent
void GlobalNamespace::MenuRpcManager::add_getSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_getSelectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_getSelectedGameplayModifiersEvent
void GlobalNamespace::MenuRpcManager::remove_getSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_getSelectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.GetSelectedGameplayModifiers
void GlobalNamespace::MenuRpcManager::GetSelectedGameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::GetSelectedGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSelectedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeGetSelectedGameplayModifiers
void GlobalNamespace::MenuRpcManager::InvokeGetSelectedGameplayModifiers(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeGetSelectedGameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetSelectedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_levelLoadErrorEvent
void GlobalNamespace::MenuRpcManager::add_levelLoadErrorEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_levelLoadErrorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelLoadErrorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_levelLoadErrorEvent
void GlobalNamespace::MenuRpcManager::remove_levelLoadErrorEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_levelLoadErrorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelLoadErrorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.LevelLoadError
void GlobalNamespace::MenuRpcManager::LevelLoadError(::Il2CppString* levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::LevelLoadError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelLoadError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId);
}
// Autogenerated method: MenuRpcManager.InvokeLevelLoadError
void GlobalNamespace::MenuRpcManager::InvokeLevelLoadError(::Il2CppString* userId, ::Il2CppString* levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeLevelLoadError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeLevelLoadError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(levelId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, levelId);
}
// Autogenerated method: MenuRpcManager.add_levelLoadSuccessEvent
void GlobalNamespace::MenuRpcManager::add_levelLoadSuccessEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_levelLoadSuccessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelLoadSuccessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_levelLoadSuccessEvent
void GlobalNamespace::MenuRpcManager::remove_levelLoadSuccessEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_levelLoadSuccessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelLoadSuccessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.LevelLoadSuccess
void GlobalNamespace::MenuRpcManager::LevelLoadSuccess(::Il2CppString* levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::LevelLoadSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelLoadSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId);
}
// Autogenerated method: MenuRpcManager.InvokeLevelLoadSuccess
void GlobalNamespace::MenuRpcManager::InvokeLevelLoadSuccess(::Il2CppString* userId, ::Il2CppString* levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeLevelLoadSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeLevelLoadSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(levelId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, levelId);
}
// Autogenerated method: MenuRpcManager.add_startedLevelEvent
void GlobalNamespace::MenuRpcManager::add_startedLevelEvent(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_startedLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_startedLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_startedLevelEvent
void GlobalNamespace::MenuRpcManager::remove_startedLevelEvent(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_startedLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_startedLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.StartLevel
void GlobalNamespace::MenuRpcManager::StartLevel(GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::StartLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapId), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapId, gameplayModifiers, startTime);
}
// Autogenerated method: MenuRpcManager.InvokeStartLevel
void GlobalNamespace::MenuRpcManager::InvokeStartLevel(::Il2CppString* userId, GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeStartLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeStartLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(beatmapId), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, beatmapId, gameplayModifiers, startTime);
}
// Autogenerated method: MenuRpcManager.add_getStartedLevelEvent
void GlobalNamespace::MenuRpcManager::add_getStartedLevelEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_getStartedLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getStartedLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_getStartedLevelEvent
void GlobalNamespace::MenuRpcManager::remove_getStartedLevelEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_getStartedLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getStartedLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.GetStartedLevel
void GlobalNamespace::MenuRpcManager::GetStartedLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::GetStartedLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStartedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeGetStartedLevel
void GlobalNamespace::MenuRpcManager::InvokeGetStartedLevel(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeGetStartedLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetStartedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_getMultiplayerGameStateEvent
void GlobalNamespace::MenuRpcManager::add_getMultiplayerGameStateEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_getMultiplayerGameStateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getMultiplayerGameStateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_getMultiplayerGameStateEvent
void GlobalNamespace::MenuRpcManager::remove_getMultiplayerGameStateEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_getMultiplayerGameStateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getMultiplayerGameStateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.GetMultiplayerGameState
void GlobalNamespace::MenuRpcManager::GetMultiplayerGameState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::GetMultiplayerGameState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeGetMultiplayerGameState
void GlobalNamespace::MenuRpcManager::InvokeGetMultiplayerGameState(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeGetMultiplayerGameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_setMultiplayerGameStateEvent
void GlobalNamespace::MenuRpcManager::add_setMultiplayerGameStateEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_setMultiplayerGameStateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setMultiplayerGameStateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_setMultiplayerGameStateEvent
void GlobalNamespace::MenuRpcManager::remove_setMultiplayerGameStateEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_setMultiplayerGameStateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setMultiplayerGameStateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.SetMultiplayerGameState
void GlobalNamespace::MenuRpcManager::SetMultiplayerGameState(GlobalNamespace::MultiplayerGameState lobbyState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::SetMultiplayerGameState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lobbyState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lobbyState);
}
// Autogenerated method: MenuRpcManager.InvokeSetMultiplayerGameState
void GlobalNamespace::MenuRpcManager::InvokeSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState lobbyState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeSetMultiplayerGameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(lobbyState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, lobbyState);
}
// Autogenerated method: MenuRpcManager.add_cancelCountdownEvent
void GlobalNamespace::MenuRpcManager::add_cancelCountdownEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_cancelCountdownEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cancelCountdownEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_cancelCountdownEvent
void GlobalNamespace::MenuRpcManager::remove_cancelCountdownEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_cancelCountdownEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cancelCountdownEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.CancelCountdown
void GlobalNamespace::MenuRpcManager::CancelCountdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::CancelCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeCancelCountdown
void GlobalNamespace::MenuRpcManager::InvokeCancelCountdown(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeCancelCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeCancelCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_setCountdownEndTimeEvent
void GlobalNamespace::MenuRpcManager::add_setCountdownEndTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_setCountdownEndTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setCountdownEndTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_setCountdownEndTimeEvent
void GlobalNamespace::MenuRpcManager::remove_setCountdownEndTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_setCountdownEndTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setCountdownEndTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.SetCountdownEndTime
void GlobalNamespace::MenuRpcManager::SetCountdownEndTime(float newTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::SetCountdownEndTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCountdownEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newTime);
}
// Autogenerated method: MenuRpcManager.InvokeSetCountdownEndTime
void GlobalNamespace::MenuRpcManager::InvokeSetCountdownEndTime(::Il2CppString* userId, float newTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeSetCountdownEndTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetCountdownEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(newTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, newTime);
}
// Autogenerated method: MenuRpcManager.add_getCountdownEndTimeEvent
void GlobalNamespace::MenuRpcManager::add_getCountdownEndTimeEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_getCountdownEndTimeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getCountdownEndTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_getCountdownEndTimeEvent
void GlobalNamespace::MenuRpcManager::remove_getCountdownEndTimeEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_getCountdownEndTimeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getCountdownEndTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.GetCountdownEndTime
void GlobalNamespace::MenuRpcManager::GetCountdownEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::GetCountdownEndTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCountdownEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeGetCountdownEndTime
void GlobalNamespace::MenuRpcManager::InvokeGetCountdownEndTime(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeGetCountdownEndTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetCountdownEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_cancelledLevelStartEvent
void GlobalNamespace::MenuRpcManager::add_cancelledLevelStartEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_cancelledLevelStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cancelledLevelStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_cancelledLevelStartEvent
void GlobalNamespace::MenuRpcManager::remove_cancelledLevelStartEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_cancelledLevelStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cancelledLevelStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.CancelLevelStart
void GlobalNamespace::MenuRpcManager::CancelLevelStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::CancelLevelStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeCancelLevelStart
void GlobalNamespace::MenuRpcManager::InvokeCancelLevelStart(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeCancelLevelStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeCancelLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_getIsReadyEvent
void GlobalNamespace::MenuRpcManager::add_getIsReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_getIsReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getIsReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_getIsReadyEvent
void GlobalNamespace::MenuRpcManager::remove_getIsReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_getIsReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getIsReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.GetIsReady
void GlobalNamespace::MenuRpcManager::GetIsReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::GetIsReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeGetIsReady
void GlobalNamespace::MenuRpcManager::InvokeGetIsReady(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeGetIsReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_setIsReadyEvent
void GlobalNamespace::MenuRpcManager::add_setIsReadyEvent(System::Action_2<::Il2CppString*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_setIsReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setIsReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_setIsReadyEvent
void GlobalNamespace::MenuRpcManager::remove_setIsReadyEvent(System::Action_2<::Il2CppString*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_setIsReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setIsReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.SetIsReady
void GlobalNamespace::MenuRpcManager::SetIsReady(bool isReady) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::SetIsReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isReady)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isReady);
}
// Autogenerated method: MenuRpcManager.InvokeSetIsReady
void GlobalNamespace::MenuRpcManager::InvokeSetIsReady(::Il2CppString* userId, bool isReady) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeSetIsReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(isReady)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, isReady);
}
// Autogenerated method: MenuRpcManager.add_setStartGameTimeEvent
void GlobalNamespace::MenuRpcManager::add_setStartGameTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_setStartGameTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setStartGameTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_setStartGameTimeEvent
void GlobalNamespace::MenuRpcManager::remove_setStartGameTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_setStartGameTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setStartGameTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.SetStartGameTime
void GlobalNamespace::MenuRpcManager::SetStartGameTime(float newTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::SetStartGameTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStartGameTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newTime);
}
// Autogenerated method: MenuRpcManager.InvokeSetStartGameCountdown
void GlobalNamespace::MenuRpcManager::InvokeSetStartGameCountdown(::Il2CppString* userId, float newTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeSetStartGameCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetStartGameCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(newTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, newTime);
}
// Autogenerated method: MenuRpcManager.add_cancelStartGameTimeEvent
void GlobalNamespace::MenuRpcManager::add_cancelStartGameTimeEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_cancelStartGameTimeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cancelStartGameTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_cancelStartGameTimeEvent
void GlobalNamespace::MenuRpcManager::remove_cancelStartGameTimeEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_cancelStartGameTimeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cancelStartGameTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.CancelStartGameTime
void GlobalNamespace::MenuRpcManager::CancelStartGameTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::CancelStartGameTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelStartGameTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeCancelStartGameCountdown
void GlobalNamespace::MenuRpcManager::InvokeCancelStartGameCountdown(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeCancelStartGameCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeCancelStartGameCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_getIsInLobbyEvent
void GlobalNamespace::MenuRpcManager::add_getIsInLobbyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_getIsInLobbyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getIsInLobbyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_getIsInLobbyEvent
void GlobalNamespace::MenuRpcManager::remove_getIsInLobbyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_getIsInLobbyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getIsInLobbyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.GetIsInLobby
void GlobalNamespace::MenuRpcManager::GetIsInLobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::GetIsInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeGetIsInLobby
void GlobalNamespace::MenuRpcManager::InvokeGetIsInLobby(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeGetIsInLobby");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_setIsInLobbyEvent
void GlobalNamespace::MenuRpcManager::add_setIsInLobbyEvent(System::Action_2<::Il2CppString*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_setIsInLobbyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setIsInLobbyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_setIsInLobbyEvent
void GlobalNamespace::MenuRpcManager::remove_setIsInLobbyEvent(System::Action_2<::Il2CppString*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_setIsInLobbyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setIsInLobbyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.SetIsInLobby
void GlobalNamespace::MenuRpcManager::SetIsInLobby(bool isBack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::SetIsInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isBack)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isBack);
}
// Autogenerated method: MenuRpcManager.InvokeSetIsInLobby
void GlobalNamespace::MenuRpcManager::InvokeSetIsInLobby(::Il2CppString* userId, bool isBack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeSetIsInLobby");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(isBack)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, isBack);
}
// Autogenerated method: MenuRpcManager.add_getOwnedSongPacksEvent
void GlobalNamespace::MenuRpcManager::add_getOwnedSongPacksEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_getOwnedSongPacksEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getOwnedSongPacksEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_getOwnedSongPacksEvent
void GlobalNamespace::MenuRpcManager::remove_getOwnedSongPacksEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_getOwnedSongPacksEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getOwnedSongPacksEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.GetOwnedSongPacks
void GlobalNamespace::MenuRpcManager::GetOwnedSongPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::GetOwnedSongPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuRpcManager.InvokeGetOwnedSongPacks
void GlobalNamespace::MenuRpcManager::InvokeGetOwnedSongPacks(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeGetOwnedSongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: MenuRpcManager.add_setOwnedSongPacksEvent
void GlobalNamespace::MenuRpcManager::add_setOwnedSongPacksEvent(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::add_setOwnedSongPacksEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setOwnedSongPacksEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.remove_setOwnedSongPacksEvent
void GlobalNamespace::MenuRpcManager::remove_setOwnedSongPacksEvent(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::remove_setOwnedSongPacksEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setOwnedSongPacksEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MenuRpcManager.SetOwnedSongPacks
void GlobalNamespace::MenuRpcManager::SetOwnedSongPacks(GlobalNamespace::SongPackMask songPackMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::SetOwnedSongPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songPackMask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songPackMask);
}
// Autogenerated method: MenuRpcManager.InvokeSetOwnedSongPacks
void GlobalNamespace::MenuRpcManager::InvokeSetOwnedSongPacks(::Il2CppString* userId, GlobalNamespace::SongPackMask songPackMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::InvokeSetOwnedSongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(songPackMask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, songPackMask);
}
// Writing MetadataGetter for method: MenuRpcManager::get_multiplayerSessionManager
// Il2CppName: get_multiplayerSessionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IMultiplayerSessionManager* (MenuRpcManager::*)()>(&MenuRpcManager::get_multiplayerSessionManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "get_multiplayerSessionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MenuRpcManager::*)()>(&MenuRpcManager::get_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::set_enabled
// Il2CppName: set_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(bool)>(&MenuRpcManager::set_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "set_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::get_enabledForAllPlayers
// Il2CppName: get_enabledForAllPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MenuRpcManager::*)()>(&MenuRpcManager::get_enabledForAllPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "get_enabledForAllPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::get_syncTime
// Il2CppName: get_syncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MenuRpcManager::*)()>(&MenuRpcManager::get_syncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "get_syncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(GlobalNamespace::IMultiplayerSessionManager*)>(&MenuRpcManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(GlobalNamespace::IMultiplayerSessionManager*)>(&MenuRpcManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::EnabledForPlayer
// Il2CppName: EnabledForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MenuRpcManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MenuRpcManager::EnabledForPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "EnabledForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_getIsEntitledToLevelEvent
// Il2CppName: add_getIsEntitledToLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&MenuRpcManager::add_getIsEntitledToLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_getIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_getIsEntitledToLevelEvent
// Il2CppName: remove_getIsEntitledToLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&MenuRpcManager::remove_getIsEntitledToLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_getIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::GetIsEntitledToLevel
// Il2CppName: GetIsEntitledToLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::GetIsEntitledToLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "GetIsEntitledToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeGetIsEntitledToLevel
// Il2CppName: InvokeGetIsEntitledToLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, ::Il2CppString*)>(&MenuRpcManager::InvokeGetIsEntitledToLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeGetIsEntitledToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_setIsEntitledToLevelEvent
// Il2CppName: add_setIsEntitledToLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*)>(&MenuRpcManager::add_setIsEntitledToLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_setIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_setIsEntitledToLevelEvent
// Il2CppName: remove_setIsEntitledToLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*)>(&MenuRpcManager::remove_setIsEntitledToLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_setIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::SetIsEntitledToLevel
// Il2CppName: SetIsEntitledToLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, GlobalNamespace::EntitlementsStatus)>(&MenuRpcManager::SetIsEntitledToLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "SetIsEntitledToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EntitlementsStatus>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeSetIsEntitledToLevel
// Il2CppName: InvokeSetIsEntitledToLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, ::Il2CppString*, int)>(&MenuRpcManager::InvokeSetIsEntitledToLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeSetIsEntitledToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent
// Il2CppName: add_levelEntitlementStatusesInvalidatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_levelEntitlementStatusesInvalidatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent
// Il2CppName: remove_levelEntitlementStatusesInvalidatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_levelEntitlementStatusesInvalidatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvalidateLevelEntitlementStatuses
// Il2CppName: InvalidateLevelEntitlementStatuses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::InvalidateLevelEntitlementStatuses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvalidateLevelEntitlementStatuses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeLevelEntitlementStatusesInvalidated
// Il2CppName: InvokeLevelEntitlementStatusesInvalidated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeLevelEntitlementStatusesInvalidated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeLevelEntitlementStatusesInvalidated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_selectedLevelPackEvent
// Il2CppName: add_selectedLevelPackEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&MenuRpcManager::add_selectedLevelPackEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_selectedLevelPackEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_selectedLevelPackEvent
// Il2CppName: remove_selectedLevelPackEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&MenuRpcManager::remove_selectedLevelPackEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_selectedLevelPackEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::SelectLevelPack
// Il2CppName: SelectLevelPack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::SelectLevelPack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "SelectLevelPack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeOnSelectedLevelPackEvent
// Il2CppName: InvokeOnSelectedLevelPackEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, ::Il2CppString*)>(&MenuRpcManager::InvokeOnSelectedLevelPackEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeOnSelectedLevelPackEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_selectedBeatmapEvent
// Il2CppName: add_selectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*)>(&MenuRpcManager::add_selectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_selectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_selectedBeatmapEvent
// Il2CppName: remove_selectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*)>(&MenuRpcManager::remove_selectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_selectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::SelectBeatmap
// Il2CppName: SelectBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(GlobalNamespace::BeatmapIdentifierNetSerializable*)>(&MenuRpcManager::SelectBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "SelectBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeSelectedBeatmap
// Il2CppName: InvokeSelectedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*)>(&MenuRpcManager::InvokeSelectedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_clearSelectedBeatmapEvent
// Il2CppName: add_clearSelectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_clearSelectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_clearSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_clearSelectedBeatmapEvent
// Il2CppName: remove_clearSelectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_clearSelectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_clearSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::ClearSelectedBeatmap
// Il2CppName: ClearSelectedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::ClearSelectedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "ClearSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeClearSelectedBeatmap
// Il2CppName: InvokeClearSelectedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeClearSelectedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeClearSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_getSelectedBeatmapEvent
// Il2CppName: add_getSelectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_getSelectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_getSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_getSelectedBeatmapEvent
// Il2CppName: remove_getSelectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_getSelectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_getSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::GetSelectedBeatmap
// Il2CppName: GetSelectedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::GetSelectedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "GetSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeGetSelectedBeatmap
// Il2CppName: InvokeGetSelectedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeGetSelectedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeGetSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_selectedGameplayModifiersEvent
// Il2CppName: add_selectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*)>(&MenuRpcManager::add_selectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_selectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_selectedGameplayModifiersEvent
// Il2CppName: remove_selectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*)>(&MenuRpcManager::remove_selectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_selectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::SelectGameplayModifiers
// Il2CppName: SelectGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(GlobalNamespace::GameplayModifiers*)>(&MenuRpcManager::SelectGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "SelectGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeOnSelectedGameplayModifiersEvent
// Il2CppName: InvokeOnSelectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, GlobalNamespace::GameplayModifiers*)>(&MenuRpcManager::InvokeOnSelectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeOnSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_clearSelectedGameplayModifiersEvent
// Il2CppName: add_clearSelectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_clearSelectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_clearSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_clearSelectedGameplayModifiersEvent
// Il2CppName: remove_clearSelectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_clearSelectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_clearSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::ClearSelectedGameplayModifiers
// Il2CppName: ClearSelectedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::ClearSelectedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "ClearSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeClearSelectedGameplayModifiers
// Il2CppName: InvokeClearSelectedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeClearSelectedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeClearSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_getSelectedGameplayModifiersEvent
// Il2CppName: add_getSelectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_getSelectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_getSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_getSelectedGameplayModifiersEvent
// Il2CppName: remove_getSelectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_getSelectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_getSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::GetSelectedGameplayModifiers
// Il2CppName: GetSelectedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::GetSelectedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "GetSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeGetSelectedGameplayModifiers
// Il2CppName: InvokeGetSelectedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeGetSelectedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeGetSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_levelLoadErrorEvent
// Il2CppName: add_levelLoadErrorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&MenuRpcManager::add_levelLoadErrorEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_levelLoadErrorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_levelLoadErrorEvent
// Il2CppName: remove_levelLoadErrorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&MenuRpcManager::remove_levelLoadErrorEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_levelLoadErrorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::LevelLoadError
// Il2CppName: LevelLoadError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::LevelLoadError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "LevelLoadError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeLevelLoadError
// Il2CppName: InvokeLevelLoadError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, ::Il2CppString*)>(&MenuRpcManager::InvokeLevelLoadError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeLevelLoadError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_levelLoadSuccessEvent
// Il2CppName: add_levelLoadSuccessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&MenuRpcManager::add_levelLoadSuccessEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_levelLoadSuccessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_levelLoadSuccessEvent
// Il2CppName: remove_levelLoadSuccessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&MenuRpcManager::remove_levelLoadSuccessEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_levelLoadSuccessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::LevelLoadSuccess
// Il2CppName: LevelLoadSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::LevelLoadSuccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "LevelLoadSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeLevelLoadSuccess
// Il2CppName: InvokeLevelLoadSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, ::Il2CppString*)>(&MenuRpcManager::InvokeLevelLoadSuccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeLevelLoadSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_startedLevelEvent
// Il2CppName: add_startedLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*)>(&MenuRpcManager::add_startedLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_startedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_startedLevelEvent
// Il2CppName: remove_startedLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*)>(&MenuRpcManager::remove_startedLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_startedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::StartLevel
// Il2CppName: StartLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float)>(&MenuRpcManager::StartLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "StartLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeStartLevel
// Il2CppName: InvokeStartLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float)>(&MenuRpcManager::InvokeStartLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeStartLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_getStartedLevelEvent
// Il2CppName: add_getStartedLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_getStartedLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_getStartedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_getStartedLevelEvent
// Il2CppName: remove_getStartedLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_getStartedLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_getStartedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::GetStartedLevel
// Il2CppName: GetStartedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::GetStartedLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "GetStartedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeGetStartedLevel
// Il2CppName: InvokeGetStartedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeGetStartedLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeGetStartedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_getMultiplayerGameStateEvent
// Il2CppName: add_getMultiplayerGameStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_getMultiplayerGameStateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_getMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_getMultiplayerGameStateEvent
// Il2CppName: remove_getMultiplayerGameStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_getMultiplayerGameStateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_getMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::GetMultiplayerGameState
// Il2CppName: GetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::GetMultiplayerGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "GetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeGetMultiplayerGameState
// Il2CppName: InvokeGetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeGetMultiplayerGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeGetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_setMultiplayerGameStateEvent
// Il2CppName: add_setMultiplayerGameStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*)>(&MenuRpcManager::add_setMultiplayerGameStateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_setMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_setMultiplayerGameStateEvent
// Il2CppName: remove_setMultiplayerGameStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*)>(&MenuRpcManager::remove_setMultiplayerGameStateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_setMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::SetMultiplayerGameState
// Il2CppName: SetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(GlobalNamespace::MultiplayerGameState)>(&MenuRpcManager::SetMultiplayerGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "SetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeSetMultiplayerGameState
// Il2CppName: InvokeSetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, GlobalNamespace::MultiplayerGameState)>(&MenuRpcManager::InvokeSetMultiplayerGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeSetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_cancelCountdownEvent
// Il2CppName: add_cancelCountdownEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_cancelCountdownEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_cancelCountdownEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_cancelCountdownEvent
// Il2CppName: remove_cancelCountdownEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_cancelCountdownEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_cancelCountdownEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::CancelCountdown
// Il2CppName: CancelCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::CancelCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "CancelCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeCancelCountdown
// Il2CppName: InvokeCancelCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeCancelCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeCancelCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_setCountdownEndTimeEvent
// Il2CppName: add_setCountdownEndTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&MenuRpcManager::add_setCountdownEndTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_setCountdownEndTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_setCountdownEndTimeEvent
// Il2CppName: remove_setCountdownEndTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&MenuRpcManager::remove_setCountdownEndTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_setCountdownEndTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::SetCountdownEndTime
// Il2CppName: SetCountdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(float)>(&MenuRpcManager::SetCountdownEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "SetCountdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeSetCountdownEndTime
// Il2CppName: InvokeSetCountdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, float)>(&MenuRpcManager::InvokeSetCountdownEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeSetCountdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_getCountdownEndTimeEvent
// Il2CppName: add_getCountdownEndTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_getCountdownEndTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_getCountdownEndTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_getCountdownEndTimeEvent
// Il2CppName: remove_getCountdownEndTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_getCountdownEndTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_getCountdownEndTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::GetCountdownEndTime
// Il2CppName: GetCountdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::GetCountdownEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "GetCountdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeGetCountdownEndTime
// Il2CppName: InvokeGetCountdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeGetCountdownEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeGetCountdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_cancelledLevelStartEvent
// Il2CppName: add_cancelledLevelStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_cancelledLevelStartEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_cancelledLevelStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_cancelledLevelStartEvent
// Il2CppName: remove_cancelledLevelStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_cancelledLevelStartEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_cancelledLevelStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::CancelLevelStart
// Il2CppName: CancelLevelStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::CancelLevelStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "CancelLevelStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeCancelLevelStart
// Il2CppName: InvokeCancelLevelStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeCancelLevelStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeCancelLevelStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_getIsReadyEvent
// Il2CppName: add_getIsReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_getIsReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_getIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_getIsReadyEvent
// Il2CppName: remove_getIsReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_getIsReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_getIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::GetIsReady
// Il2CppName: GetIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::GetIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "GetIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeGetIsReady
// Il2CppName: InvokeGetIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeGetIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeGetIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_setIsReadyEvent
// Il2CppName: add_setIsReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&MenuRpcManager::add_setIsReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_setIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_setIsReadyEvent
// Il2CppName: remove_setIsReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&MenuRpcManager::remove_setIsReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_setIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::SetIsReady
// Il2CppName: SetIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(bool)>(&MenuRpcManager::SetIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "SetIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeSetIsReady
// Il2CppName: InvokeSetIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, bool)>(&MenuRpcManager::InvokeSetIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeSetIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_setStartGameTimeEvent
// Il2CppName: add_setStartGameTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&MenuRpcManager::add_setStartGameTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_setStartGameTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_setStartGameTimeEvent
// Il2CppName: remove_setStartGameTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&MenuRpcManager::remove_setStartGameTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_setStartGameTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::SetStartGameTime
// Il2CppName: SetStartGameTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(float)>(&MenuRpcManager::SetStartGameTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "SetStartGameTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeSetStartGameCountdown
// Il2CppName: InvokeSetStartGameCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, float)>(&MenuRpcManager::InvokeSetStartGameCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeSetStartGameCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_cancelStartGameTimeEvent
// Il2CppName: add_cancelStartGameTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_cancelStartGameTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_cancelStartGameTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_cancelStartGameTimeEvent
// Il2CppName: remove_cancelStartGameTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_cancelStartGameTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_cancelStartGameTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::CancelStartGameTime
// Il2CppName: CancelStartGameTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::CancelStartGameTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "CancelStartGameTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeCancelStartGameCountdown
// Il2CppName: InvokeCancelStartGameCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeCancelStartGameCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeCancelStartGameCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_getIsInLobbyEvent
// Il2CppName: add_getIsInLobbyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_getIsInLobbyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_getIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_getIsInLobbyEvent
// Il2CppName: remove_getIsInLobbyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_getIsInLobbyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_getIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::GetIsInLobby
// Il2CppName: GetIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::GetIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "GetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeGetIsInLobby
// Il2CppName: InvokeGetIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeGetIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeGetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_setIsInLobbyEvent
// Il2CppName: add_setIsInLobbyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&MenuRpcManager::add_setIsInLobbyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_setIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_setIsInLobbyEvent
// Il2CppName: remove_setIsInLobbyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&MenuRpcManager::remove_setIsInLobbyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_setIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::SetIsInLobby
// Il2CppName: SetIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(bool)>(&MenuRpcManager::SetIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "SetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeSetIsInLobby
// Il2CppName: InvokeSetIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, bool)>(&MenuRpcManager::InvokeSetIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeSetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_getOwnedSongPacksEvent
// Il2CppName: add_getOwnedSongPacksEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::add_getOwnedSongPacksEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_getOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_getOwnedSongPacksEvent
// Il2CppName: remove_getOwnedSongPacksEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&MenuRpcManager::remove_getOwnedSongPacksEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_getOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::GetOwnedSongPacks
// Il2CppName: GetOwnedSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)()>(&MenuRpcManager::GetOwnedSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "GetOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeGetOwnedSongPacks
// Il2CppName: InvokeGetOwnedSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*)>(&MenuRpcManager::InvokeGetOwnedSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeGetOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::add_setOwnedSongPacksEvent
// Il2CppName: add_setOwnedSongPacksEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*)>(&MenuRpcManager::add_setOwnedSongPacksEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "add_setOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::remove_setOwnedSongPacksEvent
// Il2CppName: remove_setOwnedSongPacksEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*)>(&MenuRpcManager::remove_setOwnedSongPacksEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "remove_setOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::SetOwnedSongPacks
// Il2CppName: SetOwnedSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(GlobalNamespace::SongPackMask)>(&MenuRpcManager::SetOwnedSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "SetOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Writing MetadataGetter for method: MenuRpcManager::InvokeSetOwnedSongPacks
// Il2CppName: InvokeSetOwnedSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::*)(::Il2CppString*, GlobalNamespace::SongPackMask)>(&MenuRpcManager::InvokeSetOwnedSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager*), "InvokeSetOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/RpcType
#include "GlobalNamespace/MenuRpcManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType GetIsEntitledToLevel
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_GetIsEntitledToLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_GetIsEntitledToLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "GetIsEntitledToLevel"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType GetIsEntitledToLevel
void GlobalNamespace::MenuRpcManager::RpcType::_set_GetIsEntitledToLevel(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_GetIsEntitledToLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "GetIsEntitledToLevel", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType SetIsEntitledToLevel
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_SetIsEntitledToLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_SetIsEntitledToLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "SetIsEntitledToLevel"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType SetIsEntitledToLevel
void GlobalNamespace::MenuRpcManager::RpcType::_set_SetIsEntitledToLevel(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_SetIsEntitledToLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "SetIsEntitledToLevel", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType InvalidateLevelEntitlementStatuses
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_InvalidateLevelEntitlementStatuses() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_InvalidateLevelEntitlementStatuses");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "InvalidateLevelEntitlementStatuses"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType InvalidateLevelEntitlementStatuses
void GlobalNamespace::MenuRpcManager::RpcType::_set_InvalidateLevelEntitlementStatuses(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_InvalidateLevelEntitlementStatuses");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "InvalidateLevelEntitlementStatuses", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType SelectLevelPack
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_SelectLevelPack() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_SelectLevelPack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "SelectLevelPack"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType SelectLevelPack
void GlobalNamespace::MenuRpcManager::RpcType::_set_SelectLevelPack(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_SelectLevelPack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "SelectLevelPack", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType SelectBeatmap
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_SelectBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_SelectBeatmap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "SelectBeatmap"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType SelectBeatmap
void GlobalNamespace::MenuRpcManager::RpcType::_set_SelectBeatmap(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_SelectBeatmap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "SelectBeatmap", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType ClearSelectedBeatmap
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_ClearSelectedBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_ClearSelectedBeatmap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "ClearSelectedBeatmap"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType ClearSelectedBeatmap
void GlobalNamespace::MenuRpcManager::RpcType::_set_ClearSelectedBeatmap(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_ClearSelectedBeatmap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "ClearSelectedBeatmap", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType GetSelectedBeatmap
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_GetSelectedBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_GetSelectedBeatmap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "GetSelectedBeatmap"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType GetSelectedBeatmap
void GlobalNamespace::MenuRpcManager::RpcType::_set_GetSelectedBeatmap(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_GetSelectedBeatmap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "GetSelectedBeatmap", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType SelectGameplayModifiers
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_SelectGameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_SelectGameplayModifiers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "SelectGameplayModifiers"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType SelectGameplayModifiers
void GlobalNamespace::MenuRpcManager::RpcType::_set_SelectGameplayModifiers(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_SelectGameplayModifiers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "SelectGameplayModifiers", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType ClearSelectedGameplayModifiers
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_ClearSelectedGameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_ClearSelectedGameplayModifiers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "ClearSelectedGameplayModifiers"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType ClearSelectedGameplayModifiers
void GlobalNamespace::MenuRpcManager::RpcType::_set_ClearSelectedGameplayModifiers(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_ClearSelectedGameplayModifiers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "ClearSelectedGameplayModifiers", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType GetSelectedGameplayModifiers
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_GetSelectedGameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_GetSelectedGameplayModifiers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "GetSelectedGameplayModifiers"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType GetSelectedGameplayModifiers
void GlobalNamespace::MenuRpcManager::RpcType::_set_GetSelectedGameplayModifiers(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_GetSelectedGameplayModifiers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "GetSelectedGameplayModifiers", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType LevelLoadError
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_LevelLoadError() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_LevelLoadError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "LevelLoadError"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType LevelLoadError
void GlobalNamespace::MenuRpcManager::RpcType::_set_LevelLoadError(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_LevelLoadError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "LevelLoadError", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType LevelLoadSuccess
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_LevelLoadSuccess() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_LevelLoadSuccess");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "LevelLoadSuccess"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType LevelLoadSuccess
void GlobalNamespace::MenuRpcManager::RpcType::_set_LevelLoadSuccess(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_LevelLoadSuccess");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "LevelLoadSuccess", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType StartLevel
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_StartLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_StartLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "StartLevel"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType StartLevel
void GlobalNamespace::MenuRpcManager::RpcType::_set_StartLevel(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_StartLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "StartLevel", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType GetStartedLevel
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_GetStartedLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_GetStartedLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "GetStartedLevel"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType GetStartedLevel
void GlobalNamespace::MenuRpcManager::RpcType::_set_GetStartedLevel(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_GetStartedLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "GetStartedLevel", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType CancelLevelStart
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_CancelLevelStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_CancelLevelStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "CancelLevelStart"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType CancelLevelStart
void GlobalNamespace::MenuRpcManager::RpcType::_set_CancelLevelStart(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_CancelLevelStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "CancelLevelStart", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType GetMultiplayerGameState
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_GetMultiplayerGameState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_GetMultiplayerGameState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "GetMultiplayerGameState"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType GetMultiplayerGameState
void GlobalNamespace::MenuRpcManager::RpcType::_set_GetMultiplayerGameState(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_GetMultiplayerGameState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "GetMultiplayerGameState", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType SetMultiplayerGameState
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_SetMultiplayerGameState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_SetMultiplayerGameState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "SetMultiplayerGameState"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType SetMultiplayerGameState
void GlobalNamespace::MenuRpcManager::RpcType::_set_SetMultiplayerGameState(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_SetMultiplayerGameState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "SetMultiplayerGameState", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType GetIsReady
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_GetIsReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_GetIsReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "GetIsReady"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType GetIsReady
void GlobalNamespace::MenuRpcManager::RpcType::_set_GetIsReady(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_GetIsReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "GetIsReady", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType SetIsReady
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_SetIsReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_SetIsReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "SetIsReady"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType SetIsReady
void GlobalNamespace::MenuRpcManager::RpcType::_set_SetIsReady(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_SetIsReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "SetIsReady", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType SetStartGameTime
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_SetStartGameTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_SetStartGameTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "SetStartGameTime"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType SetStartGameTime
void GlobalNamespace::MenuRpcManager::RpcType::_set_SetStartGameTime(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_SetStartGameTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "SetStartGameTime", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType CancelStartGameTime
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_CancelStartGameTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_CancelStartGameTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "CancelStartGameTime"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType CancelStartGameTime
void GlobalNamespace::MenuRpcManager::RpcType::_set_CancelStartGameTime(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_CancelStartGameTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "CancelStartGameTime", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType GetIsInLobby
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_GetIsInLobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_GetIsInLobby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "GetIsInLobby"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType GetIsInLobby
void GlobalNamespace::MenuRpcManager::RpcType::_set_GetIsInLobby(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_GetIsInLobby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "GetIsInLobby", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType SetIsInLobby
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_SetIsInLobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_SetIsInLobby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "SetIsInLobby"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType SetIsInLobby
void GlobalNamespace::MenuRpcManager::RpcType::_set_SetIsInLobby(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_SetIsInLobby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "SetIsInLobby", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType GetCountdownEndTime
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_GetCountdownEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_GetCountdownEndTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "GetCountdownEndTime"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType GetCountdownEndTime
void GlobalNamespace::MenuRpcManager::RpcType::_set_GetCountdownEndTime(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_GetCountdownEndTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "GetCountdownEndTime", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType SetCountdownEndTime
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_SetCountdownEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_SetCountdownEndTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "SetCountdownEndTime"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType SetCountdownEndTime
void GlobalNamespace::MenuRpcManager::RpcType::_set_SetCountdownEndTime(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_SetCountdownEndTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "SetCountdownEndTime", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType CancelCountdown
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_CancelCountdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_CancelCountdown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "CancelCountdown"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType CancelCountdown
void GlobalNamespace::MenuRpcManager::RpcType::_set_CancelCountdown(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_CancelCountdown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "CancelCountdown", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType GetOwnedSongPacks
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_GetOwnedSongPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_GetOwnedSongPacks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "GetOwnedSongPacks"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType GetOwnedSongPacks
void GlobalNamespace::MenuRpcManager::RpcType::_set_GetOwnedSongPacks(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_GetOwnedSongPacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "GetOwnedSongPacks", value));
}
// Autogenerated static field getter
// Get static field: static public MenuRpcManager/RpcType SetOwnedSongPacks
GlobalNamespace::MenuRpcManager::RpcType GlobalNamespace::MenuRpcManager::RpcType::_get_SetOwnedSongPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_get_SetOwnedSongPacks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuRpcManager::RpcType>("", "MenuRpcManager/RpcType", "SetOwnedSongPacks"));
}
// Autogenerated static field setter
// Set static field: static public MenuRpcManager/RpcType SetOwnedSongPacks
void GlobalNamespace::MenuRpcManager::RpcType::_set_SetOwnedSongPacks(GlobalNamespace::MenuRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::RpcType::_set_SetOwnedSongPacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuRpcManager/RpcType", "SetOwnedSongPacks", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuRpcManager/GetIsEntitledToLevelRpc
#include "GlobalNamespace/MenuRpcManager_GetIsEntitledToLevelRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::GetIsEntitledToLevelRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetIsEntitledToLevelRpc::*)()>(&MenuRpcManager::GetIsEntitledToLevelRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetIsEntitledToLevelRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetIsEntitledToLevelRpc::*)()>(&MenuRpcManager::GetIsEntitledToLevelRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetIsEntitledToLevelRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuRpcManager/SetIsEntitledToLevelRpc
#include "GlobalNamespace/MenuRpcManager_SetIsEntitledToLevelRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::SetIsEntitledToLevelRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetIsEntitledToLevelRpc::*)()>(&MenuRpcManager::SetIsEntitledToLevelRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetIsEntitledToLevelRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetIsEntitledToLevelRpc::*)()>(&MenuRpcManager::SetIsEntitledToLevelRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetIsEntitledToLevelRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/InvalidateLevelEntitlementStatusesRpc
#include "GlobalNamespace/MenuRpcManager_InvalidateLevelEntitlementStatusesRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::InvalidateLevelEntitlementStatusesRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::InvalidateLevelEntitlementStatusesRpc::*)()>(&MenuRpcManager::InvalidateLevelEntitlementStatusesRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::InvalidateLevelEntitlementStatusesRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::InvalidateLevelEntitlementStatusesRpc::*)()>(&MenuRpcManager::InvalidateLevelEntitlementStatusesRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::InvalidateLevelEntitlementStatusesRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuRpcManager/SelectLevelPackRpc
#include "GlobalNamespace/MenuRpcManager_SelectLevelPackRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::SelectLevelPackRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SelectLevelPackRpc::*)()>(&MenuRpcManager::SelectLevelPackRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SelectLevelPackRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SelectLevelPackRpc::*)()>(&MenuRpcManager::SelectLevelPackRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SelectLevelPackRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/SelectBeatmapRpc
#include "GlobalNamespace/MenuRpcManager_SelectBeatmapRpc.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::SelectBeatmapRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SelectBeatmapRpc::*)()>(&MenuRpcManager::SelectBeatmapRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SelectBeatmapRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SelectBeatmapRpc::*)()>(&MenuRpcManager::SelectBeatmapRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SelectBeatmapRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/ClearSelectedBeatmapRpc
#include "GlobalNamespace/MenuRpcManager_ClearSelectedBeatmapRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::ClearSelectedBeatmapRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::ClearSelectedBeatmapRpc::*)()>(&MenuRpcManager::ClearSelectedBeatmapRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::ClearSelectedBeatmapRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::ClearSelectedBeatmapRpc::*)()>(&MenuRpcManager::ClearSelectedBeatmapRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::ClearSelectedBeatmapRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/GetSelectedBeatmapRpc
#include "GlobalNamespace/MenuRpcManager_GetSelectedBeatmapRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::GetSelectedBeatmapRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetSelectedBeatmapRpc::*)()>(&MenuRpcManager::GetSelectedBeatmapRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetSelectedBeatmapRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetSelectedBeatmapRpc::*)()>(&MenuRpcManager::GetSelectedBeatmapRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetSelectedBeatmapRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/SelectGameplayModifiersRpc
#include "GlobalNamespace/MenuRpcManager_SelectGameplayModifiersRpc.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::SelectGameplayModifiersRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SelectGameplayModifiersRpc::*)()>(&MenuRpcManager::SelectGameplayModifiersRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SelectGameplayModifiersRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SelectGameplayModifiersRpc::*)()>(&MenuRpcManager::SelectGameplayModifiersRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SelectGameplayModifiersRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/ClearSelectedGameplayModifiersRpc
#include "GlobalNamespace/MenuRpcManager_ClearSelectedGameplayModifiersRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::ClearSelectedGameplayModifiersRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::ClearSelectedGameplayModifiersRpc::*)()>(&MenuRpcManager::ClearSelectedGameplayModifiersRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::ClearSelectedGameplayModifiersRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::ClearSelectedGameplayModifiersRpc::*)()>(&MenuRpcManager::ClearSelectedGameplayModifiersRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::ClearSelectedGameplayModifiersRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/GetSelectedGameplayModifiersRpc
#include "GlobalNamespace/MenuRpcManager_GetSelectedGameplayModifiersRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::GetSelectedGameplayModifiersRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetSelectedGameplayModifiersRpc::*)()>(&MenuRpcManager::GetSelectedGameplayModifiersRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetSelectedGameplayModifiersRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetSelectedGameplayModifiersRpc::*)()>(&MenuRpcManager::GetSelectedGameplayModifiersRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetSelectedGameplayModifiersRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuRpcManager/LevelLoadErrorRpc
#include "GlobalNamespace/MenuRpcManager_LevelLoadErrorRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::LevelLoadErrorRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::LevelLoadErrorRpc::*)()>(&MenuRpcManager::LevelLoadErrorRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::LevelLoadErrorRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::LevelLoadErrorRpc::*)()>(&MenuRpcManager::LevelLoadErrorRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::LevelLoadErrorRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuRpcManager/LevelLoadSuccessRpc
#include "GlobalNamespace/MenuRpcManager_LevelLoadSuccessRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::LevelLoadSuccessRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::LevelLoadSuccessRpc::*)()>(&MenuRpcManager::LevelLoadSuccessRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::LevelLoadSuccessRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::LevelLoadSuccessRpc::*)()>(&MenuRpcManager::LevelLoadSuccessRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::LevelLoadSuccessRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/StartLevelRpc
#include "GlobalNamespace/MenuRpcManager_StartLevelRpc.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::StartLevelRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::StartLevelRpc::*)()>(&MenuRpcManager::StartLevelRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::StartLevelRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::StartLevelRpc::*)()>(&MenuRpcManager::StartLevelRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::StartLevelRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/GetStartedLevelRpc
#include "GlobalNamespace/MenuRpcManager_GetStartedLevelRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::GetStartedLevelRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetStartedLevelRpc::*)()>(&MenuRpcManager::GetStartedLevelRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetStartedLevelRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetStartedLevelRpc::*)()>(&MenuRpcManager::GetStartedLevelRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetStartedLevelRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/GetMultiplayerGameStateRpc
#include "GlobalNamespace/MenuRpcManager_GetMultiplayerGameStateRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::GetMultiplayerGameStateRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetMultiplayerGameStateRpc::*)()>(&MenuRpcManager::GetMultiplayerGameStateRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetMultiplayerGameStateRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetMultiplayerGameStateRpc::*)()>(&MenuRpcManager::GetMultiplayerGameStateRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetMultiplayerGameStateRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/SetMultiplayerGameStateRpc
#include "GlobalNamespace/MenuRpcManager_SetMultiplayerGameStateRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::SetMultiplayerGameStateRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetMultiplayerGameStateRpc::*)()>(&MenuRpcManager::SetMultiplayerGameStateRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetMultiplayerGameStateRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetMultiplayerGameStateRpc::*)()>(&MenuRpcManager::SetMultiplayerGameStateRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetMultiplayerGameStateRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/CancelCountdownRpc
#include "GlobalNamespace/MenuRpcManager_CancelCountdownRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::CancelCountdownRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::CancelCountdownRpc::*)()>(&MenuRpcManager::CancelCountdownRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::CancelCountdownRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::CancelCountdownRpc::*)()>(&MenuRpcManager::CancelCountdownRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::CancelCountdownRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/SetCountdownEndTimeRpc
#include "GlobalNamespace/MenuRpcManager_SetCountdownEndTimeRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::SetCountdownEndTimeRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetCountdownEndTimeRpc::*)()>(&MenuRpcManager::SetCountdownEndTimeRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetCountdownEndTimeRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetCountdownEndTimeRpc::*)()>(&MenuRpcManager::SetCountdownEndTimeRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetCountdownEndTimeRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/GetCountdownEndTimeRpc
#include "GlobalNamespace/MenuRpcManager_GetCountdownEndTimeRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::GetCountdownEndTimeRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetCountdownEndTimeRpc::*)()>(&MenuRpcManager::GetCountdownEndTimeRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetCountdownEndTimeRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetCountdownEndTimeRpc::*)()>(&MenuRpcManager::GetCountdownEndTimeRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetCountdownEndTimeRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/CancelLevelStartRpc
#include "GlobalNamespace/MenuRpcManager_CancelLevelStartRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::CancelLevelStartRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::CancelLevelStartRpc::*)()>(&MenuRpcManager::CancelLevelStartRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::CancelLevelStartRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::CancelLevelStartRpc::*)()>(&MenuRpcManager::CancelLevelStartRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::CancelLevelStartRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/GetIsReadyRpc
#include "GlobalNamespace/MenuRpcManager_GetIsReadyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::GetIsReadyRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetIsReadyRpc::*)()>(&MenuRpcManager::GetIsReadyRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetIsReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetIsReadyRpc::*)()>(&MenuRpcManager::GetIsReadyRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetIsReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/SetIsReadyRpc
#include "GlobalNamespace/MenuRpcManager_SetIsReadyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::SetIsReadyRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetIsReadyRpc::*)()>(&MenuRpcManager::SetIsReadyRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetIsReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetIsReadyRpc::*)()>(&MenuRpcManager::SetIsReadyRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetIsReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/SetStartGameTimeRpc
#include "GlobalNamespace/MenuRpcManager_SetStartGameTimeRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::SetStartGameTimeRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetStartGameTimeRpc::*)()>(&MenuRpcManager::SetStartGameTimeRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetStartGameTimeRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetStartGameTimeRpc::*)()>(&MenuRpcManager::SetStartGameTimeRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetStartGameTimeRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/CancelStartGameTimeRpc
#include "GlobalNamespace/MenuRpcManager_CancelStartGameTimeRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::CancelStartGameTimeRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::CancelStartGameTimeRpc::*)()>(&MenuRpcManager::CancelStartGameTimeRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::CancelStartGameTimeRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::CancelStartGameTimeRpc::*)()>(&MenuRpcManager::CancelStartGameTimeRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::CancelStartGameTimeRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/GetIsInLobbyRpc
#include "GlobalNamespace/MenuRpcManager_GetIsInLobbyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::GetIsInLobbyRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetIsInLobbyRpc::*)()>(&MenuRpcManager::GetIsInLobbyRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetIsInLobbyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetIsInLobbyRpc::*)()>(&MenuRpcManager::GetIsInLobbyRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetIsInLobbyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/SetIsInLobbyRpc
#include "GlobalNamespace/MenuRpcManager_SetIsInLobbyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::SetIsInLobbyRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetIsInLobbyRpc::*)()>(&MenuRpcManager::SetIsInLobbyRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetIsInLobbyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetIsInLobbyRpc::*)()>(&MenuRpcManager::SetIsInLobbyRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetIsInLobbyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/GetOwnedSongPacksRpc
#include "GlobalNamespace/MenuRpcManager_GetOwnedSongPacksRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::GetOwnedSongPacksRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetOwnedSongPacksRpc::*)()>(&MenuRpcManager::GetOwnedSongPacksRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetOwnedSongPacksRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::GetOwnedSongPacksRpc::*)()>(&MenuRpcManager::GetOwnedSongPacksRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::GetOwnedSongPacksRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuRpcManager/SetOwnedSongPacksRpc
#include "GlobalNamespace/MenuRpcManager_SetOwnedSongPacksRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuRpcManager::SetOwnedSongPacksRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetOwnedSongPacksRpc::*)()>(&MenuRpcManager::SetOwnedSongPacksRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetOwnedSongPacksRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuRpcManager::SetOwnedSongPacksRpc::*)()>(&MenuRpcManager::SetOwnedSongPacksRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuRpcManager::SetOwnedSongPacksRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerGameType
#include "GlobalNamespace/MultiplayerGameType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerGameType None
GlobalNamespace::MultiplayerGameType GlobalNamespace::MultiplayerGameType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerGameType>("", "MultiplayerGameType", "None"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerGameType None
void GlobalNamespace::MultiplayerGameType::_set_None(GlobalNamespace::MultiplayerGameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerGameType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerGameType QuickPlay
GlobalNamespace::MultiplayerGameType GlobalNamespace::MultiplayerGameType::_get_QuickPlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameType::_get_QuickPlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerGameType>("", "MultiplayerGameType", "QuickPlay"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerGameType QuickPlay
void GlobalNamespace::MultiplayerGameType::_set_QuickPlay(GlobalNamespace::MultiplayerGameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameType::_set_QuickPlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerGameType", "QuickPlay", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerGameType Private
GlobalNamespace::MultiplayerGameType GlobalNamespace::MultiplayerGameType::_get_Private() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameType::_get_Private");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerGameType>("", "MultiplayerGameType", "Private"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerGameType Private
void GlobalNamespace::MultiplayerGameType::_set_Private(GlobalNamespace::MultiplayerGameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameType::_set_Private");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerGameType", "Private", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLevelCompletionResults.get_levelEndState
GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState GlobalNamespace::MultiplayerLevelCompletionResults::get_levelEndState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::get_levelEndState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelEndState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelCompletionResults.get_levelCompletionResults
GlobalNamespace::LevelCompletionResults* GlobalNamespace::MultiplayerLevelCompletionResults::get_levelCompletionResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::get_levelCompletionResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelCompletionResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LevelCompletionResults*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelCompletionResults.get_hasAnyResults
bool GlobalNamespace::MultiplayerLevelCompletionResults::get_hasAnyResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::get_hasAnyResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasAnyResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelCompletionResults.get_failedOrGivenUp
bool GlobalNamespace::MultiplayerLevelCompletionResults::get_failedOrGivenUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::get_failedOrGivenUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_failedOrGivenUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelCompletionResults.Serialize
void GlobalNamespace::MultiplayerLevelCompletionResults::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MultiplayerLevelCompletionResults.CreateFromSerializedData
GlobalNamespace::MultiplayerLevelCompletionResults* GlobalNamespace::MultiplayerLevelCompletionResults::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerLevelCompletionResults*, false>(this, ___internal__method, reader);
}
// Autogenerated method: MultiplayerLevelCompletionResults.CompareTo
int GlobalNamespace::MultiplayerLevelCompletionResults::CompareTo(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::CompareTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, obj);
}
// Writing MetadataGetter for method: MultiplayerLevelCompletionResults::get_levelEndState
// Il2CppName: get_levelEndState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState (MultiplayerLevelCompletionResults::*)()>(&MultiplayerLevelCompletionResults::get_levelEndState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), "get_levelEndState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelCompletionResults::get_levelCompletionResults
// Il2CppName: get_levelCompletionResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LevelCompletionResults* (MultiplayerLevelCompletionResults::*)()>(&MultiplayerLevelCompletionResults::get_levelCompletionResults)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), "get_levelCompletionResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelCompletionResults::get_hasAnyResults
// Il2CppName: get_hasAnyResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLevelCompletionResults::*)()>(&MultiplayerLevelCompletionResults::get_hasAnyResults)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), "get_hasAnyResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelCompletionResults::get_failedOrGivenUp
// Il2CppName: get_failedOrGivenUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLevelCompletionResults::*)()>(&MultiplayerLevelCompletionResults::get_failedOrGivenUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), "get_failedOrGivenUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelCompletionResults::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelCompletionResults::*)(GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState)>(&MultiplayerLevelCompletionResults::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelCompletionResults::*)(GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState)>(&MultiplayerLevelCompletionResults::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelCompletionResults::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelCompletionResults::*)(GlobalNamespace::LevelCompletionResults*)>(&MultiplayerLevelCompletionResults::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelCompletionResults::*)(GlobalNamespace::LevelCompletionResults*)>(&MultiplayerLevelCompletionResults::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelCompletionResults::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelCompletionResults::*)(LiteNetLib::Utils::NetDataWriter*)>(&MultiplayerLevelCompletionResults::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelCompletionResults::CreateFromSerializedData
// Il2CppName: CreateFromSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerLevelCompletionResults* (MultiplayerLevelCompletionResults::*)(LiteNetLib::Utils::NetDataReader*)>(&MultiplayerLevelCompletionResults::CreateFromSerializedData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), "CreateFromSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelCompletionResults::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MultiplayerLevelCompletionResults::*)(::Il2CppObject*)>(&MultiplayerLevelCompletionResults::CompareTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelCompletionResults::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelCompletionResults::*)()>(&MultiplayerLevelCompletionResults::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelCompletionResults::*)()>(&MultiplayerLevelCompletionResults::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelCompletionResults*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLevelCompletionResults/MultiplayerLevelEndState
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState Cleared
GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_Cleared() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_Cleared");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState>("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "Cleared"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState Cleared
void GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_Cleared(GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_Cleared");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "Cleared", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState Failed
GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState>("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState Failed
void GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_Failed(GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "Failed", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState GivenUp
GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_GivenUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_GivenUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState>("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "GivenUp"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState GivenUp
void GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_GivenUp(GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_GivenUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "GivenUp", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState WasInactive
GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_WasInactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_WasInactive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState>("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "WasInactive"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState WasInactive
void GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_WasInactive(GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_WasInactive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "WasInactive", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState StartupFailed
GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_StartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_StartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState>("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "StartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState StartupFailed
void GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_StartupFailed(GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_StartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "StartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState HostEndedLevel
GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_HostEndedLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_HostEndedLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState>("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "HostEndedLevel"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState HostEndedLevel
void GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_HostEndedLevel(GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_HostEndedLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "HostEndedLevel", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState ConnectedAfterLevelEnded
GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_ConnectedAfterLevelEnded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_ConnectedAfterLevelEnded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState>("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "ConnectedAfterLevelEnded"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState ConnectedAfterLevelEnded
void GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_ConnectedAfterLevelEnded(GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_ConnectedAfterLevelEnded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "ConnectedAfterLevelEnded", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState Quit
GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_Quit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_get_Quit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState>("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "Quit"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLevelCompletionResults/MultiplayerLevelEndState Quit
void GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_Quit(GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerLevelEndState::_set_Quit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLevelCompletionResults/MultiplayerLevelEndState", "Quit", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyState
#include "GlobalNamespace/MultiplayerLobbyState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyState None
GlobalNamespace::MultiplayerLobbyState GlobalNamespace::MultiplayerLobbyState::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyState::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyState>("", "MultiplayerLobbyState", "None"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyState None
void GlobalNamespace::MultiplayerLobbyState::_set_None(GlobalNamespace::MultiplayerLobbyState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyState::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyState", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyState LobbySetup
GlobalNamespace::MultiplayerLobbyState GlobalNamespace::MultiplayerLobbyState::_get_LobbySetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyState::_get_LobbySetup");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyState>("", "MultiplayerLobbyState", "LobbySetup"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyState LobbySetup
void GlobalNamespace::MultiplayerLobbyState::_set_LobbySetup(GlobalNamespace::MultiplayerLobbyState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyState::_set_LobbySetup");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyState", "LobbySetup", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyState GameStarting
GlobalNamespace::MultiplayerLobbyState GlobalNamespace::MultiplayerLobbyState::_get_GameStarting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyState::_get_GameStarting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyState>("", "MultiplayerLobbyState", "GameStarting"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyState GameStarting
void GlobalNamespace::MultiplayerLobbyState::_set_GameStarting(GlobalNamespace::MultiplayerLobbyState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyState::_set_GameStarting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyState", "GameStarting", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyState GameRunning
GlobalNamespace::MultiplayerLobbyState GlobalNamespace::MultiplayerLobbyState::_get_GameRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyState::_get_GameRunning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyState>("", "MultiplayerLobbyState", "GameRunning"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyState GameRunning
void GlobalNamespace::MultiplayerLobbyState::_set_GameRunning(GlobalNamespace::MultiplayerLobbyState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyState::_set_GameRunning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyState", "GameRunning", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyState Error
GlobalNamespace::MultiplayerLobbyState GlobalNamespace::MultiplayerLobbyState::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyState::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyState>("", "MultiplayerLobbyState", "Error"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyState Error
void GlobalNamespace::MultiplayerLobbyState::_set_Error(GlobalNamespace::MultiplayerLobbyState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyState::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyState", "Error", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerGameState
#include "GlobalNamespace/MultiplayerGameState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerGameState None
GlobalNamespace::MultiplayerGameState GlobalNamespace::MultiplayerGameState::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameState::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerGameState>("", "MultiplayerGameState", "None"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerGameState None
void GlobalNamespace::MultiplayerGameState::_set_None(GlobalNamespace::MultiplayerGameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameState::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerGameState", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerGameState Lobby
GlobalNamespace::MultiplayerGameState GlobalNamespace::MultiplayerGameState::_get_Lobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameState::_get_Lobby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerGameState>("", "MultiplayerGameState", "Lobby"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerGameState Lobby
void GlobalNamespace::MultiplayerGameState::_set_Lobby(GlobalNamespace::MultiplayerGameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameState::_set_Lobby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerGameState", "Lobby", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerGameState Game
GlobalNamespace::MultiplayerGameState GlobalNamespace::MultiplayerGameState::_get_Game() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameState::_get_Game");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerGameState>("", "MultiplayerGameState", "Game"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerGameState Game
void GlobalNamespace::MultiplayerGameState::_set_Game(GlobalNamespace::MultiplayerGameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameState::_set_Game");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerGameState", "Game", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerSessionManager
#include "GlobalNamespace/MultiplayerSessionManager.hpp"
// Including type: IConnectionInitParams`1
#include "GlobalNamespace/IConnectionInitParams_1.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: MultiplayerSessionManager/<>c__DisplayClass96_0
#include "GlobalNamespace/MultiplayerSessionManager_--c__DisplayClass96_0.hpp"
// Including type: MultiplayerSessionManager/<>c
#include "GlobalNamespace/MultiplayerSessionManager_--c.hpp"
// Including type: NetworkPacketSerializer`2
#include "GlobalNamespace/NetworkPacketSerializer_2.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: SynchronizedActionQueue
#include "GlobalNamespace/SynchronizedActionQueue.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: INetworkPacketSubSerializer`1
#include "GlobalNamespace/INetworkPacketSubSerializer_1.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: UpdateConnectionStateReason
#include "GlobalNamespace/UpdateConnectionStateReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kMultiplayerSessionState
::Il2CppString* GlobalNamespace::MultiplayerSessionManager::_get_kMultiplayerSessionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::_get_kMultiplayerSessionState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MultiplayerSessionManager", "kMultiplayerSessionState"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMultiplayerSessionState
void GlobalNamespace::MultiplayerSessionManager::_set_kMultiplayerSessionState(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::_set_kMultiplayerSessionState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSessionManager", "kMultiplayerSessionState", value));
}
// Autogenerated method: MultiplayerSessionManager.add_connectedEvent
void GlobalNamespace::MultiplayerSessionManager::add_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::add_connectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.remove_connectedEvent
void GlobalNamespace::MultiplayerSessionManager::remove_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::remove_connectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.add_connectionFailedEvent
void GlobalNamespace::MultiplayerSessionManager::add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::add_connectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.remove_connectionFailedEvent
void GlobalNamespace::MultiplayerSessionManager::remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::remove_connectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.add_playerConnectedEvent
void GlobalNamespace::MultiplayerSessionManager::add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::add_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.remove_playerConnectedEvent
void GlobalNamespace::MultiplayerSessionManager::remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::remove_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.add_playerDisconnectedEvent
void GlobalNamespace::MultiplayerSessionManager::add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::add_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.remove_playerDisconnectedEvent
void GlobalNamespace::MultiplayerSessionManager::remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::remove_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.add_playerAvatarChangedEvent
void GlobalNamespace::MultiplayerSessionManager::add_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::add_playerAvatarChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.remove_playerAvatarChangedEvent
void GlobalNamespace::MultiplayerSessionManager::remove_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::remove_playerAvatarChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.add_playerStateChangedEvent
void GlobalNamespace::MultiplayerSessionManager::add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::add_playerStateChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.remove_playerStateChangedEvent
void GlobalNamespace::MultiplayerSessionManager::remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::remove_playerStateChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.add_disconnectedEvent
void GlobalNamespace::MultiplayerSessionManager::add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::add_disconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.remove_disconnectedEvent
void GlobalNamespace::MultiplayerSessionManager::remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::remove_disconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.get_isConnectionOwner
bool GlobalNamespace::MultiplayerSessionManager::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_connectionOwner
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MultiplayerSessionManager::get_connectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_connectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.set_connectionOwner
void GlobalNamespace::MultiplayerSessionManager::set_connectionOwner(GlobalNamespace::IConnectedPlayer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::set_connectionOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_connectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerSessionManager.get_isSpectating
bool GlobalNamespace::MultiplayerSessionManager::get_isSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_isSpectating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_isConnectingOrConnected
bool GlobalNamespace::MultiplayerSessionManager::get_isConnectingOrConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_isConnectingOrConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectingOrConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_isConnected
bool GlobalNamespace::MultiplayerSessionManager::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_isConnecting
bool GlobalNamespace::MultiplayerSessionManager::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_isConnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_isDisconnecting
bool GlobalNamespace::MultiplayerSessionManager::get_isDisconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_isDisconnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_connectedPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::MultiplayerSessionManager::get_connectedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_connectedPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_connectedPlayerCount
int GlobalNamespace::MultiplayerSessionManager::get_connectedPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_connectedPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_syncTime
float GlobalNamespace::MultiplayerSessionManager::get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_syncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_isSyncTimeInitialized
bool GlobalNamespace::MultiplayerSessionManager::get_isSyncTimeInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_isSyncTimeInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSyncTimeInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_syncTimeDelay
float GlobalNamespace::MultiplayerSessionManager::get_syncTimeDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_syncTimeDelay");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTimeDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_localPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MultiplayerSessionManager::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_connectedPlayerManager
GlobalNamespace::ConnectedPlayerManager* GlobalNamespace::MultiplayerSessionManager::get_connectedPlayerManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_connectedPlayerManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.get_maxPlayerCount
int GlobalNamespace::MultiplayerSessionManager::get_maxPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::get_maxPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.RegisterSerializer
void GlobalNamespace::MultiplayerSessionManager::RegisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::RegisterSerializer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: MultiplayerSessionManager.UnregisterSerializer
void GlobalNamespace::MultiplayerSessionManager::UnregisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::UnregisterSerializer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: MultiplayerSessionManager.StartSession
void GlobalNamespace::MultiplayerSessionManager::StartSession(GlobalNamespace::ConnectedPlayerManager* connectedPlayerManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::StartSession");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayerManager)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayerManager);
}
// Autogenerated method: MultiplayerSessionManager.SetMaxPlayerCount
void GlobalNamespace::MultiplayerSessionManager::SetMaxPlayerCount(int maxPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::SetMaxPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaxPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxPlayerCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, maxPlayerCount);
}
// Autogenerated method: MultiplayerSessionManager.InitInternal
void GlobalNamespace::MultiplayerSessionManager::InitInternal(GlobalNamespace::MultiplayerSessionManager::SessionType sessionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::InitInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sessionType);
}
// Autogenerated method: MultiplayerSessionManager.EndSession
void GlobalNamespace::MultiplayerSessionManager::EndSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::EndSession");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.Disconnect
void GlobalNamespace::MultiplayerSessionManager::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.PerformAtSyncTime
void GlobalNamespace::MultiplayerSessionManager::PerformAtSyncTime(float syncTime, System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::PerformAtSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformAtSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, syncTime, action);
}
// Autogenerated method: MultiplayerSessionManager.UpdateSynchronizedActions
void GlobalNamespace::MultiplayerSessionManager::UpdateSynchronizedActions() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::UpdateSynchronizedActions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSynchronizedActions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.HandleReinitialized
void GlobalNamespace::MultiplayerSessionManager::HandleReinitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::HandleReinitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleReinitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.HandleConnected
void GlobalNamespace::MultiplayerSessionManager::HandleConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::HandleConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.HandleDisconnected
void GlobalNamespace::MultiplayerSessionManager::HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::HandleDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: MultiplayerSessionManager.HandleConnectionFailed
void GlobalNamespace::MultiplayerSessionManager::HandleConnectionFailed(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::HandleConnectionFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: MultiplayerSessionManager.HandleSyncTimeInitialized
void GlobalNamespace::MultiplayerSessionManager::HandleSyncTimeInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::HandleSyncTimeInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSyncTimeInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.HandlePlayerConnected
void GlobalNamespace::MultiplayerSessionManager::HandlePlayerConnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::HandlePlayerConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MultiplayerSessionManager.HandlePlayerDisconnected
void GlobalNamespace::MultiplayerSessionManager::HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::HandlePlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MultiplayerSessionManager.HandlePlayerStateChanged
void GlobalNamespace::MultiplayerSessionManager::HandlePlayerStateChanged(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::HandlePlayerStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MultiplayerSessionManager.HandlePlayerAvatarChanged
void GlobalNamespace::MultiplayerSessionManager::HandlePlayerAvatarChanged(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::HandlePlayerAvatarChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerAvatarChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MultiplayerSessionManager.HandlePlayerOrderChanged
void GlobalNamespace::MultiplayerSessionManager::HandlePlayerOrderChanged(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::HandlePlayerOrderChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerOrderChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: MultiplayerSessionManager.GetPlayerByUserId
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MultiplayerSessionManager::GetPlayerByUserId(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::GetPlayerByUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerByUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: MultiplayerSessionManager.GetConnectedPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MultiplayerSessionManager::GetConnectedPlayer(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::GetConnectedPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, i);
}
// Autogenerated method: MultiplayerSessionManager.GetConnectedPlayerByUserId
GlobalNamespace::IConnectedPlayer* GlobalNamespace::MultiplayerSessionManager::GetConnectedPlayerByUserId(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::GetConnectedPlayerByUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectedPlayerByUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: MultiplayerSessionManager.SetLocalPlayerState
void GlobalNamespace::MultiplayerSessionManager::SetLocalPlayerState(::Il2CppString* state, bool hasState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::SetLocalPlayerState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(hasState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, hasState);
}
// Autogenerated method: MultiplayerSessionManager.LocalPlayerHasState
bool GlobalNamespace::MultiplayerSessionManager::LocalPlayerHasState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::LocalPlayerHasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPlayerHasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: MultiplayerSessionManager.UpdateConnectionState
void GlobalNamespace::MultiplayerSessionManager::UpdateConnectionState(GlobalNamespace::UpdateConnectionStateReason updateReason, GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::UpdateConnectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConnectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateReason), ::il2cpp_utils::ExtractType(disconnectedReason), ::il2cpp_utils::ExtractType(connectionFailedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, updateReason, disconnectedReason, connectionFailedReason);
}
// Autogenerated method: MultiplayerSessionManager.TryUpdateConnectedPlayer
bool GlobalNamespace::MultiplayerSessionManager::TryUpdateConnectedPlayer(GlobalNamespace::IConnectedPlayer* player, bool isPlayerConnected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::TryUpdateConnectedPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryUpdateConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(isPlayerConnected)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, player, isPlayerConnected);
}
// Autogenerated method: MultiplayerSessionManager.GetNextAvailableSortIndex
int GlobalNamespace::MultiplayerSessionManager::GetNextAvailableSortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::GetNextAvailableSortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextAvailableSortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.Start
void GlobalNamespace::MultiplayerSessionManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.Update
void GlobalNamespace::MultiplayerSessionManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::Update");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.OnDestroy
void GlobalNamespace::MultiplayerSessionManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager.OnApplicationPause
void GlobalNamespace::MultiplayerSessionManager::OnApplicationPause(bool pauseStatus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::OnApplicationPause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pauseStatus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pauseStatus);
}
// Writing MetadataGetter for method: MultiplayerSessionManager::add_connectedEvent
// Il2CppName: add_connectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action*)>(&MultiplayerSessionManager::add_connectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "add_connectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::remove_connectedEvent
// Il2CppName: remove_connectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action*)>(&MultiplayerSessionManager::remove_connectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "remove_connectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::add_connectionFailedEvent
// Il2CppName: add_connectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&MultiplayerSessionManager::add_connectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "add_connectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::remove_connectionFailedEvent
// Il2CppName: remove_connectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&MultiplayerSessionManager::remove_connectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "remove_connectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::add_playerConnectedEvent
// Il2CppName: add_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&MultiplayerSessionManager::add_playerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "add_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::remove_playerConnectedEvent
// Il2CppName: remove_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&MultiplayerSessionManager::remove_playerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "remove_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::add_playerDisconnectedEvent
// Il2CppName: add_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&MultiplayerSessionManager::add_playerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "add_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::remove_playerDisconnectedEvent
// Il2CppName: remove_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&MultiplayerSessionManager::remove_playerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::add_playerAvatarChangedEvent
// Il2CppName: add_playerAvatarChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&MultiplayerSessionManager::add_playerAvatarChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "add_playerAvatarChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::remove_playerAvatarChangedEvent
// Il2CppName: remove_playerAvatarChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&MultiplayerSessionManager::remove_playerAvatarChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "remove_playerAvatarChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::add_playerStateChangedEvent
// Il2CppName: add_playerStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&MultiplayerSessionManager::add_playerStateChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "add_playerStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::remove_playerStateChangedEvent
// Il2CppName: remove_playerStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&MultiplayerSessionManager::remove_playerStateChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "remove_playerStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::add_disconnectedEvent
// Il2CppName: add_disconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&MultiplayerSessionManager::add_disconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "add_disconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::remove_disconnectedEvent
// Il2CppName: remove_disconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&MultiplayerSessionManager::remove_disconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "remove_disconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_connectionOwner
// Il2CppName: get_connectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_connectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_connectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::set_connectionOwner
// Il2CppName: set_connectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerSessionManager::set_connectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "set_connectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_isSpectating
// Il2CppName: get_isSpectating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_isSpectating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_isSpectating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_isConnectingOrConnected
// Il2CppName: get_isConnectingOrConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_isConnectingOrConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_isConnectingOrConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_isConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_isDisconnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_connectedPlayers
// Il2CppName: get_connectedPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_connectedPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_connectedPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_connectedPlayerCount
// Il2CppName: get_connectedPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_connectedPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_connectedPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_syncTime
// Il2CppName: get_syncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_syncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_syncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_isSyncTimeInitialized
// Il2CppName: get_isSyncTimeInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_isSyncTimeInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_isSyncTimeInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_syncTimeDelay
// Il2CppName: get_syncTimeDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_syncTimeDelay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_syncTimeDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_localPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_connectedPlayerManager
// Il2CppName: get_connectedPlayerManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager* (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_connectedPlayerManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_connectedPlayerManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::get_maxPlayerCount
// Il2CppName: get_maxPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::get_maxPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "get_maxPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::RegisterSerializer
// Il2CppName: RegisterSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::MultiplayerSessionManager_MessageType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*)>(&MultiplayerSessionManager::RegisterSerializer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "RegisterSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerSessionManager_MessageType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::UnregisterSerializer
// Il2CppName: UnregisterSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::MultiplayerSessionManager_MessageType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*)>(&MultiplayerSessionManager::UnregisterSerializer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "UnregisterSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerSessionManager_MessageType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::RegisterCallback
// Il2CppName: RegisterCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MultiplayerSessionManager::UnregisterCallback
// Il2CppName: UnregisterCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MultiplayerSessionManager::StartSession
// Il2CppName: StartSession
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MultiplayerSessionManager::StartSession
// Il2CppName: StartSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::ConnectedPlayerManager*)>(&MultiplayerSessionManager::StartSession)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "StartSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::SetMaxPlayerCount
// Il2CppName: SetMaxPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(int)>(&MultiplayerSessionManager::SetMaxPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "SetMaxPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::InitInternal
// Il2CppName: InitInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::MultiplayerSessionManager::SessionType)>(&MultiplayerSessionManager::InitInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "InitInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerSessionManager::SessionType>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::EndSession
// Il2CppName: EndSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::EndSession)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "EndSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::Send
// Il2CppName: Send
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MultiplayerSessionManager::SendUnreliable
// Il2CppName: SendUnreliable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MultiplayerSessionManager::PerformAtSyncTime
// Il2CppName: PerformAtSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(float, System::Action*)>(&MultiplayerSessionManager::PerformAtSyncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "PerformAtSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::UpdateSynchronizedActions
// Il2CppName: UpdateSynchronizedActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::UpdateSynchronizedActions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "UpdateSynchronizedActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::HandleReinitialized
// Il2CppName: HandleReinitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::HandleReinitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "HandleReinitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::HandleConnected
// Il2CppName: HandleConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::HandleConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "HandleConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::HandleDisconnected
// Il2CppName: HandleDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::DisconnectedReason)>(&MultiplayerSessionManager::HandleDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "HandleDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::HandleConnectionFailed
// Il2CppName: HandleConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::ConnectionFailedReason)>(&MultiplayerSessionManager::HandleConnectionFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "HandleConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::HandleSyncTimeInitialized
// Il2CppName: HandleSyncTimeInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::HandleSyncTimeInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "HandleSyncTimeInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::HandlePlayerConnected
// Il2CppName: HandlePlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerSessionManager::HandlePlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "HandlePlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::HandlePlayerDisconnected
// Il2CppName: HandlePlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerSessionManager::HandlePlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "HandlePlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::HandlePlayerStateChanged
// Il2CppName: HandlePlayerStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerSessionManager::HandlePlayerStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "HandlePlayerStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::HandlePlayerAvatarChanged
// Il2CppName: HandlePlayerAvatarChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerSessionManager::HandlePlayerAvatarChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "HandlePlayerAvatarChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::HandlePlayerOrderChanged
// Il2CppName: HandlePlayerOrderChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerSessionManager::HandlePlayerOrderChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "HandlePlayerOrderChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::GetPlayerByUserId
// Il2CppName: GetPlayerByUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (MultiplayerSessionManager::*)(::Il2CppString*)>(&MultiplayerSessionManager::GetPlayerByUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "GetPlayerByUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::GetConnectedPlayer
// Il2CppName: GetConnectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (MultiplayerSessionManager::*)(int)>(&MultiplayerSessionManager::GetConnectedPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "GetConnectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::GetConnectedPlayerByUserId
// Il2CppName: GetConnectedPlayerByUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (MultiplayerSessionManager::*)(::Il2CppString*)>(&MultiplayerSessionManager::GetConnectedPlayerByUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "GetConnectedPlayerByUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::SetLocalPlayerState
// Il2CppName: SetLocalPlayerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(::Il2CppString*, bool)>(&MultiplayerSessionManager::SetLocalPlayerState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "SetLocalPlayerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::LocalPlayerHasState
// Il2CppName: LocalPlayerHasState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerSessionManager::*)(::Il2CppString*)>(&MultiplayerSessionManager::LocalPlayerHasState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "LocalPlayerHasState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::UpdateConnectionState
// Il2CppName: UpdateConnectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(GlobalNamespace::UpdateConnectionStateReason, GlobalNamespace::DisconnectedReason, GlobalNamespace::ConnectionFailedReason)>(&MultiplayerSessionManager::UpdateConnectionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "UpdateConnectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UpdateConnectionStateReason>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::TryUpdateConnectedPlayer
// Il2CppName: TryUpdateConnectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerSessionManager::*)(GlobalNamespace::IConnectedPlayer*, bool)>(&MultiplayerSessionManager::TryUpdateConnectedPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "TryUpdateConnectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::GetNextAvailableSortIndex
// Il2CppName: GetNextAvailableSortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::GetNextAvailableSortIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "GetNextAvailableSortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)(bool)>(&MultiplayerSessionManager::OnApplicationPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::*)()>(&MultiplayerSessionManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSessionManager/SessionType
#include "GlobalNamespace/MultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerSessionManager/SessionType Player
GlobalNamespace::MultiplayerSessionManager::SessionType GlobalNamespace::MultiplayerSessionManager::SessionType::_get_Player() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::SessionType::_get_Player");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSessionManager::SessionType>("", "MultiplayerSessionManager/SessionType", "Player"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSessionManager/SessionType Player
void GlobalNamespace::MultiplayerSessionManager::SessionType::_set_Player(GlobalNamespace::MultiplayerSessionManager::SessionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::SessionType::_set_Player");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSessionManager/SessionType", "Player", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerSessionManager/SessionType Spectator
GlobalNamespace::MultiplayerSessionManager::SessionType GlobalNamespace::MultiplayerSessionManager::SessionType::_get_Spectator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::SessionType::_get_Spectator");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSessionManager::SessionType>("", "MultiplayerSessionManager/SessionType", "Spectator"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSessionManager/SessionType Spectator
void GlobalNamespace::MultiplayerSessionManager::SessionType::_set_Spectator(GlobalNamespace::MultiplayerSessionManager::SessionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::SessionType::_set_Spectator");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSessionManager/SessionType", "Spectator", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerSessionManager/SessionType DedicatedServer
GlobalNamespace::MultiplayerSessionManager::SessionType GlobalNamespace::MultiplayerSessionManager::SessionType::_get_DedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::SessionType::_get_DedicatedServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSessionManager::SessionType>("", "MultiplayerSessionManager/SessionType", "DedicatedServer"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSessionManager/SessionType DedicatedServer
void GlobalNamespace::MultiplayerSessionManager::SessionType::_set_DedicatedServer(GlobalNamespace::MultiplayerSessionManager::SessionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::SessionType::_set_DedicatedServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSessionManager/SessionType", "DedicatedServer", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSessionManager/ConnectionState
#include "GlobalNamespace/MultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerSessionManager/ConnectionState Disconnected
GlobalNamespace::MultiplayerSessionManager::ConnectionState GlobalNamespace::MultiplayerSessionManager::ConnectionState::_get_Disconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::ConnectionState::_get_Disconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSessionManager::ConnectionState>("", "MultiplayerSessionManager/ConnectionState", "Disconnected"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSessionManager/ConnectionState Disconnected
void GlobalNamespace::MultiplayerSessionManager::ConnectionState::_set_Disconnected(GlobalNamespace::MultiplayerSessionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::ConnectionState::_set_Disconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSessionManager/ConnectionState", "Disconnected", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerSessionManager/ConnectionState Connecting
GlobalNamespace::MultiplayerSessionManager::ConnectionState GlobalNamespace::MultiplayerSessionManager::ConnectionState::_get_Connecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::ConnectionState::_get_Connecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSessionManager::ConnectionState>("", "MultiplayerSessionManager/ConnectionState", "Connecting"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSessionManager/ConnectionState Connecting
void GlobalNamespace::MultiplayerSessionManager::ConnectionState::_set_Connecting(GlobalNamespace::MultiplayerSessionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::ConnectionState::_set_Connecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSessionManager/ConnectionState", "Connecting", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerSessionManager/ConnectionState Connected
GlobalNamespace::MultiplayerSessionManager::ConnectionState GlobalNamespace::MultiplayerSessionManager::ConnectionState::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::ConnectionState::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSessionManager::ConnectionState>("", "MultiplayerSessionManager/ConnectionState", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSessionManager/ConnectionState Connected
void GlobalNamespace::MultiplayerSessionManager::ConnectionState::_set_Connected(GlobalNamespace::MultiplayerSessionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::ConnectionState::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSessionManager/ConnectionState", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerSessionManager/ConnectionState Disconnecting
GlobalNamespace::MultiplayerSessionManager::ConnectionState GlobalNamespace::MultiplayerSessionManager::ConnectionState::_get_Disconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::ConnectionState::_get_Disconnecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSessionManager::ConnectionState>("", "MultiplayerSessionManager/ConnectionState", "Disconnecting"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerSessionManager/ConnectionState Disconnecting
void GlobalNamespace::MultiplayerSessionManager::ConnectionState::_set_Disconnecting(GlobalNamespace::MultiplayerSessionManager::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::ConnectionState::_set_Disconnecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerSessionManager/ConnectionState", "Disconnecting", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerSessionManager/<>c__DisplayClass96_0
#include "GlobalNamespace/MultiplayerSessionManager_--c__DisplayClass96_0.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerSessionManager/<>c__DisplayClass96_0.<GetConnectedPlayerByUserId>b__0
bool GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass96_0::$GetConnectedPlayerByUserId$b__0(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass96_0::<GetConnectedPlayerByUserId>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetConnectedPlayerByUserId>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, player);
}
// Writing MetadataGetter for method: MultiplayerSessionManager::$$c__DisplayClass96_0::$GetConnectedPlayerByUserId$b__0
// Il2CppName: <GetConnectedPlayerByUserId>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerSessionManager::$$c__DisplayClass96_0::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerSessionManager::$$c__DisplayClass96_0::$GetConnectedPlayerByUserId$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager::$$c__DisplayClass96_0*), "<GetConnectedPlayerByUserId>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::$$c__DisplayClass96_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::$$c__DisplayClass96_0::*)()>(&MultiplayerSessionManager::$$c__DisplayClass96_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager::$$c__DisplayClass96_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::$$c__DisplayClass96_0::*)()>(&MultiplayerSessionManager::$$c__DisplayClass96_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager::$$c__DisplayClass96_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSessionManager/<>c
#include "GlobalNamespace/MultiplayerSessionManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MultiplayerSessionManager/<>c <>9
GlobalNamespace::MultiplayerSessionManager::$$c* GlobalNamespace::MultiplayerSessionManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerSessionManager::$$c*>("", "MultiplayerSessionManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MultiplayerSessionManager/<>c <>9
void GlobalNamespace::MultiplayerSessionManager::$$c::_set_$$9(GlobalNamespace::MultiplayerSessionManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerSessionManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IConnectedPlayer,System.Int32> <>9__100_0
System::Func_2<GlobalNamespace::IConnectedPlayer*, int>* GlobalNamespace::MultiplayerSessionManager::$$c::_get_$$9__100_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::$$c::_get_$$9__100_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::IConnectedPlayer*, int>*>("", "MultiplayerSessionManager/<>c", "<>9__100_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IConnectedPlayer,System.Int32> <>9__100_0
void GlobalNamespace::MultiplayerSessionManager::$$c::_set_$$9__100_0(System::Func_2<GlobalNamespace::IConnectedPlayer*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::$$c::_set_$$9__100_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MultiplayerSessionManager/<>c", "<>9__100_0", value)));
}
// Autogenerated method: MultiplayerSessionManager/<>c..cctor
void GlobalNamespace::MultiplayerSessionManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerSessionManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MultiplayerSessionManager/<>c.<TryUpdateConnectedPlayer>b__100_0
int GlobalNamespace::MultiplayerSessionManager::$$c::$TryUpdateConnectedPlayer$b__100_0(GlobalNamespace::IConnectedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSessionManager::$$c::<TryUpdateConnectedPlayer>b__100_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TryUpdateConnectedPlayer>b__100_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, p);
}
// Writing MetadataGetter for method: MultiplayerSessionManager::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MultiplayerSessionManager::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::$$c::$TryUpdateConnectedPlayer$b__100_0
// Il2CppName: <TryUpdateConnectedPlayer>b__100_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MultiplayerSessionManager::$$c::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerSessionManager::$$c::$TryUpdateConnectedPlayer$b__100_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager::$$c*), "<TryUpdateConnectedPlayer>b__100_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSessionManager::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::$$c::*)()>(&MultiplayerSessionManager::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSessionManager::$$c::*)()>(&MultiplayerSessionManager::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSessionManager::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetworkConstants
#include "GlobalNamespace/NetworkConstants.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String dedicatedServerState
::Il2CppString* GlobalNamespace::NetworkConstants::_get_dedicatedServerState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_get_dedicatedServerState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "NetworkConstants", "dedicatedServerState"));
}
// Autogenerated static field setter
// Set static field: static public System.String dedicatedServerState
void GlobalNamespace::NetworkConstants::_set_dedicatedServerState(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_set_dedicatedServerState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkConstants", "dedicatedServerState", value));
}
// Autogenerated static field getter
// Get static field: static public System.String playerState
::Il2CppString* GlobalNamespace::NetworkConstants::_get_playerState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_get_playerState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "NetworkConstants", "playerState"));
}
// Autogenerated static field setter
// Set static field: static public System.String playerState
void GlobalNamespace::NetworkConstants::_set_playerState(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_set_playerState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkConstants", "playerState", value));
}
// Autogenerated static field getter
// Get static field: static public System.String spectatingState
::Il2CppString* GlobalNamespace::NetworkConstants::_get_spectatingState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_get_spectatingState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "NetworkConstants", "spectatingState"));
}
// Autogenerated static field setter
// Set static field: static public System.String spectatingState
void GlobalNamespace::NetworkConstants::_set_spectatingState(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_set_spectatingState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkConstants", "spectatingState", value));
}
// Autogenerated static field getter
// Get static field: static public System.String backgroundedState
::Il2CppString* GlobalNamespace::NetworkConstants::_get_backgroundedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_get_backgroundedState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "NetworkConstants", "backgroundedState"));
}
// Autogenerated static field setter
// Set static field: static public System.String backgroundedState
void GlobalNamespace::NetworkConstants::_set_backgroundedState(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_set_backgroundedState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkConstants", "backgroundedState", value));
}
// Autogenerated static field getter
// Get static field: static public System.String wantsToPlayNextLevel
::Il2CppString* GlobalNamespace::NetworkConstants::_get_wantsToPlayNextLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_get_wantsToPlayNextLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "NetworkConstants", "wantsToPlayNextLevel"));
}
// Autogenerated static field setter
// Set static field: static public System.String wantsToPlayNextLevel
void GlobalNamespace::NetworkConstants::_set_wantsToPlayNextLevel(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_set_wantsToPlayNextLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkConstants", "wantsToPlayNextLevel", value));
}
// Autogenerated static field getter
// Get static field: static public System.String wasActiveAtLevelStart
::Il2CppString* GlobalNamespace::NetworkConstants::_get_wasActiveAtLevelStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_get_wasActiveAtLevelStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "NetworkConstants", "wasActiveAtLevelStart"));
}
// Autogenerated static field setter
// Set static field: static public System.String wasActiveAtLevelStart
void GlobalNamespace::NetworkConstants::_set_wasActiveAtLevelStart(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_set_wasActiveAtLevelStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkConstants", "wasActiveAtLevelStart", value));
}
// Autogenerated static field getter
// Get static field: static public System.String isActive
::Il2CppString* GlobalNamespace::NetworkConstants::_get_isActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_get_isActive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "NetworkConstants", "isActive"));
}
// Autogenerated static field setter
// Set static field: static public System.String isActive
void GlobalNamespace::NetworkConstants::_set_isActive(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_set_isActive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkConstants", "isActive", value));
}
// Autogenerated static field getter
// Get static field: static public System.String finishedLevel
::Il2CppString* GlobalNamespace::NetworkConstants::_get_finishedLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_get_finishedLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "NetworkConstants", "finishedLevel"));
}
// Autogenerated static field setter
// Set static field: static public System.String finishedLevel
void GlobalNamespace::NetworkConstants::_set_finishedLevel(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConstants::_set_finishedLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkConstants", "finishedLevel", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetworkUtility
#include "GlobalNamespace/NetworkUtility.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Byte[] _nameEncryptionKey
::Array<uint8_t>* GlobalNamespace::NetworkUtility::_get__nameEncryptionKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::_get__nameEncryptionKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "NetworkUtility", "_nameEncryptionKey"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _nameEncryptionKey
void GlobalNamespace::NetworkUtility::_set__nameEncryptionKey(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::_set__nameEncryptionKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkUtility", "_nameEncryptionKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] _nameEncryptionIv
::Array<uint8_t>* GlobalNamespace::NetworkUtility::_get__nameEncryptionIv() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::_get__nameEncryptionIv");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "NetworkUtility", "_nameEncryptionIv"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _nameEncryptionIv
void GlobalNamespace::NetworkUtility::_set__nameEncryptionIv(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::_set__nameEncryptionIv");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkUtility", "_nameEncryptionIv", value));
}
// Autogenerated method: NetworkUtility..cctor
void GlobalNamespace::NetworkUtility::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetworkUtility", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetworkUtility.Init
void GlobalNamespace::NetworkUtility::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetworkUtility", "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetworkUtility.GetHashedUserId
::Il2CppString* GlobalNamespace::NetworkUtility::GetHashedUserId(::Il2CppString* userId, GlobalNamespace::AuthenticationToken::Platform platform) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::GetHashedUserId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetworkUtility", "GetHashedUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(platform)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, userId, platform);
}
// Autogenerated method: NetworkUtility.EncryptName
::Il2CppString* GlobalNamespace::NetworkUtility::EncryptName(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::EncryptName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetworkUtility", "EncryptName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text);
}
// Autogenerated method: NetworkUtility.DecryptName
::Il2CppString* GlobalNamespace::NetworkUtility::DecryptName(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::DecryptName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetworkUtility", "DecryptName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text);
}
// Autogenerated method: NetworkUtility.GenerateId
::Il2CppString* GlobalNamespace::NetworkUtility::GenerateId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::GenerateId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetworkUtility", "GenerateId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NetworkUtility.GetHashBase64
::Il2CppString* GlobalNamespace::NetworkUtility::GetHashBase64(::Il2CppString* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkUtility::GetHashBase64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetworkUtility", "GetHashBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input);
}
// Writing MetadataGetter for method: NetworkUtility::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&NetworkUtility::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkUtility*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkUtility::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&NetworkUtility::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkUtility*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkUtility::GetHashedUserId
// Il2CppName: GetHashedUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, GlobalNamespace::AuthenticationToken::Platform)>(&NetworkUtility::GetHashedUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkUtility*), "GetHashedUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AuthenticationToken::Platform>()});
  }
};
// Writing MetadataGetter for method: NetworkUtility::EncryptName
// Il2CppName: EncryptName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&NetworkUtility::EncryptName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkUtility*), "EncryptName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NetworkUtility::DecryptName
// Il2CppName: DecryptName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&NetworkUtility::DecryptName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkUtility*), "DecryptName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NetworkUtility::GenerateId
// Il2CppName: GenerateId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&NetworkUtility::GenerateId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkUtility*), "GenerateId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkUtility::GetHashBase64
// Il2CppName: GetHashBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&NetworkUtility::GetHashBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkUtility*), "GetHashBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer
#include "GlobalNamespace/PacketEncryptionLayer.hpp"
// Including type: PacketEncryptionLayer/EncryptionStatistics
#include "GlobalNamespace/PacketEncryptionLayer_EncryptionStatistics.hpp"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList.hpp"
// Including type: PacketEncryptionLayer/<AddEncryptedEndpointAsync>d__24
#include "GlobalNamespace/PacketEncryptionLayer_-AddEncryptedEndpointAsync-d__24.hpp"
// Including type: PacketEncryptionLayer/<AddPendingEncryptedEndpointAsync>d__26
#include "GlobalNamespace/PacketEncryptionLayer_-AddPendingEncryptedEndpointAsync-d__26.hpp"
// Including type: ExpiringDictionary`2
#include "GlobalNamespace/ExpiringDictionary_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Diagnostics.Stopwatch
#include "System/Diagnostics/Stopwatch.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Byte kEncryptedPacketType
uint8_t GlobalNamespace::PacketEncryptionLayer::_get_kEncryptedPacketType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::_get_kEncryptedPacketType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("", "PacketEncryptionLayer", "kEncryptedPacketType"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte kEncryptedPacketType
void GlobalNamespace::PacketEncryptionLayer::_set_kEncryptedPacketType(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::_set_kEncryptedPacketType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PacketEncryptionLayer", "kEncryptedPacketType", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte kPlaintextPacketType
uint8_t GlobalNamespace::PacketEncryptionLayer::_get_kPlaintextPacketType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::_get_kPlaintextPacketType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("", "PacketEncryptionLayer", "kPlaintextPacketType"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte kPlaintextPacketType
void GlobalNamespace::PacketEncryptionLayer::_set_kPlaintextPacketType(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::_set_kPlaintextPacketType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PacketEncryptionLayer", "kPlaintextPacketType", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kEncryptionStateTimeoutMs
int64_t GlobalNamespace::PacketEncryptionLayer::_get_kEncryptionStateTimeoutMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::_get_kEncryptionStateTimeoutMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "PacketEncryptionLayer", "kEncryptionStateTimeoutMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kEncryptionStateTimeoutMs
void GlobalNamespace::PacketEncryptionLayer::_set_kEncryptionStateTimeoutMs(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::_set_kEncryptionStateTimeoutMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PacketEncryptionLayer", "kEncryptionStateTimeoutMs", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kPendingEncryptionStateTimeoutMs
int64_t GlobalNamespace::PacketEncryptionLayer::_get_kPendingEncryptionStateTimeoutMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::_get_kPendingEncryptionStateTimeoutMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "PacketEncryptionLayer", "kPendingEncryptionStateTimeoutMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kPendingEncryptionStateTimeoutMs
void GlobalNamespace::PacketEncryptionLayer::_set_kPendingEncryptionStateTimeoutMs(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::_set_kPendingEncryptionStateTimeoutMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PacketEncryptionLayer", "kPendingEncryptionStateTimeoutMs", value));
}
// [ThreadStaticAttribute] Offset: 0xDF0F10
// Autogenerated static field getter
// Get static field: static private System.Diagnostics.Stopwatch _stopwatch
System::Diagnostics::Stopwatch* GlobalNamespace::PacketEncryptionLayer::_get__stopwatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::_get__stopwatch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Diagnostics::Stopwatch*>("", "PacketEncryptionLayer", "_stopwatch"));
}
// Autogenerated static field setter
// Set static field: static private System.Diagnostics.Stopwatch _stopwatch
void GlobalNamespace::PacketEncryptionLayer::_set__stopwatch(System::Diagnostics::Stopwatch* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::_set__stopwatch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PacketEncryptionLayer", "_stopwatch", value));
}
// Autogenerated method: PacketEncryptionLayer.get_filterUnencryptedTraffic
bool GlobalNamespace::PacketEncryptionLayer::get_filterUnencryptedTraffic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::get_filterUnencryptedTraffic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterUnencryptedTraffic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer.set_filterUnencryptedTraffic
void GlobalNamespace::PacketEncryptionLayer::set_filterUnencryptedTraffic(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::set_filterUnencryptedTraffic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterUnencryptedTraffic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PacketEncryptionLayer.get_enableStatistics
bool GlobalNamespace::PacketEncryptionLayer::get_enableStatistics() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::get_enableStatistics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableStatistics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer.set_enableStatistics
void GlobalNamespace::PacketEncryptionLayer::set_enableStatistics(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::set_enableStatistics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableStatistics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PacketEncryptionLayer.SetUnencryptedTrafficFilter
void GlobalNamespace::PacketEncryptionLayer::SetUnencryptedTrafficFilter(::Array<uint8_t>* unencryptedTrafficFilter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::SetUnencryptedTrafficFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUnencryptedTrafficFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unencryptedTrafficFilter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unencryptedTrafficFilter);
}
// Autogenerated method: PacketEncryptionLayer.AddEncryptedEndpoint
GlobalNamespace::EncryptionUtility::IEncryptionState* GlobalNamespace::PacketEncryptionLayer::AddEncryptedEndpoint(System::Net::IPEndPoint* endPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverRandom, ::Array<uint8_t>* clientRandom, bool isClient) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::AddEncryptedEndpoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEncryptedEndpoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(serverRandom), ::il2cpp_utils::ExtractType(clientRandom), ::il2cpp_utils::ExtractType(isClient)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EncryptionUtility::IEncryptionState*, false>(this, ___internal__method, endPoint, preMasterSecret, serverRandom, clientRandom, isClient);
}
// Autogenerated method: PacketEncryptionLayer.AddEncryptedEndpointAsync
System::Threading::Tasks::Task_1<GlobalNamespace::EncryptionUtility::IEncryptionState*>* GlobalNamespace::PacketEncryptionLayer::AddEncryptedEndpointAsync(System::Net::IPEndPoint* endPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverRandom, ::Array<uint8_t>* clientRandom, bool isClient) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::AddEncryptedEndpointAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEncryptedEndpointAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(serverRandom), ::il2cpp_utils::ExtractType(clientRandom), ::il2cpp_utils::ExtractType(isClient)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::EncryptionUtility::IEncryptionState*>*, false>(this, ___internal__method, endPoint, preMasterSecret, serverRandom, clientRandom, isClient);
}
// Autogenerated method: PacketEncryptionLayer.RemoveEncryptedEndpoint
bool GlobalNamespace::PacketEncryptionLayer::RemoveEncryptedEndpoint(System::Net::IPEndPoint* endPoint, GlobalNamespace::EncryptionUtility::IEncryptionState* encryptedState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::RemoveEncryptedEndpoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveEncryptedEndpoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(encryptedState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint, encryptedState);
}
// Autogenerated method: PacketEncryptionLayer.AddPendingEncryptedEndpointAsync
System::Threading::Tasks::Task* GlobalNamespace::PacketEncryptionLayer::AddPendingEncryptedEndpointAsync(System::Net::IPEndPoint* endPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverRandom, ::Array<uint8_t>* clientRandom, bool isClient) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::AddPendingEncryptedEndpointAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPendingEncryptedEndpointAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(serverRandom), ::il2cpp_utils::ExtractType(clientRandom), ::il2cpp_utils::ExtractType(isClient)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, endPoint, preMasterSecret, serverRandom, clientRandom, isClient);
}
// Autogenerated method: PacketEncryptionLayer.PollUpdate
void GlobalNamespace::PacketEncryptionLayer::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PollUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer.RemoveAllEndpoints
void GlobalNamespace::PacketEncryptionLayer::RemoveAllEndpoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::RemoveAllEndpoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAllEndpoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer.TryGetEncryptionState
bool GlobalNamespace::PacketEncryptionLayer::TryGetEncryptionState(System::Net::IPEndPoint* endPoint, GlobalNamespace::EncryptionUtility::IEncryptionState*& state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::TryGetEncryptionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetEncryptionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint, state);
}
// Autogenerated method: PacketEncryptionLayer.TryGetPendingEncryptionState
bool GlobalNamespace::PacketEncryptionLayer::TryGetPendingEncryptionState(System::Net::IPEndPoint* endPoint, GlobalNamespace::EncryptionUtility::IEncryptionState*& state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::TryGetPendingEncryptionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetPendingEncryptionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint, state);
}
// Autogenerated method: PacketEncryptionLayer.TryGetPotentialPendingEncryptionStates
bool GlobalNamespace::PacketEncryptionLayer::TryGetPotentialPendingEncryptionStates(System::Net::IPEndPoint* endPoint, ::Array<GlobalNamespace::EncryptionUtility::IEncryptionState*>*& encryptionStates) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::TryGetPotentialPendingEncryptionStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetPotentialPendingEncryptionStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::EncryptionUtility::IEncryptionState*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint, encryptionStates);
}
// Autogenerated method: PacketEncryptionLayer.PromotePendingEncryptionState
void GlobalNamespace::PacketEncryptionLayer::PromotePendingEncryptionState(System::Net::IPEndPoint* endPoint, GlobalNamespace::EncryptionUtility::IEncryptionState* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PromotePendingEncryptionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PromotePendingEncryptionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, state);
}
// Autogenerated method: PacketEncryptionLayer.MatchesFilter
bool GlobalNamespace::PacketEncryptionLayer::MatchesFilter(::Array<uint8_t>* data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::MatchesFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MatchesFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, offset, length);
}
// Autogenerated method: PacketEncryptionLayer.ProcessInboundPacketInternal
bool GlobalNamespace::PacketEncryptionLayer::ProcessInboundPacketInternal(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length, bool& encrypted) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::ProcessInboundPacketInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessInboundPacketInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, remoteEndPoint, data, offset, length, encrypted);
}
// Autogenerated method: PacketEncryptionLayer.ProcessOutBoundPacketInternal
bool GlobalNamespace::PacketEncryptionLayer::ProcessOutBoundPacketInternal(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length, bool& encrypted) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::ProcessOutBoundPacketInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessOutBoundPacketInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, remoteEndPoint, data, offset, length, encrypted);
}
// Autogenerated method: PacketEncryptionLayer.Log
void GlobalNamespace::PacketEncryptionLayer::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PacketEncryptionLayer", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: PacketEncryptionLayer.LogV
void GlobalNamespace::PacketEncryptionLayer::LogV(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::LogV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PacketEncryptionLayer", "LogV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: PacketEncryptionLayer.ProcessInboundPacket
void GlobalNamespace::PacketEncryptionLayer::ProcessInboundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::ProcessInboundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessInboundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, data, offset, length);
}
// Autogenerated method: PacketEncryptionLayer.ProcessOutBoundPacket
void GlobalNamespace::PacketEncryptionLayer::ProcessOutBoundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::ProcessOutBoundPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessOutBoundPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, data, offset, length);
}
// Writing MetadataGetter for method: PacketEncryptionLayer::get_filterUnencryptedTraffic
// Il2CppName: get_filterUnencryptedTraffic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::*)()>(&PacketEncryptionLayer::get_filterUnencryptedTraffic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "get_filterUnencryptedTraffic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::set_filterUnencryptedTraffic
// Il2CppName: set_filterUnencryptedTraffic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::*)(bool)>(&PacketEncryptionLayer::set_filterUnencryptedTraffic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "set_filterUnencryptedTraffic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::get_enableStatistics
// Il2CppName: get_enableStatistics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::*)()>(&PacketEncryptionLayer::get_enableStatistics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "get_enableStatistics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::set_enableStatistics
// Il2CppName: set_enableStatistics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::*)(bool)>(&PacketEncryptionLayer::set_enableStatistics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "set_enableStatistics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::*)(MasterServer::ITimeProvider*)>(&PacketEncryptionLayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::*)(MasterServer::ITimeProvider*)>(&PacketEncryptionLayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::SetUnencryptedTrafficFilter
// Il2CppName: SetUnencryptedTrafficFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::*)(::Array<uint8_t>*)>(&PacketEncryptionLayer::SetUnencryptedTrafficFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "SetUnencryptedTrafficFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::AddEncryptedEndpoint
// Il2CppName: AddEncryptedEndpoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EncryptionUtility::IEncryptionState* (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool)>(&PacketEncryptionLayer::AddEncryptedEndpoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "AddEncryptedEndpoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::AddEncryptedEndpointAsync
// Il2CppName: AddEncryptedEndpointAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::EncryptionUtility::IEncryptionState*>* (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool)>(&PacketEncryptionLayer::AddEncryptedEndpointAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "AddEncryptedEndpointAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::RemoveEncryptedEndpoint
// Il2CppName: RemoveEncryptedEndpoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, GlobalNamespace::EncryptionUtility::IEncryptionState*)>(&PacketEncryptionLayer::RemoveEncryptedEndpoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "RemoveEncryptedEndpoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::AddPendingEncryptedEndpointAsync
// Il2CppName: AddPendingEncryptedEndpointAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool)>(&PacketEncryptionLayer::AddPendingEncryptedEndpointAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "AddPendingEncryptedEndpointAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::*)()>(&PacketEncryptionLayer::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::RemoveAllEndpoints
// Il2CppName: RemoveAllEndpoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::*)()>(&PacketEncryptionLayer::RemoveAllEndpoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "RemoveAllEndpoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::TryGetEncryptionState
// Il2CppName: TryGetEncryptionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, GlobalNamespace::EncryptionUtility::IEncryptionState*&)>(&PacketEncryptionLayer::TryGetEncryptionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "TryGetEncryptionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*&>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::TryGetPendingEncryptionState
// Il2CppName: TryGetPendingEncryptionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, GlobalNamespace::EncryptionUtility::IEncryptionState*&)>(&PacketEncryptionLayer::TryGetPendingEncryptionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "TryGetPendingEncryptionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*&>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::TryGetPotentialPendingEncryptionStates
// Il2CppName: TryGetPotentialPendingEncryptionStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, ::Array<GlobalNamespace::EncryptionUtility::IEncryptionState*>*&)>(&PacketEncryptionLayer::TryGetPotentialPendingEncryptionStates)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "TryGetPotentialPendingEncryptionStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::EncryptionUtility::IEncryptionState*>*&>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PromotePendingEncryptionState
// Il2CppName: PromotePendingEncryptionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, GlobalNamespace::EncryptionUtility::IEncryptionState*)>(&PacketEncryptionLayer::PromotePendingEncryptionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "PromotePendingEncryptionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::MatchesFilter
// Il2CppName: MatchesFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::*)(::Array<uint8_t>*, int, int)>(&PacketEncryptionLayer::MatchesFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "MatchesFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::ProcessInboundPacketInternal
// Il2CppName: ProcessInboundPacketInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, ::Array<uint8_t>*&, int&, int&, bool&)>(&PacketEncryptionLayer::ProcessInboundPacketInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "ProcessInboundPacketInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::ProcessOutBoundPacketInternal
// Il2CppName: ProcessOutBoundPacketInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, ::Array<uint8_t>*&, int&, int&, bool&)>(&PacketEncryptionLayer::ProcessOutBoundPacketInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "ProcessOutBoundPacketInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&PacketEncryptionLayer::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::LogV
// Il2CppName: LogV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&PacketEncryptionLayer::LogV)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "LogV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::ProcessInboundPacket
// Il2CppName: ProcessInboundPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, ::Array<uint8_t>*&, int&, int&)>(&PacketEncryptionLayer::ProcessInboundPacket)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "ProcessInboundPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::ProcessOutBoundPacket
// Il2CppName: ProcessOutBoundPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::*)(System::Net::IPEndPoint*, ::Array<uint8_t>*&, int&, int&)>(&PacketEncryptionLayer::ProcessOutBoundPacket)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer*), "ProcessOutBoundPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PacketEncryptionLayer/EncryptionStatistics
#include "GlobalNamespace/PacketEncryptionLayer_EncryptionStatistics.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.get_packetsReceivedPlaintext
int64_t GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedPlaintext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedPlaintext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packetsReceivedPlaintext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.get_packetsReceivedEncrypted
int64_t GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedEncrypted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedEncrypted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packetsReceivedEncrypted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.get_packetsReceivedRejected
int64_t GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedRejected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedRejected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packetsReceivedRejected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.get_packetsSentPlaintext
int64_t GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsSentPlaintext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsSentPlaintext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packetsSentPlaintext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.get_packetsSentEncrypted
int64_t GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsSentEncrypted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsSentEncrypted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packetsSentEncrypted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.get_packetsSentRejected
int64_t GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsSentRejected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_packetsSentRejected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packetsSentRejected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.get_encryptionProcessingTime
int64_t GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_encryptionProcessingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_encryptionProcessingTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_encryptionProcessingTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.get_decryptionProcessingTime
int64_t GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_decryptionProcessingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::get_decryptionProcessingTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_decryptionProcessingTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.IncrementPacketsReceivedPlaintext
void GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedPlaintext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedPlaintext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsReceivedPlaintext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.IncrementPacketsReceivedEncrypted
void GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedEncrypted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedEncrypted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsReceivedEncrypted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.IncrementPacketsReceivedRejected
void GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedRejected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedRejected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsReceivedRejected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.IncrementPacketsSentPlaintext
void GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentPlaintext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentPlaintext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsSentPlaintext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.IncrementPacketsSentEncrypted
void GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentEncrypted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentEncrypted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsSentEncrypted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.IncrementPacketsSentRejected
void GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentRejected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentRejected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsSentRejected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.AddEncryptionProcessingTime
void GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::AddEncryptionProcessingTime(int64_t time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::AddEncryptionProcessingTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEncryptionProcessingTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: PacketEncryptionLayer/EncryptionStatistics.AddDecryptionProcessingTime
void GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::AddDecryptionProcessingTime(int64_t time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics::AddDecryptionProcessingTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddDecryptionProcessingTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedPlaintext
// Il2CppName: get_packetsReceivedPlaintext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedPlaintext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "get_packetsReceivedPlaintext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedEncrypted
// Il2CppName: get_packetsReceivedEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedEncrypted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "get_packetsReceivedEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedRejected
// Il2CppName: get_packetsReceivedRejected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::get_packetsReceivedRejected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "get_packetsReceivedRejected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::get_packetsSentPlaintext
// Il2CppName: get_packetsSentPlaintext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::get_packetsSentPlaintext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "get_packetsSentPlaintext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::get_packetsSentEncrypted
// Il2CppName: get_packetsSentEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::get_packetsSentEncrypted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "get_packetsSentEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::get_packetsSentRejected
// Il2CppName: get_packetsSentRejected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::get_packetsSentRejected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "get_packetsSentRejected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::get_encryptionProcessingTime
// Il2CppName: get_encryptionProcessingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::get_encryptionProcessingTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "get_encryptionProcessingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::get_decryptionProcessingTime
// Il2CppName: get_decryptionProcessingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::get_decryptionProcessingTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "get_decryptionProcessingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedPlaintext
// Il2CppName: IncrementPacketsReceivedPlaintext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedPlaintext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "IncrementPacketsReceivedPlaintext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedEncrypted
// Il2CppName: IncrementPacketsReceivedEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedEncrypted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "IncrementPacketsReceivedEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedRejected
// Il2CppName: IncrementPacketsReceivedRejected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsReceivedRejected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "IncrementPacketsReceivedRejected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentPlaintext
// Il2CppName: IncrementPacketsSentPlaintext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentPlaintext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "IncrementPacketsSentPlaintext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentEncrypted
// Il2CppName: IncrementPacketsSentEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentEncrypted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "IncrementPacketsSentEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentRejected
// Il2CppName: IncrementPacketsSentRejected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::IncrementPacketsSentRejected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "IncrementPacketsSentRejected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::AddEncryptionProcessingTime
// Il2CppName: AddEncryptionProcessingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::EncryptionStatistics::*)(int64_t)>(&PacketEncryptionLayer::EncryptionStatistics::AddEncryptionProcessingTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "AddEncryptionProcessingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::AddDecryptionProcessingTime
// Il2CppName: AddDecryptionProcessingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::EncryptionStatistics::*)(int64_t)>(&PacketEncryptionLayer::EncryptionStatistics::AddDecryptionProcessingTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), "AddDecryptionProcessingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::EncryptionStatistics::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::EncryptionStatistics::*)()>(&PacketEncryptionLayer::EncryptionStatistics::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::EncryptionStatistics*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList.hpp"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c__DisplayClass4_0
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c__DisplayClass4_0.hpp"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c.hpp"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c__DisplayClass8_0
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c__DisplayClass8_0.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.get_isEmpty
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::get_isEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::get_isEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Dispose
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.GetSortedEncryptionStates
::Array<GlobalNamespace::EncryptionUtility::IEncryptionState*>* GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::GetSortedEncryptionStates(int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::GetSortedEncryptionStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSortedEncryptionStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::EncryptionUtility::IEncryptionState*>*, false>(this, ___internal__method, port);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.TryGetEncryptionState
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::TryGetEncryptionState(int port, GlobalNamespace::EncryptionUtility::IEncryptionState*& encryptionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::TryGetEncryptionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetEncryptionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, port, encryptionState);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Add
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Add(int port, GlobalNamespace::EncryptionUtility::IEncryptionState* encryptionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(encryptionState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, port, encryptionState);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Remove
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Remove(int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, port);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList.Remove
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Remove(int port, GlobalNamespace::EncryptionUtility::IEncryptionState* encryptionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(encryptionState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, port, encryptionState);
}
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::PendingEncryptionStateList::*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::get_isEmpty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList*), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::PendingEncryptionStateList::*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::GetSortedEncryptionStates
// Il2CppName: GetSortedEncryptionStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::EncryptionUtility::IEncryptionState*>* (PacketEncryptionLayer::PendingEncryptionStateList::*)(int)>(&PacketEncryptionLayer::PendingEncryptionStateList::GetSortedEncryptionStates)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList*), "GetSortedEncryptionStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::TryGetEncryptionState
// Il2CppName: TryGetEncryptionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::PendingEncryptionStateList::*)(int, GlobalNamespace::EncryptionUtility::IEncryptionState*&)>(&PacketEncryptionLayer::PendingEncryptionStateList::TryGetEncryptionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList*), "TryGetEncryptionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*&>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::PendingEncryptionStateList::*)(int, GlobalNamespace::EncryptionUtility::IEncryptionState*)>(&PacketEncryptionLayer::PendingEncryptionStateList::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::PendingEncryptionStateList::*)(int)>(&PacketEncryptionLayer::PendingEncryptionStateList::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::PendingEncryptionStateList::*)(int, GlobalNamespace::EncryptionUtility::IEncryptionState*)>(&PacketEncryptionLayer::PendingEncryptionStateList::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::PendingEncryptionStateList::*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::PendingEncryptionStateList::*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c__DisplayClass4_0
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c__DisplayClass4_0.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList/<>c__DisplayClass4_0.<GetSortedEncryptionStates>b__0
int GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0::$GetSortedEncryptionStates$b__0(System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*> kvp) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0::<GetSortedEncryptionStates>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetSortedEncryptionStates>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(kvp)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, kvp);
}
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0::$GetSortedEncryptionStates$b__0
// Il2CppName: <GetSortedEncryptionStates>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0::*)(System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*>)>(&PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0::$GetSortedEncryptionStates$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0*), "<GetSortedEncryptionStates>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*>>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0::*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0::*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly PacketEncryptionLayer/PendingEncryptionStateList/<>c <>9
GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c* GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c*>("", "PacketEncryptionLayer/PendingEncryptionStateList/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly PacketEncryptionLayer/PendingEncryptionStateList/<>c <>9
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::_set_$$9(GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "PacketEncryptionLayer/PendingEncryptionStateList/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Collections.Generic.KeyValuePair`2<System.Int32,EncryptionUtility/IEncryptionState>,EncryptionUtility/IEncryptionState> <>9__4_1
System::Func_2<System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*>, GlobalNamespace::EncryptionUtility::IEncryptionState*>* GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::_get_$$9__4_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::_get_$$9__4_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*>, GlobalNamespace::EncryptionUtility::IEncryptionState*>*>("", "PacketEncryptionLayer/PendingEncryptionStateList/<>c", "<>9__4_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Collections.Generic.KeyValuePair`2<System.Int32,EncryptionUtility/IEncryptionState>,EncryptionUtility/IEncryptionState> <>9__4_1
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::_set_$$9__4_1(System::Func_2<System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*>, GlobalNamespace::EncryptionUtility::IEncryptionState*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::_set_$$9__4_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "PacketEncryptionLayer/PendingEncryptionStateList/<>c", "<>9__4_1", value)));
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList/<>c..cctor
void GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PacketEncryptionLayer/PendingEncryptionStateList/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList/<>c.<GetSortedEncryptionStates>b__4_1
GlobalNamespace::EncryptionUtility::IEncryptionState* GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::$GetSortedEncryptionStates$b__4_1(System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*> kvp) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::<GetSortedEncryptionStates>b__4_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetSortedEncryptionStates>b__4_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(kvp)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EncryptionUtility::IEncryptionState*, false>(this, ___internal__method, kvp);
}
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::$$c::$GetSortedEncryptionStates$b__4_1
// Il2CppName: <GetSortedEncryptionStates>b__4_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EncryptionUtility::IEncryptionState* (PacketEncryptionLayer::PendingEncryptionStateList::$$c::*)(System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*>)>(&PacketEncryptionLayer::PendingEncryptionStateList::$$c::$GetSortedEncryptionStates$b__4_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList::$$c*), "<GetSortedEncryptionStates>b__4_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*>>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::PendingEncryptionStateList::$$c::*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::PendingEncryptionStateList::$$c::*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PacketEncryptionLayer/PendingEncryptionStateList/<>c__DisplayClass8_0
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList_--c__DisplayClass8_0.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PacketEncryptionLayer/PendingEncryptionStateList/<>c__DisplayClass8_0.<Remove>b__0
bool GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0::$Remove$b__0(System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*> kvp) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0::<Remove>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Remove>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(kvp)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, kvp);
}
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0::$Remove$b__0
// Il2CppName: <Remove>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0::*)(System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*>)>(&PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0::$Remove$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0*), "<Remove>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::EncryptionUtility::IEncryptionState*>>()});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0::*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0::*)()>(&PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::PendingEncryptionStateList::$$c__DisplayClass8_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer/<AddEncryptedEndpointAsync>d__24
#include "GlobalNamespace/PacketEncryptionLayer_-AddEncryptedEndpointAsync-d__24.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PacketEncryptionLayer/<AddEncryptedEndpointAsync>d__24.MoveNext
void GlobalNamespace::PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/<AddEncryptedEndpointAsync>d__24.SetStateMachine
void GlobalNamespace::PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24::*)()>(&PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::$AddEncryptedEndpointAsync$d__24), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer/<AddPendingEncryptedEndpointAsync>d__26
#include "GlobalNamespace/PacketEncryptionLayer_-AddPendingEncryptedEndpointAsync-d__26.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PacketEncryptionLayer/<AddPendingEncryptedEndpointAsync>d__26.MoveNext
void GlobalNamespace::PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: PacketEncryptionLayer/<AddPendingEncryptedEndpointAsync>d__26.SetStateMachine
void GlobalNamespace::PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26::*)()>(&PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PacketEncryptionLayer::$AddPendingEncryptedEndpointAsync$d__26), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PartyMessageHandler
#include "GlobalNamespace/PartyMessageHandler.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: PartyMessageHandler/ServerStatusUpdatedDelegate
#include "GlobalNamespace/PartyMessageHandler_ServerStatusUpdatedDelegate.hpp"
// Including type: PartyMessageHandler/ConnectToMasterServerDelegate
#include "GlobalNamespace/PartyMessageHandler_ConnectToMasterServerDelegate.hpp"
// Including type: PartyMessageHandler/ServerStatusUpdateMessage
#include "GlobalNamespace/PartyMessageHandler_ServerStatusUpdateMessage.hpp"
// Including type: PartyMessageHandler/ConnectToMasterServerMessage
#include "GlobalNamespace/PartyMessageHandler_ConnectToMasterServerMessage.hpp"
// Including type: NetworkPacketSerializer`2
#include "GlobalNamespace/NetworkPacketSerializer_2.hpp"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
// Including type: InvitePolicy
#include "GlobalNamespace/InvitePolicy.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PartyMessageHandler.Dispose
void GlobalNamespace::PartyMessageHandler::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PartyMessageHandler.add_serverStatusUpdatedEvent
void GlobalNamespace::PartyMessageHandler::add_serverStatusUpdatedEvent(GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::add_serverStatusUpdatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_serverStatusUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PartyMessageHandler.remove_serverStatusUpdatedEvent
void GlobalNamespace::PartyMessageHandler::remove_serverStatusUpdatedEvent(GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::remove_serverStatusUpdatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_serverStatusUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PartyMessageHandler.SetServerStatus
void GlobalNamespace::PartyMessageHandler::SetServerStatus(::Il2CppString* serverName, ::Il2CppString* password, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::SetServerStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetServerStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverName, password, discoveryPolicy, invitePolicy, maxPlayerCount, configuration);
}
// Autogenerated method: PartyMessageHandler.HandleServerStatusUpdate
void GlobalNamespace::PartyMessageHandler::HandleServerStatusUpdate(GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::HandleServerStatusUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerStatusUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: PartyMessageHandler.add_connectToMasterServerEvent
void GlobalNamespace::PartyMessageHandler::add_connectToMasterServerEvent(GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::add_connectToMasterServerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectToMasterServerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PartyMessageHandler.remove_connectToMasterServerEvent
void GlobalNamespace::PartyMessageHandler::remove_connectToMasterServerEvent(GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::remove_connectToMasterServerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectToMasterServerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PartyMessageHandler.ConnectToMasterServer
void GlobalNamespace::PartyMessageHandler::ConnectToMasterServer(System::Net::IPEndPoint* endPoint, ::Il2CppString* serverName, ::Il2CppString* password, ::Il2CppString* secret, ::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ConnectToMasterServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToMasterServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, serverName, password, secret, userId, userName, discoveryPolicy, invitePolicy, maxPlayerCount, configuration);
}
// Autogenerated method: PartyMessageHandler.HandleConnectToMasterServer
void GlobalNamespace::PartyMessageHandler::HandleConnectToMasterServer(GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::HandleConnectToMasterServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectToMasterServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Writing MetadataGetter for method: PartyMessageHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)(GlobalNamespace::ConnectedPlayerManager*)>(&PartyMessageHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)(GlobalNamespace::ConnectedPlayerManager*)>(&PartyMessageHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)()>(&PartyMessageHandler::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::add_serverStatusUpdatedEvent
// Il2CppName: add_serverStatusUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)(GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate*)>(&PartyMessageHandler::add_serverStatusUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), "add_serverStatusUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::remove_serverStatusUpdatedEvent
// Il2CppName: remove_serverStatusUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)(GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate*)>(&PartyMessageHandler::remove_serverStatusUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), "remove_serverStatusUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::SetServerStatus
// Il2CppName: SetServerStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration)>(&PartyMessageHandler::SetServerStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), "SetServerStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::HandleServerStatusUpdate
// Il2CppName: HandleServerStatusUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)(GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage*)>(&PartyMessageHandler::HandleServerStatusUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), "HandleServerStatusUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::add_connectToMasterServerEvent
// Il2CppName: add_connectToMasterServerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)(GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate*)>(&PartyMessageHandler::add_connectToMasterServerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), "add_connectToMasterServerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::remove_connectToMasterServerEvent
// Il2CppName: remove_connectToMasterServerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)(GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate*)>(&PartyMessageHandler::remove_connectToMasterServerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), "remove_connectToMasterServerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServer
// Il2CppName: ConnectToMasterServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)(System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration)>(&PartyMessageHandler::ConnectToMasterServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), "ConnectToMasterServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::HandleConnectToMasterServer
// Il2CppName: HandleConnectToMasterServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::*)(GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage*)>(&PartyMessageHandler::HandleConnectToMasterServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler*), "HandleConnectToMasterServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PartyMessageHandler/MessageType
#include "GlobalNamespace/PartyMessageHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PartyMessageHandler/MessageType ServerStatusUpdate
GlobalNamespace::PartyMessageHandler::MessageType GlobalNamespace::PartyMessageHandler::MessageType::_get_ServerStatusUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::MessageType::_get_ServerStatusUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PartyMessageHandler::MessageType>("", "PartyMessageHandler/MessageType", "ServerStatusUpdate"));
}
// Autogenerated static field setter
// Set static field: static public PartyMessageHandler/MessageType ServerStatusUpdate
void GlobalNamespace::PartyMessageHandler::MessageType::_set_ServerStatusUpdate(GlobalNamespace::PartyMessageHandler::MessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::MessageType::_set_ServerStatusUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PartyMessageHandler/MessageType", "ServerStatusUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public PartyMessageHandler/MessageType ConnectToMasterServer
GlobalNamespace::PartyMessageHandler::MessageType GlobalNamespace::PartyMessageHandler::MessageType::_get_ConnectToMasterServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::MessageType::_get_ConnectToMasterServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PartyMessageHandler::MessageType>("", "PartyMessageHandler/MessageType", "ConnectToMasterServer"));
}
// Autogenerated static field setter
// Set static field: static public PartyMessageHandler/MessageType ConnectToMasterServer
void GlobalNamespace::PartyMessageHandler::MessageType::_set_ConnectToMasterServer(GlobalNamespace::PartyMessageHandler::MessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::MessageType::_set_ConnectToMasterServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PartyMessageHandler/MessageType", "ConnectToMasterServer", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PartyMessageHandler/ServerStatusUpdatedDelegate
#include "GlobalNamespace/PartyMessageHandler_ServerStatusUpdatedDelegate.hpp"
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
// Including type: InvitePolicy
#include "GlobalNamespace/InvitePolicy.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PartyMessageHandler/ServerStatusUpdatedDelegate.Invoke
void GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate::Invoke(::Il2CppString* serverName, ::Il2CppString* password, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverName, password, discoveryPolicy, invitePolicy, maxPlayerCount, configuration);
}
// Autogenerated method: PartyMessageHandler/ServerStatusUpdatedDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate::BeginInvoke(::Il2CppString* serverName, ::Il2CppString* password, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, serverName, password, discoveryPolicy, invitePolicy, maxPlayerCount, configuration, callback, object);
}
// Autogenerated method: PartyMessageHandler/ServerStatusUpdatedDelegate.EndInvoke
void GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ServerStatusUpdatedDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: PartyMessageHandler::ServerStatusUpdatedDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ServerStatusUpdatedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&PartyMessageHandler::ServerStatusUpdatedDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdatedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ServerStatusUpdatedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&PartyMessageHandler::ServerStatusUpdatedDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdatedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ServerStatusUpdatedDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ServerStatusUpdatedDelegate::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration)>(&PartyMessageHandler::ServerStatusUpdatedDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdatedDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ServerStatusUpdatedDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (PartyMessageHandler::ServerStatusUpdatedDelegate::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration, System::AsyncCallback*, ::Il2CppObject*)>(&PartyMessageHandler::ServerStatusUpdatedDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdatedDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ServerStatusUpdatedDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ServerStatusUpdatedDelegate::*)(System::IAsyncResult*)>(&PartyMessageHandler::ServerStatusUpdatedDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdatedDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PartyMessageHandler/ConnectToMasterServerDelegate
#include "GlobalNamespace/PartyMessageHandler_ConnectToMasterServerDelegate.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
// Including type: InvitePolicy
#include "GlobalNamespace/InvitePolicy.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PartyMessageHandler/ConnectToMasterServerDelegate.Invoke
void GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate::Invoke(System::Net::IPEndPoint* endPoint, ::Il2CppString* serverName, ::Il2CppString* password, ::Il2CppString* secret, ::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, serverName, password, secret, userId, userName, discoveryPolicy, invitePolicy, maxPlayerCount, configuration);
}
// Autogenerated method: PartyMessageHandler/ConnectToMasterServerDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate::BeginInvoke(System::Net::IPEndPoint* endPoint, ::Il2CppString* serverName, ::Il2CppString* password, ::Il2CppString* secret, ::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, endPoint, serverName, password, secret, userId, userName, discoveryPolicy, invitePolicy, maxPlayerCount, configuration, callback, object);
}
// Autogenerated method: PartyMessageHandler/ConnectToMasterServerDelegate.EndInvoke
void GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ConnectToMasterServerDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServerDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ConnectToMasterServerDelegate::*)(::Il2CppObject*, System::IntPtr)>(&PartyMessageHandler::ConnectToMasterServerDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ConnectToMasterServerDelegate::*)(::Il2CppObject*, System::IntPtr)>(&PartyMessageHandler::ConnectToMasterServerDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServerDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ConnectToMasterServerDelegate::*)(System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration)>(&PartyMessageHandler::ConnectToMasterServerDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServerDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (PartyMessageHandler::ConnectToMasterServerDelegate::*)(System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration, System::AsyncCallback*, ::Il2CppObject*)>(&PartyMessageHandler::ConnectToMasterServerDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServerDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ConnectToMasterServerDelegate::*)(System::IAsyncResult*)>(&PartyMessageHandler::ConnectToMasterServerDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PartyMessageHandler/ServerStatusUpdateMessage
#include "GlobalNamespace/PartyMessageHandler_ServerStatusUpdateMessage.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PartyMessageHandler/ServerStatusUpdateMessage.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage*>* GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PartyMessageHandler/ServerStatusUpdateMessage", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: PartyMessageHandler/ServerStatusUpdateMessage.Init
GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage* GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage::Init(::Il2CppString* serverName, ::Il2CppString* password, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage*, false>(this, ___internal__method, serverName, password, discoveryPolicy, invitePolicy, maxPlayerCount, configuration);
}
// Autogenerated method: PartyMessageHandler/ServerStatusUpdateMessage.Serialize
void GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: PartyMessageHandler/ServerStatusUpdateMessage.Deserialize
void GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: PartyMessageHandler/ServerStatusUpdateMessage.Release
void GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PartyMessageHandler::ServerStatusUpdateMessage::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage*>* (*)()>(&PartyMessageHandler::ServerStatusUpdateMessage::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdateMessage*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ServerStatusUpdateMessage::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PartyMessageHandler::ServerStatusUpdateMessage* (PartyMessageHandler::ServerStatusUpdateMessage::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration)>(&PartyMessageHandler::ServerStatusUpdateMessage::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdateMessage*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ServerStatusUpdateMessage::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ServerStatusUpdateMessage::*)(LiteNetLib::Utils::NetDataWriter*)>(&PartyMessageHandler::ServerStatusUpdateMessage::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdateMessage*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ServerStatusUpdateMessage::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ServerStatusUpdateMessage::*)(LiteNetLib::Utils::NetDataReader*)>(&PartyMessageHandler::ServerStatusUpdateMessage::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdateMessage*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ServerStatusUpdateMessage::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ServerStatusUpdateMessage::*)()>(&PartyMessageHandler::ServerStatusUpdateMessage::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdateMessage*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ServerStatusUpdateMessage::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ServerStatusUpdateMessage::*)()>(&PartyMessageHandler::ServerStatusUpdateMessage::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdateMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ServerStatusUpdateMessage::*)()>(&PartyMessageHandler::ServerStatusUpdateMessage::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ServerStatusUpdateMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PartyMessageHandler/ConnectToMasterServerMessage
#include "GlobalNamespace/PartyMessageHandler_ConnectToMasterServerMessage.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PartyMessageHandler/ConnectToMasterServerMessage.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage*>* GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PartyMessageHandler/ConnectToMasterServerMessage", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: PartyMessageHandler/ConnectToMasterServerMessage.Init
GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage* GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage::Init(System::Net::IPEndPoint* endPoint, ::Il2CppString* serverName, ::Il2CppString* password, ::Il2CppString* secret, ::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage*, false>(this, ___internal__method, endPoint, serverName, password, secret, userId, userName, discoveryPolicy, invitePolicy, maxPlayerCount, configuration);
}
// Autogenerated method: PartyMessageHandler/ConnectToMasterServerMessage.Serialize
void GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: PartyMessageHandler/ConnectToMasterServerMessage.Deserialize
void GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: PartyMessageHandler/ConnectToMasterServerMessage.Release
void GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServerMessage::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage*>* (*)()>(&PartyMessageHandler::ConnectToMasterServerMessage::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerMessage*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServerMessage::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PartyMessageHandler::ConnectToMasterServerMessage* (PartyMessageHandler::ConnectToMasterServerMessage::*)(System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration)>(&PartyMessageHandler::ConnectToMasterServerMessage::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerMessage*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServerMessage::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ConnectToMasterServerMessage::*)(LiteNetLib::Utils::NetDataWriter*)>(&PartyMessageHandler::ConnectToMasterServerMessage::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerMessage*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServerMessage::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ConnectToMasterServerMessage::*)(LiteNetLib::Utils::NetDataReader*)>(&PartyMessageHandler::ConnectToMasterServerMessage::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerMessage*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServerMessage::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ConnectToMasterServerMessage::*)()>(&PartyMessageHandler::ConnectToMasterServerMessage::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerMessage*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyMessageHandler::ConnectToMasterServerMessage::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ConnectToMasterServerMessage::*)()>(&PartyMessageHandler::ConnectToMasterServerMessage::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyMessageHandler::ConnectToMasterServerMessage::*)()>(&PartyMessageHandler::ConnectToMasterServerMessage::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyMessageHandler::ConnectToMasterServerMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerSpecificSettingsAtStartNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsAtStartNetSerializable.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: PlayerSpecificSettingsNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsNetSerializable.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayerSpecificSettingsAtStartNetSerializable.get_activePlayersAtGameStart
System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable::get_activePlayersAtGameStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable::get_activePlayersAtGameStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activePlayersAtGameStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettingsAtStartNetSerializable.get_activePlayerSpecificSettingsAtGameStart
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable::get_activePlayerSpecificSettingsAtGameStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable::get_activePlayerSpecificSettingsAtGameStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activePlayerSpecificSettingsAtGameStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettingsAtStartNetSerializable.set_activePlayerSpecificSettingsAtGameStart
void GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable::set_activePlayerSpecificSettingsAtGameStart(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable::set_activePlayerSpecificSettingsAtGameStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_activePlayerSpecificSettingsAtGameStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlayerSpecificSettingsAtStartNetSerializable.Serialize
void GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: PlayerSpecificSettingsAtStartNetSerializable.Deserialize
void GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: PlayerSpecificSettingsAtStartNetSerializable::get_activePlayersAtGameStart
// Il2CppName: get_activePlayersAtGameStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* (PlayerSpecificSettingsAtStartNetSerializable::*)()>(&PlayerSpecificSettingsAtStartNetSerializable::get_activePlayersAtGameStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsAtStartNetSerializable*), "get_activePlayersAtGameStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettingsAtStartNetSerializable::get_activePlayerSpecificSettingsAtGameStart
// Il2CppName: get_activePlayerSpecificSettingsAtGameStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* (PlayerSpecificSettingsAtStartNetSerializable::*)()>(&PlayerSpecificSettingsAtStartNetSerializable::get_activePlayerSpecificSettingsAtGameStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsAtStartNetSerializable*), "get_activePlayerSpecificSettingsAtGameStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettingsAtStartNetSerializable::set_activePlayerSpecificSettingsAtGameStart
// Il2CppName: set_activePlayerSpecificSettingsAtGameStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsAtStartNetSerializable::*)(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*)>(&PlayerSpecificSettingsAtStartNetSerializable::set_activePlayerSpecificSettingsAtGameStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsAtStartNetSerializable*), "set_activePlayerSpecificSettingsAtGameStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettingsAtStartNetSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsAtStartNetSerializable::*)(System::Collections::Generic::List_1<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*)>(&PlayerSpecificSettingsAtStartNetSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsAtStartNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsAtStartNetSerializable::*)(System::Collections::Generic::List_1<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*)>(&PlayerSpecificSettingsAtStartNetSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsAtStartNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettingsAtStartNetSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsAtStartNetSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&PlayerSpecificSettingsAtStartNetSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsAtStartNetSerializable*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettingsAtStartNetSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsAtStartNetSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&PlayerSpecificSettingsAtStartNetSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsAtStartNetSerializable*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettingsAtStartNetSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsAtStartNetSerializable::*)()>(&PlayerSpecificSettingsAtStartNetSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsAtStartNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsAtStartNetSerializable::*)()>(&PlayerSpecificSettingsAtStartNetSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsAtStartNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSpecificSettingsNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayerSpecificSettingsNetSerializable.Serialize
void GlobalNamespace::PlayerSpecificSettingsNetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettingsNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: PlayerSpecificSettingsNetSerializable.Deserialize
void GlobalNamespace::PlayerSpecificSettingsNetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettingsNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: PlayerSpecificSettingsNetSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsNetSerializable::*)(::Il2CppString*, ::Il2CppString*, bool, bool, float, float, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color)>(&PlayerSpecificSettingsNetSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsNetSerializable::*)(::Il2CppString*, ::Il2CppString*, bool, bool, float, float, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color)>(&PlayerSpecificSettingsNetSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettingsNetSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsNetSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&PlayerSpecificSettingsNetSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsNetSerializable*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettingsNetSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsNetSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&PlayerSpecificSettingsNetSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsNetSerializable*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettingsNetSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsNetSerializable::*)()>(&PlayerSpecificSettingsNetSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettingsNetSerializable::*)()>(&PlayerSpecificSettingsNetSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettingsNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerStateHash
#include "GlobalNamespace/PlayerStateHash.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kToStringPrefix
::Il2CppString* GlobalNamespace::PlayerStateHash::_get_kToStringPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::_get_kToStringPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "PlayerStateHash", "kToStringPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringPrefix
void GlobalNamespace::PlayerStateHash::_set_kToStringPrefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::_set_kToStringPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayerStateHash", "kToStringPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kToStringSuffix
::Il2CppString* GlobalNamespace::PlayerStateHash::_get_kToStringSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::_get_kToStringSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "PlayerStateHash", "kToStringSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringSuffix
void GlobalNamespace::PlayerStateHash::_set_kToStringSuffix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::_set_kToStringSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayerStateHash", "kToStringSuffix", value));
}
// Autogenerated method: PlayerStateHash.Contains
bool GlobalNamespace::PlayerStateHash::Contains(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, state);
}
// Autogenerated method: PlayerStateHash.AddState
GlobalNamespace::PlayerStateHash GlobalNamespace::PlayerStateHash::AddState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::AddState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AddState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerStateHash, false>(*this, ___internal__method, state);
}
// Autogenerated method: PlayerStateHash.Serialize
void GlobalNamespace::PlayerStateHash::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: PlayerStateHash.CreateFromSerializedData
GlobalNamespace::PlayerStateHash GlobalNamespace::PlayerStateHash::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerStateHash, false>(*this, ___internal__method, reader);
}
// Autogenerated method: PlayerStateHash.Deserialize
GlobalNamespace::PlayerStateHash GlobalNamespace::PlayerStateHash::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerStateHash", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerStateHash, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: PlayerStateHash.ToShortString
::Il2CppString* GlobalNamespace::PlayerStateHash::ToShortString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::ToShortString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToShortString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: PlayerStateHash.ToBytes
::Array<uint8_t>* GlobalNamespace::PlayerStateHash::ToBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::ToBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(*this, ___internal__method);
}
// Autogenerated method: PlayerStateHash.Equals
bool GlobalNamespace::PlayerStateHash::Equals(GlobalNamespace::PlayerStateHash other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: PlayerStateHash.TryParse
bool GlobalNamespace::PlayerStateHash::TryParse(::Il2CppString* stringSerializedMask, GlobalNamespace::PlayerStateHash& playerStateHash) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerStateHash", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringSerializedMask), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerStateHash&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stringSerializedMask, playerStateHash);
}
// Autogenerated method: PlayerStateHash.Parse
GlobalNamespace::PlayerStateHash GlobalNamespace::PlayerStateHash::Parse(::Il2CppString* stringSerializedMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::Parse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerStateHash", "Parse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringSerializedMask)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerStateHash, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stringSerializedMask);
}
// Autogenerated method: PlayerStateHash.FromBytes
GlobalNamespace::PlayerStateHash GlobalNamespace::PlayerStateHash::FromBytes(::Array<uint8_t>* bytes, int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerStateHash", "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerStateHash, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, offset);
}
// Autogenerated method: PlayerStateHash.ToString
::Il2CppString* GlobalNamespace::PlayerStateHash::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: PlayerStateHash.GetHashCode
int GlobalNamespace::PlayerStateHash::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: PlayerStateHash.Equals
bool GlobalNamespace::PlayerStateHash::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerStateHash::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Writing MetadataGetter for method: PlayerStateHash::PlayerStateHash
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerStateHash::*)(GlobalNamespace::BitMask128)>(&PlayerStateHash::PlayerStateHash<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BitMask128>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerStateHash::*)(GlobalNamespace::BitMask128)>(&PlayerStateHash::PlayerStateHash<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BitMask128>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::PlayerStateHash
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerStateHash::*)(::Il2CppString*)>(&PlayerStateHash::PlayerStateHash<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerStateHash::*)(::Il2CppString*)>(&PlayerStateHash::PlayerStateHash<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::PlayerStateHash
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerStateHash::*)(System::Collections::Generic::HashSet_1<::Il2CppString*>*)>(&PlayerStateHash::PlayerStateHash<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerStateHash::*)(System::Collections::Generic::HashSet_1<::Il2CppString*>*)>(&PlayerStateHash::PlayerStateHash<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerStateHash::*)(::Il2CppString*)>(&PlayerStateHash::Contains)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::AddState
// Il2CppName: AddState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerStateHash (PlayerStateHash::*)(::Il2CppString*)>(&PlayerStateHash::AddState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "AddState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerStateHash::*)(LiteNetLib::Utils::NetDataWriter*)>(&PlayerStateHash::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::CreateFromSerializedData
// Il2CppName: CreateFromSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerStateHash (PlayerStateHash::*)(LiteNetLib::Utils::NetDataReader*)>(&PlayerStateHash::CreateFromSerializedData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "CreateFromSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerStateHash (*)(LiteNetLib::Utils::NetDataReader*)>(&PlayerStateHash::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::ToShortString
// Il2CppName: ToShortString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlayerStateHash::*)()>(&PlayerStateHash::ToShortString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "ToShortString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::ToBytes
// Il2CppName: ToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (PlayerStateHash::*)()>(&PlayerStateHash::ToBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "ToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerStateHash::*)(GlobalNamespace::PlayerStateHash)>(&PlayerStateHash::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerStateHash>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, GlobalNamespace::PlayerStateHash&)>(&PlayerStateHash::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerStateHash&>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerStateHash (*)(::Il2CppString*)>(&PlayerStateHash::Parse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::FromBytes
// Il2CppName: FromBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerStateHash (*)(::Array<uint8_t>*, int)>(&PlayerStateHash::FromBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "FromBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlayerStateHash::*)()>(&PlayerStateHash::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayerStateHash::*)()>(&PlayerStateHash::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerStateHash::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerStateHash::*)(::Il2CppObject*)>(&PlayerStateHash::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerStateHash), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayersSpecificSettingsAtGameStartModel
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel.hpp"
// Including type: PlayersSpecificSettingsAtGameStartModel/<>c__DisplayClass13_0
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel_--c__DisplayClass13_0.hpp"
// Including type: PlayerSpecificSettingsNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsNetSerializable.hpp"
// Including type: PlayerSpecificSettingsAtStartNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsAtStartNetSerializable.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayersSpecificSettingsAtGameStartModel.get_playersAtGameStart
System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::get_playersAtGameStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::get_playersAtGameStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playersAtGameStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: PlayersSpecificSettingsAtGameStartModel.get_localPlayerSpecificSettings
GlobalNamespace::PlayerSpecificSettingsNetSerializable* GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::get_localPlayerSpecificSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::get_localPlayerSpecificSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerSpecificSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerSpecificSettingsNetSerializable*, false>(this, ___internal__method);
}
// Autogenerated method: PlayersSpecificSettingsAtGameStartModel.set_localPlayerSpecificSettings
void GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::set_localPlayerSpecificSettings(GlobalNamespace::PlayerSpecificSettingsNetSerializable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::set_localPlayerSpecificSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localPlayerSpecificSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlayersSpecificSettingsAtGameStartModel.get_playersAtGameStartNetSerializable
GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::get_playersAtGameStartNetSerializable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::get_playersAtGameStartNetSerializable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playersAtGameStartNetSerializable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, false>(this, ___internal__method);
}
// Autogenerated method: PlayersSpecificSettingsAtGameStartModel.set_playersAtGameStartNetSerializable
void GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::set_playersAtGameStartNetSerializable(GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::set_playersAtGameStartNetSerializable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_playersAtGameStartNetSerializable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlayersSpecificSettingsAtGameStartModel.GetPlayerSpecificSettingsForUserId
GlobalNamespace::PlayerSpecificSettingsNetSerializable* GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::GetPlayerSpecificSettingsForUserId(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::GetPlayerSpecificSettingsForUserId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerSpecificSettingsForUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerSpecificSettingsNetSerializable*, false>(this, ___internal__method, userId);
}
// Autogenerated method: PlayersSpecificSettingsAtGameStartModel.SaveFromNetSerializable
void GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::SaveFromNetSerializable(GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStartNetSerializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::SaveFromNetSerializable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveFromNetSerializable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playersAtGameStartNetSerializable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playersAtGameStartNetSerializable);
}
// Writing MetadataGetter for method: PlayersSpecificSettingsAtGameStartModel::get_playersAtGameStart
// Il2CppName: get_playersAtGameStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* (PlayersSpecificSettingsAtGameStartModel::*)()>(&PlayersSpecificSettingsAtGameStartModel::get_playersAtGameStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel*), "get_playersAtGameStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayersSpecificSettingsAtGameStartModel::get_localPlayerSpecificSettings
// Il2CppName: get_localPlayerSpecificSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerSpecificSettingsNetSerializable* (PlayersSpecificSettingsAtGameStartModel::*)()>(&PlayersSpecificSettingsAtGameStartModel::get_localPlayerSpecificSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel*), "get_localPlayerSpecificSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayersSpecificSettingsAtGameStartModel::set_localPlayerSpecificSettings
// Il2CppName: set_localPlayerSpecificSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayersSpecificSettingsAtGameStartModel::*)(GlobalNamespace::PlayerSpecificSettingsNetSerializable*)>(&PlayersSpecificSettingsAtGameStartModel::set_localPlayerSpecificSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel*), "set_localPlayerSpecificSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: PlayersSpecificSettingsAtGameStartModel::get_playersAtGameStartNetSerializable
// Il2CppName: get_playersAtGameStartNetSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* (PlayersSpecificSettingsAtGameStartModel::*)()>(&PlayersSpecificSettingsAtGameStartModel::get_playersAtGameStartNetSerializable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel*), "get_playersAtGameStartNetSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayersSpecificSettingsAtGameStartModel::set_playersAtGameStartNetSerializable
// Il2CppName: set_playersAtGameStartNetSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayersSpecificSettingsAtGameStartModel::*)(GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*)>(&PlayersSpecificSettingsAtGameStartModel::set_playersAtGameStartNetSerializable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel*), "set_playersAtGameStartNetSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: PlayersSpecificSettingsAtGameStartModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayersSpecificSettingsAtGameStartModel::*)(GlobalNamespace::IMultiplayerSessionManager*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*)>(&PlayersSpecificSettingsAtGameStartModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayersSpecificSettingsAtGameStartModel::*)(GlobalNamespace::IMultiplayerSessionManager*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*)>(&PlayersSpecificSettingsAtGameStartModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: PlayersSpecificSettingsAtGameStartModel::GetPlayerSpecificSettingsForUserId
// Il2CppName: GetPlayerSpecificSettingsForUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerSpecificSettingsNetSerializable* (PlayersSpecificSettingsAtGameStartModel::*)(::Il2CppString*)>(&PlayersSpecificSettingsAtGameStartModel::GetPlayerSpecificSettingsForUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel*), "GetPlayerSpecificSettingsForUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayersSpecificSettingsAtGameStartModel::SaveFromNetSerializable
// Il2CppName: SaveFromNetSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayersSpecificSettingsAtGameStartModel::*)(GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*)>(&PlayersSpecificSettingsAtGameStartModel::SaveFromNetSerializable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel*), "SaveFromNetSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayersSpecificSettingsAtGameStartModel/<>c__DisplayClass13_0
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel_--c__DisplayClass13_0.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayersSpecificSettingsAtGameStartModel/<>c__DisplayClass13_0.<SaveFromNetSerializable>b__0
bool GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0::$SaveFromNetSerializable$b__0(GlobalNamespace::IConnectedPlayer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0::<SaveFromNetSerializable>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SaveFromNetSerializable>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, p);
}
// Writing MetadataGetter for method: PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0::$SaveFromNetSerializable$b__0
// Il2CppName: <SaveFromNetSerializable>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0::*)(GlobalNamespace::IConnectedPlayer*)>(&PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0::$SaveFromNetSerializable$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0*), "<SaveFromNetSerializable>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0::*)()>(&PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0::*)()>(&PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayersSpecificSettingsAtGameStartModel::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ProfanityFilter
#include "GlobalNamespace/ProfanityFilter.hpp"
// Including type: ProfanityFilter/TrieNode
#include "GlobalNamespace/ProfanityFilter_TrieNode.hpp"
// Including type: ProfanityFilter/<GetLookalikeLetters>d__4
#include "GlobalNamespace/ProfanityFilter_-GetLookalikeLetters-d__4.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ProfanityFilter.IsProfane
bool GlobalNamespace::ProfanityFilter::IsProfane(::Il2CppString* word) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::IsProfane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsProfane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(word)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, word);
}
// Autogenerated method: ProfanityFilter.GetLookalikeLetters
System::Collections::Generic::IEnumerable_1<::Il2CppChar>* GlobalNamespace::ProfanityFilter::GetLookalikeLetters(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::GetLookalikeLetters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ProfanityFilter", "GetLookalikeLetters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<::Il2CppChar>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c);
}
// Autogenerated method: ProfanityFilter.GetLeetEquivalent
::Il2CppChar GlobalNamespace::ProfanityFilter::GetLeetEquivalent(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::GetLeetEquivalent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ProfanityFilter", "GetLeetEquivalent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c);
}
// Writing MetadataGetter for method: ProfanityFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::*)(System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&ProfanityFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::*)(System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&ProfanityFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::IsProfane
// Il2CppName: IsProfane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::*)(::Il2CppString*)>(&ProfanityFilter::IsProfane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter*), "IsProfane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::GetLookalikeLetters
// Il2CppName: GetLookalikeLetters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<::Il2CppChar>* (*)(::Il2CppChar)>(&ProfanityFilter::GetLookalikeLetters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter*), "GetLookalikeLetters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::GetLeetEquivalent
// Il2CppName: GetLeetEquivalent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&ProfanityFilter::GetLeetEquivalent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter*), "GetLeetEquivalent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ProfanityFilter/TrieNode
#include "GlobalNamespace/ProfanityFilter_TrieNode.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ProfanityFilter/TrieNode.AddWord
void GlobalNamespace::ProfanityFilter::TrieNode::AddWord(::Il2CppString* word, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::TrieNode::AddWord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddWord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(word), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, word, index);
}
// Autogenerated method: ProfanityFilter/TrieNode.IsMatch
bool GlobalNamespace::ProfanityFilter::TrieNode::IsMatch(::Il2CppString* word, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::TrieNode::IsMatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(word), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, word, index);
}
// Writing MetadataGetter for method: ProfanityFilter::TrieNode::AddWord
// Il2CppName: AddWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::TrieNode::*)(::Il2CppString*, int)>(&ProfanityFilter::TrieNode::AddWord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::TrieNode*), "AddWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::TrieNode::IsMatch
// Il2CppName: IsMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::TrieNode::*)(::Il2CppString*, int)>(&ProfanityFilter::TrieNode::IsMatch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::TrieNode*), "IsMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::TrieNode::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::TrieNode::*)()>(&ProfanityFilter::TrieNode::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::TrieNode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::TrieNode::*)()>(&ProfanityFilter::TrieNode::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::TrieNode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ProfanityFilter/<GetLookalikeLetters>d__4
#include "GlobalNamespace/ProfanityFilter_-GetLookalikeLetters-d__4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ProfanityFilter/<GetLookalikeLetters>d__4.System.IDisposable.Dispose
void GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ProfanityFilter/<GetLookalikeLetters>d__4.MoveNext
bool GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ProfanityFilter/<GetLookalikeLetters>d__4.System.Collections.Generic.IEnumerator<System.Char>.get_Current
::Il2CppChar GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_Generic_IEnumerator$System_Char$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System.Collections.Generic.IEnumerator<System.Char>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Char>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: ProfanityFilter/<GetLookalikeLetters>d__4.System.Collections.IEnumerator.Reset
void GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ProfanityFilter/<GetLookalikeLetters>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ProfanityFilter/<GetLookalikeLetters>d__4.System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator
System::Collections::Generic::IEnumerator_1<::Il2CppChar>* GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_Generic_IEnumerable$System_Char$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<::Il2CppChar>*, false>(this, ___internal__method);
}
// Autogenerated method: ProfanityFilter/<GetLookalikeLetters>d__4.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProfanityFilter::$GetLookalikeLetters$d__4::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ProfanityFilter::$GetLookalikeLetters$d__4::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::$GetLookalikeLetters$d__4::*)(int)>(&ProfanityFilter::$GetLookalikeLetters$d__4::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::$GetLookalikeLetters$d__4*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::$GetLookalikeLetters$d__4::*)(int)>(&ProfanityFilter::$GetLookalikeLetters$d__4::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::$GetLookalikeLetters$d__4*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::$GetLookalikeLetters$d__4::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::$GetLookalikeLetters$d__4::*)()>(&ProfanityFilter::$GetLookalikeLetters$d__4::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::$GetLookalikeLetters$d__4*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::$GetLookalikeLetters$d__4::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::$GetLookalikeLetters$d__4::*)()>(&ProfanityFilter::$GetLookalikeLetters$d__4::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::$GetLookalikeLetters$d__4*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_Generic_IEnumerator$System_Char$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Char>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (ProfanityFilter::$GetLookalikeLetters$d__4::*)()>(&ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_Generic_IEnumerator$System_Char$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::$GetLookalikeLetters$d__4*), "System.Collections.Generic.IEnumerator<System.Char>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::$GetLookalikeLetters$d__4::*)()>(&ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::$GetLookalikeLetters$d__4*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ProfanityFilter::$GetLookalikeLetters$d__4::*)()>(&ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::$GetLookalikeLetters$d__4*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_Generic_IEnumerable$System_Char$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<::Il2CppChar>* (ProfanityFilter::$GetLookalikeLetters$d__4::*)()>(&ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_Generic_IEnumerable$System_Char$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::$GetLookalikeLetters$d__4*), "System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (ProfanityFilter::$GetLookalikeLetters$d__4::*)()>(&ProfanityFilter::$GetLookalikeLetters$d__4::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::$GetLookalikeLetters$d__4*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RemoteProcedureCall
#include "GlobalNamespace/RemoteProcedureCall.hpp"
// Including type: RemoteProcedureCall/TypeWrapper`1
#include "GlobalNamespace/RemoteProcedureCall_TypeWrapper_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RemoteProcedureCall.get_syncTime
float GlobalNamespace::RemoteProcedureCall::get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RemoteProcedureCall::get_syncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RemoteProcedureCall.set_syncTime
void GlobalNamespace::RemoteProcedureCall::set_syncTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RemoteProcedureCall::set_syncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RemoteProcedureCall.SerializeData
void GlobalNamespace::RemoteProcedureCall::SerializeData(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RemoteProcedureCall::SerializeData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: RemoteProcedureCall.DeserializeData
void GlobalNamespace::RemoteProcedureCall::DeserializeData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RemoteProcedureCall::DeserializeData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeserializeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: RemoteProcedureCall.LiteNetLib.Utils.INetSerializable.Serialize
void GlobalNamespace::RemoteProcedureCall::LiteNetLib_Utils_INetSerializable_Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RemoteProcedureCall::LiteNetLib.Utils.INetSerializable.Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetSerializable.Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: RemoteProcedureCall.LiteNetLib.Utils.INetSerializable.Deserialize
void GlobalNamespace::RemoteProcedureCall::LiteNetLib_Utils_INetSerializable_Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RemoteProcedureCall::LiteNetLib.Utils.INetSerializable.Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetSerializable.Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: RemoteProcedureCall.Release
void GlobalNamespace::RemoteProcedureCall::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RemoteProcedureCall::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RemoteProcedureCall.Init
GlobalNamespace::IRemoteProcedureCall* GlobalNamespace::RemoteProcedureCall::Init(float syncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RemoteProcedureCall::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IRemoteProcedureCall*, false>(this, ___internal__method, syncTime);
}
// Writing MetadataGetter for method: RemoteProcedureCall::get_syncTime
// Il2CppName: get_syncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (RemoteProcedureCall::*)()>(&RemoteProcedureCall::get_syncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteProcedureCall*), "get_syncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RemoteProcedureCall::set_syncTime
// Il2CppName: set_syncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteProcedureCall::*)(float)>(&RemoteProcedureCall::set_syncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteProcedureCall*), "set_syncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: RemoteProcedureCall::SerializeData
// Il2CppName: SerializeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteProcedureCall::*)(LiteNetLib::Utils::NetDataWriter*)>(&RemoteProcedureCall::SerializeData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteProcedureCall*), "SerializeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: RemoteProcedureCall::DeserializeData
// Il2CppName: DeserializeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteProcedureCall::*)(LiteNetLib::Utils::NetDataReader*)>(&RemoteProcedureCall::DeserializeData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteProcedureCall*), "DeserializeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: RemoteProcedureCall::LiteNetLib_Utils_INetSerializable_Serialize
// Il2CppName: LiteNetLib.Utils.INetSerializable.Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteProcedureCall::*)(LiteNetLib::Utils::NetDataWriter*)>(&RemoteProcedureCall::LiteNetLib_Utils_INetSerializable_Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteProcedureCall*), "LiteNetLib.Utils.INetSerializable.Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: RemoteProcedureCall::LiteNetLib_Utils_INetSerializable_Deserialize
// Il2CppName: LiteNetLib.Utils.INetSerializable.Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteProcedureCall::*)(LiteNetLib::Utils::NetDataReader*)>(&RemoteProcedureCall::LiteNetLib_Utils_INetSerializable_Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteProcedureCall*), "LiteNetLib.Utils.INetSerializable.Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: RemoteProcedureCall::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteProcedureCall::*)()>(&RemoteProcedureCall::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteProcedureCall*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RemoteProcedureCall::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IRemoteProcedureCall* (RemoteProcedureCall::*)(float)>(&RemoteProcedureCall::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteProcedureCall*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: RemoteProcedureCall::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteProcedureCall::*)()>(&RemoteProcedureCall::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteProcedureCall*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RemoteProcedureCall::*)()>(&RemoteProcedureCall::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RemoteProcedureCall*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RollingAverage
#include "GlobalNamespace/RollingAverage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int64 kGranularity
int64_t GlobalNamespace::RollingAverage::_get_kGranularity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RollingAverage::_get_kGranularity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "RollingAverage", "kGranularity"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kGranularity
void GlobalNamespace::RollingAverage::_set_kGranularity(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RollingAverage::_set_kGranularity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RollingAverage", "kGranularity", value));
}
// Autogenerated method: RollingAverage.get_currentAverage
float GlobalNamespace::RollingAverage::get_currentAverage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RollingAverage::get_currentAverage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentAverage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RollingAverage.get_hasValue
bool GlobalNamespace::RollingAverage::get_hasValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RollingAverage::get_hasValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RollingAverage.Update
void GlobalNamespace::RollingAverage::Update(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RollingAverage::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RollingAverage.Reset
void GlobalNamespace::RollingAverage::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RollingAverage::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RollingAverage::get_currentAverage
// Il2CppName: get_currentAverage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (RollingAverage::*)()>(&RollingAverage::get_currentAverage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RollingAverage*), "get_currentAverage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RollingAverage::get_hasValue
// Il2CppName: get_hasValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RollingAverage::*)()>(&RollingAverage::get_hasValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RollingAverage*), "get_hasValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RollingAverage::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RollingAverage::*)(int)>(&RollingAverage::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RollingAverage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RollingAverage::*)(int)>(&RollingAverage::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RollingAverage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: RollingAverage::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RollingAverage::*)(float)>(&RollingAverage::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RollingAverage*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: RollingAverage::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RollingAverage::*)()>(&RollingAverage::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RollingAverage*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RpcPool
#include "GlobalNamespace/RpcPool.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: IPacketPool
#include "GlobalNamespace/IPacketPool.hpp"
// Including type: IRemoteProcedureCall
#include "GlobalNamespace/IRemoteProcedureCall.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [ThreadStaticAttribute] Offset: 0xDF0FA0
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Type,IPacketPool> _pools
System::Collections::Generic::Dictionary_2<System::Type*, GlobalNamespace::IPacketPool*>* GlobalNamespace::RpcPool::_get__pools() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcPool::_get__pools");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, GlobalNamespace::IPacketPool*>*>("", "RpcPool", "_pools")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Type,IPacketPool> _pools
void GlobalNamespace::RpcPool::_set__pools(System::Collections::Generic::Dictionary_2<System::Type*, GlobalNamespace::IPacketPool*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcPool::_set__pools");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RpcPool", "_pools", value));
}
// Autogenerated method: RpcPool.Release
void GlobalNamespace::RpcPool::Release(GlobalNamespace::IRemoteProcedureCall* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcPool::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RpcPool", "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Writing MetadataGetter for method: RpcPool::Obtain
// Il2CppName: Obtain
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: RpcPool::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::IRemoteProcedureCall*)>(&RpcPool::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RpcPool*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IRemoteProcedureCall*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SceneStartHandler
#include "GlobalNamespace/SceneStartHandler.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: PlayersSpecificSettingsAtGameStartModel
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: PlayerSpecificSettingsNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsNetSerializable.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: PlayerSpecificSettingsAtStartNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsAtStartNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SceneStartHandler.add_sceneSetupDidFinishEvent
void GlobalNamespace::SceneStartHandler::add_sceneSetupDidFinishEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::add_sceneSetupDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_sceneSetupDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SceneStartHandler.remove_sceneSetupDidFinishEvent
void GlobalNamespace::SceneStartHandler::remove_sceneSetupDidFinishEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::remove_sceneSetupDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_sceneSetupDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SceneStartHandler.add_sceneSetupDidReceiveTooLateEvent
void GlobalNamespace::SceneStartHandler::add_sceneSetupDidReceiveTooLateEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::add_sceneSetupDidReceiveTooLateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_sceneSetupDidReceiveTooLateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SceneStartHandler.remove_sceneSetupDidReceiveTooLateEvent
void GlobalNamespace::SceneStartHandler::remove_sceneSetupDidReceiveTooLateEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::remove_sceneSetupDidReceiveTooLateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_sceneSetupDidReceiveTooLateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SceneStartHandler.Dispose
void GlobalNamespace::SceneStartHandler::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneStartHandler.GetSceneLoadStatus
void GlobalNamespace::SceneStartHandler::GetSceneLoadStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::GetSceneLoadStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSceneLoadStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneStartHandler.ForceStart
void GlobalNamespace::SceneStartHandler::ForceStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::ForceStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneStartHandler.HandleSetGameplaySceneReady
void GlobalNamespace::SceneStartHandler::HandleSetGameplaySceneReady(::Il2CppString* userId, GlobalNamespace::PlayerSpecificSettingsNetSerializable* playerSpecificSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::HandleSetGameplaySceneReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSetGameplaySceneReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(playerSpecificSettings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, playerSpecificSettings);
}
// Autogenerated method: SceneStartHandler.HandleGetGameplaySceneReady
void GlobalNamespace::SceneStartHandler::HandleGetGameplaySceneReady(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::HandleGetGameplaySceneReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGetGameplaySceneReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: SceneStartHandler.HandleSetGameplaySceneSyncFinished
void GlobalNamespace::SceneStartHandler::HandleSetGameplaySceneSyncFinished(::Il2CppString* userId, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStart, ::Il2CppString* sessionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::HandleSetGameplaySceneSyncFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSetGameplaySceneSyncFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(playersAtGameStart), ::il2cpp_utils::ExtractType(sessionId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, playersAtGameStart, sessionId);
}
// Autogenerated method: SceneStartHandler.HandleSetPlayerDidConnectLate
void GlobalNamespace::SceneStartHandler::HandleSetPlayerDidConnectLate(::Il2CppString* userId, ::Il2CppString* failedUserId, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStart, ::Il2CppString* sessionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::HandleSetPlayerDidConnectLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSetPlayerDidConnectLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(failedUserId), ::il2cpp_utils::ExtractType(playersAtGameStart), ::il2cpp_utils::ExtractType(sessionId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, failedUserId, playersAtGameStart, sessionId);
}
// Autogenerated method: SceneStartHandler.AddPlayerSpecificSettingsToDictionary
void GlobalNamespace::SceneStartHandler::AddPlayerSpecificSettingsToDictionary(GlobalNamespace::PlayerSpecificSettingsNetSerializable* playerSpecificSettingsNetSerializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::AddPlayerSpecificSettingsToDictionary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPlayerSpecificSettingsToDictionary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerSpecificSettingsNetSerializable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playerSpecificSettingsNetSerializable);
}
// Autogenerated method: SceneStartHandler.CreatePlayersSpecificSettingsAtGameStartData
GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* GlobalNamespace::SceneStartHandler::CreatePlayersSpecificSettingsAtGameStartData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartHandler::CreatePlayersSpecificSettingsAtGameStartData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayersSpecificSettingsAtGameStartData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SceneStartHandler::add_sceneSetupDidFinishEvent
// Il2CppName: add_sceneSetupDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(System::Action_1<::Il2CppString*>*)>(&SceneStartHandler::add_sceneSetupDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "add_sceneSetupDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::remove_sceneSetupDidFinishEvent
// Il2CppName: remove_sceneSetupDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(System::Action_1<::Il2CppString*>*)>(&SceneStartHandler::remove_sceneSetupDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "remove_sceneSetupDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::add_sceneSetupDidReceiveTooLateEvent
// Il2CppName: add_sceneSetupDidReceiveTooLateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(System::Action_1<::Il2CppString*>*)>(&SceneStartHandler::add_sceneSetupDidReceiveTooLateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "add_sceneSetupDidReceiveTooLateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::remove_sceneSetupDidReceiveTooLateEvent
// Il2CppName: remove_sceneSetupDidReceiveTooLateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(System::Action_1<::Il2CppString*>*)>(&SceneStartHandler::remove_sceneSetupDidReceiveTooLateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "remove_sceneSetupDidReceiveTooLateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(GlobalNamespace::IMultiplayerSessionManager*, GlobalNamespace::IGameplayRpcManager*, GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*)>(&SceneStartHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IGameplayRpcManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(GlobalNamespace::IMultiplayerSessionManager*, GlobalNamespace::IGameplayRpcManager*, GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*)>(&SceneStartHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IGameplayRpcManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*>()});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)()>(&SceneStartHandler::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::GetSceneLoadStatus
// Il2CppName: GetSceneLoadStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)()>(&SceneStartHandler::GetSceneLoadStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "GetSceneLoadStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::ForceStart
// Il2CppName: ForceStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)()>(&SceneStartHandler::ForceStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "ForceStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::HandleSetGameplaySceneReady
// Il2CppName: HandleSetGameplaySceneReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*)>(&SceneStartHandler::HandleSetGameplaySceneReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "HandleSetGameplaySceneReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::HandleGetGameplaySceneReady
// Il2CppName: HandleGetGameplaySceneReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(::Il2CppString*)>(&SceneStartHandler::HandleGetGameplaySceneReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "HandleGetGameplaySceneReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::HandleSetGameplaySceneSyncFinished
// Il2CppName: HandleSetGameplaySceneSyncFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*)>(&SceneStartHandler::HandleSetGameplaySceneSyncFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "HandleSetGameplaySceneSyncFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::HandleSetPlayerDidConnectLate
// Il2CppName: HandleSetPlayerDidConnectLate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*)>(&SceneStartHandler::HandleSetPlayerDidConnectLate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "HandleSetPlayerDidConnectLate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::AddPlayerSpecificSettingsToDictionary
// Il2CppName: AddPlayerSpecificSettingsToDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartHandler::*)(GlobalNamespace::PlayerSpecificSettingsNetSerializable*)>(&SceneStartHandler::AddPlayerSpecificSettingsToDictionary)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "AddPlayerSpecificSettingsToDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: SceneStartHandler::CreatePlayersSpecificSettingsAtGameStartData
// Il2CppName: CreatePlayersSpecificSettingsAtGameStartData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* (SceneStartHandler::*)()>(&SceneStartHandler::CreatePlayersSpecificSettingsAtGameStartData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartHandler*), "CreatePlayersSpecificSettingsAtGameStartData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SecureRandomProvider
#include "GlobalNamespace/SecureRandomProvider.hpp"
// Including type: SecureRandomProvider/SecureRandomState
#include "GlobalNamespace/SecureRandomProvider_SecureRandomState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SecureRandomProvider/SecureRandomState _secureRandomState
GlobalNamespace::SecureRandomProvider::SecureRandomState* GlobalNamespace::SecureRandomProvider::_get__secureRandomState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::_get__secureRandomState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SecureRandomProvider::SecureRandomState*>("", "SecureRandomProvider", "_secureRandomState"));
}
// Autogenerated static field setter
// Set static field: static private SecureRandomProvider/SecureRandomState _secureRandomState
void GlobalNamespace::SecureRandomProvider::_set__secureRandomState(GlobalNamespace::SecureRandomProvider::SecureRandomState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::_set__secureRandomState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SecureRandomProvider", "_secureRandomState", value));
}
// Autogenerated method: SecureRandomProvider.GetBytes
::Array<uint8_t>* GlobalNamespace::SecureRandomProvider::GetBytes(int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SecureRandomProvider", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, length);
}
// Autogenerated method: SecureRandomProvider.GetByte
uint8_t GlobalNamespace::SecureRandomProvider::GetByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::GetByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SecureRandomProvider", "GetByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SecureRandomProvider.GetBytes
void GlobalNamespace::SecureRandomProvider::GetBytes(::Array<uint8_t>* buffer, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SecureRandomProvider", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, buffer, offset, length);
}
// Autogenerated method: SecureRandomProvider.GetBytes
void GlobalNamespace::SecureRandomProvider::GetBytes(::Array<uint8_t>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SecureRandomProvider", "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, buffer);
}
// Autogenerated method: SecureRandomProvider..cctor
void GlobalNamespace::SecureRandomProvider::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SecureRandomProvider", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SecureRandomProvider::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(int)>(&SecureRandomProvider::GetBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandomProvider*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SecureRandomProvider::GetByte
// Il2CppName: GetByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)()>(&SecureRandomProvider::GetByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandomProvider*), "GetByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureRandomProvider::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, int, int)>(&SecureRandomProvider::GetBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandomProvider*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SecureRandomProvider::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*)>(&SecureRandomProvider::GetBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandomProvider*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: SecureRandomProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SecureRandomProvider::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandomProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SecureRandomProvider/SecureRandomState
#include "GlobalNamespace/SecureRandomProvider_SecureRandomState.hpp"
// Including type: System.Security.Cryptography.RNGCryptoServiceProvider
#include "System/Security/Cryptography/RNGCryptoServiceProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kBufferSize
int GlobalNamespace::SecureRandomProvider::SecureRandomState::_get_kBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::SecureRandomState::_get_kBufferSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SecureRandomProvider/SecureRandomState", "kBufferSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kBufferSize
void GlobalNamespace::SecureRandomProvider::SecureRandomState::_set_kBufferSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::SecureRandomState::_set_kBufferSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SecureRandomProvider/SecureRandomState", "kBufferSize", value));
}
// Autogenerated method: SecureRandomProvider/SecureRandomState.GetBytes
void GlobalNamespace::SecureRandomProvider::SecureRandomState::GetBytes(::Array<uint8_t>* buffer, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::SecureRandomState::GetBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, offset, length);
}
// Autogenerated method: SecureRandomProvider/SecureRandomState.GetByte
uint8_t GlobalNamespace::SecureRandomProvider::SecureRandomState::GetByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::SecureRandomState::GetByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: SecureRandomProvider/SecureRandomState.FillBuffer
void GlobalNamespace::SecureRandomProvider::SecureRandomState::FillBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::SecureRandomState::FillBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SecureRandomProvider::SecureRandomState::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureRandomProvider::SecureRandomState::*)(::Array<uint8_t>*, int, int)>(&SecureRandomProvider::SecureRandomState::GetBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandomProvider::SecureRandomState*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SecureRandomProvider::SecureRandomState::GetByte
// Il2CppName: GetByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (SecureRandomProvider::SecureRandomState::*)()>(&SecureRandomProvider::SecureRandomState::GetByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandomProvider::SecureRandomState*), "GetByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureRandomProvider::SecureRandomState::FillBuffer
// Il2CppName: FillBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureRandomProvider::SecureRandomState::*)()>(&SecureRandomProvider::SecureRandomState::FillBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandomProvider::SecureRandomState*), "FillBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureRandomProvider::SecureRandomState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureRandomProvider::SecureRandomState::*)()>(&SecureRandomProvider::SecureRandomState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandomProvider::SecureRandomState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureRandomProvider::SecureRandomState::*)()>(&SecureRandomProvider::SecureRandomState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandomProvider::SecureRandomState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SmallBufferPool
#include "GlobalNamespace/SmallBufferPool.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kCacheSmallSize
int GlobalNamespace::SmallBufferPool::_get_kCacheSmallSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_get_kCacheSmallSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SmallBufferPool", "kCacheSmallSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kCacheSmallSize
void GlobalNamespace::SmallBufferPool::_set_kCacheSmallSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_set_kCacheSmallSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SmallBufferPool", "kCacheSmallSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kCacheMediumSize
int GlobalNamespace::SmallBufferPool::_get_kCacheMediumSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_get_kCacheMediumSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SmallBufferPool", "kCacheMediumSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kCacheMediumSize
void GlobalNamespace::SmallBufferPool::_set_kCacheMediumSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_set_kCacheMediumSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SmallBufferPool", "kCacheMediumSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kCacheLargeSize
int GlobalNamespace::SmallBufferPool::_get_kCacheLargeSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_get_kCacheLargeSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SmallBufferPool", "kCacheLargeSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kCacheLargeSize
void GlobalNamespace::SmallBufferPool::_set_kCacheLargeSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_set_kCacheLargeSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SmallBufferPool", "kCacheLargeSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kCacheMaxSize
int GlobalNamespace::SmallBufferPool::_get_kCacheMaxSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_get_kCacheMaxSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SmallBufferPool", "kCacheMaxSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kCacheMaxSize
void GlobalNamespace::SmallBufferPool::_set_kCacheMaxSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_set_kCacheMaxSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SmallBufferPool", "kCacheMaxSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kCacheSmallMaxCapacity
int GlobalNamespace::SmallBufferPool::_get_kCacheSmallMaxCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_get_kCacheSmallMaxCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SmallBufferPool", "kCacheSmallMaxCapacity"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kCacheSmallMaxCapacity
void GlobalNamespace::SmallBufferPool::_set_kCacheSmallMaxCapacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_set_kCacheSmallMaxCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SmallBufferPool", "kCacheSmallMaxCapacity", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kCacheMediumMaxCapacity
int GlobalNamespace::SmallBufferPool::_get_kCacheMediumMaxCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_get_kCacheMediumMaxCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SmallBufferPool", "kCacheMediumMaxCapacity"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kCacheMediumMaxCapacity
void GlobalNamespace::SmallBufferPool::_set_kCacheMediumMaxCapacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_set_kCacheMediumMaxCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SmallBufferPool", "kCacheMediumMaxCapacity", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kCacheLargeMaxCapacity
int GlobalNamespace::SmallBufferPool::_get_kCacheLargeMaxCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_get_kCacheLargeMaxCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SmallBufferPool", "kCacheLargeMaxCapacity"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kCacheLargeMaxCapacity
void GlobalNamespace::SmallBufferPool::_set_kCacheLargeMaxCapacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_set_kCacheLargeMaxCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SmallBufferPool", "kCacheLargeMaxCapacity", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kCacheMaxMaxCapacity
int GlobalNamespace::SmallBufferPool::_get_kCacheMaxMaxCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_get_kCacheMaxMaxCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SmallBufferPool", "kCacheMaxMaxCapacity"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kCacheMaxMaxCapacity
void GlobalNamespace::SmallBufferPool::_set_kCacheMaxMaxCapacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::_set_kCacheMaxMaxCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SmallBufferPool", "kCacheMaxMaxCapacity", value));
}
// Autogenerated method: SmallBufferPool.GetBuffer
::Array<uint8_t>* GlobalNamespace::SmallBufferPool::GetBuffer(int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::GetBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, length);
}
// Autogenerated method: SmallBufferPool.ReleaseBuffer
void GlobalNamespace::SmallBufferPool::ReleaseBuffer(::Array<uint8_t>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmallBufferPool::ReleaseBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer);
}
// Writing MetadataGetter for method: SmallBufferPool::GetBuffer
// Il2CppName: GetBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (SmallBufferPool::*)(int)>(&SmallBufferPool::GetBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmallBufferPool*), "GetBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SmallBufferPool::ReleaseBuffer
// Il2CppName: ReleaseBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmallBufferPool::*)(::Array<uint8_t>*)>(&SmallBufferPool::ReleaseBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmallBufferPool*), "ReleaseBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: SmallBufferPool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmallBufferPool::*)()>(&SmallBufferPool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmallBufferPool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SmallBufferPool::*)()>(&SmallBufferPool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SmallBufferPool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongStartHandler
#include "GlobalNamespace/SongStartHandler.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: PlayersSpecificSettingsAtGameStartModel
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kFixedStartDelay
float GlobalNamespace::SongStartHandler::_get_kFixedStartDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::_get_kFixedStartDelay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SongStartHandler", "kFixedStartDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kFixedStartDelay
void GlobalNamespace::SongStartHandler::_set_kFixedStartDelay(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::_set_kFixedStartDelay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongStartHandler", "kFixedStartDelay", value));
}
// Autogenerated method: SongStartHandler.get_songStartSyncTime
float GlobalNamespace::SongStartHandler::get_songStartSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::get_songStartSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songStartSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SongStartHandler.add_setSongStartSyncTimeEvent
void GlobalNamespace::SongStartHandler::add_setSongStartSyncTimeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::add_setSongStartSyncTimeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setSongStartSyncTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongStartHandler.remove_setSongStartSyncTimeEvent
void GlobalNamespace::SongStartHandler::remove_setSongStartSyncTimeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::remove_setSongStartSyncTimeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setSongStartSyncTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongStartHandler.GetLevelStartTimeOffset
void GlobalNamespace::SongStartHandler::GetLevelStartTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::GetLevelStartTimeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLevelStartTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongStartHandler.Dispose
void GlobalNamespace::SongStartHandler::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongStartHandler.ForceStart
void GlobalNamespace::SongStartHandler::ForceStart(::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::ForceStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sessionGameId);
}
// Autogenerated method: SongStartHandler.StartSong
void GlobalNamespace::SongStartHandler::StartSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::StartSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongStartHandler.HandleSetGameplaySongReady
void GlobalNamespace::SongStartHandler::HandleSetGameplaySongReady(::Il2CppString* user) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::HandleSetGameplaySongReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSetGameplaySongReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(user)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, user);
}
// Autogenerated method: SongStartHandler.HandleGetGameplaySongReady
void GlobalNamespace::SongStartHandler::HandleGetGameplaySongReady(::Il2CppString* user) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::HandleGetGameplaySongReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGetGameplaySongReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(user)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, user);
}
// Autogenerated method: SongStartHandler.HandleSetSongStartTime
void GlobalNamespace::SongStartHandler::HandleSetSongStartTime(::Il2CppString* user, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::HandleSetSongStartTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSetSongStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(user), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, user, time);
}
// Autogenerated method: SongStartHandler.Log
void GlobalNamespace::SongStartHandler::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartHandler::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Writing MetadataGetter for method: SongStartHandler::get_songStartSyncTime
// Il2CppName: get_songStartSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SongStartHandler::*)()>(&SongStartHandler::get_songStartSyncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "get_songStartSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongStartHandler::add_setSongStartSyncTimeEvent
// Il2CppName: add_setSongStartSyncTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)(System::Action_1<float>*)>(&SongStartHandler::add_setSongStartSyncTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "add_setSongStartSyncTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: SongStartHandler::remove_setSongStartSyncTimeEvent
// Il2CppName: remove_setSongStartSyncTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)(System::Action_1<float>*)>(&SongStartHandler::remove_setSongStartSyncTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "remove_setSongStartSyncTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: SongStartHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)(GlobalNamespace::IMultiplayerSessionManager*, GlobalNamespace::IGameplayRpcManager*, GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*)>(&SongStartHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IGameplayRpcManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)(GlobalNamespace::IMultiplayerSessionManager*, GlobalNamespace::IGameplayRpcManager*, GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*)>(&SongStartHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IGameplayRpcManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*>()});
  }
};
// Writing MetadataGetter for method: SongStartHandler::GetLevelStartTimeOffset
// Il2CppName: GetLevelStartTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)()>(&SongStartHandler::GetLevelStartTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "GetLevelStartTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongStartHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)()>(&SongStartHandler::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongStartHandler::ForceStart
// Il2CppName: ForceStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)(::Il2CppString*)>(&SongStartHandler::ForceStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "ForceStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SongStartHandler::StartSong
// Il2CppName: StartSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)()>(&SongStartHandler::StartSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "StartSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongStartHandler::HandleSetGameplaySongReady
// Il2CppName: HandleSetGameplaySongReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)(::Il2CppString*)>(&SongStartHandler::HandleSetGameplaySongReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "HandleSetGameplaySongReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SongStartHandler::HandleGetGameplaySongReady
// Il2CppName: HandleGetGameplaySongReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)(::Il2CppString*)>(&SongStartHandler::HandleGetGameplaySongReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "HandleGetGameplaySongReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SongStartHandler::HandleSetSongStartTime
// Il2CppName: HandleSetSongStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)(::Il2CppString*, float)>(&SongStartHandler::HandleSetSongStartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "HandleSetSongStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SongStartHandler::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartHandler::*)(::Il2CppString*)>(&SongStartHandler::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartHandler*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SortExtensions
#include "GlobalNamespace/SortExtensions.hpp"
// Including type: SortExtensions/<>c__DisplayClass1_0`1
#include "GlobalNamespace/SortExtensions_--c__DisplayClass1_0_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SortExtensions::InsertSorted
// Il2CppName: InsertSorted
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: SortExtensions::Sort
// Il2CppName: Sort
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandaloneMonobehavior
#include "GlobalNamespace/StandaloneMonobehavior.hpp"
// Including type: StandaloneMonobehavior/<AfterOneFrame>d__18
#include "GlobalNamespace/StandaloneMonobehavior_-AfterOneFrame-d__18.hpp"
// Including type: StandaloneMonobehavior/<RunAsyncCoroutine>d__21
#include "GlobalNamespace/StandaloneMonobehavior_-RunAsyncCoroutine-d__21.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandaloneMonobehavior.get_objectLifeTime
float GlobalNamespace::StandaloneMonobehavior::get_objectLifeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::get_objectLifeTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_objectLifeTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior.get_deltaTime
float GlobalNamespace::StandaloneMonobehavior::get_deltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::get_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior.get_lastFrameTime
float GlobalNamespace::StandaloneMonobehavior::get_lastFrameTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::get_lastFrameTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastFrameTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior.get_isReady
bool GlobalNamespace::StandaloneMonobehavior::get_isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::get_isReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior.Awake
void GlobalNamespace::StandaloneMonobehavior::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior.Start
void GlobalNamespace::StandaloneMonobehavior::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior.Update
void GlobalNamespace::StandaloneMonobehavior::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::Update");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior.OnDestroy
void GlobalNamespace::StandaloneMonobehavior::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior.OnApplicationPause
void GlobalNamespace::StandaloneMonobehavior::OnApplicationPause(bool pauseStatus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::OnApplicationPause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pauseStatus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pauseStatus);
}
// Autogenerated method: StandaloneMonobehavior.WhenReady
void GlobalNamespace::StandaloneMonobehavior::WhenReady(System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::WhenReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WhenReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: StandaloneMonobehavior.AfterOneFrame
System::Collections::IEnumerator* GlobalNamespace::StandaloneMonobehavior::AfterOneFrame(System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::AfterOneFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AfterOneFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, action);
}
// Autogenerated method: StandaloneMonobehavior.RunAsync
System::Threading::Tasks::Task* GlobalNamespace::StandaloneMonobehavior::RunAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::RunAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: StandaloneMonobehavior.RunAsyncCoroutine
System::Collections::IEnumerator* GlobalNamespace::StandaloneMonobehavior::RunAsyncCoroutine(System::Threading::Tasks::TaskCompletionSource_1<bool>* tcs, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::RunAsyncCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunAsyncCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcs), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, tcs, cancellationToken);
}
// Autogenerated method: StandaloneMonobehavior.GetLastFrameTime
float GlobalNamespace::StandaloneMonobehavior::GetLastFrameTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::GetLastFrameTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastFrameTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandaloneMonobehavior::get_objectLifeTime
// Il2CppName: get_objectLifeTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::get_objectLifeTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "get_objectLifeTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::get_deltaTime
// Il2CppName: get_deltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::get_deltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "get_deltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::get_lastFrameTime
// Il2CppName: get_lastFrameTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::get_lastFrameTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "get_lastFrameTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::get_isReady
// Il2CppName: get_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::get_isReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "get_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::*)(bool)>(&StandaloneMonobehavior::OnApplicationPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::WhenReady
// Il2CppName: WhenReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::*)(System::Action*)>(&StandaloneMonobehavior::WhenReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "WhenReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::AfterOneFrame
// Il2CppName: AfterOneFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (StandaloneMonobehavior::*)(System::Action*)>(&StandaloneMonobehavior::AfterOneFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "AfterOneFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::Create
// Il2CppName: Create
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: StandaloneMonobehavior::RunAsync
// Il2CppName: RunAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (StandaloneMonobehavior::*)(System::Threading::CancellationToken)>(&StandaloneMonobehavior::RunAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "RunAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::RunAsyncCoroutine
// Il2CppName: RunAsyncCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (StandaloneMonobehavior::*)(System::Threading::Tasks::TaskCompletionSource_1<bool>*, System::Threading::CancellationToken)>(&StandaloneMonobehavior::RunAsyncCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "RunAsyncCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::TaskCompletionSource_1<bool>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::GetLastFrameTime
// Il2CppName: GetLastFrameTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::GetLastFrameTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), "GetLastFrameTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::*)()>(&StandaloneMonobehavior::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandaloneMonobehavior/<AfterOneFrame>d__18
#include "GlobalNamespace/StandaloneMonobehavior_-AfterOneFrame-d__18.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandaloneMonobehavior/<AfterOneFrame>d__18.System.IDisposable.Dispose
void GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__18::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__18::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior/<AfterOneFrame>d__18.MoveNext
bool GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__18::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__18::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior/<AfterOneFrame>d__18.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__18::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__18::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior/<AfterOneFrame>d__18.System.Collections.IEnumerator.Reset
void GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__18::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__18::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior/<AfterOneFrame>d__18.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__18::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__18::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandaloneMonobehavior::$AfterOneFrame$d__18::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::$AfterOneFrame$d__18::*)(int)>(&StandaloneMonobehavior::$AfterOneFrame$d__18::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$AfterOneFrame$d__18*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::$AfterOneFrame$d__18::*)(int)>(&StandaloneMonobehavior::$AfterOneFrame$d__18::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$AfterOneFrame$d__18*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::$AfterOneFrame$d__18::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::$AfterOneFrame$d__18::*)()>(&StandaloneMonobehavior::$AfterOneFrame$d__18::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$AfterOneFrame$d__18*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::$AfterOneFrame$d__18::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StandaloneMonobehavior::$AfterOneFrame$d__18::*)()>(&StandaloneMonobehavior::$AfterOneFrame$d__18::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$AfterOneFrame$d__18*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::$AfterOneFrame$d__18::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (StandaloneMonobehavior::$AfterOneFrame$d__18::*)()>(&StandaloneMonobehavior::$AfterOneFrame$d__18::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$AfterOneFrame$d__18*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::$AfterOneFrame$d__18::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::$AfterOneFrame$d__18::*)()>(&StandaloneMonobehavior::$AfterOneFrame$d__18::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$AfterOneFrame$d__18*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::$AfterOneFrame$d__18::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (StandaloneMonobehavior::$AfterOneFrame$d__18::*)()>(&StandaloneMonobehavior::$AfterOneFrame$d__18::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$AfterOneFrame$d__18*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandaloneMonobehavior/<RunAsyncCoroutine>d__21
#include "GlobalNamespace/StandaloneMonobehavior_-RunAsyncCoroutine-d__21.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandaloneMonobehavior/<RunAsyncCoroutine>d__21.System.IDisposable.Dispose
void GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior/<RunAsyncCoroutine>d__21.MoveNext
bool GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__21::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior/<RunAsyncCoroutine>d__21.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior/<RunAsyncCoroutine>d__21.System.Collections.IEnumerator.Reset
void GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandaloneMonobehavior/<RunAsyncCoroutine>d__21.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandaloneMonobehavior::$RunAsyncCoroutine$d__21::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::$RunAsyncCoroutine$d__21::*)(int)>(&StandaloneMonobehavior::$RunAsyncCoroutine$d__21::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$RunAsyncCoroutine$d__21*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::$RunAsyncCoroutine$d__21::*)(int)>(&StandaloneMonobehavior::$RunAsyncCoroutine$d__21::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$RunAsyncCoroutine$d__21*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::$RunAsyncCoroutine$d__21::*)()>(&StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$RunAsyncCoroutine$d__21*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::$RunAsyncCoroutine$d__21::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StandaloneMonobehavior::$RunAsyncCoroutine$d__21::*)()>(&StandaloneMonobehavior::$RunAsyncCoroutine$d__21::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$RunAsyncCoroutine$d__21*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (StandaloneMonobehavior::$RunAsyncCoroutine$d__21::*)()>(&StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$RunAsyncCoroutine$d__21*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandaloneMonobehavior::$RunAsyncCoroutine$d__21::*)()>(&StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$RunAsyncCoroutine$d__21*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (StandaloneMonobehavior::$RunAsyncCoroutine$d__21::*)()>(&StandaloneMonobehavior::$RunAsyncCoroutine$d__21::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandaloneMonobehavior::$RunAsyncCoroutine$d__21*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NodePoseSyncState
#include "GlobalNamespace/NodePoseSyncState.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NodePoseSyncState.Serialize
void GlobalNamespace::NodePoseSyncState::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: NodePoseSyncState.Deserialize
void GlobalNamespace::NodePoseSyncState::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Autogenerated method: NodePoseSyncState.SetState
void GlobalNamespace::NodePoseSyncState::SetState(GlobalNamespace::NodePoseSyncState_NodePose nodePose, GlobalNamespace::PoseSerializable pose) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::SetState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodePose), ::il2cpp_utils::ExtractType(pose)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, nodePose, pose);
}
// Autogenerated method: NodePoseSyncState.GetState
GlobalNamespace::PoseSerializable GlobalNamespace::NodePoseSyncState::GetState(GlobalNamespace::NodePoseSyncState_NodePose nodePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::GetState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodePose)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PoseSerializable, false>(*this, ___internal__method, nodePose);
}
// Autogenerated method: NodePoseSyncState.Equals
bool GlobalNamespace::NodePoseSyncState::Equals(GlobalNamespace::NodePoseSyncState& other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: NodePoseSyncState.GetDelta
GlobalNamespace::NodePoseSyncState GlobalNamespace::NodePoseSyncState::GetDelta(GlobalNamespace::NodePoseSyncState& latest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::GetDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(latest)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NodePoseSyncState, false>(*this, ___internal__method, latest);
}
// Autogenerated method: NodePoseSyncState.ApplyDelta
GlobalNamespace::NodePoseSyncState GlobalNamespace::NodePoseSyncState::ApplyDelta(GlobalNamespace::NodePoseSyncState& delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::ApplyDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ApplyDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NodePoseSyncState, false>(*this, ___internal__method, delta);
}
// Autogenerated method: NodePoseSyncState.GetSize
int GlobalNamespace::NodePoseSyncState::GetSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::GetSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: NodePoseSyncState.IStateTable<NodePoseSyncState,NodePoseSyncState.NodePose,PoseSerializable>.GetDelta
GlobalNamespace::NodePoseSyncState GlobalNamespace::NodePoseSyncState::IStateTable$NodePoseSyncState_NodePoseSyncState_NodePose_PoseSerializable$_GetDelta(GlobalNamespace::NodePoseSyncState& stateTable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::IStateTable<NodePoseSyncState,NodePoseSyncState.NodePose,PoseSerializable>.GetDelta");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IStateTable<NodePoseSyncState,NodePoseSyncState.NodePose,PoseSerializable>.GetDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateTable)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NodePoseSyncState, false>(*this, ___internal__method, stateTable);
}
// Autogenerated method: NodePoseSyncState.IStateTable<NodePoseSyncState,NodePoseSyncState.NodePose,PoseSerializable>.ApplyDelta
GlobalNamespace::NodePoseSyncState GlobalNamespace::NodePoseSyncState::IStateTable$NodePoseSyncState_NodePoseSyncState_NodePose_PoseSerializable$_ApplyDelta(GlobalNamespace::NodePoseSyncState& delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::IStateTable<NodePoseSyncState,NodePoseSyncState.NodePose,PoseSerializable>.ApplyDelta");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IStateTable<NodePoseSyncState,NodePoseSyncState.NodePose,PoseSerializable>.ApplyDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NodePoseSyncState, false>(*this, ___internal__method, delta);
}
// Autogenerated method: NodePoseSyncState.IEquatableByReference<NodePoseSyncState>.Equals
bool GlobalNamespace::NodePoseSyncState::IEquatableByReference$NodePoseSyncState$_Equals(GlobalNamespace::NodePoseSyncState& other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncState::IEquatableByReference<NodePoseSyncState>.Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IEquatableByReference<NodePoseSyncState>.Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Writing MetadataGetter for method: NodePoseSyncState::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncState::*)(LiteNetLib::Utils::NetDataWriter*)>(&NodePoseSyncState::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncState::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncState::*)(LiteNetLib::Utils::NetDataReader*)>(&NodePoseSyncState::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncState::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncState::*)(GlobalNamespace::NodePoseSyncState_NodePose, GlobalNamespace::PoseSerializable)>(&NodePoseSyncState::SetState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NodePoseSyncState_NodePose>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PoseSerializable>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncState::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PoseSerializable (NodePoseSyncState::*)(GlobalNamespace::NodePoseSyncState_NodePose)>(&NodePoseSyncState::GetState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NodePoseSyncState_NodePose>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncState::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NodePoseSyncState::*)(GlobalNamespace::NodePoseSyncState&)>(&NodePoseSyncState::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NodePoseSyncState&>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncState::GetDelta
// Il2CppName: GetDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NodePoseSyncState (NodePoseSyncState::*)(GlobalNamespace::NodePoseSyncState&)>(&NodePoseSyncState::GetDelta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "GetDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NodePoseSyncState&>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncState::ApplyDelta
// Il2CppName: ApplyDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NodePoseSyncState (NodePoseSyncState::*)(GlobalNamespace::NodePoseSyncState&)>(&NodePoseSyncState::ApplyDelta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "ApplyDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NodePoseSyncState&>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncState::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NodePoseSyncState::*)()>(&NodePoseSyncState::GetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncState::IStateTable$NodePoseSyncState_NodePoseSyncState_NodePose_PoseSerializable$_GetDelta
// Il2CppName: IStateTable<NodePoseSyncState,NodePoseSyncState.NodePose,PoseSerializable>.GetDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NodePoseSyncState (NodePoseSyncState::*)(GlobalNamespace::NodePoseSyncState&)>(&NodePoseSyncState::IStateTable$NodePoseSyncState_NodePoseSyncState_NodePose_PoseSerializable$_GetDelta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "IStateTable<NodePoseSyncState,NodePoseSyncState.NodePose,PoseSerializable>.GetDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NodePoseSyncState&>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncState::IStateTable$NodePoseSyncState_NodePoseSyncState_NodePose_PoseSerializable$_ApplyDelta
// Il2CppName: IStateTable<NodePoseSyncState,NodePoseSyncState.NodePose,PoseSerializable>.ApplyDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NodePoseSyncState (NodePoseSyncState::*)(GlobalNamespace::NodePoseSyncState&)>(&NodePoseSyncState::IStateTable$NodePoseSyncState_NodePoseSyncState_NodePose_PoseSerializable$_ApplyDelta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "IStateTable<NodePoseSyncState,NodePoseSyncState.NodePose,PoseSerializable>.ApplyDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NodePoseSyncState&>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncState::IEquatableByReference$NodePoseSyncState$_Equals
// Il2CppName: IEquatableByReference<NodePoseSyncState>.Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NodePoseSyncState::*)(GlobalNamespace::NodePoseSyncState&)>(&NodePoseSyncState::IEquatableByReference$NodePoseSyncState$_Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncState), "IEquatableByReference<NodePoseSyncState>.Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NodePoseSyncState&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NodePoseSyncStateDeltaNetSerializable
#include "GlobalNamespace/NodePoseSyncStateDeltaNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly PacketPool`1<NodePoseSyncStateDeltaNetSerializable> pool
GlobalNamespace::PacketPool_1<GlobalNamespace::NodePoseSyncStateDeltaNetSerializable*>* GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::_get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::_get_pool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PacketPool_1<GlobalNamespace::NodePoseSyncStateDeltaNetSerializable*>*>("", "NodePoseSyncStateDeltaNetSerializable", "pool"));
}
// Autogenerated static field setter
// Set static field: static public readonly PacketPool`1<NodePoseSyncStateDeltaNetSerializable> pool
void GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::_set_pool(GlobalNamespace::PacketPool_1<GlobalNamespace::NodePoseSyncStateDeltaNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::_set_pool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NodePoseSyncStateDeltaNetSerializable", "pool", value));
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable.get_baseId
GlobalNamespace::SyncStateId GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::get_baseId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::get_baseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_baseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SyncStateId, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable.set_baseId
void GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::set_baseId(GlobalNamespace::SyncStateId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::set_baseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_baseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable.get_timeOffsetMs
int GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::get_timeOffsetMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::get_timeOffsetMs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeOffsetMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable.set_timeOffsetMs
void GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::set_timeOffsetMs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::set_timeOffsetMs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeOffsetMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable.get_delta
GlobalNamespace::NodePoseSyncState GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::get_delta() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::get_delta");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_delta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NodePoseSyncState, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable.set_delta
void GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::set_delta(GlobalNamespace::NodePoseSyncState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::set_delta");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_delta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable.NoDomainReloadInit
void GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::NoDomainReloadInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::NoDomainReloadInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NodePoseSyncStateDeltaNetSerializable", "NoDomainReloadInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable.Serialize
void GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable.Deserialize
void GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable.Release
void GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateDeltaNetSerializable..cctor
void GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateDeltaNetSerializable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NodePoseSyncStateDeltaNetSerializable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::get_baseId
// Il2CppName: get_baseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (NodePoseSyncStateDeltaNetSerializable::*)()>(&NodePoseSyncStateDeltaNetSerializable::get_baseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), "get_baseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::set_baseId
// Il2CppName: set_baseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateDeltaNetSerializable::*)(GlobalNamespace::SyncStateId)>(&NodePoseSyncStateDeltaNetSerializable::set_baseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), "set_baseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SyncStateId>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::get_timeOffsetMs
// Il2CppName: get_timeOffsetMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NodePoseSyncStateDeltaNetSerializable::*)()>(&NodePoseSyncStateDeltaNetSerializable::get_timeOffsetMs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), "get_timeOffsetMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::set_timeOffsetMs
// Il2CppName: set_timeOffsetMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateDeltaNetSerializable::*)(int)>(&NodePoseSyncStateDeltaNetSerializable::set_timeOffsetMs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), "set_timeOffsetMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::get_delta
// Il2CppName: get_delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NodePoseSyncState (NodePoseSyncStateDeltaNetSerializable::*)()>(&NodePoseSyncStateDeltaNetSerializable::get_delta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), "get_delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::set_delta
// Il2CppName: set_delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateDeltaNetSerializable::*)(GlobalNamespace::NodePoseSyncState)>(&NodePoseSyncStateDeltaNetSerializable::set_delta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), "set_delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NodePoseSyncState>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::NoDomainReloadInit
// Il2CppName: NoDomainReloadInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&NodePoseSyncStateDeltaNetSerializable::NoDomainReloadInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), "NoDomainReloadInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateDeltaNetSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&NodePoseSyncStateDeltaNetSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateDeltaNetSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&NodePoseSyncStateDeltaNetSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateDeltaNetSerializable::*)()>(&NodePoseSyncStateDeltaNetSerializable::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&NodePoseSyncStateDeltaNetSerializable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateDeltaNetSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateDeltaNetSerializable::*)()>(&NodePoseSyncStateDeltaNetSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateDeltaNetSerializable::*)()>(&NodePoseSyncStateDeltaNetSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateDeltaNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NodePoseSyncStateNetSerializable
#include "GlobalNamespace/NodePoseSyncStateNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NodePoseSyncStateNetSerializable.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::NodePoseSyncStateNetSerializable*>* GlobalNamespace::NodePoseSyncStateNetSerializable::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NodePoseSyncStateNetSerializable", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::NodePoseSyncStateNetSerializable*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NodePoseSyncStateNetSerializable.get_id
GlobalNamespace::SyncStateId GlobalNamespace::NodePoseSyncStateNetSerializable::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SyncStateId, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateNetSerializable.set_id
void GlobalNamespace::NodePoseSyncStateNetSerializable::set_id(GlobalNamespace::SyncStateId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::set_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NodePoseSyncStateNetSerializable.get_time
float GlobalNamespace::NodePoseSyncStateNetSerializable::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::get_time");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateNetSerializable.set_time
void GlobalNamespace::NodePoseSyncStateNetSerializable::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::set_time");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NodePoseSyncStateNetSerializable.get_state
GlobalNamespace::NodePoseSyncState GlobalNamespace::NodePoseSyncStateNetSerializable::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::get_state");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NodePoseSyncState, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateNetSerializable.set_state
void GlobalNamespace::NodePoseSyncStateNetSerializable::set_state(GlobalNamespace::NodePoseSyncState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::set_state");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NodePoseSyncStateNetSerializable.Serialize
void GlobalNamespace::NodePoseSyncStateNetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: NodePoseSyncStateNetSerializable.Deserialize
void GlobalNamespace::NodePoseSyncStateNetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: NodePoseSyncStateNetSerializable.Release
void GlobalNamespace::NodePoseSyncStateNetSerializable::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::NodePoseSyncStateNetSerializable*>* (*)()>(&NodePoseSyncStateNetSerializable::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (NodePoseSyncStateNetSerializable::*)()>(&NodePoseSyncStateNetSerializable::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::set_id
// Il2CppName: set_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateNetSerializable::*)(GlobalNamespace::SyncStateId)>(&NodePoseSyncStateNetSerializable::set_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), "set_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SyncStateId>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NodePoseSyncStateNetSerializable::*)()>(&NodePoseSyncStateNetSerializable::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateNetSerializable::*)(float)>(&NodePoseSyncStateNetSerializable::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NodePoseSyncState (NodePoseSyncStateNetSerializable::*)()>(&NodePoseSyncStateNetSerializable::get_state)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::set_state
// Il2CppName: set_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateNetSerializable::*)(GlobalNamespace::NodePoseSyncState)>(&NodePoseSyncStateNetSerializable::set_state)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), "set_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NodePoseSyncState>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateNetSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&NodePoseSyncStateNetSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateNetSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&NodePoseSyncStateNetSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateNetSerializable::*)()>(&NodePoseSyncStateNetSerializable::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateNetSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateNetSerializable::*)()>(&NodePoseSyncStateNetSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateNetSerializable::*)()>(&NodePoseSyncStateNetSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PosePrediction
#include "GlobalNamespace/PosePrediction.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Including type: PoseSerializable
#include "GlobalNamespace/PoseSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PosePrediction.PredictPose
UnityEngine::Pose GlobalNamespace::PosePrediction::PredictPose(UnityEngine::Pose prev, float prevTime, UnityEngine::Pose curr, float currTime, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PosePrediction::PredictPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PosePrediction", "PredictPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prev), ::il2cpp_utils::ExtractType(prevTime), ::il2cpp_utils::ExtractType(curr), ::il2cpp_utils::ExtractType(currTime), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Pose, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, prev, prevTime, curr, currTime, time);
}
// Autogenerated method: PosePrediction.InterpolatePose
UnityEngine::Pose GlobalNamespace::PosePrediction::InterpolatePose(UnityEngine::Pose prev, UnityEngine::Pose curr, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PosePrediction::InterpolatePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PosePrediction", "InterpolatePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prev), ::il2cpp_utils::ExtractType(curr), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Pose, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, prev, curr, t);
}
// Autogenerated method: PosePrediction.PredictPoseSerializable
GlobalNamespace::PoseSerializable GlobalNamespace::PosePrediction::PredictPoseSerializable(GlobalNamespace::PoseSerializable prev, float prevTime, GlobalNamespace::PoseSerializable curr, float currTime, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PosePrediction::PredictPoseSerializable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PosePrediction", "PredictPoseSerializable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prev), ::il2cpp_utils::ExtractType(prevTime), ::il2cpp_utils::ExtractType(curr), ::il2cpp_utils::ExtractType(currTime), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PoseSerializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, prev, prevTime, curr, currTime, time);
}
// Autogenerated method: PosePrediction.InterpolatePoseSerializable
GlobalNamespace::PoseSerializable GlobalNamespace::PosePrediction::InterpolatePoseSerializable(GlobalNamespace::PoseSerializable a, GlobalNamespace::PoseSerializable b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PosePrediction::InterpolatePoseSerializable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PosePrediction", "InterpolatePoseSerializable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PoseSerializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Writing MetadataGetter for method: PosePrediction::PredictPose
// Il2CppName: PredictPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Pose (*)(UnityEngine::Pose, float, UnityEngine::Pose, float, float)>(&PosePrediction::PredictPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PosePrediction*), "PredictPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Pose>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Pose>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PosePrediction::InterpolatePose
// Il2CppName: InterpolatePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Pose (*)(UnityEngine::Pose, UnityEngine::Pose, float)>(&PosePrediction::InterpolatePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PosePrediction*), "InterpolatePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Pose>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Pose>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PosePrediction::PredictPoseSerializable
// Il2CppName: PredictPoseSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PoseSerializable (*)(GlobalNamespace::PoseSerializable, float, GlobalNamespace::PoseSerializable, float, float)>(&PosePrediction::PredictPoseSerializable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PosePrediction*), "PredictPoseSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PoseSerializable>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PoseSerializable>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PosePrediction::InterpolatePoseSerializable
// Il2CppName: InterpolatePoseSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PoseSerializable (*)(GlobalNamespace::PoseSerializable, GlobalNamespace::PoseSerializable, float)>(&PosePrediction::InterpolatePoseSerializable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PosePrediction*), "InterpolatePoseSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PoseSerializable>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PoseSerializable>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PosePrediction::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PosePrediction::*)()>(&PosePrediction::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PosePrediction*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PosePrediction::*)()>(&PosePrediction::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PosePrediction*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardScoreSyncState
#include "GlobalNamespace/StandardScoreSyncState.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardScoreSyncState.SetState
void GlobalNamespace::StandardScoreSyncState::SetState(GlobalNamespace::StandardScoreSyncState_Score s, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::SetState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, s, value);
}
// Autogenerated method: StandardScoreSyncState.GetDelta
GlobalNamespace::StandardScoreSyncState GlobalNamespace::StandardScoreSyncState::GetDelta(GlobalNamespace::StandardScoreSyncState& stateTable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::GetDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateTable)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::StandardScoreSyncState, false>(*this, ___internal__method, stateTable);
}
// Autogenerated method: StandardScoreSyncState.ApplyDelta
GlobalNamespace::StandardScoreSyncState GlobalNamespace::StandardScoreSyncState::ApplyDelta(GlobalNamespace::StandardScoreSyncState& delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::ApplyDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ApplyDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::StandardScoreSyncState, false>(*this, ___internal__method, delta);
}
// Autogenerated method: StandardScoreSyncState.GetState
int GlobalNamespace::StandardScoreSyncState::GetState(GlobalNamespace::StandardScoreSyncState_Score s) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::GetState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method, s);
}
// Autogenerated method: StandardScoreSyncState.Serialize
void GlobalNamespace::StandardScoreSyncState::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: StandardScoreSyncState.Deserialize
void GlobalNamespace::StandardScoreSyncState::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Autogenerated method: StandardScoreSyncState.Equals
bool GlobalNamespace::StandardScoreSyncState::Equals(GlobalNamespace::StandardScoreSyncState& other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: StandardScoreSyncState.GetSize
int GlobalNamespace::StandardScoreSyncState::GetSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::GetSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: StandardScoreSyncState.IStateTable<StandardScoreSyncState,StandardScoreSyncState.Score,System.Int32>.GetDelta
GlobalNamespace::StandardScoreSyncState GlobalNamespace::StandardScoreSyncState::IStateTable$StandardScoreSyncState_StandardScoreSyncState_Score_System_Int32$_GetDelta(GlobalNamespace::StandardScoreSyncState& stateTable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::IStateTable<StandardScoreSyncState,StandardScoreSyncState.Score,System.Int32>.GetDelta");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IStateTable<StandardScoreSyncState,StandardScoreSyncState.Score,System.Int32>.GetDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateTable)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::StandardScoreSyncState, false>(*this, ___internal__method, stateTable);
}
// Autogenerated method: StandardScoreSyncState.IStateTable<StandardScoreSyncState,StandardScoreSyncState.Score,System.Int32>.ApplyDelta
GlobalNamespace::StandardScoreSyncState GlobalNamespace::StandardScoreSyncState::IStateTable$StandardScoreSyncState_StandardScoreSyncState_Score_System_Int32$_ApplyDelta(GlobalNamespace::StandardScoreSyncState& delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::IStateTable<StandardScoreSyncState,StandardScoreSyncState.Score,System.Int32>.ApplyDelta");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IStateTable<StandardScoreSyncState,StandardScoreSyncState.Score,System.Int32>.ApplyDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::StandardScoreSyncState, false>(*this, ___internal__method, delta);
}
// Autogenerated method: StandardScoreSyncState.IEquatableByReference<StandardScoreSyncState>.Equals
bool GlobalNamespace::StandardScoreSyncState::IEquatableByReference$StandardScoreSyncState$_Equals(GlobalNamespace::StandardScoreSyncState& other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncState::IEquatableByReference<StandardScoreSyncState>.Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IEquatableByReference<StandardScoreSyncState>.Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Writing MetadataGetter for method: StandardScoreSyncState::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncState::*)(GlobalNamespace::StandardScoreSyncState_Score, int)>(&StandardScoreSyncState::SetState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardScoreSyncState_Score>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncState::GetDelta
// Il2CppName: GetDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::StandardScoreSyncState (StandardScoreSyncState::*)(GlobalNamespace::StandardScoreSyncState&)>(&StandardScoreSyncState::GetDelta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "GetDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardScoreSyncState&>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncState::ApplyDelta
// Il2CppName: ApplyDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::StandardScoreSyncState (StandardScoreSyncState::*)(GlobalNamespace::StandardScoreSyncState&)>(&StandardScoreSyncState::ApplyDelta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "ApplyDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardScoreSyncState&>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncState::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StandardScoreSyncState::*)(GlobalNamespace::StandardScoreSyncState_Score)>(&StandardScoreSyncState::GetState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardScoreSyncState_Score>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncState::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncState::*)(LiteNetLib::Utils::NetDataWriter*)>(&StandardScoreSyncState::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncState::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncState::*)(LiteNetLib::Utils::NetDataReader*)>(&StandardScoreSyncState::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncState::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StandardScoreSyncState::*)(GlobalNamespace::StandardScoreSyncState&)>(&StandardScoreSyncState::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardScoreSyncState&>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncState::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StandardScoreSyncState::*)()>(&StandardScoreSyncState::GetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncState::IStateTable$StandardScoreSyncState_StandardScoreSyncState_Score_System_Int32$_GetDelta
// Il2CppName: IStateTable<StandardScoreSyncState,StandardScoreSyncState.Score,System.Int32>.GetDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::StandardScoreSyncState (StandardScoreSyncState::*)(GlobalNamespace::StandardScoreSyncState&)>(&StandardScoreSyncState::IStateTable$StandardScoreSyncState_StandardScoreSyncState_Score_System_Int32$_GetDelta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "IStateTable<StandardScoreSyncState,StandardScoreSyncState.Score,System.Int32>.GetDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardScoreSyncState&>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncState::IStateTable$StandardScoreSyncState_StandardScoreSyncState_Score_System_Int32$_ApplyDelta
// Il2CppName: IStateTable<StandardScoreSyncState,StandardScoreSyncState.Score,System.Int32>.ApplyDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::StandardScoreSyncState (StandardScoreSyncState::*)(GlobalNamespace::StandardScoreSyncState&)>(&StandardScoreSyncState::IStateTable$StandardScoreSyncState_StandardScoreSyncState_Score_System_Int32$_ApplyDelta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "IStateTable<StandardScoreSyncState,StandardScoreSyncState.Score,System.Int32>.ApplyDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardScoreSyncState&>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncState::IEquatableByReference$StandardScoreSyncState$_Equals
// Il2CppName: IEquatableByReference<StandardScoreSyncState>.Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StandardScoreSyncState::*)(GlobalNamespace::StandardScoreSyncState&)>(&StandardScoreSyncState::IEquatableByReference$StandardScoreSyncState$_Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncState), "IEquatableByReference<StandardScoreSyncState>.Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardScoreSyncState&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardScoreSyncStateDeltaNetSerializable
#include "GlobalNamespace/StandardScoreSyncStateDeltaNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly PacketPool`1<StandardScoreSyncStateDeltaNetSerializable> pool
GlobalNamespace::PacketPool_1<GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable*>* GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::_get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::_get_pool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PacketPool_1<GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable*>*>("", "StandardScoreSyncStateDeltaNetSerializable", "pool"));
}
// Autogenerated static field setter
// Set static field: static public readonly PacketPool`1<StandardScoreSyncStateDeltaNetSerializable> pool
void GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::_set_pool(GlobalNamespace::PacketPool_1<GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::_set_pool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardScoreSyncStateDeltaNetSerializable", "pool", value));
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable.get_baseId
GlobalNamespace::SyncStateId GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::get_baseId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::get_baseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_baseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SyncStateId, false>(this, ___internal__method);
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable.set_baseId
void GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::set_baseId(GlobalNamespace::SyncStateId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::set_baseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_baseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable.get_timeOffsetMs
int GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::get_timeOffsetMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::get_timeOffsetMs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeOffsetMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable.set_timeOffsetMs
void GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::set_timeOffsetMs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::set_timeOffsetMs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeOffsetMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable.get_delta
GlobalNamespace::StandardScoreSyncState GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::get_delta() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::get_delta");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_delta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::StandardScoreSyncState, false>(this, ___internal__method);
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable.set_delta
void GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::set_delta(GlobalNamespace::StandardScoreSyncState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::set_delta");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_delta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable.NoDomainReloadInit
void GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::NoDomainReloadInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::NoDomainReloadInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StandardScoreSyncStateDeltaNetSerializable", "NoDomainReloadInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable.Serialize
void GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable.Deserialize
void GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable.Release
void GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardScoreSyncStateDeltaNetSerializable..cctor
void GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StandardScoreSyncStateDeltaNetSerializable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::get_baseId
// Il2CppName: get_baseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (StandardScoreSyncStateDeltaNetSerializable::*)()>(&StandardScoreSyncStateDeltaNetSerializable::get_baseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), "get_baseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::set_baseId
// Il2CppName: set_baseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateDeltaNetSerializable::*)(GlobalNamespace::SyncStateId)>(&StandardScoreSyncStateDeltaNetSerializable::set_baseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), "set_baseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SyncStateId>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::get_timeOffsetMs
// Il2CppName: get_timeOffsetMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StandardScoreSyncStateDeltaNetSerializable::*)()>(&StandardScoreSyncStateDeltaNetSerializable::get_timeOffsetMs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), "get_timeOffsetMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::set_timeOffsetMs
// Il2CppName: set_timeOffsetMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateDeltaNetSerializable::*)(int)>(&StandardScoreSyncStateDeltaNetSerializable::set_timeOffsetMs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), "set_timeOffsetMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::get_delta
// Il2CppName: get_delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::StandardScoreSyncState (StandardScoreSyncStateDeltaNetSerializable::*)()>(&StandardScoreSyncStateDeltaNetSerializable::get_delta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), "get_delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::set_delta
// Il2CppName: set_delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateDeltaNetSerializable::*)(GlobalNamespace::StandardScoreSyncState)>(&StandardScoreSyncStateDeltaNetSerializable::set_delta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), "set_delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardScoreSyncState>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::NoDomainReloadInit
// Il2CppName: NoDomainReloadInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&StandardScoreSyncStateDeltaNetSerializable::NoDomainReloadInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), "NoDomainReloadInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateDeltaNetSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&StandardScoreSyncStateDeltaNetSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateDeltaNetSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&StandardScoreSyncStateDeltaNetSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateDeltaNetSerializable::*)()>(&StandardScoreSyncStateDeltaNetSerializable::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&StandardScoreSyncStateDeltaNetSerializable::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateDeltaNetSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateDeltaNetSerializable::*)()>(&StandardScoreSyncStateDeltaNetSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateDeltaNetSerializable::*)()>(&StandardScoreSyncStateDeltaNetSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateDeltaNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardScoreSyncStateNetSerializable
#include "GlobalNamespace/StandardScoreSyncStateNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardScoreSyncStateNetSerializable.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::StandardScoreSyncStateNetSerializable*>* GlobalNamespace::StandardScoreSyncStateNetSerializable::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateNetSerializable::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StandardScoreSyncStateNetSerializable", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::StandardScoreSyncStateNetSerializable*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: StandardScoreSyncStateNetSerializable.get_id
GlobalNamespace::SyncStateId GlobalNamespace::StandardScoreSyncStateNetSerializable::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateNetSerializable::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SyncStateId, false>(this, ___internal__method);
}
// Autogenerated method: StandardScoreSyncStateNetSerializable.set_id
void GlobalNamespace::StandardScoreSyncStateNetSerializable::set_id(GlobalNamespace::SyncStateId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateNetSerializable::set_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardScoreSyncStateNetSerializable.get_time
float GlobalNamespace::StandardScoreSyncStateNetSerializable::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateNetSerializable::get_time");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardScoreSyncStateNetSerializable.set_time
void GlobalNamespace::StandardScoreSyncStateNetSerializable::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateNetSerializable::set_time");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardScoreSyncStateNetSerializable.get_state
GlobalNamespace::StandardScoreSyncState GlobalNamespace::StandardScoreSyncStateNetSerializable::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateNetSerializable::get_state");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::StandardScoreSyncState, false>(this, ___internal__method);
}
// Autogenerated method: StandardScoreSyncStateNetSerializable.set_state
void GlobalNamespace::StandardScoreSyncStateNetSerializable::set_state(GlobalNamespace::StandardScoreSyncState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateNetSerializable::set_state");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardScoreSyncStateNetSerializable.Serialize
void GlobalNamespace::StandardScoreSyncStateNetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: StandardScoreSyncStateNetSerializable.Deserialize
void GlobalNamespace::StandardScoreSyncStateNetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: StandardScoreSyncStateNetSerializable.Release
void GlobalNamespace::StandardScoreSyncStateNetSerializable::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardScoreSyncStateNetSerializable::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::StandardScoreSyncStateNetSerializable*>* (*)()>(&StandardScoreSyncStateNetSerializable::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (StandardScoreSyncStateNetSerializable::*)()>(&StandardScoreSyncStateNetSerializable::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::set_id
// Il2CppName: set_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateNetSerializable::*)(GlobalNamespace::SyncStateId)>(&StandardScoreSyncStateNetSerializable::set_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), "set_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SyncStateId>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardScoreSyncStateNetSerializable::*)()>(&StandardScoreSyncStateNetSerializable::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateNetSerializable::*)(float)>(&StandardScoreSyncStateNetSerializable::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::StandardScoreSyncState (StandardScoreSyncStateNetSerializable::*)()>(&StandardScoreSyncStateNetSerializable::get_state)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::set_state
// Il2CppName: set_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateNetSerializable::*)(GlobalNamespace::StandardScoreSyncState)>(&StandardScoreSyncStateNetSerializable::set_state)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), "set_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardScoreSyncState>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateNetSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&StandardScoreSyncStateNetSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateNetSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&StandardScoreSyncStateNetSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateNetSerializable::*)()>(&StandardScoreSyncStateNetSerializable::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardScoreSyncStateNetSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateNetSerializable::*)()>(&StandardScoreSyncStateNetSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardScoreSyncStateNetSerializable::*)()>(&StandardScoreSyncStateNetSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardScoreSyncStateNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SyncStateId
#include "GlobalNamespace/SyncStateId.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Byte kMaxValue
uint8_t GlobalNamespace::SyncStateId::_get_kMaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::_get_kMaxValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("", "SyncStateId", "kMaxValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte kMaxValue
void GlobalNamespace::SyncStateId::_set_kMaxValue(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::_set_kMaxValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SyncStateId", "kMaxValue", value));
}
// Autogenerated method: SyncStateId.Equals
bool GlobalNamespace::SyncStateId::Equals(GlobalNamespace::SyncStateId other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: SyncStateId.Increment
GlobalNamespace::SyncStateId GlobalNamespace::SyncStateId::Increment() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::Increment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Increment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SyncStateId, false>(*this, ___internal__method);
}
// Autogenerated method: SyncStateId.Serialize
void GlobalNamespace::SyncStateId::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: SyncStateId.SerializeWithFlag
void GlobalNamespace::SyncStateId::SerializeWithFlag(LiteNetLib::Utils::NetDataWriter* writer, bool flag) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::SerializeWithFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SerializeWithFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(flag)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer, flag);
}
// Autogenerated method: SyncStateId.Deserialize
GlobalNamespace::SyncStateId GlobalNamespace::SyncStateId::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SyncStateId", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SyncStateId, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: SyncStateId.DeserializeWithFlag
GlobalNamespace::SyncStateId GlobalNamespace::SyncStateId::DeserializeWithFlag(LiteNetLib::Utils::NetDataReader* reader, bool& flag) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::DeserializeWithFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SyncStateId", "DeserializeWithFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SyncStateId, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader, flag);
}
// Autogenerated method: SyncStateId.CreateFromSerializedData
GlobalNamespace::SyncStateId GlobalNamespace::SyncStateId::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SyncStateId, false>(*this, ___internal__method, reader);
}
// Autogenerated method: SyncStateId.WithinRange
bool GlobalNamespace::SyncStateId::WithinRange(GlobalNamespace::SyncStateId a, GlobalNamespace::SyncStateId b, int range) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::WithinRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SyncStateId", "WithinRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(range)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, range);
}
// Autogenerated method: SyncStateId.Equals
bool GlobalNamespace::SyncStateId::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: SyncStateId.GetHashCode
int GlobalNamespace::SyncStateId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: SyncStateId.ToString
::Il2CppString* GlobalNamespace::SyncStateId::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: SyncStateId.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::SyncStateId& a, const GlobalNamespace::SyncStateId& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SyncStateId", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SyncStateId.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::SyncStateId& a, const GlobalNamespace::SyncStateId& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SyncStateId::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SyncStateId", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Writing MetadataGetter for method: SyncStateId::SyncStateId
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SyncStateId::*)(uint8_t)>(&SyncStateId::SyncStateId<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SyncStateId::*)(uint8_t)>(&SyncStateId::SyncStateId<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: SyncStateId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SyncStateId::*)(GlobalNamespace::SyncStateId)>(&SyncStateId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SyncStateId>()});
  }
};
// Writing MetadataGetter for method: SyncStateId::Increment
// Il2CppName: Increment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (SyncStateId::*)()>(&SyncStateId::Increment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "Increment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SyncStateId::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SyncStateId::*)(LiteNetLib::Utils::NetDataWriter*)>(&SyncStateId::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: SyncStateId::SerializeWithFlag
// Il2CppName: SerializeWithFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SyncStateId::*)(LiteNetLib::Utils::NetDataWriter*, bool)>(&SyncStateId::SerializeWithFlag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "SerializeWithFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SyncStateId::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (*)(LiteNetLib::Utils::NetDataReader*)>(&SyncStateId::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: SyncStateId::DeserializeWithFlag
// Il2CppName: DeserializeWithFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (*)(LiteNetLib::Utils::NetDataReader*, bool&)>(&SyncStateId::DeserializeWithFlag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "DeserializeWithFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: SyncStateId::CreateFromSerializedData
// Il2CppName: CreateFromSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (SyncStateId::*)(LiteNetLib::Utils::NetDataReader*)>(&SyncStateId::CreateFromSerializedData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "CreateFromSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: SyncStateId::WithinRange
// Il2CppName: WithinRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::SyncStateId, GlobalNamespace::SyncStateId, int)>(&SyncStateId::WithinRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "WithinRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SyncStateId>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SyncStateId>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SyncStateId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SyncStateId::*)(::Il2CppObject*)>(&SyncStateId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: SyncStateId::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SyncStateId::*)()>(&SyncStateId::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SyncStateId::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SyncStateId::*)()>(&SyncStateId::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SyncStateId::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const GlobalNamespace::SyncStateId&, const GlobalNamespace::SyncStateId&)>(&SyncStateId::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SyncStateId&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SyncStateId&>()});
  }
};
// Writing MetadataGetter for method: SyncStateId::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const GlobalNamespace::SyncStateId&, const GlobalNamespace::SyncStateId&)>(&SyncStateId::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SyncStateId), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SyncStateId&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SyncStateId&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SynchronizedActionQueue
#include "GlobalNamespace/SynchronizedActionQueue.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SynchronizedActionQueue.Clear
void GlobalNamespace::SynchronizedActionQueue::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SynchronizedActionQueue::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SynchronizedActionQueue.EnqueueAction
void GlobalNamespace::SynchronizedActionQueue::EnqueueAction(float time, System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SynchronizedActionQueue::EnqueueAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnqueueAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time, action);
}
// Autogenerated method: SynchronizedActionQueue.Update
void GlobalNamespace::SynchronizedActionQueue::Update(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SynchronizedActionQueue::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Writing MetadataGetter for method: SynchronizedActionQueue::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizedActionQueue::*)()>(&SynchronizedActionQueue::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizedActionQueue*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SynchronizedActionQueue::EnqueueAction
// Il2CppName: EnqueueAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizedActionQueue::*)(float, System::Action*)>(&SynchronizedActionQueue::EnqueueAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizedActionQueue*), "EnqueueAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SynchronizedActionQueue::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizedActionQueue::*)(float)>(&SynchronizedActionQueue::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizedActionQueue*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SynchronizedActionQueue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizedActionQueue::*)()>(&SynchronizedActionQueue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizedActionQueue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizedActionQueue::*)()>(&SynchronizedActionQueue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizedActionQueue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SynchronizedActionQueue/SynchronizedAction
#include "GlobalNamespace/SynchronizedActionQueue.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SynchronizedActionQueue::SynchronizedAction::SynchronizedAction
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizedActionQueue::SynchronizedAction::*)(float, System::Action*)>(&SynchronizedActionQueue::SynchronizedAction::SynchronizedAction<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizedActionQueue::SynchronizedAction), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SynchronizedActionQueue::SynchronizedAction::*)(float, System::Action*)>(&SynchronizedActionQueue::SynchronizedAction::SynchronizedAction<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SynchronizedActionQueue::SynchronizedAction), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TaskExtensions
#include "GlobalNamespace/TaskExtensions.hpp"
// Including type: TaskExtensions/<>c__DisplayClass0_0`1
#include "GlobalNamespace/TaskExtensions_--c__DisplayClass0_0_1.hpp"
// Including type: TaskExtensions/<WaitForTask>d__1`1
#include "GlobalNamespace/TaskExtensions_-WaitForTask-d__1_1.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TaskExtensions::WithCancellation
// Il2CppName: WithCancellation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TaskExtensions::WaitForTask
// Il2CppName: WaitForTask
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UpdateConnectionStateReason
#include "GlobalNamespace/UpdateConnectionStateReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UpdateConnectionStateReason Init
GlobalNamespace::UpdateConnectionStateReason GlobalNamespace::UpdateConnectionStateReason::_get_Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_get_Init");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::UpdateConnectionStateReason>("", "UpdateConnectionStateReason", "Init"));
}
// Autogenerated static field setter
// Set static field: static public UpdateConnectionStateReason Init
void GlobalNamespace::UpdateConnectionStateReason::_set_Init(GlobalNamespace::UpdateConnectionStateReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_set_Init");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UpdateConnectionStateReason", "Init", value));
}
// Autogenerated static field getter
// Get static field: static public UpdateConnectionStateReason PlayerOrderChanged
GlobalNamespace::UpdateConnectionStateReason GlobalNamespace::UpdateConnectionStateReason::_get_PlayerOrderChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_get_PlayerOrderChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::UpdateConnectionStateReason>("", "UpdateConnectionStateReason", "PlayerOrderChanged"));
}
// Autogenerated static field setter
// Set static field: static public UpdateConnectionStateReason PlayerOrderChanged
void GlobalNamespace::UpdateConnectionStateReason::_set_PlayerOrderChanged(GlobalNamespace::UpdateConnectionStateReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_set_PlayerOrderChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UpdateConnectionStateReason", "PlayerOrderChanged", value));
}
// Autogenerated static field getter
// Get static field: static public UpdateConnectionStateReason Connected
GlobalNamespace::UpdateConnectionStateReason GlobalNamespace::UpdateConnectionStateReason::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::UpdateConnectionStateReason>("", "UpdateConnectionStateReason", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public UpdateConnectionStateReason Connected
void GlobalNamespace::UpdateConnectionStateReason::_set_Connected(GlobalNamespace::UpdateConnectionStateReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UpdateConnectionStateReason", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public UpdateConnectionStateReason StartSession
GlobalNamespace::UpdateConnectionStateReason GlobalNamespace::UpdateConnectionStateReason::_get_StartSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_get_StartSession");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::UpdateConnectionStateReason>("", "UpdateConnectionStateReason", "StartSession"));
}
// Autogenerated static field setter
// Set static field: static public UpdateConnectionStateReason StartSession
void GlobalNamespace::UpdateConnectionStateReason::_set_StartSession(GlobalNamespace::UpdateConnectionStateReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_set_StartSession");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UpdateConnectionStateReason", "StartSession", value));
}
// Autogenerated static field getter
// Get static field: static public UpdateConnectionStateReason StartDedicatedServer
GlobalNamespace::UpdateConnectionStateReason GlobalNamespace::UpdateConnectionStateReason::_get_StartDedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_get_StartDedicatedServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::UpdateConnectionStateReason>("", "UpdateConnectionStateReason", "StartDedicatedServer"));
}
// Autogenerated static field setter
// Set static field: static public UpdateConnectionStateReason StartDedicatedServer
void GlobalNamespace::UpdateConnectionStateReason::_set_StartDedicatedServer(GlobalNamespace::UpdateConnectionStateReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_set_StartDedicatedServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UpdateConnectionStateReason", "StartDedicatedServer", value));
}
// Autogenerated static field getter
// Get static field: static public UpdateConnectionStateReason SyncTimeInitialized
GlobalNamespace::UpdateConnectionStateReason GlobalNamespace::UpdateConnectionStateReason::_get_SyncTimeInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_get_SyncTimeInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::UpdateConnectionStateReason>("", "UpdateConnectionStateReason", "SyncTimeInitialized"));
}
// Autogenerated static field setter
// Set static field: static public UpdateConnectionStateReason SyncTimeInitialized
void GlobalNamespace::UpdateConnectionStateReason::_set_SyncTimeInitialized(GlobalNamespace::UpdateConnectionStateReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_set_SyncTimeInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UpdateConnectionStateReason", "SyncTimeInitialized", value));
}
// Autogenerated static field getter
// Get static field: static public UpdateConnectionStateReason ManualDisconnect
GlobalNamespace::UpdateConnectionStateReason GlobalNamespace::UpdateConnectionStateReason::_get_ManualDisconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_get_ManualDisconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::UpdateConnectionStateReason>("", "UpdateConnectionStateReason", "ManualDisconnect"));
}
// Autogenerated static field setter
// Set static field: static public UpdateConnectionStateReason ManualDisconnect
void GlobalNamespace::UpdateConnectionStateReason::_set_ManualDisconnect(GlobalNamespace::UpdateConnectionStateReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_set_ManualDisconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UpdateConnectionStateReason", "ManualDisconnect", value));
}
// Autogenerated static field getter
// Get static field: static public UpdateConnectionStateReason RemoteDisconnect
GlobalNamespace::UpdateConnectionStateReason GlobalNamespace::UpdateConnectionStateReason::_get_RemoteDisconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_get_RemoteDisconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::UpdateConnectionStateReason>("", "UpdateConnectionStateReason", "RemoteDisconnect"));
}
// Autogenerated static field setter
// Set static field: static public UpdateConnectionStateReason RemoteDisconnect
void GlobalNamespace::UpdateConnectionStateReason::_set_RemoteDisconnect(GlobalNamespace::UpdateConnectionStateReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_set_RemoteDisconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UpdateConnectionStateReason", "RemoteDisconnect", value));
}
// Autogenerated static field getter
// Get static field: static public UpdateConnectionStateReason ConnectionFailed
GlobalNamespace::UpdateConnectionStateReason GlobalNamespace::UpdateConnectionStateReason::_get_ConnectionFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_get_ConnectionFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::UpdateConnectionStateReason>("", "UpdateConnectionStateReason", "ConnectionFailed"));
}
// Autogenerated static field setter
// Set static field: static public UpdateConnectionStateReason ConnectionFailed
void GlobalNamespace::UpdateConnectionStateReason::_set_ConnectionFailed(GlobalNamespace::UpdateConnectionStateReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_set_ConnectionFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UpdateConnectionStateReason", "ConnectionFailed", value));
}
// Autogenerated static field getter
// Get static field: static public UpdateConnectionStateReason OnDestroy
GlobalNamespace::UpdateConnectionStateReason GlobalNamespace::UpdateConnectionStateReason::_get_OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_get_OnDestroy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::UpdateConnectionStateReason>("", "UpdateConnectionStateReason", "OnDestroy"));
}
// Autogenerated static field setter
// Set static field: static public UpdateConnectionStateReason OnDestroy
void GlobalNamespace::UpdateConnectionStateReason::_set_OnDestroy(GlobalNamespace::UpdateConnectionStateReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UpdateConnectionStateReason::_set_OnDestroy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UpdateConnectionStateReason", "OnDestroy", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UtcTimeProvider
#include "GlobalNamespace/UtcTimeProvider.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF1060
// Autogenerated static field getter
// Get static field: static private readonly System.DateTime _epoch
System::DateTime GlobalNamespace::UtcTimeProvider::_get__epoch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UtcTimeProvider::_get__epoch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::DateTime>("", "UtcTimeProvider", "_epoch"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.DateTime _epoch
void GlobalNamespace::UtcTimeProvider::_set__epoch(System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UtcTimeProvider::_set__epoch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UtcTimeProvider", "_epoch", value));
}
// Autogenerated method: UtcTimeProvider.GetTimeMs
int64_t GlobalNamespace::UtcTimeProvider::GetTimeMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UtcTimeProvider::GetTimeMs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTimeMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UtcTimeProvider.DelayMs
System::Threading::Tasks::Task* GlobalNamespace::UtcTimeProvider::DelayMs(int millis, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UtcTimeProvider::DelayMs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DelayMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millis), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, millis, cancellationToken);
}
// Autogenerated method: UtcTimeProvider..cctor
void GlobalNamespace::UtcTimeProvider::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UtcTimeProvider::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UtcTimeProvider", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: UtcTimeProvider::GetTimeMs
// Il2CppName: GetTimeMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UtcTimeProvider::*)()>(&UtcTimeProvider::GetTimeMs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UtcTimeProvider*), "GetTimeMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UtcTimeProvider::DelayMs
// Il2CppName: DelayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (UtcTimeProvider::*)(int, System::Threading::CancellationToken)>(&UtcTimeProvider::DelayMs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UtcTimeProvider*), "DelayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: UtcTimeProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UtcTimeProvider::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UtcTimeProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UtcTimeProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UtcTimeProvider::*)()>(&UtcTimeProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UtcTimeProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UtcTimeProvider::*)()>(&UtcTimeProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UtcTimeProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: X509CertificateUtility
#include "GlobalNamespace/X509CertificateUtility.hpp"
// Including type: X509CertificateUtility/PasswordFinder
#include "GlobalNamespace/X509CertificateUtility_PasswordFinder.hpp"
// Including type: X509CertificateUtility/RSACertificateEncryptionProvider
#include "GlobalNamespace/X509CertificateUtility_RSACertificateEncryptionProvider.hpp"
// Including type: X509CertificateUtility/<>c
#include "GlobalNamespace/X509CertificateUtility_--c.hpp"
// Including type: ICertificateEncryptionProvider
#include "GlobalNamespace/ICertificateEncryptionProvider.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: X509CertificateUtility.GetCertificateEncryptionProvider
GlobalNamespace::ICertificateEncryptionProvider* GlobalNamespace::X509CertificateUtility::GetCertificateEncryptionProvider(::Il2CppString* privateKeyPem, ::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::GetCertificateEncryptionProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "X509CertificateUtility", "GetCertificateEncryptionProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(privateKeyPem), ::il2cpp_utils::ExtractType(password)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ICertificateEncryptionProvider*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, privateKeyPem, password);
}
// Autogenerated method: X509CertificateUtility.GetRSACertificateEncryptionProvider
GlobalNamespace::X509CertificateUtility::RSACertificateEncryptionProvider* GlobalNamespace::X509CertificateUtility::GetRSACertificateEncryptionProvider(::Il2CppString* privateKeyPem, GlobalNamespace::X509CertificateUtility::PasswordFinder* passwordFinder) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::GetRSACertificateEncryptionProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "X509CertificateUtility", "GetRSACertificateEncryptionProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(privateKeyPem), ::il2cpp_utils::ExtractType(passwordFinder)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::X509CertificateUtility::RSACertificateEncryptionProvider*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, privateKeyPem, passwordFinder);
}
// Autogenerated method: X509CertificateUtility.GetCertificateList
::Array<System::Security::Cryptography::X509Certificates::X509Certificate2*>* GlobalNamespace::X509CertificateUtility::GetCertificateList(::Il2CppString* certificatePem, ::Il2CppString* certificateChainPem) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::GetCertificateList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "X509CertificateUtility", "GetCertificateList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificatePem), ::il2cpp_utils::ExtractType(certificateChainPem)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Security::Cryptography::X509Certificates::X509Certificate2*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, certificatePem, certificateChainPem);
}
// Autogenerated method: X509CertificateUtility.ValidateCertificateChain
void GlobalNamespace::X509CertificateUtility::ValidateCertificateChain(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, ::Array<::Array<uint8_t>*>* certificateChain) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::ValidateCertificateChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "X509CertificateUtility", "ValidateCertificateChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(certificateChain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, certificate, certificateChain);
}
// Autogenerated method: X509CertificateUtility.ValidateCertificateChainUnity
void GlobalNamespace::X509CertificateUtility::ValidateCertificateChainUnity(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, ::Array<::Array<uint8_t>*>* certificateChain) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::ValidateCertificateChainUnity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "X509CertificateUtility", "ValidateCertificateChainUnity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(certificateChain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, certificate, certificateChain);
}
// Autogenerated method: X509CertificateUtility.ValidateCertificateChainDotNet
void GlobalNamespace::X509CertificateUtility::ValidateCertificateChainDotNet(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, ::Array<::Array<uint8_t>*>* certificateChain) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::ValidateCertificateChainDotNet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "X509CertificateUtility", "ValidateCertificateChainDotNet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(certificateChain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, certificate, certificateChain);
}
// Writing MetadataGetter for method: X509CertificateUtility::GetCertificateEncryptionProvider
// Il2CppName: GetCertificateEncryptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ICertificateEncryptionProvider* (*)(::Il2CppString*, ::Il2CppString*)>(&X509CertificateUtility::GetCertificateEncryptionProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility*), "GetCertificateEncryptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::GetRSACertificateEncryptionProvider
// Il2CppName: GetRSACertificateEncryptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::X509CertificateUtility::RSACertificateEncryptionProvider* (*)(::Il2CppString*, GlobalNamespace::X509CertificateUtility::PasswordFinder*)>(&X509CertificateUtility::GetRSACertificateEncryptionProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility*), "GetRSACertificateEncryptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::X509CertificateUtility::PasswordFinder*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::GetCertificateList
// Il2CppName: GetCertificateList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Security::Cryptography::X509Certificates::X509Certificate2*>* (*)(::Il2CppString*, ::Il2CppString*)>(&X509CertificateUtility::GetCertificateList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility*), "GetCertificateList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::ValidateCertificateChain
// Il2CppName: ValidateCertificateChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Security::Cryptography::X509Certificates::X509Certificate2*, ::Array<::Array<uint8_t>*>*)>(&X509CertificateUtility::ValidateCertificateChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility*), "ValidateCertificateChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Array<uint8_t>*>*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::ValidateCertificateChainUnity
// Il2CppName: ValidateCertificateChainUnity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Security::Cryptography::X509Certificates::X509Certificate2*, ::Array<::Array<uint8_t>*>*)>(&X509CertificateUtility::ValidateCertificateChainUnity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility*), "ValidateCertificateChainUnity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Array<uint8_t>*>*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::ValidateCertificateChainDotNet
// Il2CppName: ValidateCertificateChainDotNet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Security::Cryptography::X509Certificates::X509Certificate2*, ::Array<::Array<uint8_t>*>*)>(&X509CertificateUtility::ValidateCertificateChainDotNet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility*), "ValidateCertificateChainDotNet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Array<uint8_t>*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: X509CertificateUtility/PasswordFinder
#include "GlobalNamespace/X509CertificateUtility_PasswordFinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: X509CertificateUtility/PasswordFinder.GetPassword
::Array<::Il2CppChar>* GlobalNamespace::X509CertificateUtility::PasswordFinder::GetPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::PasswordFinder::GetPassword");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppChar>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: X509CertificateUtility::PasswordFinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateUtility::PasswordFinder::*)(::Array<uint8_t>*)>(&X509CertificateUtility::PasswordFinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::PasswordFinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateUtility::PasswordFinder::*)(::Array<uint8_t>*)>(&X509CertificateUtility::PasswordFinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::PasswordFinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::PasswordFinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateUtility::PasswordFinder::*)(::Il2CppString*)>(&X509CertificateUtility::PasswordFinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::PasswordFinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateUtility::PasswordFinder::*)(::Il2CppString*)>(&X509CertificateUtility::PasswordFinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::PasswordFinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::PasswordFinder::GetPassword
// Il2CppName: GetPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppChar>* (X509CertificateUtility::PasswordFinder::*)()>(&X509CertificateUtility::PasswordFinder::GetPassword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::PasswordFinder*), "GetPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: X509CertificateUtility/RSACertificateEncryptionProvider
#include "GlobalNamespace/X509CertificateUtility_RSACertificateEncryptionProvider.hpp"
// Including type: Org.BouncyCastle.Crypto.ISigner
#include "Org/BouncyCastle/Crypto/ISigner.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters
#include "Org/BouncyCastle/Crypto/Parameters/RsaPrivateCrtKeyParameters.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: X509CertificateUtility/RSACertificateEncryptionProvider.Dispose
void GlobalNamespace::X509CertificateUtility::RSACertificateEncryptionProvider::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::RSACertificateEncryptionProvider::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: X509CertificateUtility/RSACertificateEncryptionProvider.SignData
::Array<uint8_t>* GlobalNamespace::X509CertificateUtility::RSACertificateEncryptionProvider::SignData(::Array<uint8_t>* data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::RSACertificateEncryptionProvider::SignData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SignData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, data, offset, length);
}
// Writing MetadataGetter for method: X509CertificateUtility::RSACertificateEncryptionProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateUtility::RSACertificateEncryptionProvider::*)(Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters*)>(&X509CertificateUtility::RSACertificateEncryptionProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::RSACertificateEncryptionProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateUtility::RSACertificateEncryptionProvider::*)(Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters*)>(&X509CertificateUtility::RSACertificateEncryptionProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::RSACertificateEncryptionProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters*>()});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::RSACertificateEncryptionProvider::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateUtility::RSACertificateEncryptionProvider::*)()>(&X509CertificateUtility::RSACertificateEncryptionProvider::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::RSACertificateEncryptionProvider*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::RSACertificateEncryptionProvider::SignData
// Il2CppName: SignData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (X509CertificateUtility::RSACertificateEncryptionProvider::*)(::Array<uint8_t>*, int, int)>(&X509CertificateUtility::RSACertificateEncryptionProvider::SignData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::RSACertificateEncryptionProvider*), "SignData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: X509CertificateUtility/<>c
#include "GlobalNamespace/X509CertificateUtility_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly X509CertificateUtility/<>c <>9
GlobalNamespace::X509CertificateUtility::$$c* GlobalNamespace::X509CertificateUtility::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::X509CertificateUtility::$$c*>("", "X509CertificateUtility/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly X509CertificateUtility/<>c <>9
void GlobalNamespace::X509CertificateUtility::$$c::_set_$$9(GlobalNamespace::X509CertificateUtility::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "X509CertificateUtility/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Security.Cryptography.X509Certificates.X509ChainStatus,System.String> <>9__6_0
System::Func_2<System::Security::Cryptography::X509Certificates::X509ChainStatus, ::Il2CppString*>* GlobalNamespace::X509CertificateUtility::$$c::_get_$$9__6_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::$$c::_get_$$9__6_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Security::Cryptography::X509Certificates::X509ChainStatus, ::Il2CppString*>*>("", "X509CertificateUtility/<>c", "<>9__6_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Security.Cryptography.X509Certificates.X509ChainStatus,System.String> <>9__6_0
void GlobalNamespace::X509CertificateUtility::$$c::_set_$$9__6_0(System::Func_2<System::Security::Cryptography::X509Certificates::X509ChainStatus, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::$$c::_set_$$9__6_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "X509CertificateUtility/<>c", "<>9__6_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Security.Cryptography.X509Certificates.X509ChainStatus,System.String> <>9__7_0
System::Func_2<System::Security::Cryptography::X509Certificates::X509ChainStatus, ::Il2CppString*>* GlobalNamespace::X509CertificateUtility::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Security::Cryptography::X509Certificates::X509ChainStatus, ::Il2CppString*>*>("", "X509CertificateUtility/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Security.Cryptography.X509Certificates.X509ChainStatus,System.String> <>9__7_0
void GlobalNamespace::X509CertificateUtility::$$c::_set_$$9__7_0(System::Func_2<System::Security::Cryptography::X509Certificates::X509ChainStatus, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "X509CertificateUtility/<>c", "<>9__7_0", value)));
}
// Autogenerated method: X509CertificateUtility/<>c..cctor
void GlobalNamespace::X509CertificateUtility::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "X509CertificateUtility/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: X509CertificateUtility/<>c.<ValidateCertificateChainUnity>b__6_0
::Il2CppString* GlobalNamespace::X509CertificateUtility::$$c::$ValidateCertificateChainUnity$b__6_0(System::Security::Cryptography::X509Certificates::X509ChainStatus s) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::$$c::<ValidateCertificateChainUnity>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ValidateCertificateChainUnity>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, s);
}
// Autogenerated method: X509CertificateUtility/<>c.<ValidateCertificateChainDotNet>b__7_0
::Il2CppString* GlobalNamespace::X509CertificateUtility::$$c::$ValidateCertificateChainDotNet$b__7_0(System::Security::Cryptography::X509Certificates::X509ChainStatus s) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::$$c::<ValidateCertificateChainDotNet>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ValidateCertificateChainDotNet>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, s);
}
// Writing MetadataGetter for method: X509CertificateUtility::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&X509CertificateUtility::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::$$c::$ValidateCertificateChainUnity$b__6_0
// Il2CppName: <ValidateCertificateChainUnity>b__6_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509CertificateUtility::$$c::*)(System::Security::Cryptography::X509Certificates::X509ChainStatus)>(&X509CertificateUtility::$$c::$ValidateCertificateChainUnity$b__6_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::$$c*), "<ValidateCertificateChainUnity>b__6_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatus>()});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::$$c::$ValidateCertificateChainDotNet$b__7_0
// Il2CppName: <ValidateCertificateChainDotNet>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (X509CertificateUtility::$$c::*)(System::Security::Cryptography::X509Certificates::X509ChainStatus)>(&X509CertificateUtility::$$c::$ValidateCertificateChainDotNet$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::$$c*), "<ValidateCertificateChainDotNet>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509ChainStatus>()});
  }
};
// Writing MetadataGetter for method: X509CertificateUtility::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateUtility::$$c::*)()>(&X509CertificateUtility::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509CertificateUtility::$$c::*)()>(&X509CertificateUtility::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(X509CertificateUtility::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.ITimeProvider.GetTimeMs
int64_t MasterServer::ITimeProvider::GetTimeMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ITimeProvider::GetTimeMs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTimeMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.ITimeProvider.DelayMs
System::Threading::Tasks::Task* MasterServer::ITimeProvider::DelayMs(int millis, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ITimeProvider::DelayMs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DelayMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millis), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, millis, cancellationToken);
}
// Writing MetadataGetter for method: ITimeProvider::GetTimeMs
// Il2CppName: GetTimeMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (ITimeProvider::*)()>(&ITimeProvider::GetTimeMs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITimeProvider*), "GetTimeMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITimeProvider::DelayMs
// Il2CppName: DelayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (ITimeProvider::*)(int, System::Threading::CancellationToken)>(&ITimeProvider::DelayMs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITimeProvider*), "DelayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.BaseClientMessageHandler
#include "MasterServer/BaseClientMessageHandler.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<SendOrderedAuthenticatedRequest>d__18
#include "MasterServer/BaseClientMessageHandler_-SendOrderedAuthenticatedRequest-d__18.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<SendOrderedAuthenticatedRequestAsync>d__19
#include "MasterServer/BaseClientMessageHandler_-SendOrderedAuthenticatedRequestAsync-d__19.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<SendAuthenticatedRequestAsync>d__20`1
#include "MasterServer/BaseClientMessageHandler_-SendAuthenticatedRequestAsync-d__20_1.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<SendAuthenticatedRequestAsync>d__21
#include "MasterServer/BaseClientMessageHandler_-SendAuthenticatedRequestAsync-d__21.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<OnSendFailed>d__22
#include "MasterServer/BaseClientMessageHandler_-OnSendFailed-d__22.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<OnSendFailedAwaitResponse>d__23`1
#include "MasterServer/BaseClientMessageHandler_-OnSendFailedAwaitResponse-d__23_1.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<ReauthenticateWithMasterServer>d__24
#include "MasterServer/BaseClientMessageHandler_-ReauthenticateWithMasterServer-d__24.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServer>d__27
#include "MasterServer/BaseClientMessageHandler_-AuthenticateWithMasterServer-d__27.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServerAsyncInternalVerbose>d__28
#include "MasterServer/BaseClientMessageHandler_-AuthenticateWithMasterServerAsyncInternalVerbose-d__28.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<>c__DisplayClass29_0
#include "MasterServer/BaseClientMessageHandler_--c__DisplayClass29_0.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServerAsyncInternal>d__29
#include "MasterServer/BaseClientMessageHandler_-AuthenticateWithMasterServerAsyncInternal-d__29.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<>c__DisplayClass32_0
#include "MasterServer/BaseClientMessageHandler_--c__DisplayClass32_0.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
// Including type: ICertificateValidator
#include "GlobalNamespace/ICertificateValidator.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Security.Authentication.AuthenticationException
#include "System/Security/Authentication/AuthenticationException.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: IUnconnectedSenderReceiver
#include "GlobalNamespace/IUnconnectedSenderReceiver.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: MasterServer.IAnalyticsManager
#include "MasterServer/IAnalyticsManager.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: MasterServer.IMasterServerReliableResponse
#include "MasterServer/IMasterServerReliableResponse.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: MasterServer.IMasterServerAuthenticateRequest
#include "MasterServer/IMasterServerAuthenticateRequest.hpp"
// Including type: MasterServer.IHandshakeMessage
#include "MasterServer/IHandshakeMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [ThreadStaticAttribute] Offset: 0xDF1070
// Autogenerated static field getter
// Get static field: static private LiteNetLib.Utils.NetDataWriter _authenticationDataWriter
LiteNetLib::Utils::NetDataWriter* MasterServer::BaseClientMessageHandler::_get__authenticationDataWriter() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::_get__authenticationDataWriter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::Utils::NetDataWriter*>("MasterServer", "BaseClientMessageHandler", "_authenticationDataWriter"));
}
// Autogenerated static field setter
// Set static field: static private LiteNetLib.Utils.NetDataWriter _authenticationDataWriter
void MasterServer::BaseClientMessageHandler::_set__authenticationDataWriter(LiteNetLib::Utils::NetDataWriter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::_set__authenticationDataWriter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "BaseClientMessageHandler", "_authenticationDataWriter", value));
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.get_endPoint
GlobalNamespace::MasterServerEndPoint* MasterServer::BaseClientMessageHandler::get_endPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::get_endPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_endPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MasterServerEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.get_isAuthenticated
bool MasterServer::BaseClientMessageHandler::get_isAuthenticated() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::get_isAuthenticated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAuthenticated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.get_isAuthenticating
bool MasterServer::BaseClientMessageHandler::get_isAuthenticating() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::get_isAuthenticating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAuthenticating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.get_hasAuthenticationFailed
bool MasterServer::BaseClientMessageHandler::get_hasAuthenticationFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::get_hasAuthenticationFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasAuthenticationFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.SendOrderedAuthenticatedRequest
void MasterServer::BaseClientMessageHandler::SendOrderedAuthenticatedRequest(::Il2CppString* queue, MasterServer::IMasterServerReliableRequest* message, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::SendOrderedAuthenticatedRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendOrderedAuthenticatedRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(queue), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, queue, message, cancellationToken);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.SendOrderedAuthenticatedRequestAsync
System::Threading::Tasks::Task* MasterServer::BaseClientMessageHandler::SendOrderedAuthenticatedRequestAsync(System::Threading::Tasks::Task* previousTask, MasterServer::IMasterServerReliableRequest* message, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::SendOrderedAuthenticatedRequestAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendOrderedAuthenticatedRequestAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previousTask), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, previousTask, message, cancellationToken);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.SendAuthenticatedRequestAsync
System::Threading::Tasks::Task* MasterServer::BaseClientMessageHandler::SendAuthenticatedRequestAsync(MasterServer::IMasterServerReliableRequest* message, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::SendAuthenticatedRequestAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendAuthenticatedRequestAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, message, cancellationToken);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.OnSendFailed
System::Threading::Tasks::Task* MasterServer::BaseClientMessageHandler::OnSendFailed(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::OnSendFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSendFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, protocolVersion, remoteEndPoint, message, cancellationToken);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.ReauthenticateWithMasterServer
System::Threading::Tasks::Task* MasterServer::BaseClientMessageHandler::ReauthenticateWithMasterServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::ReauthenticateWithMasterServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReauthenticateWithMasterServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.UnauthenticateWithMasterServer
void MasterServer::BaseClientMessageHandler::UnauthenticateWithMasterServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::UnauthenticateWithMasterServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnauthenticateWithMasterServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.AuthenticateWithMasterServerAsync
System::Threading::Tasks::Task* MasterServer::BaseClientMessageHandler::AuthenticateWithMasterServerAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::AuthenticateWithMasterServerAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AuthenticateWithMasterServerAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.AuthenticateWithMasterServer
void MasterServer::BaseClientMessageHandler::AuthenticateWithMasterServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::AuthenticateWithMasterServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AuthenticateWithMasterServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.AuthenticateWithMasterServerAsyncInternalVerbose
System::Threading::Tasks::Task* MasterServer::BaseClientMessageHandler::AuthenticateWithMasterServerAsyncInternalVerbose() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::AuthenticateWithMasterServerAsyncInternalVerbose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AuthenticateWithMasterServerAsyncInternalVerbose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.AuthenticateWithMasterServerAsyncInternal
System::Threading::Tasks::Task* MasterServer::BaseClientMessageHandler::AuthenticateWithMasterServerAsyncInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::AuthenticateWithMasterServerAsyncInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AuthenticateWithMasterServerAsyncInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.GetAuthenticationRequest
System::Threading::Tasks::Task_1<MasterServer::IMasterServerAuthenticateRequest*>* MasterServer::BaseClientMessageHandler::GetAuthenticationRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::GetAuthenticationRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAuthenticationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<MasterServer::IMasterServerAuthenticateRequest*>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.VerifySignature
System::Threading::Tasks::Task_1<bool>* MasterServer::BaseClientMessageHandler::VerifySignature(::Array<uint8_t>* clientRandom, ::Array<uint8_t>* serverRandom, ::Array<uint8_t>* serverKey, ::Array<uint8_t>* signature, ::Array<::Array<uint8_t>*>* certData) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::VerifySignature");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerifySignature", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientRandom), ::il2cpp_utils::ExtractType(serverRandom), ::il2cpp_utils::ExtractType(serverKey), ::il2cpp_utils::ExtractType(signature), ::il2cpp_utils::ExtractType(certData)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, clientRandom, serverRandom, serverKey, signature, certData);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.HandshakeLog
void MasterServer::BaseClientMessageHandler::HandshakeLog(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::HandshakeLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandshakeLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.Dispose
void MasterServer::BaseClientMessageHandler::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.ShouldHandleHandshakeMessage
bool MasterServer::BaseClientMessageHandler::ShouldHandleHandshakeMessage(MasterServer::IHandshakeMessage* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::ShouldHandleHandshakeMessage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldHandleHandshakeMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler.ShouldHandleMessageFromEndPoint
bool MasterServer::BaseClientMessageHandler::ShouldHandleMessageFromEndPoint(System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::ShouldHandleMessageFromEndPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldHandleMessageFromEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::get_endPoint
// Il2CppName: get_endPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MasterServerEndPoint* (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::get_endPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "get_endPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::get_isAuthenticated
// Il2CppName: get_isAuthenticated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::get_isAuthenticated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "get_isAuthenticated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::get_isAuthenticating
// Il2CppName: get_isAuthenticating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::get_isAuthenticating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "get_isAuthenticating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::get_hasAuthenticationFailed
// Il2CppName: get_hasAuthenticationFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::get_hasAuthenticationFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "get_hasAuthenticationFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::*)(GlobalNamespace::IUnconnectedSenderReceiver*, GlobalNamespace::MasterServerEndPoint*, MasterServer::ITimeProvider*, GlobalNamespace::ICertificateValidator*, MasterServer::IAnalyticsManager*)>(&BaseClientMessageHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IUnconnectedSenderReceiver*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ICertificateValidator*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IAnalyticsManager*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::*)(GlobalNamespace::IUnconnectedSenderReceiver*, GlobalNamespace::MasterServerEndPoint*, MasterServer::ITimeProvider*, GlobalNamespace::ICertificateValidator*, MasterServer::IAnalyticsManager*)>(&BaseClientMessageHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IUnconnectedSenderReceiver*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ICertificateValidator*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IAnalyticsManager*>()});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::SendOrderedAuthenticatedRequest
// Il2CppName: SendOrderedAuthenticatedRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::*)(::Il2CppString*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken)>(&BaseClientMessageHandler::SendOrderedAuthenticatedRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "SendOrderedAuthenticatedRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::SendOrderedAuthenticatedRequestAsync
// Il2CppName: SendOrderedAuthenticatedRequestAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (BaseClientMessageHandler::*)(System::Threading::Tasks::Task*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken)>(&BaseClientMessageHandler::SendOrderedAuthenticatedRequestAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "SendOrderedAuthenticatedRequestAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::SendAuthenticatedRequestAsync
// Il2CppName: SendAuthenticatedRequestAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BaseClientMessageHandler::SendAuthenticatedRequestAsync
// Il2CppName: SendAuthenticatedRequestAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (BaseClientMessageHandler::*)(MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken)>(&BaseClientMessageHandler::SendAuthenticatedRequestAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "SendAuthenticatedRequestAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::OnSendFailed
// Il2CppName: OnSendFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (BaseClientMessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken)>(&BaseClientMessageHandler::OnSendFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "OnSendFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::OnSendFailedAwaitResponse
// Il2CppName: OnSendFailedAwaitResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BaseClientMessageHandler::ReauthenticateWithMasterServer
// Il2CppName: ReauthenticateWithMasterServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::ReauthenticateWithMasterServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "ReauthenticateWithMasterServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::UnauthenticateWithMasterServer
// Il2CppName: UnauthenticateWithMasterServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::UnauthenticateWithMasterServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "UnauthenticateWithMasterServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::AuthenticateWithMasterServerAsync
// Il2CppName: AuthenticateWithMasterServerAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::AuthenticateWithMasterServerAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "AuthenticateWithMasterServerAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::AuthenticateWithMasterServer
// Il2CppName: AuthenticateWithMasterServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::AuthenticateWithMasterServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "AuthenticateWithMasterServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::AuthenticateWithMasterServerAsyncInternalVerbose
// Il2CppName: AuthenticateWithMasterServerAsyncInternalVerbose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::AuthenticateWithMasterServerAsyncInternalVerbose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "AuthenticateWithMasterServerAsyncInternalVerbose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::AuthenticateWithMasterServerAsyncInternal
// Il2CppName: AuthenticateWithMasterServerAsyncInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::AuthenticateWithMasterServerAsyncInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "AuthenticateWithMasterServerAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::GetAuthenticationRequest
// Il2CppName: GetAuthenticationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<MasterServer::IMasterServerAuthenticateRequest*>* (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::GetAuthenticationRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "GetAuthenticationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::VerifySignature
// Il2CppName: VerifySignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<bool>* (BaseClientMessageHandler::*)(::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<::Array<uint8_t>*>*)>(&BaseClientMessageHandler::VerifySignature)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "VerifySignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Array<uint8_t>*>*>()});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::HandshakeLog
// Il2CppName: HandshakeLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::*)(::Il2CppString*)>(&BaseClientMessageHandler::HandshakeLog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "HandshakeLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::*)()>(&BaseClientMessageHandler::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::ShouldHandleHandshakeMessage
// Il2CppName: ShouldHandleHandshakeMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseClientMessageHandler::*)(MasterServer::IHandshakeMessage*, MasterServer::MessageHandler::MessageOrigin)>(&BaseClientMessageHandler::ShouldHandleHandshakeMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "ShouldHandleHandshakeMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IHandshakeMessage*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::ShouldHandleMessageFromEndPoint
// Il2CppName: ShouldHandleMessageFromEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseClientMessageHandler::*)(System::Net::IPEndPoint*)>(&BaseClientMessageHandler::ShouldHandleMessageFromEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler*), "ShouldHandleMessageFromEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.BaseClientMessageHandler/<SendOrderedAuthenticatedRequest>d__18
#include "MasterServer/BaseClientMessageHandler_-SendOrderedAuthenticatedRequest-d__18.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.BaseClientMessageHandler/<SendOrderedAuthenticatedRequest>d__18.MoveNext
void MasterServer::BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler/<SendOrderedAuthenticatedRequest>d__18.SetStateMachine
void MasterServer::BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18::*)()>(&BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$SendOrderedAuthenticatedRequest$d__18), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.BaseClientMessageHandler/<SendOrderedAuthenticatedRequestAsync>d__19
#include "MasterServer/BaseClientMessageHandler_-SendOrderedAuthenticatedRequestAsync-d__19.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.BaseClientMessageHandler/<SendOrderedAuthenticatedRequestAsync>d__19.MoveNext
void MasterServer::BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler/<SendOrderedAuthenticatedRequestAsync>d__19.SetStateMachine
void MasterServer::BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19::*)()>(&BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$SendOrderedAuthenticatedRequestAsync$d__19), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.BaseClientMessageHandler/<SendAuthenticatedRequestAsync>d__21
#include "MasterServer/BaseClientMessageHandler_-SendAuthenticatedRequestAsync-d__21.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.BaseClientMessageHandler/<SendAuthenticatedRequestAsync>d__21.MoveNext
void MasterServer::BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler/<SendAuthenticatedRequestAsync>d__21.SetStateMachine
void MasterServer::BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21::*)()>(&BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$SendAuthenticatedRequestAsync$d__21), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.BaseClientMessageHandler/<OnSendFailed>d__22
#include "MasterServer/BaseClientMessageHandler_-OnSendFailed-d__22.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.BaseClientMessageHandler/<OnSendFailed>d__22.MoveNext
void MasterServer::BaseClientMessageHandler::$OnSendFailed$d__22::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$OnSendFailed$d__22::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler/<OnSendFailed>d__22.SetStateMachine
void MasterServer::BaseClientMessageHandler::$OnSendFailed$d__22::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$OnSendFailed$d__22::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::$OnSendFailed$d__22::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$OnSendFailed$d__22::*)()>(&BaseClientMessageHandler::$OnSendFailed$d__22::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$OnSendFailed$d__22), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$OnSendFailed$d__22::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$OnSendFailed$d__22::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&BaseClientMessageHandler::$OnSendFailed$d__22::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$OnSendFailed$d__22), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.BaseClientMessageHandler/<ReauthenticateWithMasterServer>d__24
#include "MasterServer/BaseClientMessageHandler_-ReauthenticateWithMasterServer-d__24.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.BaseClientMessageHandler/<ReauthenticateWithMasterServer>d__24.MoveNext
void MasterServer::BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler/<ReauthenticateWithMasterServer>d__24.SetStateMachine
void MasterServer::BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24::*)()>(&BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$ReauthenticateWithMasterServer$d__24), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServer>d__27
#include "MasterServer/BaseClientMessageHandler_-AuthenticateWithMasterServer-d__27.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServer>d__27.MoveNext
void MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServer>d__27.SetStateMachine
void MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27::*)()>(&BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$AuthenticateWithMasterServer$d__27), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServerAsyncInternalVerbose>d__28
#include "MasterServer/BaseClientMessageHandler_-AuthenticateWithMasterServerAsyncInternalVerbose-d__28.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServerAsyncInternalVerbose>d__28.MoveNext
void MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServerAsyncInternalVerbose>d__28.SetStateMachine
void MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28::*)()>(&BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternalVerbose$d__28), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.BaseClientMessageHandler/<>c__DisplayClass29_0
#include "MasterServer/BaseClientMessageHandler_--c__DisplayClass29_0.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: MasterServer.HelloVerifyRequest
#include "MasterServer/HelloVerifyRequest.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: IDiffieHellmanKeyPair
#include "GlobalNamespace/IDiffieHellmanKeyPair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.BaseClientMessageHandler/<>c__DisplayClass29_0.<AuthenticateWithMasterServerAsyncInternal>b__0
System::Threading::Tasks::Task_1<MasterServer::HelloVerifyRequest*>* MasterServer::BaseClientMessageHandler::$$c__DisplayClass29_0::$AuthenticateWithMasterServerAsyncInternal$b__0(uint protocolVersion, System::Net::IPEndPoint* ep, MasterServer::IMasterServerReliableRequest* request, System::Threading::CancellationToken ct) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$$c__DisplayClass29_0::<AuthenticateWithMasterServerAsyncInternal>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AuthenticateWithMasterServerAsyncInternal>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(ep), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(ct)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<MasterServer::HelloVerifyRequest*>*, false>(this, ___internal__method, protocolVersion, ep, request, ct);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler/<>c__DisplayClass29_0.<AuthenticateWithMasterServerAsyncInternal>b__1
System::Threading::Tasks::Task_1<::Array<uint8_t>*>* MasterServer::BaseClientMessageHandler::$$c__DisplayClass29_0::$AuthenticateWithMasterServerAsyncInternal$b__1(System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$$c__DisplayClass29_0::<AuthenticateWithMasterServerAsyncInternal>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AuthenticateWithMasterServerAsyncInternal>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Array<uint8_t>*>*, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::$$c__DisplayClass29_0::$AuthenticateWithMasterServerAsyncInternal$b__0
// Il2CppName: <AuthenticateWithMasterServerAsyncInternal>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<MasterServer::HelloVerifyRequest*>* (BaseClientMessageHandler::$$c__DisplayClass29_0::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken)>(&BaseClientMessageHandler::$$c__DisplayClass29_0::$AuthenticateWithMasterServerAsyncInternal$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$$c__DisplayClass29_0*), "<AuthenticateWithMasterServerAsyncInternal>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$$c__DisplayClass29_0::$AuthenticateWithMasterServerAsyncInternal$b__1
// Il2CppName: <AuthenticateWithMasterServerAsyncInternal>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<::Array<uint8_t>*>* (BaseClientMessageHandler::$$c__DisplayClass29_0::*)(System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>*)>(&BaseClientMessageHandler::$$c__DisplayClass29_0::$AuthenticateWithMasterServerAsyncInternal$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$$c__DisplayClass29_0*), "<AuthenticateWithMasterServerAsyncInternal>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>*>()});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$$c__DisplayClass29_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$$c__DisplayClass29_0::*)()>(&BaseClientMessageHandler::$$c__DisplayClass29_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$$c__DisplayClass29_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$$c__DisplayClass29_0::*)()>(&BaseClientMessageHandler::$$c__DisplayClass29_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$$c__DisplayClass29_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServerAsyncInternal>d__29
#include "MasterServer/BaseClientMessageHandler_-AuthenticateWithMasterServerAsyncInternal-d__29.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: MasterServer.IMasterServerAuthenticateRequest
#include "MasterServer/IMasterServerAuthenticateRequest.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IDiffieHellmanKeyPair
#include "GlobalNamespace/IDiffieHellmanKeyPair.hpp"
// Including type: MasterServer.ServerCertificateRequest
#include "MasterServer/ServerCertificateRequest.hpp"
// Including type: MasterServer.HelloVerifyRequest
#include "MasterServer/HelloVerifyRequest.hpp"
// Including type: MasterServer.ServerHelloRequest
#include "MasterServer/ServerHelloRequest.hpp"
// Including type: MasterServer.ChangeCipherSpecRequest
#include "MasterServer/ChangeCipherSpecRequest.hpp"
// Including type: MasterServer.IMasterServerAuthenticateResponse
#include "MasterServer/IMasterServerAuthenticateResponse.hpp"
// Including type: MasterServer.BaseClientMessageHandler/<>c__DisplayClass29_0
#include "MasterServer/BaseClientMessageHandler_--c__DisplayClass29_0.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServerAsyncInternal>d__29.MoveNext
void MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseClientMessageHandler/<AuthenticateWithMasterServerAsyncInternal>d__29.SetStateMachine
void MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29::*)()>(&BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$AuthenticateWithMasterServerAsyncInternal$d__29), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.BaseClientMessageHandler/<>c__DisplayClass32_0
#include "MasterServer/BaseClientMessageHandler_--c__DisplayClass32_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.BaseClientMessageHandler/<>c__DisplayClass32_0.<VerifySignature>b__0
bool MasterServer::BaseClientMessageHandler::$$c__DisplayClass32_0::$VerifySignature$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseClientMessageHandler::$$c__DisplayClass32_0::<VerifySignature>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<VerifySignature>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BaseClientMessageHandler::$$c__DisplayClass32_0::$VerifySignature$b__0
// Il2CppName: <VerifySignature>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseClientMessageHandler::$$c__DisplayClass32_0::*)()>(&BaseClientMessageHandler::$$c__DisplayClass32_0::$VerifySignature$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$$c__DisplayClass32_0*), "<VerifySignature>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseClientMessageHandler::$$c__DisplayClass32_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$$c__DisplayClass32_0::*)()>(&BaseClientMessageHandler::$$c__DisplayClass32_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$$c__DisplayClass32_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseClientMessageHandler::$$c__DisplayClass32_0::*)()>(&BaseClientMessageHandler::$$c__DisplayClass32_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseClientMessageHandler::$$c__DisplayClass32_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.BaseMasterServerMultipartMessage
#include "MasterServer/BaseMasterServerMultipartMessage.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kDataChunkSize
int MasterServer::BaseMasterServerMultipartMessage::_get_kDataChunkSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::_get_kDataChunkSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "BaseMasterServerMultipartMessage", "kDataChunkSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kDataChunkSize
void MasterServer::BaseMasterServerMultipartMessage::_set_kDataChunkSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::_set_kDataChunkSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "BaseMasterServerMultipartMessage", "kDataChunkSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaximumDataSize
int MasterServer::BaseMasterServerMultipartMessage::_get_kMaximumDataSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::_get_kMaximumDataSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "BaseMasterServerMultipartMessage", "kMaximumDataSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaximumDataSize
void MasterServer::BaseMasterServerMultipartMessage::_set_kMaximumDataSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::_set_kMaximumDataSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "BaseMasterServerMultipartMessage", "kMaximumDataSize", value));
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.get_multipartMessageId
uint MasterServer::BaseMasterServerMultipartMessage::get_multipartMessageId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::get_multipartMessageId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multipartMessageId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.set_multipartMessageId
void MasterServer::BaseMasterServerMultipartMessage::set_multipartMessageId(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::set_multipartMessageId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_multipartMessageId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.get_offset
int MasterServer::BaseMasterServerMultipartMessage::get_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::get_offset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.set_offset
void MasterServer::BaseMasterServerMultipartMessage::set_offset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::set_offset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_offset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.get_length
int MasterServer::BaseMasterServerMultipartMessage::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::get_length");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.set_length
void MasterServer::BaseMasterServerMultipartMessage::set_length(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::set_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.get_totalLength
int MasterServer::BaseMasterServerMultipartMessage::get_totalLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::get_totalLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_totalLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.set_totalLength
void MasterServer::BaseMasterServerMultipartMessage::set_totalLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::set_totalLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_totalLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.get_data
::Array<uint8_t>* MasterServer::BaseMasterServerMultipartMessage::get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::get_data");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.Init
MasterServer::BaseMasterServerMultipartMessage* MasterServer::BaseMasterServerMultipartMessage::Init(uint multipartMessageId, ::Array<uint8_t>* data, int offset, int length, int totalLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multipartMessageId), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(totalLength)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::BaseMasterServerMultipartMessage*, false>(this, ___internal__method, multipartMessageId, data, offset, length, totalLength);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.Serialize
void MasterServer::BaseMasterServerMultipartMessage::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.BaseMasterServerMultipartMessage.Deserialize
void MasterServer::BaseMasterServerMultipartMessage::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::BaseMasterServerMultipartMessage::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::get_multipartMessageId
// Il2CppName: get_multipartMessageId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (BaseMasterServerMultipartMessage::*)()>(&BaseMasterServerMultipartMessage::get_multipartMessageId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "get_multipartMessageId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::set_multipartMessageId
// Il2CppName: set_multipartMessageId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerMultipartMessage::*)(uint)>(&BaseMasterServerMultipartMessage::set_multipartMessageId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "set_multipartMessageId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::get_offset
// Il2CppName: get_offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BaseMasterServerMultipartMessage::*)()>(&BaseMasterServerMultipartMessage::get_offset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "get_offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::set_offset
// Il2CppName: set_offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerMultipartMessage::*)(int)>(&BaseMasterServerMultipartMessage::set_offset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "set_offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BaseMasterServerMultipartMessage::*)()>(&BaseMasterServerMultipartMessage::get_length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::set_length
// Il2CppName: set_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerMultipartMessage::*)(int)>(&BaseMasterServerMultipartMessage::set_length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "set_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::get_totalLength
// Il2CppName: get_totalLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BaseMasterServerMultipartMessage::*)()>(&BaseMasterServerMultipartMessage::get_totalLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "get_totalLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::set_totalLength
// Il2CppName: set_totalLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerMultipartMessage::*)(int)>(&BaseMasterServerMultipartMessage::set_totalLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "set_totalLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::get_data
// Il2CppName: get_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (BaseMasterServerMultipartMessage::*)()>(&BaseMasterServerMultipartMessage::get_data)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "get_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::BaseMasterServerMultipartMessage* (BaseMasterServerMultipartMessage::*)(uint, ::Array<uint8_t>*, int, int, int)>(&BaseMasterServerMultipartMessage::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerMultipartMessage::*)(LiteNetLib::Utils::NetDataWriter*)>(&BaseMasterServerMultipartMessage::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerMultipartMessage::*)(LiteNetLib::Utils::NetDataReader*)>(&BaseMasterServerMultipartMessage::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: BaseMasterServerMultipartMessage::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerMultipartMessage::*)()>(&BaseMasterServerMultipartMessage::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseMasterServerMultipartMessage::*)()>(&BaseMasterServerMultipartMessage::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseMasterServerMultipartMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.IDedicatedServerClientToServerMessage
#include "MasterServer/IDedicatedServerClientToServerMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.IDedicatedServerClientToServerMessage.get_dedicatedServerId
::Il2CppString* MasterServer::IDedicatedServerClientToServerMessage::get_dedicatedServerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IDedicatedServerClientToServerMessage::get_dedicatedServerId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IDedicatedServerClientToServerMessage.get_dedicatedServerCreationTime
int64_t MasterServer::IDedicatedServerClientToServerMessage::get_dedicatedServerCreationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IDedicatedServerClientToServerMessage::get_dedicatedServerCreationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IDedicatedServerClientToServerMessage::get_dedicatedServerId
// Il2CppName: get_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IDedicatedServerClientToServerMessage::*)()>(&IDedicatedServerClientToServerMessage::get_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDedicatedServerClientToServerMessage*), "get_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDedicatedServerClientToServerMessage::get_dedicatedServerCreationTime
// Il2CppName: get_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (IDedicatedServerClientToServerMessage::*)()>(&IDedicatedServerClientToServerMessage::get_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDedicatedServerClientToServerMessage*), "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.AuthenticateDedicatedServerRequest
#include "MasterServer/AuthenticateDedicatedServerRequest.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.AuthenticateDedicatedServerRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::AuthenticateDedicatedServerRequest*>* MasterServer::AuthenticateDedicatedServerRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "AuthenticateDedicatedServerRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::AuthenticateDedicatedServerRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerRequest.get_dedicatedServerId
::Il2CppString* MasterServer::AuthenticateDedicatedServerRequest::get_dedicatedServerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerRequest::get_dedicatedServerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerRequest.set_dedicatedServerId
void MasterServer::AuthenticateDedicatedServerRequest::set_dedicatedServerId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerRequest::set_dedicatedServerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerRequest.Init
MasterServer::AuthenticateDedicatedServerRequest* MasterServer::AuthenticateDedicatedServerRequest::Init(::Il2CppString* dedicatedServerId, ::Array<uint8_t>* nonce, ::Array<uint8_t>* hash, int64_t timestamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(nonce), ::il2cpp_utils::ExtractType(hash), ::il2cpp_utils::ExtractType(timestamp)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::AuthenticateDedicatedServerRequest*, false>(this, ___internal__method, dedicatedServerId, nonce, hash, timestamp);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerRequest.Serialize
void MasterServer::AuthenticateDedicatedServerRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerRequest.Deserialize
void MasterServer::AuthenticateDedicatedServerRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerRequest.Release
void MasterServer::AuthenticateDedicatedServerRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AuthenticateDedicatedServerRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::AuthenticateDedicatedServerRequest*>* (*)()>(&AuthenticateDedicatedServerRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerRequest::get_dedicatedServerId
// Il2CppName: get_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AuthenticateDedicatedServerRequest::*)()>(&AuthenticateDedicatedServerRequest::get_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerRequest*), "get_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerRequest::set_dedicatedServerId
// Il2CppName: set_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerRequest::*)(::Il2CppString*)>(&AuthenticateDedicatedServerRequest::set_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerRequest*), "set_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::AuthenticateDedicatedServerRequest* (AuthenticateDedicatedServerRequest::*)(::Il2CppString*, ::Array<uint8_t>*, ::Array<uint8_t>*, int64_t)>(&AuthenticateDedicatedServerRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&AuthenticateDedicatedServerRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&AuthenticateDedicatedServerRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerRequest::*)()>(&AuthenticateDedicatedServerRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerRequest::*)()>(&AuthenticateDedicatedServerRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerRequest::*)()>(&AuthenticateDedicatedServerRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.AuthenticateDedicatedServerResponse
#include "MasterServer/AuthenticateDedicatedServerResponse.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.AuthenticateDedicatedServerResponse.get_pool
GlobalNamespace::PacketPool_1<MasterServer::AuthenticateDedicatedServerResponse*>* MasterServer::AuthenticateDedicatedServerResponse::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "AuthenticateDedicatedServerResponse", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::AuthenticateDedicatedServerResponse*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerResponse.get_isAuthenticated
bool MasterServer::AuthenticateDedicatedServerResponse::get_isAuthenticated() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::get_isAuthenticated");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAuthenticated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerResponse.Init
MasterServer::AuthenticateDedicatedServerResponse* MasterServer::AuthenticateDedicatedServerResponse::Init(MasterServer::AuthenticateDedicatedServerResponse::Result result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::AuthenticateDedicatedServerResponse*, false>(this, ___internal__method, result);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerResponse.get_resultCode
uint8_t MasterServer::AuthenticateDedicatedServerResponse::get_resultCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::get_resultCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerResponse.get_resultCodeString
::Il2CppString* MasterServer::AuthenticateDedicatedServerResponse::get_resultCodeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::get_resultCodeString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCodeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerResponse.Serialize
void MasterServer::AuthenticateDedicatedServerResponse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerResponse.Deserialize
void MasterServer::AuthenticateDedicatedServerResponse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.AuthenticateDedicatedServerResponse.Release
void MasterServer::AuthenticateDedicatedServerResponse::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AuthenticateDedicatedServerResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::AuthenticateDedicatedServerResponse*>* (*)()>(&AuthenticateDedicatedServerResponse::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerResponse::get_isAuthenticated
// Il2CppName: get_isAuthenticated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AuthenticateDedicatedServerResponse::*)()>(&AuthenticateDedicatedServerResponse::get_isAuthenticated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerResponse*), "get_isAuthenticated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerResponse::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::AuthenticateDedicatedServerResponse* (AuthenticateDedicatedServerResponse::*)(MasterServer::AuthenticateDedicatedServerResponse::Result)>(&AuthenticateDedicatedServerResponse::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerResponse*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::AuthenticateDedicatedServerResponse::Result>()});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (AuthenticateDedicatedServerResponse::*)()>(&AuthenticateDedicatedServerResponse::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AuthenticateDedicatedServerResponse::*)()>(&AuthenticateDedicatedServerResponse::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&AuthenticateDedicatedServerResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&AuthenticateDedicatedServerResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerResponse::*)()>(&AuthenticateDedicatedServerResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateDedicatedServerResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerResponse::*)()>(&AuthenticateDedicatedServerResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateDedicatedServerResponse::*)()>(&AuthenticateDedicatedServerResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateDedicatedServerResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.AuthenticateDedicatedServerResponse/Result
#include "MasterServer/AuthenticateDedicatedServerResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.AuthenticateDedicatedServerResponse/Result Success
MasterServer::AuthenticateDedicatedServerResponse::Result MasterServer::AuthenticateDedicatedServerResponse::Result::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::Result::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AuthenticateDedicatedServerResponse::Result>("MasterServer", "AuthenticateDedicatedServerResponse/Result", "Success"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AuthenticateDedicatedServerResponse/Result Success
void MasterServer::AuthenticateDedicatedServerResponse::Result::_set_Success(MasterServer::AuthenticateDedicatedServerResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::Result::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AuthenticateDedicatedServerResponse/Result", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.AuthenticateDedicatedServerResponse/Result Failed
MasterServer::AuthenticateDedicatedServerResponse::Result MasterServer::AuthenticateDedicatedServerResponse::Result::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::Result::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AuthenticateDedicatedServerResponse::Result>("MasterServer", "AuthenticateDedicatedServerResponse/Result", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AuthenticateDedicatedServerResponse/Result Failed
void MasterServer::AuthenticateDedicatedServerResponse::Result::_set_Failed(MasterServer::AuthenticateDedicatedServerResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::Result::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AuthenticateDedicatedServerResponse/Result", "Failed", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.AuthenticateDedicatedServerResponse/Result UnknownError
MasterServer::AuthenticateDedicatedServerResponse::Result MasterServer::AuthenticateDedicatedServerResponse::Result::_get_UnknownError() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::Result::_get_UnknownError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AuthenticateDedicatedServerResponse::Result>("MasterServer", "AuthenticateDedicatedServerResponse/Result", "UnknownError"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AuthenticateDedicatedServerResponse/Result UnknownError
void MasterServer::AuthenticateDedicatedServerResponse::Result::_set_UnknownError(MasterServer::AuthenticateDedicatedServerResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerResponse::Result::_set_UnknownError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AuthenticateDedicatedServerResponse/Result", "UnknownError", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.CreateRelayServerRequest
#include "MasterServer/CreateRelayServerRequest.hpp"
// Including type: MasterServer.CreateRelayServerRequest/V3
#include "MasterServer/CreateRelayServerRequest_V3.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: IVersionedPacketPool`1
#include "GlobalNamespace/IVersionedPacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.CreateRelayServerRequest.get_pool
GlobalNamespace::IVersionedPacketPool_1<MasterServer::CreateRelayServerRequest*>* MasterServer::CreateRelayServerRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "CreateRelayServerRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IVersionedPacketPool_1<MasterServer::CreateRelayServerRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.CreateRelayServerRequest.Init
MasterServer::CreateRelayServerRequest* MasterServer::CreateRelayServerRequest::Init(::Il2CppString* secret, ::Il2CppString* ownerUserId, ::Il2CppString* ownerUserName, System::Net::IPEndPoint* ownerEndPoint, ::Array<uint8_t>* ownerRandom, ::Array<uint8_t>* ownerPublicKey, ::Il2CppString* clientUserId, ::Il2CppString* clientUserName, System::Net::IPEndPoint* clientEndPoint, ::Array<uint8_t>* clientRandom, ::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(ownerUserId), ::il2cpp_utils::ExtractType(ownerUserName), ::il2cpp_utils::ExtractType(ownerEndPoint), ::il2cpp_utils::ExtractType(ownerRandom), ::il2cpp_utils::ExtractType(ownerPublicKey), ::il2cpp_utils::ExtractType(clientUserId), ::il2cpp_utils::ExtractType(clientUserName), ::il2cpp_utils::ExtractType(clientEndPoint), ::il2cpp_utils::ExtractType(clientRandom), ::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::CreateRelayServerRequest*, false>(this, ___internal__method, secret, ownerUserId, ownerUserName, ownerEndPoint, ownerRandom, ownerPublicKey, clientUserId, clientUserName, clientEndPoint, clientRandom, clientPublicKey);
}
// Autogenerated method: MasterServer.CreateRelayServerRequest.Serialize
void MasterServer::CreateRelayServerRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.CreateRelayServerRequest.Deserialize
void MasterServer::CreateRelayServerRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.CreateRelayServerRequest.Release
void MasterServer::CreateRelayServerRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CreateRelayServerRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IVersionedPacketPool_1<MasterServer::CreateRelayServerRequest*>* (*)()>(&CreateRelayServerRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateRelayServerRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::CreateRelayServerRequest* (CreateRelayServerRequest::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*)>(&CreateRelayServerRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&CreateRelayServerRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&CreateRelayServerRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerRequest::*)()>(&CreateRelayServerRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateRelayServerRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerRequest::*)()>(&CreateRelayServerRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerRequest::*)()>(&CreateRelayServerRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.CreateRelayServerRequest/V3
#include "MasterServer/CreateRelayServerRequest_V3.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.CreateRelayServerRequest/V3.Serialize
void MasterServer::CreateRelayServerRequest::V3::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerRequest::V3::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.CreateRelayServerRequest/V3.Deserialize
void MasterServer::CreateRelayServerRequest::V3::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerRequest::V3::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: CreateRelayServerRequest::V3::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerRequest::V3::*)(LiteNetLib::Utils::NetDataWriter*)>(&CreateRelayServerRequest::V3::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest::V3*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerRequest::V3::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerRequest::V3::*)(LiteNetLib::Utils::NetDataReader*)>(&CreateRelayServerRequest::V3::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest::V3*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerRequest::V3::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerRequest::V3::*)()>(&CreateRelayServerRequest::V3::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest::V3*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerRequest::V3::*)()>(&CreateRelayServerRequest::V3::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerRequest::V3*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.CreateRelayServerResponse
#include "MasterServer/CreateRelayServerResponse.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.CreateRelayServerResponse.get_pool
GlobalNamespace::PacketPool_1<MasterServer::CreateRelayServerResponse*>* MasterServer::CreateRelayServerResponse::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "CreateRelayServerResponse", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::CreateRelayServerResponse*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.get_dedicatedServerId
::Il2CppString* MasterServer::CreateRelayServerResponse::get_dedicatedServerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::get_dedicatedServerId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.set_dedicatedServerId
void MasterServer::CreateRelayServerResponse::set_dedicatedServerId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::set_dedicatedServerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.get_dedicatedServerCreationTime
int64_t MasterServer::CreateRelayServerResponse::get_dedicatedServerCreationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::get_dedicatedServerCreationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.set_dedicatedServerCreationTime
void MasterServer::CreateRelayServerResponse::set_dedicatedServerCreationTime(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::set_dedicatedServerCreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.InitForFailure
MasterServer::CreateRelayServerResponse* MasterServer::CreateRelayServerResponse::InitForFailure(::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, MasterServer::CreateRelayServerResponse::Result result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::InitForFailure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitForFailure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::CreateRelayServerResponse*, false>(this, ___internal__method, dedicatedServerId, dedicatedServerCreationTime, result);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.InitForSuccess
MasterServer::CreateRelayServerResponse* MasterServer::CreateRelayServerResponse::InitForSuccess(::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, ::Il2CppString* id, int port, ::Array<uint8_t>* random, ::Array<uint8_t>* publicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::InitForSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitForSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(random), ::il2cpp_utils::ExtractType(publicKey)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::CreateRelayServerResponse*, false>(this, ___internal__method, dedicatedServerId, dedicatedServerCreationTime, id, port, random, publicKey);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.get_resultCode
uint8_t MasterServer::CreateRelayServerResponse::get_resultCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::get_resultCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.get_resultCodeString
::Il2CppString* MasterServer::CreateRelayServerResponse::get_resultCodeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::get_resultCodeString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCodeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.Serialize
void MasterServer::CreateRelayServerResponse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.Deserialize
void MasterServer::CreateRelayServerResponse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.CreateRelayServerResponse.Release
void MasterServer::CreateRelayServerResponse::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CreateRelayServerResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::CreateRelayServerResponse*>* (*)()>(&CreateRelayServerResponse::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::get_dedicatedServerId
// Il2CppName: get_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CreateRelayServerResponse::*)()>(&CreateRelayServerResponse::get_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "get_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::set_dedicatedServerId
// Il2CppName: set_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerResponse::*)(::Il2CppString*)>(&CreateRelayServerResponse::set_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "set_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::get_dedicatedServerCreationTime
// Il2CppName: get_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (CreateRelayServerResponse::*)()>(&CreateRelayServerResponse::get_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::set_dedicatedServerCreationTime
// Il2CppName: set_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerResponse::*)(int64_t)>(&CreateRelayServerResponse::set_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::InitForFailure
// Il2CppName: InitForFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::CreateRelayServerResponse* (CreateRelayServerResponse::*)(::Il2CppString*, int64_t, MasterServer::CreateRelayServerResponse::Result)>(&CreateRelayServerResponse::InitForFailure)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "InitForFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::CreateRelayServerResponse::Result>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::InitForSuccess
// Il2CppName: InitForSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::CreateRelayServerResponse* (CreateRelayServerResponse::*)(::Il2CppString*, int64_t, ::Il2CppString*, int, ::Array<uint8_t>*, ::Array<uint8_t>*)>(&CreateRelayServerResponse::InitForSuccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "InitForSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (CreateRelayServerResponse::*)()>(&CreateRelayServerResponse::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CreateRelayServerResponse::*)()>(&CreateRelayServerResponse::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&CreateRelayServerResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&CreateRelayServerResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerResponse::*)()>(&CreateRelayServerResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateRelayServerResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerResponse::*)()>(&CreateRelayServerResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateRelayServerResponse::*)()>(&CreateRelayServerResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateRelayServerResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.CreateRelayServerResponse/Result
#include "MasterServer/CreateRelayServerResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.CreateRelayServerResponse/Result Success
MasterServer::CreateRelayServerResponse::Result MasterServer::CreateRelayServerResponse::Result::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::Result::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::CreateRelayServerResponse::Result>("MasterServer", "CreateRelayServerResponse/Result", "Success"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.CreateRelayServerResponse/Result Success
void MasterServer::CreateRelayServerResponse::Result::_set_Success(MasterServer::CreateRelayServerResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::Result::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "CreateRelayServerResponse/Result", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.CreateRelayServerResponse/Result NoAvailableServerSlots
MasterServer::CreateRelayServerResponse::Result MasterServer::CreateRelayServerResponse::Result::_get_NoAvailableServerSlots() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::Result::_get_NoAvailableServerSlots");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::CreateRelayServerResponse::Result>("MasterServer", "CreateRelayServerResponse/Result", "NoAvailableServerSlots"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.CreateRelayServerResponse/Result NoAvailableServerSlots
void MasterServer::CreateRelayServerResponse::Result::_set_NoAvailableServerSlots(MasterServer::CreateRelayServerResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::Result::_set_NoAvailableServerSlots");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "CreateRelayServerResponse/Result", "NoAvailableServerSlots", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.CreateRelayServerResponse/Result UnknownError
MasterServer::CreateRelayServerResponse::Result MasterServer::CreateRelayServerResponse::Result::_get_UnknownError() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::Result::_get_UnknownError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::CreateRelayServerResponse::Result>("MasterServer", "CreateRelayServerResponse/Result", "UnknownError"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.CreateRelayServerResponse/Result UnknownError
void MasterServer::CreateRelayServerResponse::Result::_set_UnknownError(MasterServer::CreateRelayServerResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateRelayServerResponse::Result::_set_UnknownError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "CreateRelayServerResponse/Result", "UnknownError", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.CreateMatchmakingServerRequest
#include "MasterServer/CreateMatchmakingServerRequest.hpp"
// Including type: MasterServer.CreateMatchmakingServerRequest/V3
#include "MasterServer/CreateMatchmakingServerRequest_V3.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: IVersionedPacketPool`1
#include "GlobalNamespace/IVersionedPacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.CreateMatchmakingServerRequest.get_pool
GlobalNamespace::IVersionedPacketPool_1<MasterServer::CreateMatchmakingServerRequest*>* MasterServer::CreateMatchmakingServerRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "CreateMatchmakingServerRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IVersionedPacketPool_1<MasterServer::CreateMatchmakingServerRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerRequest.Init
MasterServer::CreateMatchmakingServerRequest* MasterServer::CreateMatchmakingServerRequest::Init(::Il2CppString* secret, GlobalNamespace::GameplayServerConfiguration configuration, bool privateServer, ::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* userEndPoint, ::Array<uint8_t>* userRandom, ::Array<uint8_t>* userPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(privateServer), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(userEndPoint), ::il2cpp_utils::ExtractType(userRandom), ::il2cpp_utils::ExtractType(userPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::CreateMatchmakingServerRequest*, false>(this, ___internal__method, secret, configuration, privateServer, userId, userName, userEndPoint, userRandom, userPublicKey);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerRequest.Release
void MasterServer::CreateMatchmakingServerRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerRequest.Serialize
void MasterServer::CreateMatchmakingServerRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerRequest.Deserialize
void MasterServer::CreateMatchmakingServerRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: CreateMatchmakingServerRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IVersionedPacketPool_1<MasterServer::CreateMatchmakingServerRequest*>* (*)()>(&CreateMatchmakingServerRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::CreateMatchmakingServerRequest* (CreateMatchmakingServerRequest::*)(::Il2CppString*, GlobalNamespace::GameplayServerConfiguration, bool, ::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*)>(&CreateMatchmakingServerRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerRequest::*)()>(&CreateMatchmakingServerRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&CreateMatchmakingServerRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&CreateMatchmakingServerRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerRequest::*)()>(&CreateMatchmakingServerRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerRequest::*)()>(&CreateMatchmakingServerRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.CreateMatchmakingServerRequest/V3
#include "MasterServer/CreateMatchmakingServerRequest_V3.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.CreateMatchmakingServerRequest/V3.Serialize
void MasterServer::CreateMatchmakingServerRequest::V3::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerRequest::V3::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerRequest/V3.Deserialize
void MasterServer::CreateMatchmakingServerRequest::V3::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerRequest::V3::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: CreateMatchmakingServerRequest::V3::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerRequest::V3::*)(LiteNetLib::Utils::NetDataWriter*)>(&CreateMatchmakingServerRequest::V3::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest::V3*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerRequest::V3::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerRequest::V3::*)(LiteNetLib::Utils::NetDataReader*)>(&CreateMatchmakingServerRequest::V3::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest::V3*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerRequest::V3::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerRequest::V3::*)()>(&CreateMatchmakingServerRequest::V3::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest::V3*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerRequest::V3::*)()>(&CreateMatchmakingServerRequest::V3::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerRequest::V3*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.CreateMatchmakingServerResponse
#include "MasterServer/CreateMatchmakingServerResponse.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.get_pool
GlobalNamespace::PacketPool_1<MasterServer::CreateMatchmakingServerResponse*>* MasterServer::CreateMatchmakingServerResponse::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "CreateMatchmakingServerResponse", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::CreateMatchmakingServerResponse*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.get_dedicatedServerId
::Il2CppString* MasterServer::CreateMatchmakingServerResponse::get_dedicatedServerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::get_dedicatedServerId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.set_dedicatedServerId
void MasterServer::CreateMatchmakingServerResponse::set_dedicatedServerId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::set_dedicatedServerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.get_dedicatedServerCreationTime
int64_t MasterServer::CreateMatchmakingServerResponse::get_dedicatedServerCreationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::get_dedicatedServerCreationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.set_dedicatedServerCreationTime
void MasterServer::CreateMatchmakingServerResponse::set_dedicatedServerCreationTime(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::set_dedicatedServerCreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.InitForFailure
MasterServer::CreateMatchmakingServerResponse* MasterServer::CreateMatchmakingServerResponse::InitForFailure(::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, MasterServer::CreateMatchmakingServerResponse::Result result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::InitForFailure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitForFailure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::CreateMatchmakingServerResponse*, false>(this, ___internal__method, dedicatedServerId, dedicatedServerCreationTime, result);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.InitForSuccess
MasterServer::CreateMatchmakingServerResponse* MasterServer::CreateMatchmakingServerResponse::InitForSuccess(::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, ::Il2CppString* id, int port, ::Array<uint8_t>* random, ::Array<uint8_t>* publicKey, int maxPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::InitForSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitForSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(random), ::il2cpp_utils::ExtractType(publicKey), ::il2cpp_utils::ExtractType(maxPlayerCount)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::CreateMatchmakingServerResponse*, false>(this, ___internal__method, dedicatedServerId, dedicatedServerCreationTime, id, port, random, publicKey, maxPlayerCount);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.get_resultCode
uint8_t MasterServer::CreateMatchmakingServerResponse::get_resultCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::get_resultCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.get_resultCodeString
::Il2CppString* MasterServer::CreateMatchmakingServerResponse::get_resultCodeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::get_resultCodeString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCodeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.Serialize
void MasterServer::CreateMatchmakingServerResponse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.Deserialize
void MasterServer::CreateMatchmakingServerResponse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.CreateMatchmakingServerResponse.Release
void MasterServer::CreateMatchmakingServerResponse::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::CreateMatchmakingServerResponse*>* (*)()>(&CreateMatchmakingServerResponse::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::get_dedicatedServerId
// Il2CppName: get_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CreateMatchmakingServerResponse::*)()>(&CreateMatchmakingServerResponse::get_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "get_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::set_dedicatedServerId
// Il2CppName: set_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerResponse::*)(::Il2CppString*)>(&CreateMatchmakingServerResponse::set_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "set_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::get_dedicatedServerCreationTime
// Il2CppName: get_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (CreateMatchmakingServerResponse::*)()>(&CreateMatchmakingServerResponse::get_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::set_dedicatedServerCreationTime
// Il2CppName: set_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerResponse::*)(int64_t)>(&CreateMatchmakingServerResponse::set_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::InitForFailure
// Il2CppName: InitForFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::CreateMatchmakingServerResponse* (CreateMatchmakingServerResponse::*)(::Il2CppString*, int64_t, MasterServer::CreateMatchmakingServerResponse::Result)>(&CreateMatchmakingServerResponse::InitForFailure)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "InitForFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::CreateMatchmakingServerResponse::Result>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::InitForSuccess
// Il2CppName: InitForSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::CreateMatchmakingServerResponse* (CreateMatchmakingServerResponse::*)(::Il2CppString*, int64_t, ::Il2CppString*, int, ::Array<uint8_t>*, ::Array<uint8_t>*, int)>(&CreateMatchmakingServerResponse::InitForSuccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "InitForSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (CreateMatchmakingServerResponse::*)()>(&CreateMatchmakingServerResponse::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CreateMatchmakingServerResponse::*)()>(&CreateMatchmakingServerResponse::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&CreateMatchmakingServerResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&CreateMatchmakingServerResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerResponse::*)()>(&CreateMatchmakingServerResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateMatchmakingServerResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerResponse::*)()>(&CreateMatchmakingServerResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateMatchmakingServerResponse::*)()>(&CreateMatchmakingServerResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateMatchmakingServerResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.CreateMatchmakingServerResponse/Result
#include "MasterServer/CreateMatchmakingServerResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.CreateMatchmakingServerResponse/Result Success
MasterServer::CreateMatchmakingServerResponse::Result MasterServer::CreateMatchmakingServerResponse::Result::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::Result::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::CreateMatchmakingServerResponse::Result>("MasterServer", "CreateMatchmakingServerResponse/Result", "Success"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.CreateMatchmakingServerResponse/Result Success
void MasterServer::CreateMatchmakingServerResponse::Result::_set_Success(MasterServer::CreateMatchmakingServerResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::Result::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "CreateMatchmakingServerResponse/Result", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.CreateMatchmakingServerResponse/Result NoAvailableServerSlots
MasterServer::CreateMatchmakingServerResponse::Result MasterServer::CreateMatchmakingServerResponse::Result::_get_NoAvailableServerSlots() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::Result::_get_NoAvailableServerSlots");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::CreateMatchmakingServerResponse::Result>("MasterServer", "CreateMatchmakingServerResponse/Result", "NoAvailableServerSlots"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.CreateMatchmakingServerResponse/Result NoAvailableServerSlots
void MasterServer::CreateMatchmakingServerResponse::Result::_set_NoAvailableServerSlots(MasterServer::CreateMatchmakingServerResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::Result::_set_NoAvailableServerSlots");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "CreateMatchmakingServerResponse/Result", "NoAvailableServerSlots", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.CreateMatchmakingServerResponse/Result UnknownError
MasterServer::CreateMatchmakingServerResponse::Result MasterServer::CreateMatchmakingServerResponse::Result::_get_UnknownError() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::Result::_get_UnknownError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::CreateMatchmakingServerResponse::Result>("MasterServer", "CreateMatchmakingServerResponse/Result", "UnknownError"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.CreateMatchmakingServerResponse/Result UnknownError
void MasterServer::CreateMatchmakingServerResponse::Result::_set_UnknownError(MasterServer::CreateMatchmakingServerResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::CreateMatchmakingServerResponse::Result::_set_UnknownError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "CreateMatchmakingServerResponse/Result", "UnknownError", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.DedicatedServerNoLongerOccupiedRequest
#include "MasterServer/DedicatedServerNoLongerOccupiedRequest.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.DedicatedServerNoLongerOccupiedRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerNoLongerOccupiedRequest*>* MasterServer::DedicatedServerNoLongerOccupiedRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerNoLongerOccupiedRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "DedicatedServerNoLongerOccupiedRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerNoLongerOccupiedRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerNoLongerOccupiedRequest.get_dedicatedServerId
::Il2CppString* MasterServer::DedicatedServerNoLongerOccupiedRequest::get_dedicatedServerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerNoLongerOccupiedRequest::get_dedicatedServerId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerNoLongerOccupiedRequest.set_dedicatedServerId
void MasterServer::DedicatedServerNoLongerOccupiedRequest::set_dedicatedServerId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerNoLongerOccupiedRequest::set_dedicatedServerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.DedicatedServerNoLongerOccupiedRequest.get_dedicatedServerCreationTime
int64_t MasterServer::DedicatedServerNoLongerOccupiedRequest::get_dedicatedServerCreationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerNoLongerOccupiedRequest::get_dedicatedServerCreationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerNoLongerOccupiedRequest.set_dedicatedServerCreationTime
void MasterServer::DedicatedServerNoLongerOccupiedRequest::set_dedicatedServerCreationTime(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerNoLongerOccupiedRequest::set_dedicatedServerCreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.DedicatedServerNoLongerOccupiedRequest.Init
MasterServer::DedicatedServerNoLongerOccupiedRequest* MasterServer::DedicatedServerNoLongerOccupiedRequest::Init(::Il2CppString* dedicatedServerId, ::Il2CppString* id) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerNoLongerOccupiedRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::DedicatedServerNoLongerOccupiedRequest*, false>(this, ___internal__method, dedicatedServerId, id);
}
// Autogenerated method: MasterServer.DedicatedServerNoLongerOccupiedRequest.Serialize
void MasterServer::DedicatedServerNoLongerOccupiedRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerNoLongerOccupiedRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.DedicatedServerNoLongerOccupiedRequest.Deserialize
void MasterServer::DedicatedServerNoLongerOccupiedRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerNoLongerOccupiedRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.DedicatedServerNoLongerOccupiedRequest.Release
void MasterServer::DedicatedServerNoLongerOccupiedRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerNoLongerOccupiedRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DedicatedServerNoLongerOccupiedRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerNoLongerOccupiedRequest*>* (*)()>(&DedicatedServerNoLongerOccupiedRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerNoLongerOccupiedRequest::get_dedicatedServerId
// Il2CppName: get_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DedicatedServerNoLongerOccupiedRequest::*)()>(&DedicatedServerNoLongerOccupiedRequest::get_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), "get_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerNoLongerOccupiedRequest::set_dedicatedServerId
// Il2CppName: set_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerNoLongerOccupiedRequest::*)(::Il2CppString*)>(&DedicatedServerNoLongerOccupiedRequest::set_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), "set_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerNoLongerOccupiedRequest::get_dedicatedServerCreationTime
// Il2CppName: get_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (DedicatedServerNoLongerOccupiedRequest::*)()>(&DedicatedServerNoLongerOccupiedRequest::get_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerNoLongerOccupiedRequest::set_dedicatedServerCreationTime
// Il2CppName: set_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerNoLongerOccupiedRequest::*)(int64_t)>(&DedicatedServerNoLongerOccupiedRequest::set_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerNoLongerOccupiedRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::DedicatedServerNoLongerOccupiedRequest* (DedicatedServerNoLongerOccupiedRequest::*)(::Il2CppString*, ::Il2CppString*)>(&DedicatedServerNoLongerOccupiedRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerNoLongerOccupiedRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerNoLongerOccupiedRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&DedicatedServerNoLongerOccupiedRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerNoLongerOccupiedRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerNoLongerOccupiedRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&DedicatedServerNoLongerOccupiedRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerNoLongerOccupiedRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerNoLongerOccupiedRequest::*)()>(&DedicatedServerNoLongerOccupiedRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerNoLongerOccupiedRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerNoLongerOccupiedRequest::*)()>(&DedicatedServerNoLongerOccupiedRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerNoLongerOccupiedRequest::*)()>(&DedicatedServerNoLongerOccupiedRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerNoLongerOccupiedRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.RelayServerStatusUpdateRequest
#include "MasterServer/RelayServerStatusUpdateRequest.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.RelayServerStatusUpdateRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::RelayServerStatusUpdateRequest*>* MasterServer::RelayServerStatusUpdateRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::RelayServerStatusUpdateRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "RelayServerStatusUpdateRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::RelayServerStatusUpdateRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.RelayServerStatusUpdateRequest.get_dedicatedServerId
::Il2CppString* MasterServer::RelayServerStatusUpdateRequest::get_dedicatedServerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::RelayServerStatusUpdateRequest::get_dedicatedServerId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.RelayServerStatusUpdateRequest.set_dedicatedServerId
void MasterServer::RelayServerStatusUpdateRequest::set_dedicatedServerId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::RelayServerStatusUpdateRequest::set_dedicatedServerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.RelayServerStatusUpdateRequest.get_dedicatedServerCreationTime
int64_t MasterServer::RelayServerStatusUpdateRequest::get_dedicatedServerCreationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::RelayServerStatusUpdateRequest::get_dedicatedServerCreationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.RelayServerStatusUpdateRequest.set_dedicatedServerCreationTime
void MasterServer::RelayServerStatusUpdateRequest::set_dedicatedServerCreationTime(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::RelayServerStatusUpdateRequest::set_dedicatedServerCreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.RelayServerStatusUpdateRequest.Init
MasterServer::RelayServerStatusUpdateRequest* MasterServer::RelayServerStatusUpdateRequest::Init(::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, ::Il2CppString* id, int currentPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::RelayServerStatusUpdateRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(currentPlayerCount)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::RelayServerStatusUpdateRequest*, false>(this, ___internal__method, dedicatedServerId, dedicatedServerCreationTime, id, currentPlayerCount);
}
// Autogenerated method: MasterServer.RelayServerStatusUpdateRequest.Serialize
void MasterServer::RelayServerStatusUpdateRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::RelayServerStatusUpdateRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.RelayServerStatusUpdateRequest.Deserialize
void MasterServer::RelayServerStatusUpdateRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::RelayServerStatusUpdateRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.RelayServerStatusUpdateRequest.Release
void MasterServer::RelayServerStatusUpdateRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::RelayServerStatusUpdateRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RelayServerStatusUpdateRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::RelayServerStatusUpdateRequest*>* (*)()>(&RelayServerStatusUpdateRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RelayServerStatusUpdateRequest::get_dedicatedServerId
// Il2CppName: get_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RelayServerStatusUpdateRequest::*)()>(&RelayServerStatusUpdateRequest::get_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), "get_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RelayServerStatusUpdateRequest::set_dedicatedServerId
// Il2CppName: set_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelayServerStatusUpdateRequest::*)(::Il2CppString*)>(&RelayServerStatusUpdateRequest::set_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), "set_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: RelayServerStatusUpdateRequest::get_dedicatedServerCreationTime
// Il2CppName: get_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (RelayServerStatusUpdateRequest::*)()>(&RelayServerStatusUpdateRequest::get_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RelayServerStatusUpdateRequest::set_dedicatedServerCreationTime
// Il2CppName: set_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelayServerStatusUpdateRequest::*)(int64_t)>(&RelayServerStatusUpdateRequest::set_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: RelayServerStatusUpdateRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::RelayServerStatusUpdateRequest* (RelayServerStatusUpdateRequest::*)(::Il2CppString*, int64_t, ::Il2CppString*, int)>(&RelayServerStatusUpdateRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: RelayServerStatusUpdateRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelayServerStatusUpdateRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&RelayServerStatusUpdateRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: RelayServerStatusUpdateRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelayServerStatusUpdateRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&RelayServerStatusUpdateRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: RelayServerStatusUpdateRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelayServerStatusUpdateRequest::*)()>(&RelayServerStatusUpdateRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RelayServerStatusUpdateRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelayServerStatusUpdateRequest::*)()>(&RelayServerStatusUpdateRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelayServerStatusUpdateRequest::*)()>(&RelayServerStatusUpdateRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelayServerStatusUpdateRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.MatchmakingServerStatusUpdateRequest
#include "MasterServer/MatchmakingServerStatusUpdateRequest.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.MatchmakingServerStatusUpdateRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::MatchmakingServerStatusUpdateRequest*>* MasterServer::MatchmakingServerStatusUpdateRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MatchmakingServerStatusUpdateRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "MatchmakingServerStatusUpdateRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::MatchmakingServerStatusUpdateRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.MatchmakingServerStatusUpdateRequest.get_dedicatedServerId
::Il2CppString* MasterServer::MatchmakingServerStatusUpdateRequest::get_dedicatedServerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MatchmakingServerStatusUpdateRequest::get_dedicatedServerId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MatchmakingServerStatusUpdateRequest.set_dedicatedServerId
void MasterServer::MatchmakingServerStatusUpdateRequest::set_dedicatedServerId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MatchmakingServerStatusUpdateRequest::set_dedicatedServerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.MatchmakingServerStatusUpdateRequest.get_dedicatedServerCreationTime
int64_t MasterServer::MatchmakingServerStatusUpdateRequest::get_dedicatedServerCreationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MatchmakingServerStatusUpdateRequest::get_dedicatedServerCreationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MatchmakingServerStatusUpdateRequest.set_dedicatedServerCreationTime
void MasterServer::MatchmakingServerStatusUpdateRequest::set_dedicatedServerCreationTime(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MatchmakingServerStatusUpdateRequest::set_dedicatedServerCreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.MatchmakingServerStatusUpdateRequest.Init
MasterServer::MatchmakingServerStatusUpdateRequest* MasterServer::MatchmakingServerStatusUpdateRequest::Init(::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, ::Il2CppString* id, GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType gameState, int currentPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MatchmakingServerStatusUpdateRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(gameState), ::il2cpp_utils::ExtractType(currentPlayerCount)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::MatchmakingServerStatusUpdateRequest*, false>(this, ___internal__method, dedicatedServerId, dedicatedServerCreationTime, id, gameState, currentPlayerCount);
}
// Autogenerated method: MasterServer.MatchmakingServerStatusUpdateRequest.Serialize
void MasterServer::MatchmakingServerStatusUpdateRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MatchmakingServerStatusUpdateRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.MatchmakingServerStatusUpdateRequest.Deserialize
void MasterServer::MatchmakingServerStatusUpdateRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MatchmakingServerStatusUpdateRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.MatchmakingServerStatusUpdateRequest.Release
void MasterServer::MatchmakingServerStatusUpdateRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MatchmakingServerStatusUpdateRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MatchmakingServerStatusUpdateRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::MatchmakingServerStatusUpdateRequest*>* (*)()>(&MatchmakingServerStatusUpdateRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MatchmakingServerStatusUpdateRequest::get_dedicatedServerId
// Il2CppName: get_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MatchmakingServerStatusUpdateRequest::*)()>(&MatchmakingServerStatusUpdateRequest::get_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), "get_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MatchmakingServerStatusUpdateRequest::set_dedicatedServerId
// Il2CppName: set_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MatchmakingServerStatusUpdateRequest::*)(::Il2CppString*)>(&MatchmakingServerStatusUpdateRequest::set_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), "set_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MatchmakingServerStatusUpdateRequest::get_dedicatedServerCreationTime
// Il2CppName: get_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (MatchmakingServerStatusUpdateRequest::*)()>(&MatchmakingServerStatusUpdateRequest::get_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MatchmakingServerStatusUpdateRequest::set_dedicatedServerCreationTime
// Il2CppName: set_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MatchmakingServerStatusUpdateRequest::*)(int64_t)>(&MatchmakingServerStatusUpdateRequest::set_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: MatchmakingServerStatusUpdateRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::MatchmakingServerStatusUpdateRequest* (MatchmakingServerStatusUpdateRequest::*)(::Il2CppString*, int64_t, ::Il2CppString*, GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType, int)>(&MatchmakingServerStatusUpdateRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MatchmakingServerStatusUpdateRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MatchmakingServerStatusUpdateRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&MatchmakingServerStatusUpdateRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: MatchmakingServerStatusUpdateRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MatchmakingServerStatusUpdateRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&MatchmakingServerStatusUpdateRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: MatchmakingServerStatusUpdateRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MatchmakingServerStatusUpdateRequest::*)()>(&MatchmakingServerStatusUpdateRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MatchmakingServerStatusUpdateRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MatchmakingServerStatusUpdateRequest::*)()>(&MatchmakingServerStatusUpdateRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MatchmakingServerStatusUpdateRequest::*)()>(&MatchmakingServerStatusUpdateRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchmakingServerStatusUpdateRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.DedicatedServerHeartbeatRequest
#include "MasterServer/DedicatedServerHeartbeatRequest.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.DedicatedServerHeartbeatRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerHeartbeatRequest*>* MasterServer::DedicatedServerHeartbeatRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "DedicatedServerHeartbeatRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerHeartbeatRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatRequest.get_dedicatedServerId
::Il2CppString* MasterServer::DedicatedServerHeartbeatRequest::get_dedicatedServerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatRequest::get_dedicatedServerId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatRequest.set_dedicatedServerId
void MasterServer::DedicatedServerHeartbeatRequest::set_dedicatedServerId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatRequest::set_dedicatedServerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatRequest.get_dedicatedServerCreationTime
int64_t MasterServer::DedicatedServerHeartbeatRequest::get_dedicatedServerCreationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatRequest::get_dedicatedServerCreationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatRequest.set_dedicatedServerCreationTime
void MasterServer::DedicatedServerHeartbeatRequest::set_dedicatedServerCreationTime(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatRequest::set_dedicatedServerCreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatRequest.Init
MasterServer::DedicatedServerHeartbeatRequest* MasterServer::DedicatedServerHeartbeatRequest::Init(::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, int cpuUtilization, int occupiedServerSlots, int unoccupiedServerSlots) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(cpuUtilization), ::il2cpp_utils::ExtractType(occupiedServerSlots), ::il2cpp_utils::ExtractType(unoccupiedServerSlots)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::DedicatedServerHeartbeatRequest*, false>(this, ___internal__method, dedicatedServerId, dedicatedServerCreationTime, cpuUtilization, occupiedServerSlots, unoccupiedServerSlots);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatRequest.Serialize
void MasterServer::DedicatedServerHeartbeatRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatRequest.Deserialize
void MasterServer::DedicatedServerHeartbeatRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatRequest.Release
void MasterServer::DedicatedServerHeartbeatRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DedicatedServerHeartbeatRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerHeartbeatRequest*>* (*)()>(&DedicatedServerHeartbeatRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatRequest::get_dedicatedServerId
// Il2CppName: get_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DedicatedServerHeartbeatRequest::*)()>(&DedicatedServerHeartbeatRequest::get_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), "get_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatRequest::set_dedicatedServerId
// Il2CppName: set_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatRequest::*)(::Il2CppString*)>(&DedicatedServerHeartbeatRequest::set_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), "set_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatRequest::get_dedicatedServerCreationTime
// Il2CppName: get_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (DedicatedServerHeartbeatRequest::*)()>(&DedicatedServerHeartbeatRequest::get_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatRequest::set_dedicatedServerCreationTime
// Il2CppName: set_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatRequest::*)(int64_t)>(&DedicatedServerHeartbeatRequest::set_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::DedicatedServerHeartbeatRequest* (DedicatedServerHeartbeatRequest::*)(::Il2CppString*, int64_t, int, int, int)>(&DedicatedServerHeartbeatRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&DedicatedServerHeartbeatRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&DedicatedServerHeartbeatRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatRequest::*)()>(&DedicatedServerHeartbeatRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatRequest::*)()>(&DedicatedServerHeartbeatRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatRequest::*)()>(&DedicatedServerHeartbeatRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.DedicatedServerHeartbeatResponse
#include "MasterServer/DedicatedServerHeartbeatResponse.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.DedicatedServerHeartbeatResponse.get_pool
GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerHeartbeatResponse*>* MasterServer::DedicatedServerHeartbeatResponse::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatResponse::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "DedicatedServerHeartbeatResponse", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerHeartbeatResponse*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatResponse.Serialize
void MasterServer::DedicatedServerHeartbeatResponse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatResponse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatResponse.Deserialize
void MasterServer::DedicatedServerHeartbeatResponse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatResponse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.DedicatedServerHeartbeatResponse.Release
void MasterServer::DedicatedServerHeartbeatResponse::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerHeartbeatResponse::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DedicatedServerHeartbeatResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerHeartbeatResponse*>* (*)()>(&DedicatedServerHeartbeatResponse::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&DedicatedServerHeartbeatResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&DedicatedServerHeartbeatResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatResponse::*)()>(&DedicatedServerHeartbeatResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerHeartbeatResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatResponse::*)()>(&DedicatedServerHeartbeatResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerHeartbeatResponse::*)()>(&DedicatedServerHeartbeatResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerHeartbeatResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.DedicatedServerShutDownRequest
#include "MasterServer/DedicatedServerShutDownRequest.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.DedicatedServerShutDownRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerShutDownRequest*>* MasterServer::DedicatedServerShutDownRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerShutDownRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "DedicatedServerShutDownRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerShutDownRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerShutDownRequest.get_dedicatedServerId
::Il2CppString* MasterServer::DedicatedServerShutDownRequest::get_dedicatedServerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerShutDownRequest::get_dedicatedServerId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerShutDownRequest.set_dedicatedServerId
void MasterServer::DedicatedServerShutDownRequest::set_dedicatedServerId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerShutDownRequest::set_dedicatedServerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.DedicatedServerShutDownRequest.get_dedicatedServerCreationTime
int64_t MasterServer::DedicatedServerShutDownRequest::get_dedicatedServerCreationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerShutDownRequest::get_dedicatedServerCreationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerShutDownRequest.set_dedicatedServerCreationTime
void MasterServer::DedicatedServerShutDownRequest::set_dedicatedServerCreationTime(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerShutDownRequest::set_dedicatedServerCreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.DedicatedServerShutDownRequest.Init
MasterServer::DedicatedServerShutDownRequest* MasterServer::DedicatedServerShutDownRequest::Init(::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerShutDownRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::DedicatedServerShutDownRequest*, false>(this, ___internal__method, dedicatedServerId, dedicatedServerCreationTime);
}
// Autogenerated method: MasterServer.DedicatedServerShutDownRequest.Serialize
void MasterServer::DedicatedServerShutDownRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerShutDownRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.DedicatedServerShutDownRequest.Deserialize
void MasterServer::DedicatedServerShutDownRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerShutDownRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.DedicatedServerShutDownRequest.Release
void MasterServer::DedicatedServerShutDownRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerShutDownRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DedicatedServerShutDownRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerShutDownRequest*>* (*)()>(&DedicatedServerShutDownRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerShutDownRequest::get_dedicatedServerId
// Il2CppName: get_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DedicatedServerShutDownRequest::*)()>(&DedicatedServerShutDownRequest::get_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), "get_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerShutDownRequest::set_dedicatedServerId
// Il2CppName: set_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerShutDownRequest::*)(::Il2CppString*)>(&DedicatedServerShutDownRequest::set_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), "set_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerShutDownRequest::get_dedicatedServerCreationTime
// Il2CppName: get_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (DedicatedServerShutDownRequest::*)()>(&DedicatedServerShutDownRequest::get_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerShutDownRequest::set_dedicatedServerCreationTime
// Il2CppName: set_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerShutDownRequest::*)(int64_t)>(&DedicatedServerShutDownRequest::set_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerShutDownRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::DedicatedServerShutDownRequest* (DedicatedServerShutDownRequest::*)(::Il2CppString*, int64_t)>(&DedicatedServerShutDownRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerShutDownRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerShutDownRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&DedicatedServerShutDownRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerShutDownRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerShutDownRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&DedicatedServerShutDownRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerShutDownRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerShutDownRequest::*)()>(&DedicatedServerShutDownRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerShutDownRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerShutDownRequest::*)()>(&DedicatedServerShutDownRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerShutDownRequest::*)()>(&DedicatedServerShutDownRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerShutDownRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.DedicatedServerPrepareForConnectionRequest
#include "MasterServer/DedicatedServerPrepareForConnectionRequest.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerPrepareForConnectionRequest*>* MasterServer::DedicatedServerPrepareForConnectionRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "DedicatedServerPrepareForConnectionRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerPrepareForConnectionRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionRequest.Init
MasterServer::DedicatedServerPrepareForConnectionRequest* MasterServer::DedicatedServerPrepareForConnectionRequest::Init(::Il2CppString* id, ::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>* random, ::Array<uint8_t>* publicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(random), ::il2cpp_utils::ExtractType(publicKey)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::DedicatedServerPrepareForConnectionRequest*, false>(this, ___internal__method, id, userId, userName, remoteEndPoint, random, publicKey);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionRequest.Serialize
void MasterServer::DedicatedServerPrepareForConnectionRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionRequest.Deserialize
void MasterServer::DedicatedServerPrepareForConnectionRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionRequest.Release
void MasterServer::DedicatedServerPrepareForConnectionRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerPrepareForConnectionRequest*>* (*)()>(&DedicatedServerPrepareForConnectionRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::DedicatedServerPrepareForConnectionRequest* (DedicatedServerPrepareForConnectionRequest::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*)>(&DedicatedServerPrepareForConnectionRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&DedicatedServerPrepareForConnectionRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&DedicatedServerPrepareForConnectionRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionRequest::*)()>(&DedicatedServerPrepareForConnectionRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionRequest::*)()>(&DedicatedServerPrepareForConnectionRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionRequest::*)()>(&DedicatedServerPrepareForConnectionRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.DedicatedServerPrepareForConnectionResponse
#include "MasterServer/DedicatedServerPrepareForConnectionResponse.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.get_pool
GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerPrepareForConnectionResponse*>* MasterServer::DedicatedServerPrepareForConnectionResponse::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "DedicatedServerPrepareForConnectionResponse", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerPrepareForConnectionResponse*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.get_dedicatedServerId
::Il2CppString* MasterServer::DedicatedServerPrepareForConnectionResponse::get_dedicatedServerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::get_dedicatedServerId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.set_dedicatedServerId
void MasterServer::DedicatedServerPrepareForConnectionResponse::set_dedicatedServerId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::set_dedicatedServerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.get_dedicatedServerCreationTime
int64_t MasterServer::DedicatedServerPrepareForConnectionResponse::get_dedicatedServerCreationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::get_dedicatedServerCreationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.set_dedicatedServerCreationTime
void MasterServer::DedicatedServerPrepareForConnectionResponse::set_dedicatedServerCreationTime(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::set_dedicatedServerCreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.InitForFailure
MasterServer::DedicatedServerPrepareForConnectionResponse* MasterServer::DedicatedServerPrepareForConnectionResponse::InitForFailure(::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, MasterServer::DedicatedServerPrepareForConnectionResponse::Result result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::InitForFailure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitForFailure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::DedicatedServerPrepareForConnectionResponse*, false>(this, ___internal__method, dedicatedServerId, dedicatedServerCreationTime, result);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.InitForSuccess
MasterServer::DedicatedServerPrepareForConnectionResponse* MasterServer::DedicatedServerPrepareForConnectionResponse::InitForSuccess(::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::InitForSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitForSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::DedicatedServerPrepareForConnectionResponse*, false>(this, ___internal__method, dedicatedServerId, dedicatedServerCreationTime);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.get_resultCode
uint8_t MasterServer::DedicatedServerPrepareForConnectionResponse::get_resultCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::get_resultCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.get_resultCodeString
::Il2CppString* MasterServer::DedicatedServerPrepareForConnectionResponse::get_resultCodeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::get_resultCodeString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCodeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.Serialize
void MasterServer::DedicatedServerPrepareForConnectionResponse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.Deserialize
void MasterServer::DedicatedServerPrepareForConnectionResponse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.DedicatedServerPrepareForConnectionResponse.Release
void MasterServer::DedicatedServerPrepareForConnectionResponse::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerPrepareForConnectionResponse*>* (*)()>(&DedicatedServerPrepareForConnectionResponse::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::get_dedicatedServerId
// Il2CppName: get_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DedicatedServerPrepareForConnectionResponse::*)()>(&DedicatedServerPrepareForConnectionResponse::get_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "get_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::set_dedicatedServerId
// Il2CppName: set_dedicatedServerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionResponse::*)(::Il2CppString*)>(&DedicatedServerPrepareForConnectionResponse::set_dedicatedServerId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "set_dedicatedServerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::get_dedicatedServerCreationTime
// Il2CppName: get_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (DedicatedServerPrepareForConnectionResponse::*)()>(&DedicatedServerPrepareForConnectionResponse::get_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "get_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::set_dedicatedServerCreationTime
// Il2CppName: set_dedicatedServerCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionResponse::*)(int64_t)>(&DedicatedServerPrepareForConnectionResponse::set_dedicatedServerCreationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "set_dedicatedServerCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::InitForFailure
// Il2CppName: InitForFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::DedicatedServerPrepareForConnectionResponse* (DedicatedServerPrepareForConnectionResponse::*)(::Il2CppString*, int64_t, MasterServer::DedicatedServerPrepareForConnectionResponse::Result)>(&DedicatedServerPrepareForConnectionResponse::InitForFailure)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "InitForFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::DedicatedServerPrepareForConnectionResponse::Result>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::InitForSuccess
// Il2CppName: InitForSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::DedicatedServerPrepareForConnectionResponse* (DedicatedServerPrepareForConnectionResponse::*)(::Il2CppString*, int64_t)>(&DedicatedServerPrepareForConnectionResponse::InitForSuccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "InitForSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (DedicatedServerPrepareForConnectionResponse::*)()>(&DedicatedServerPrepareForConnectionResponse::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DedicatedServerPrepareForConnectionResponse::*)()>(&DedicatedServerPrepareForConnectionResponse::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&DedicatedServerPrepareForConnectionResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&DedicatedServerPrepareForConnectionResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionResponse::*)()>(&DedicatedServerPrepareForConnectionResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerPrepareForConnectionResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionResponse::*)()>(&DedicatedServerPrepareForConnectionResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerPrepareForConnectionResponse::*)()>(&DedicatedServerPrepareForConnectionResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerPrepareForConnectionResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.DedicatedServerPrepareForConnectionResponse/Result
#include "MasterServer/DedicatedServerPrepareForConnectionResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.DedicatedServerPrepareForConnectionResponse/Result Success
MasterServer::DedicatedServerPrepareForConnectionResponse::Result MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::DedicatedServerPrepareForConnectionResponse::Result>("MasterServer", "DedicatedServerPrepareForConnectionResponse/Result", "Success"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.DedicatedServerPrepareForConnectionResponse/Result Success
void MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_set_Success(MasterServer::DedicatedServerPrepareForConnectionResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "DedicatedServerPrepareForConnectionResponse/Result", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.DedicatedServerPrepareForConnectionResponse/Result UnknownServer
MasterServer::DedicatedServerPrepareForConnectionResponse::Result MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_get_UnknownServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_get_UnknownServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::DedicatedServerPrepareForConnectionResponse::Result>("MasterServer", "DedicatedServerPrepareForConnectionResponse/Result", "UnknownServer"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.DedicatedServerPrepareForConnectionResponse/Result UnknownServer
void MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_set_UnknownServer(MasterServer::DedicatedServerPrepareForConnectionResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_set_UnknownServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "DedicatedServerPrepareForConnectionResponse/Result", "UnknownServer", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.DedicatedServerPrepareForConnectionResponse/Result UnknownError
MasterServer::DedicatedServerPrepareForConnectionResponse::Result MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_get_UnknownError() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_get_UnknownError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::DedicatedServerPrepareForConnectionResponse::Result>("MasterServer", "DedicatedServerPrepareForConnectionResponse/Result", "UnknownError"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.DedicatedServerPrepareForConnectionResponse/Result UnknownError
void MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_set_UnknownError(MasterServer::DedicatedServerPrepareForConnectionResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerPrepareForConnectionResponse::Result::_set_UnknownError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "DedicatedServerPrepareForConnectionResponse/Result", "UnknownError", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.DedicatedServerMessageReceivedAcknowledge
#include "MasterServer/DedicatedServerMessageReceivedAcknowledge.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.DedicatedServerMessageReceivedAcknowledge.get_pool
GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerMessageReceivedAcknowledge*>* MasterServer::DedicatedServerMessageReceivedAcknowledge::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerMessageReceivedAcknowledge::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "DedicatedServerMessageReceivedAcknowledge", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerMessageReceivedAcknowledge*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerMessageReceivedAcknowledge.Release
void MasterServer::DedicatedServerMessageReceivedAcknowledge::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerMessageReceivedAcknowledge::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DedicatedServerMessageReceivedAcknowledge::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerMessageReceivedAcknowledge*>* (*)()>(&DedicatedServerMessageReceivedAcknowledge::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerMessageReceivedAcknowledge*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerMessageReceivedAcknowledge::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerMessageReceivedAcknowledge::*)()>(&DedicatedServerMessageReceivedAcknowledge::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerMessageReceivedAcknowledge*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerMessageReceivedAcknowledge::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerMessageReceivedAcknowledge::*)()>(&DedicatedServerMessageReceivedAcknowledge::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerMessageReceivedAcknowledge*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerMessageReceivedAcknowledge::*)()>(&DedicatedServerMessageReceivedAcknowledge::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerMessageReceivedAcknowledge*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.DedicatedServerMultipartMessage
#include "MasterServer/DedicatedServerMultipartMessage.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.DedicatedServerMultipartMessage.get_pool
GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerMultipartMessage*>* MasterServer::DedicatedServerMultipartMessage::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerMultipartMessage::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "DedicatedServerMultipartMessage", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerMultipartMessage*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.DedicatedServerMultipartMessage.Release
void MasterServer::DedicatedServerMultipartMessage::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::DedicatedServerMultipartMessage::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DedicatedServerMultipartMessage::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::DedicatedServerMultipartMessage*>* (*)()>(&DedicatedServerMultipartMessage::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerMultipartMessage*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerMultipartMessage::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerMultipartMessage::*)()>(&DedicatedServerMultipartMessage::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerMultipartMessage*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DedicatedServerMultipartMessage::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerMultipartMessage::*)()>(&DedicatedServerMultipartMessage::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerMultipartMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DedicatedServerMultipartMessage::*)()>(&DedicatedServerMultipartMessage::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DedicatedServerMultipartMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.ClientHelloRequest
#include "MasterServer/ClientHelloRequest.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.ClientHelloRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::ClientHelloRequest*>* MasterServer::ClientHelloRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientHelloRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "ClientHelloRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::ClientHelloRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.ClientHelloRequest.Init
MasterServer::ClientHelloRequest* MasterServer::ClientHelloRequest::Init(::Array<uint8_t>* random) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientHelloRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(random)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::ClientHelloRequest*, false>(this, ___internal__method, random);
}
// Autogenerated method: MasterServer.ClientHelloRequest.Serialize
void MasterServer::ClientHelloRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientHelloRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.ClientHelloRequest.Deserialize
void MasterServer::ClientHelloRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientHelloRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.ClientHelloRequest.Release
void MasterServer::ClientHelloRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientHelloRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ClientHelloRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::ClientHelloRequest*>* (*)()>(&ClientHelloRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientHelloRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::ClientHelloRequest* (ClientHelloRequest::*)(::Array<uint8_t>*)>(&ClientHelloRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: ClientHelloRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientHelloRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&ClientHelloRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ClientHelloRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientHelloRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&ClientHelloRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ClientHelloRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientHelloRequest::*)()>(&ClientHelloRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientHelloRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientHelloRequest::*)()>(&ClientHelloRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientHelloRequest::*)()>(&ClientHelloRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.ClientHelloWithCookieRequest
#include "MasterServer/ClientHelloWithCookieRequest.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.ClientHelloWithCookieRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::ClientHelloWithCookieRequest*>* MasterServer::ClientHelloWithCookieRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientHelloWithCookieRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "ClientHelloWithCookieRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::ClientHelloWithCookieRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.ClientHelloWithCookieRequest.Init
MasterServer::ClientHelloWithCookieRequest* MasterServer::ClientHelloWithCookieRequest::Init(uint certificateResponseId, ::Array<uint8_t>* random, ::Array<uint8_t>* cookie) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientHelloWithCookieRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificateResponseId), ::il2cpp_utils::ExtractType(random), ::il2cpp_utils::ExtractType(cookie)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::ClientHelloWithCookieRequest*, false>(this, ___internal__method, certificateResponseId, random, cookie);
}
// Autogenerated method: MasterServer.ClientHelloWithCookieRequest.Serialize
void MasterServer::ClientHelloWithCookieRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientHelloWithCookieRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.ClientHelloWithCookieRequest.Deserialize
void MasterServer::ClientHelloWithCookieRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientHelloWithCookieRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.ClientHelloWithCookieRequest.Release
void MasterServer::ClientHelloWithCookieRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientHelloWithCookieRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ClientHelloWithCookieRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::ClientHelloWithCookieRequest*>* (*)()>(&ClientHelloWithCookieRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloWithCookieRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientHelloWithCookieRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::ClientHelloWithCookieRequest* (ClientHelloWithCookieRequest::*)(uint, ::Array<uint8_t>*, ::Array<uint8_t>*)>(&ClientHelloWithCookieRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloWithCookieRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: ClientHelloWithCookieRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientHelloWithCookieRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&ClientHelloWithCookieRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloWithCookieRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ClientHelloWithCookieRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientHelloWithCookieRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&ClientHelloWithCookieRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloWithCookieRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ClientHelloWithCookieRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientHelloWithCookieRequest::*)()>(&ClientHelloWithCookieRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloWithCookieRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientHelloWithCookieRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientHelloWithCookieRequest::*)()>(&ClientHelloWithCookieRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloWithCookieRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientHelloWithCookieRequest::*)()>(&ClientHelloWithCookieRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientHelloWithCookieRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.HelloVerifyRequest
#include "MasterServer/HelloVerifyRequest.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.HelloVerifyRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::HelloVerifyRequest*>* MasterServer::HelloVerifyRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::HelloVerifyRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "HelloVerifyRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::HelloVerifyRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.HelloVerifyRequest.Init
MasterServer::HelloVerifyRequest* MasterServer::HelloVerifyRequest::Init(::Array<uint8_t>* cookie) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::HelloVerifyRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cookie)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::HelloVerifyRequest*, false>(this, ___internal__method, cookie);
}
// Autogenerated method: MasterServer.HelloVerifyRequest.Serialize
void MasterServer::HelloVerifyRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::HelloVerifyRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.HelloVerifyRequest.Deserialize
void MasterServer::HelloVerifyRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::HelloVerifyRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.HelloVerifyRequest.Release
void MasterServer::HelloVerifyRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::HelloVerifyRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HelloVerifyRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::HelloVerifyRequest*>* (*)()>(&HelloVerifyRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HelloVerifyRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::HelloVerifyRequest* (HelloVerifyRequest::*)(::Array<uint8_t>*)>(&HelloVerifyRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: HelloVerifyRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelloVerifyRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&HelloVerifyRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: HelloVerifyRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelloVerifyRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&HelloVerifyRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: HelloVerifyRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelloVerifyRequest::*)()>(&HelloVerifyRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HelloVerifyRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelloVerifyRequest::*)()>(&HelloVerifyRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelloVerifyRequest::*)()>(&HelloVerifyRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.ServerHelloRequest
#include "MasterServer/ServerHelloRequest.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.ServerHelloRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::ServerHelloRequest*>* MasterServer::ServerHelloRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerHelloRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "ServerHelloRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::ServerHelloRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.ServerHelloRequest.Init
MasterServer::ServerHelloRequest* MasterServer::ServerHelloRequest::Init(::Array<uint8_t>* random, ::Array<uint8_t>* publicKey, ::Array<uint8_t>* signature) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerHelloRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(random), ::il2cpp_utils::ExtractType(publicKey), ::il2cpp_utils::ExtractType(signature)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::ServerHelloRequest*, false>(this, ___internal__method, random, publicKey, signature);
}
// Autogenerated method: MasterServer.ServerHelloRequest.Serialize
void MasterServer::ServerHelloRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerHelloRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.ServerHelloRequest.Deserialize
void MasterServer::ServerHelloRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerHelloRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.ServerHelloRequest.Release
void MasterServer::ServerHelloRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerHelloRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ServerHelloRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::ServerHelloRequest*>* (*)()>(&ServerHelloRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerHelloRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerHelloRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::ServerHelloRequest* (ServerHelloRequest::*)(::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*)>(&ServerHelloRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerHelloRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: ServerHelloRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerHelloRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&ServerHelloRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerHelloRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ServerHelloRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerHelloRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&ServerHelloRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerHelloRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ServerHelloRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerHelloRequest::*)()>(&ServerHelloRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerHelloRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerHelloRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerHelloRequest::*)()>(&ServerHelloRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerHelloRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerHelloRequest::*)()>(&ServerHelloRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerHelloRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.ServerCertificateRequest
#include "MasterServer/ServerCertificateRequest.hpp"
// Including type: MasterServer.ServerCertificateRequest/<get_certificateList>d__5
#include "MasterServer/ServerCertificateRequest_-get_certificateList-d__5.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.ServerCertificateRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::ServerCertificateRequest*>* MasterServer::ServerCertificateRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "ServerCertificateRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::ServerCertificateRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.ServerCertificateRequest.get_certificateList
System::Collections::Generic::IEnumerable_1<::Array<uint8_t>*>* MasterServer::ServerCertificateRequest::get_certificateList() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::get_certificateList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_certificateList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<::Array<uint8_t>*>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.ServerCertificateRequest.Init
MasterServer::ServerCertificateRequest* MasterServer::ServerCertificateRequest::Init(System::Collections::Generic::IEnumerable_1<::Array<uint8_t>*>* certificateList) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(certificateList)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::ServerCertificateRequest*, false>(this, ___internal__method, certificateList);
}
// Autogenerated method: MasterServer.ServerCertificateRequest.Serialize
void MasterServer::ServerCertificateRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.ServerCertificateRequest.Deserialize
void MasterServer::ServerCertificateRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.ServerCertificateRequest.Release
void MasterServer::ServerCertificateRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ServerCertificateRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::ServerCertificateRequest*>* (*)()>(&ServerCertificateRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::get_certificateList
// Il2CppName: get_certificateList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<::Array<uint8_t>*>* (ServerCertificateRequest::*)()>(&ServerCertificateRequest::get_certificateList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest*), "get_certificateList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::ServerCertificateRequest* (ServerCertificateRequest::*)(System::Collections::Generic::IEnumerable_1<::Array<uint8_t>*>*)>(&ServerCertificateRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Array<uint8_t>*>*>()});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCertificateRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&ServerCertificateRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCertificateRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&ServerCertificateRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCertificateRequest::*)()>(&ServerCertificateRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCertificateRequest::*)()>(&ServerCertificateRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCertificateRequest::*)()>(&ServerCertificateRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.ServerCertificateRequest/<get_certificateList>d__5
#include "MasterServer/ServerCertificateRequest_-get_certificateList-d__5.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.ServerCertificateRequest/<get_certificateList>d__5.System.IDisposable.Dispose
void MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.ServerCertificateRequest/<get_certificateList>d__5.MoveNext
bool MasterServer::ServerCertificateRequest::$get_certificateList$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::$get_certificateList$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.ServerCertificateRequest/<get_certificateList>d__5.System.Collections.Generic.IEnumerator<System.Byte[]>.get_Current
::Array<uint8_t>* MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System_Collections_Generic_IEnumerator$System_Byte$$$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System.Collections.Generic.IEnumerator<System.Byte[]>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Byte[]>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.ServerCertificateRequest/<get_certificateList>d__5.System.Collections.IEnumerator.Reset
void MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.ServerCertificateRequest/<get_certificateList>d__5.System.Collections.IEnumerator.get_Current
::Il2CppObject* MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.ServerCertificateRequest/<get_certificateList>d__5.System.Collections.Generic.IEnumerable<System.Byte[]>.GetEnumerator
System::Collections::Generic::IEnumerator_1<::Array<uint8_t>*>* MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System_Collections_Generic_IEnumerable$System_Byte$$$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System.Collections.Generic.IEnumerable<System.Byte[]>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Byte[]>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<::Array<uint8_t>*>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.ServerCertificateRequest/<get_certificateList>d__5.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::$get_certificateList$d__5::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ServerCertificateRequest::$get_certificateList$d__5::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCertificateRequest::$get_certificateList$d__5::*)(int)>(&ServerCertificateRequest::$get_certificateList$d__5::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest::$get_certificateList$d__5*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCertificateRequest::$get_certificateList$d__5::*)(int)>(&ServerCertificateRequest::$get_certificateList$d__5::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest::$get_certificateList$d__5*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::$get_certificateList$d__5::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCertificateRequest::$get_certificateList$d__5::*)()>(&ServerCertificateRequest::$get_certificateList$d__5::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest::$get_certificateList$d__5*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::$get_certificateList$d__5::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ServerCertificateRequest::$get_certificateList$d__5::*)()>(&ServerCertificateRequest::$get_certificateList$d__5::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest::$get_certificateList$d__5*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::$get_certificateList$d__5::System_Collections_Generic_IEnumerator$System_Byte$$$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Byte[]>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (ServerCertificateRequest::$get_certificateList$d__5::*)()>(&ServerCertificateRequest::$get_certificateList$d__5::System_Collections_Generic_IEnumerator$System_Byte$$$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest::$get_certificateList$d__5*), "System.Collections.Generic.IEnumerator<System.Byte[]>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::$get_certificateList$d__5::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCertificateRequest::$get_certificateList$d__5::*)()>(&ServerCertificateRequest::$get_certificateList$d__5::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest::$get_certificateList$d__5*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::$get_certificateList$d__5::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ServerCertificateRequest::$get_certificateList$d__5::*)()>(&ServerCertificateRequest::$get_certificateList$d__5::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest::$get_certificateList$d__5*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::$get_certificateList$d__5::System_Collections_Generic_IEnumerable$System_Byte$$$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<System.Byte[]>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<::Array<uint8_t>*>* (ServerCertificateRequest::$get_certificateList$d__5::*)()>(&ServerCertificateRequest::$get_certificateList$d__5::System_Collections_Generic_IEnumerable$System_Byte$$$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest::$get_certificateList$d__5*), "System.Collections.Generic.IEnumerable<System.Byte[]>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCertificateRequest::$get_certificateList$d__5::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (ServerCertificateRequest::$get_certificateList$d__5::*)()>(&ServerCertificateRequest::$get_certificateList$d__5::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCertificateRequest::$get_certificateList$d__5*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.ClientKeyExchangeRequest
#include "MasterServer/ClientKeyExchangeRequest.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.ClientKeyExchangeRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::ClientKeyExchangeRequest*>* MasterServer::ClientKeyExchangeRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientKeyExchangeRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "ClientKeyExchangeRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::ClientKeyExchangeRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.ClientKeyExchangeRequest.Init
MasterServer::ClientKeyExchangeRequest* MasterServer::ClientKeyExchangeRequest::Init(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientKeyExchangeRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::ClientKeyExchangeRequest*, false>(this, ___internal__method, clientPublicKey);
}
// Autogenerated method: MasterServer.ClientKeyExchangeRequest.Serialize
void MasterServer::ClientKeyExchangeRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientKeyExchangeRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.ClientKeyExchangeRequest.Deserialize
void MasterServer::ClientKeyExchangeRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientKeyExchangeRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.ClientKeyExchangeRequest.Release
void MasterServer::ClientKeyExchangeRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ClientKeyExchangeRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ClientKeyExchangeRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::ClientKeyExchangeRequest*>* (*)()>(&ClientKeyExchangeRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientKeyExchangeRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientKeyExchangeRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::ClientKeyExchangeRequest* (ClientKeyExchangeRequest::*)(::Array<uint8_t>*)>(&ClientKeyExchangeRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientKeyExchangeRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: ClientKeyExchangeRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientKeyExchangeRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&ClientKeyExchangeRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientKeyExchangeRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ClientKeyExchangeRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientKeyExchangeRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&ClientKeyExchangeRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientKeyExchangeRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ClientKeyExchangeRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientKeyExchangeRequest::*)()>(&ClientKeyExchangeRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientKeyExchangeRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientKeyExchangeRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientKeyExchangeRequest::*)()>(&ClientKeyExchangeRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientKeyExchangeRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientKeyExchangeRequest::*)()>(&ClientKeyExchangeRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientKeyExchangeRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.ChangeCipherSpecRequest
#include "MasterServer/ChangeCipherSpecRequest.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.ChangeCipherSpecRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::ChangeCipherSpecRequest*>* MasterServer::ChangeCipherSpecRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ChangeCipherSpecRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "ChangeCipherSpecRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::ChangeCipherSpecRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.ChangeCipherSpecRequest.Release
void MasterServer::ChangeCipherSpecRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ChangeCipherSpecRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ChangeCipherSpecRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::ChangeCipherSpecRequest*>* (*)()>(&ChangeCipherSpecRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChangeCipherSpecRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ChangeCipherSpecRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChangeCipherSpecRequest::*)()>(&ChangeCipherSpecRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChangeCipherSpecRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ChangeCipherSpecRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChangeCipherSpecRequest::*)()>(&ChangeCipherSpecRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChangeCipherSpecRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChangeCipherSpecRequest::*)()>(&ChangeCipherSpecRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChangeCipherSpecRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.HandshakeMessageReceivedAcknowledge
#include "MasterServer/HandshakeMessageReceivedAcknowledge.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.HandshakeMessageReceivedAcknowledge.get_pool
GlobalNamespace::PacketPool_1<MasterServer::HandshakeMessageReceivedAcknowledge*>* MasterServer::HandshakeMessageReceivedAcknowledge::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::HandshakeMessageReceivedAcknowledge::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "HandshakeMessageReceivedAcknowledge", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::HandshakeMessageReceivedAcknowledge*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.HandshakeMessageReceivedAcknowledge.Release
void MasterServer::HandshakeMessageReceivedAcknowledge::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::HandshakeMessageReceivedAcknowledge::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HandshakeMessageReceivedAcknowledge::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::HandshakeMessageReceivedAcknowledge*>* (*)()>(&HandshakeMessageReceivedAcknowledge::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HandshakeMessageReceivedAcknowledge*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HandshakeMessageReceivedAcknowledge::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HandshakeMessageReceivedAcknowledge::*)()>(&HandshakeMessageReceivedAcknowledge::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HandshakeMessageReceivedAcknowledge*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HandshakeMessageReceivedAcknowledge::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HandshakeMessageReceivedAcknowledge::*)()>(&HandshakeMessageReceivedAcknowledge::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HandshakeMessageReceivedAcknowledge*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HandshakeMessageReceivedAcknowledge::*)()>(&HandshakeMessageReceivedAcknowledge::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HandshakeMessageReceivedAcknowledge*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.HandshakeMultipartMessage
#include "MasterServer/HandshakeMultipartMessage.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.HandshakeMultipartMessage.get_pool
GlobalNamespace::PacketPool_1<MasterServer::HandshakeMultipartMessage*>* MasterServer::HandshakeMultipartMessage::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::HandshakeMultipartMessage::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "HandshakeMultipartMessage", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::HandshakeMultipartMessage*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.HandshakeMultipartMessage.Release
void MasterServer::HandshakeMultipartMessage::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::HandshakeMultipartMessage::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HandshakeMultipartMessage::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::HandshakeMultipartMessage*>* (*)()>(&HandshakeMultipartMessage::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HandshakeMultipartMessage*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HandshakeMultipartMessage::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HandshakeMultipartMessage::*)()>(&HandshakeMultipartMessage::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HandshakeMultipartMessage*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HandshakeMultipartMessage::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HandshakeMultipartMessage::*)()>(&HandshakeMultipartMessage::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HandshakeMultipartMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HandshakeMultipartMessage::*)()>(&HandshakeMultipartMessage::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HandshakeMultipartMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.AnalyticsMetricUnit
#include "MasterServer/AnalyticsMetricUnit.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.AnalyticsMetricUnit None
MasterServer::AnalyticsMetricUnit MasterServer::AnalyticsMetricUnit::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AnalyticsMetricUnit>("MasterServer", "AnalyticsMetricUnit", "None"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AnalyticsMetricUnit None
void MasterServer::AnalyticsMetricUnit::_set_None(MasterServer::AnalyticsMetricUnit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AnalyticsMetricUnit", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.AnalyticsMetricUnit Count
MasterServer::AnalyticsMetricUnit MasterServer::AnalyticsMetricUnit::_get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_get_Count");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AnalyticsMetricUnit>("MasterServer", "AnalyticsMetricUnit", "Count"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AnalyticsMetricUnit Count
void MasterServer::AnalyticsMetricUnit::_set_Count(MasterServer::AnalyticsMetricUnit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_set_Count");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AnalyticsMetricUnit", "Count", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.AnalyticsMetricUnit Percent
MasterServer::AnalyticsMetricUnit MasterServer::AnalyticsMetricUnit::_get_Percent() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_get_Percent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AnalyticsMetricUnit>("MasterServer", "AnalyticsMetricUnit", "Percent"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AnalyticsMetricUnit Percent
void MasterServer::AnalyticsMetricUnit::_set_Percent(MasterServer::AnalyticsMetricUnit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_set_Percent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AnalyticsMetricUnit", "Percent", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.AnalyticsMetricUnit Seconds
MasterServer::AnalyticsMetricUnit MasterServer::AnalyticsMetricUnit::_get_Seconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_get_Seconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AnalyticsMetricUnit>("MasterServer", "AnalyticsMetricUnit", "Seconds"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AnalyticsMetricUnit Seconds
void MasterServer::AnalyticsMetricUnit::_set_Seconds(MasterServer::AnalyticsMetricUnit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_set_Seconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AnalyticsMetricUnit", "Seconds", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.AnalyticsMetricUnit Milliseconds
MasterServer::AnalyticsMetricUnit MasterServer::AnalyticsMetricUnit::_get_Milliseconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_get_Milliseconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AnalyticsMetricUnit>("MasterServer", "AnalyticsMetricUnit", "Milliseconds"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AnalyticsMetricUnit Milliseconds
void MasterServer::AnalyticsMetricUnit::_set_Milliseconds(MasterServer::AnalyticsMetricUnit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_set_Milliseconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AnalyticsMetricUnit", "Milliseconds", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.AnalyticsMetricUnit Microseconds
MasterServer::AnalyticsMetricUnit MasterServer::AnalyticsMetricUnit::_get_Microseconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_get_Microseconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AnalyticsMetricUnit>("MasterServer", "AnalyticsMetricUnit", "Microseconds"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AnalyticsMetricUnit Microseconds
void MasterServer::AnalyticsMetricUnit::_set_Microseconds(MasterServer::AnalyticsMetricUnit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_set_Microseconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AnalyticsMetricUnit", "Microseconds", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.AnalyticsMetricUnit Bytes
MasterServer::AnalyticsMetricUnit MasterServer::AnalyticsMetricUnit::_get_Bytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_get_Bytes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AnalyticsMetricUnit>("MasterServer", "AnalyticsMetricUnit", "Bytes"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AnalyticsMetricUnit Bytes
void MasterServer::AnalyticsMetricUnit::_set_Bytes(MasterServer::AnalyticsMetricUnit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AnalyticsMetricUnit::_set_Bytes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AnalyticsMetricUnit", "Bytes", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.IAnalyticsManager
#include "MasterServer/IAnalyticsManager.hpp"
// Including type: MasterServer.AnalyticsMetricUnit
#include "MasterServer/AnalyticsMetricUnit.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
// Including type: MasterServer.IMasterServerReliableResponse
#include "MasterServer/IMasterServerReliableResponse.hpp"
// Including type: MasterServer.IMasterServerUnreliableMessage
#include "MasterServer/IMasterServerUnreliableMessage.hpp"
// Including type: MasterServer.IMasterServerResponse
#include "MasterServer/IMasterServerResponse.hpp"
// Including type: DedicatedServerType
#include "GlobalNamespace/DedicatedServerType.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.IAnalyticsManager.PollUpdate
void MasterServer::IAnalyticsManager::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IAnalyticsManager.UpdateState
void MasterServer::IAnalyticsManager::UpdateState(::Il2CppString* metricName, int64_t state, MasterServer::AnalyticsMetricUnit unit, bool alarmMetric) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::UpdateState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(metricName), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(unit), ::il2cpp_utils::ExtractType(alarmMetric)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, metricName, state, unit, alarmMetric);
}
// Autogenerated method: MasterServer.IAnalyticsManager.UpdateAverage
void MasterServer::IAnalyticsManager::UpdateAverage(::Il2CppString* metricName, double value, MasterServer::AnalyticsMetricUnit unit, bool alarmMetric) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::UpdateAverage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAverage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(metricName), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(unit), ::il2cpp_utils::ExtractType(alarmMetric)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, metricName, value, unit, alarmMetric);
}
// Autogenerated method: MasterServer.IAnalyticsManager.IncrementCounter
void MasterServer::IAnalyticsManager::IncrementCounter(::Il2CppString* metricName, int64_t incrementAmount, MasterServer::AnalyticsMetricUnit unit) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::IncrementCounter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementCounter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(metricName), ::il2cpp_utils::ExtractType(incrementAmount), ::il2cpp_utils::ExtractType(unit)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, metricName, incrementAmount, unit);
}
// Autogenerated method: MasterServer.IAnalyticsManager.ReceivedReliableRequestEvent
void MasterServer::IAnalyticsManager::ReceivedReliableRequestEvent(MasterServer::IMasterServerReliableRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::ReceivedReliableRequestEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceivedReliableRequestEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: MasterServer.IAnalyticsManager.SentReliableRequestEvent
void MasterServer::IAnalyticsManager::SentReliableRequestEvent(MasterServer::IMasterServerReliableRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::SentReliableRequestEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SentReliableRequestEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: MasterServer.IAnalyticsManager.ReceivedReliableResponseEvent
void MasterServer::IAnalyticsManager::ReceivedReliableResponseEvent(MasterServer::IMasterServerReliableResponse* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::ReceivedReliableResponseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceivedReliableResponseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: MasterServer.IAnalyticsManager.SentReliableResponseEvent
void MasterServer::IAnalyticsManager::SentReliableResponseEvent(MasterServer::IMasterServerReliableResponse* response) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::SentReliableResponseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SentReliableResponseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(response)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, response);
}
// Autogenerated method: MasterServer.IAnalyticsManager.ReceivedUnreliableMessageEvent
void MasterServer::IAnalyticsManager::ReceivedUnreliableMessageEvent(MasterServer::IMasterServerUnreliableMessage* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::ReceivedUnreliableMessageEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceivedUnreliableMessageEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: MasterServer.IAnalyticsManager.SentUnreliableMessageEvent
void MasterServer::IAnalyticsManager::SentUnreliableMessageEvent(MasterServer::IMasterServerUnreliableMessage* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::SentUnreliableMessageEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SentUnreliableMessageEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: MasterServer.IAnalyticsManager.SentUnreliableResponseEvent
void MasterServer::IAnalyticsManager::SentUnreliableResponseEvent(MasterServer::IMasterServerResponse* response) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::SentUnreliableResponseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SentUnreliableResponseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(response)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, response);
}
// Autogenerated method: MasterServer.IAnalyticsManager.ReceivedUnreliableResponseEvent
void MasterServer::IAnalyticsManager::ReceivedUnreliableResponseEvent(MasterServer::IMasterServerResponse* response) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::ReceivedUnreliableResponseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceivedUnreliableResponseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(response)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, response);
}
// Autogenerated method: MasterServer.IAnalyticsManager.DedicatedServerServerConnectedEvent
void MasterServer::IAnalyticsManager::DedicatedServerServerConnectedEvent(GlobalNamespace::DedicatedServerType serverType) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::DedicatedServerServerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DedicatedServerServerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverType);
}
// Autogenerated method: MasterServer.IAnalyticsManager.DedicatedServerServerConnectionFailedEvent
void MasterServer::IAnalyticsManager::DedicatedServerServerConnectionFailedEvent(GlobalNamespace::DedicatedServerType serverType, GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::DedicatedServerServerConnectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DedicatedServerServerConnectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverType), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverType, reason);
}
// Autogenerated method: MasterServer.IAnalyticsManager.DedicatedServerServerDisconnectedEvent
void MasterServer::IAnalyticsManager::DedicatedServerServerDisconnectedEvent(GlobalNamespace::DedicatedServerType serverType, GlobalNamespace::DisconnectedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::DedicatedServerServerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DedicatedServerServerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverType), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverType, reason);
}
// Autogenerated method: MasterServer.IAnalyticsManager.DedicatedServerPlayerConnectedEvent
void MasterServer::IAnalyticsManager::DedicatedServerPlayerConnectedEvent(GlobalNamespace::DedicatedServerType serverType) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::DedicatedServerPlayerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DedicatedServerPlayerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverType);
}
// Autogenerated method: MasterServer.IAnalyticsManager.DedicatedServerPlayerDisconnectedEvent
void MasterServer::IAnalyticsManager::DedicatedServerPlayerDisconnectedEvent(GlobalNamespace::DedicatedServerType serverType, GlobalNamespace::DisconnectedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IAnalyticsManager::DedicatedServerPlayerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DedicatedServerPlayerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverType), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverType, reason);
}
// Writing MetadataGetter for method: IAnalyticsManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)()>(&IAnalyticsManager::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(::Il2CppString*, int64_t, MasterServer::AnalyticsMetricUnit, bool)>(&IAnalyticsManager::UpdateState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::AnalyticsMetricUnit>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::UpdateAverage
// Il2CppName: UpdateAverage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(::Il2CppString*, double, MasterServer::AnalyticsMetricUnit, bool)>(&IAnalyticsManager::UpdateAverage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "UpdateAverage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::AnalyticsMetricUnit>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::IncrementCounter
// Il2CppName: IncrementCounter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(::Il2CppString*, int64_t, MasterServer::AnalyticsMetricUnit)>(&IAnalyticsManager::IncrementCounter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "IncrementCounter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::AnalyticsMetricUnit>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::ReceivedReliableRequestEvent
// Il2CppName: ReceivedReliableRequestEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(MasterServer::IMasterServerReliableRequest*)>(&IAnalyticsManager::ReceivedReliableRequestEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "ReceivedReliableRequestEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::SentReliableRequestEvent
// Il2CppName: SentReliableRequestEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(MasterServer::IMasterServerReliableRequest*)>(&IAnalyticsManager::SentReliableRequestEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "SentReliableRequestEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::ReceivedReliableResponseEvent
// Il2CppName: ReceivedReliableResponseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(MasterServer::IMasterServerReliableResponse*)>(&IAnalyticsManager::ReceivedReliableResponseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "ReceivedReliableResponseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableResponse*>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::SentReliableResponseEvent
// Il2CppName: SentReliableResponseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(MasterServer::IMasterServerReliableResponse*)>(&IAnalyticsManager::SentReliableResponseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "SentReliableResponseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableResponse*>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::ReceivedUnreliableMessageEvent
// Il2CppName: ReceivedUnreliableMessageEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(MasterServer::IMasterServerUnreliableMessage*)>(&IAnalyticsManager::ReceivedUnreliableMessageEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "ReceivedUnreliableMessageEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerUnreliableMessage*>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::SentUnreliableMessageEvent
// Il2CppName: SentUnreliableMessageEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(MasterServer::IMasterServerUnreliableMessage*)>(&IAnalyticsManager::SentUnreliableMessageEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "SentUnreliableMessageEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerUnreliableMessage*>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::SentUnreliableResponseEvent
// Il2CppName: SentUnreliableResponseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(MasterServer::IMasterServerResponse*)>(&IAnalyticsManager::SentUnreliableResponseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "SentUnreliableResponseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerResponse*>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::ReceivedUnreliableResponseEvent
// Il2CppName: ReceivedUnreliableResponseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(MasterServer::IMasterServerResponse*)>(&IAnalyticsManager::ReceivedUnreliableResponseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "ReceivedUnreliableResponseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerResponse*>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::DedicatedServerServerConnectedEvent
// Il2CppName: DedicatedServerServerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(GlobalNamespace::DedicatedServerType)>(&IAnalyticsManager::DedicatedServerServerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "DedicatedServerServerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DedicatedServerType>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::DedicatedServerServerConnectionFailedEvent
// Il2CppName: DedicatedServerServerConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(GlobalNamespace::DedicatedServerType, GlobalNamespace::ConnectionFailedReason)>(&IAnalyticsManager::DedicatedServerServerConnectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "DedicatedServerServerConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DedicatedServerType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::DedicatedServerServerDisconnectedEvent
// Il2CppName: DedicatedServerServerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(GlobalNamespace::DedicatedServerType, GlobalNamespace::DisconnectedReason)>(&IAnalyticsManager::DedicatedServerServerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "DedicatedServerServerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DedicatedServerType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::DedicatedServerPlayerConnectedEvent
// Il2CppName: DedicatedServerPlayerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(GlobalNamespace::DedicatedServerType)>(&IAnalyticsManager::DedicatedServerPlayerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "DedicatedServerPlayerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DedicatedServerType>()});
  }
};
// Writing MetadataGetter for method: IAnalyticsManager::DedicatedServerPlayerDisconnectedEvent
// Il2CppName: DedicatedServerPlayerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IAnalyticsManager::*)(GlobalNamespace::DedicatedServerType, GlobalNamespace::DisconnectedReason)>(&IAnalyticsManager::DedicatedServerPlayerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnalyticsManager*), "DedicatedServerPlayerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DedicatedServerType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.IMasterServer
#include "MasterServer/IMasterServer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: AuthenticationToken
#include "GlobalNamespace/AuthenticationToken.hpp"
// Including type: MasterServer.UserServerStatusUpdateResponse
#include "MasterServer/UserServerStatusUpdateResponse.hpp"
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
// Including type: InvitePolicy
#include "GlobalNamespace/InvitePolicy.hpp"
// Including type: MasterServer.UserServerHeartbeatResponse
#include "MasterServer/UserServerHeartbeatResponse.hpp"
// Including type: MasterServer.GetPublicUserServersResponse
#include "MasterServer/GetPublicUserServersResponse.hpp"
// Including type: GameplayServerFilter
#include "GlobalNamespace/GameplayServerFilter.hpp"
// Including type: MasterServer.ConnectToServerResponse
#include "MasterServer/ConnectToServerResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.IMasterServer.ShouldHandleMessageFromEndPoint
bool MasterServer::IMasterServer::ShouldHandleMessageFromEndPoint(System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::ShouldHandleMessageFromEndPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldHandleMessageFromEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, remoteEndPoint);
}
// Autogenerated method: MasterServer.IMasterServer.ReportExceptionForEndPoint
void MasterServer::IMasterServer::ReportExceptionForEndPoint(System::Net::IPEndPoint* remoteEndPoint, System::Exception* exception) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::ReportExceptionForEndPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportExceptionForEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(exception)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, exception);
}
// Autogenerated method: MasterServer.IMasterServer.TryAuthenticateUser
System::Threading::Tasks::Task_1<bool>* MasterServer::IMasterServer::TryAuthenticateUser(uint protocolVersion, System::Net::IPEndPoint* endPoint, GlobalNamespace::AuthenticationToken authenticationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::TryAuthenticateUser");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAuthenticateUser", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(authenticationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, protocolVersion, endPoint, authenticationToken);
}
// Autogenerated method: MasterServer.IMasterServer.UpdateUserServerStatus
System::Threading::Tasks::Task_1<MasterServer::UserServerStatusUpdateResponse*>* MasterServer::IMasterServer::UpdateUserServerStatus(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* serverName, ::Il2CppString* secret, ::Il2CppString* password, ::Array<uint8_t>* random, ::Array<uint8_t>* publicKey, int currentPlayerCount, int maxPlayerCount, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::UpdateUserServerStatus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateUserServerStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(random), ::il2cpp_utils::ExtractType(publicKey), ::il2cpp_utils::ExtractType(currentPlayerCount), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(configuration)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<MasterServer::UserServerStatusUpdateResponse*>*, false>(this, ___internal__method, protocolVersion, endPoint, userId, userName, serverName, secret, password, random, publicKey, currentPlayerCount, maxPlayerCount, discoveryPolicy, invitePolicy, configuration);
}
// Autogenerated method: MasterServer.IMasterServer.HeartbeatUserServer
System::Threading::Tasks::Task_1<MasterServer::UserServerHeartbeatResponse*>* MasterServer::IMasterServer::HeartbeatUserServer(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, int currentPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::HeartbeatUserServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HeartbeatUserServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(currentPlayerCount)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<MasterServer::UserServerHeartbeatResponse*>*, false>(this, ___internal__method, protocolVersion, endPoint, userId, userName, secret, currentPlayerCount);
}
// Autogenerated method: MasterServer.IMasterServer.RemoveUserServer
void MasterServer::IMasterServer::RemoveUserServer(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::RemoveUserServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveUserServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, endPoint, userId, userName, secret);
}
// Autogenerated method: MasterServer.IMasterServer.GetPublicUserServers
System::Threading::Tasks::Task_1<MasterServer::GetPublicUserServersResponse*>* MasterServer::IMasterServer::GetPublicUserServers(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Il2CppString* userId, ::Il2CppString* userName, int offset, int count, GlobalNamespace::GameplayServerFilter filter) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::GetPublicUserServers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPublicUserServers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(filter)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<MasterServer::GetPublicUserServersResponse*>*, false>(this, ___internal__method, protocolVersion, endPoint, userId, userName, offset, count, filter);
}
// Autogenerated method: MasterServer.IMasterServer.ConnectToUserServer
System::Threading::Tasks::Task_1<MasterServer::ConnectToServerResponse*>* MasterServer::IMasterServer::ConnectToUserServer(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, ::Il2CppString* code, ::Il2CppString* password, ::Array<uint8_t>* random, ::Array<uint8_t>* publicKey, bool useRelay) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::ConnectToUserServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToUserServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(random), ::il2cpp_utils::ExtractType(publicKey), ::il2cpp_utils::ExtractType(useRelay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<MasterServer::ConnectToServerResponse*>*, false>(this, ___internal__method, protocolVersion, endPoint, userId, userName, secret, code, password, random, publicKey, useRelay);
}
// Autogenerated method: MasterServer.IMasterServer.ConnectToMatchmakingServer
System::Threading::Tasks::Task_1<MasterServer::ConnectToServerResponse*>* MasterServer::IMasterServer::ConnectToMatchmakingServer(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::GameplayServerConfiguration configuration, GlobalNamespace::DiscoveryPolicy discoveryPolicy, ::Array<uint8_t>* random, ::Array<uint8_t>* publicKey, ::Il2CppString* secret, ::Il2CppString* code) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::ConnectToMatchmakingServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToMatchmakingServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(random), ::il2cpp_utils::ExtractType(publicKey), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<MasterServer::ConnectToServerResponse*>*, false>(this, ___internal__method, protocolVersion, endPoint, userId, userName, configuration, discoveryPolicy, random, publicKey, secret, code);
}
// Autogenerated method: MasterServer.IMasterServer.TryAuthenticateDedicatedServer
bool MasterServer::IMasterServer::TryAuthenticateDedicatedServer(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Il2CppString* id, ::Array<uint8_t>* nonce, ::Array<uint8_t>* hash, int64_t timestamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::TryAuthenticateDedicatedServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAuthenticateDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(nonce), ::il2cpp_utils::ExtractType(hash), ::il2cpp_utils::ExtractType(timestamp)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, protocolVersion, endPoint, id, nonce, hash, timestamp);
}
// Autogenerated method: MasterServer.IMasterServer.HeartbeatDedicatedServer
void MasterServer::IMasterServer::HeartbeatDedicatedServer(uint protocolVersion, ::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, System::Net::IPEndPoint* endPoint, int cpuUtilization, int occupiedServerSlotCount, int unoccupiedServerSlotCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::HeartbeatDedicatedServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HeartbeatDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(cpuUtilization), ::il2cpp_utils::ExtractType(occupiedServerSlotCount), ::il2cpp_utils::ExtractType(unoccupiedServerSlotCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, dedicatedServerId, dedicatedServerCreationTime, endPoint, cpuUtilization, occupiedServerSlotCount, unoccupiedServerSlotCount);
}
// Autogenerated method: MasterServer.IMasterServer.UpdateMatchmakingServerStatus
void MasterServer::IMasterServer::UpdateMatchmakingServerStatus(uint protocolVersion, ::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, System::Net::IPEndPoint* endPoint, ::Il2CppString* id, GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType gameState, int currentPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::UpdateMatchmakingServerStatus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMatchmakingServerStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(gameState), ::il2cpp_utils::ExtractType(currentPlayerCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, dedicatedServerId, dedicatedServerCreationTime, endPoint, id, gameState, currentPlayerCount);
}
// Autogenerated method: MasterServer.IMasterServer.UpdateRelayServerStatus
void MasterServer::IMasterServer::UpdateRelayServerStatus(uint protocolVersion, ::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, System::Net::IPEndPoint* endPoint, ::Il2CppString* id, int currentPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::UpdateRelayServerStatus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRelayServerStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(currentPlayerCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, dedicatedServerId, dedicatedServerCreationTime, endPoint, id, currentPlayerCount);
}
// Autogenerated method: MasterServer.IMasterServer.SetDedicatedServerNoLongerOccupied
void MasterServer::IMasterServer::SetDedicatedServerNoLongerOccupied(uint protocolVersion, ::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, System::Net::IPEndPoint* endPoint, ::Il2CppString* id) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::SetDedicatedServerNoLongerOccupied");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDedicatedServerNoLongerOccupied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(id)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, dedicatedServerId, dedicatedServerCreationTime, endPoint, id);
}
// Autogenerated method: MasterServer.IMasterServer.RemoveDedicatedServer
void MasterServer::IMasterServer::RemoveDedicatedServer(uint protocolVersion, ::Il2CppString* dedicatedServerId, int64_t dedicatedServerCreationTime, System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServer::RemoveDedicatedServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(dedicatedServerId), ::il2cpp_utils::ExtractType(dedicatedServerCreationTime), ::il2cpp_utils::ExtractType(endPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, dedicatedServerId, dedicatedServerCreationTime, endPoint);
}
// Writing MetadataGetter for method: IMasterServer::ShouldHandleMessageFromEndPoint
// Il2CppName: ShouldHandleMessageFromEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMasterServer::*)(System::Net::IPEndPoint*)>(&IMasterServer::ShouldHandleMessageFromEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "ShouldHandleMessageFromEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::ReportExceptionForEndPoint
// Il2CppName: ReportExceptionForEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMasterServer::*)(System::Net::IPEndPoint*, System::Exception*)>(&IMasterServer::ReportExceptionForEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "ReportExceptionForEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::TryAuthenticateUser
// Il2CppName: TryAuthenticateUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<bool>* (IMasterServer::*)(uint, System::Net::IPEndPoint*, GlobalNamespace::AuthenticationToken)>(&IMasterServer::TryAuthenticateUser)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "TryAuthenticateUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AuthenticationToken>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::UpdateUserServerStatus
// Il2CppName: UpdateUserServerStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<MasterServer::UserServerStatusUpdateResponse*>* (IMasterServer::*)(uint, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Array<uint8_t>*, ::Array<uint8_t>*, int, int, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, GlobalNamespace::GameplayServerConfiguration)>(&IMasterServer::UpdateUserServerStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "UpdateUserServerStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::HeartbeatUserServer
// Il2CppName: HeartbeatUserServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<MasterServer::UserServerHeartbeatResponse*>* (IMasterServer::*)(uint, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, int)>(&IMasterServer::HeartbeatUserServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "HeartbeatUserServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::RemoveUserServer
// Il2CppName: RemoveUserServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMasterServer::*)(uint, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&IMasterServer::RemoveUserServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "RemoveUserServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::GetPublicUserServers
// Il2CppName: GetPublicUserServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<MasterServer::GetPublicUserServersResponse*>* (IMasterServer::*)(uint, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, int, int, GlobalNamespace::GameplayServerFilter)>(&IMasterServer::GetPublicUserServers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "GetPublicUserServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerFilter>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::ConnectToUserServer
// Il2CppName: ConnectToUserServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<MasterServer::ConnectToServerResponse*>* (IMasterServer::*)(uint, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool)>(&IMasterServer::ConnectToUserServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "ConnectToUserServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::ConnectToMatchmakingServer
// Il2CppName: ConnectToMatchmakingServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<MasterServer::ConnectToServerResponse*>* (IMasterServer::*)(uint, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::GameplayServerConfiguration, GlobalNamespace::DiscoveryPolicy, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Il2CppString*, ::Il2CppString*)>(&IMasterServer::ConnectToMatchmakingServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "ConnectToMatchmakingServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::TryAuthenticateDedicatedServer
// Il2CppName: TryAuthenticateDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMasterServer::*)(uint, System::Net::IPEndPoint*, ::Il2CppString*, ::Array<uint8_t>*, ::Array<uint8_t>*, int64_t)>(&IMasterServer::TryAuthenticateDedicatedServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "TryAuthenticateDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::HeartbeatDedicatedServer
// Il2CppName: HeartbeatDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMasterServer::*)(uint, ::Il2CppString*, int64_t, System::Net::IPEndPoint*, int, int, int)>(&IMasterServer::HeartbeatDedicatedServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "HeartbeatDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::UpdateMatchmakingServerStatus
// Il2CppName: UpdateMatchmakingServerStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMasterServer::*)(uint, ::Il2CppString*, int64_t, System::Net::IPEndPoint*, ::Il2CppString*, GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType, int)>(&IMasterServer::UpdateMatchmakingServerStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "UpdateMatchmakingServerStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::UpdateRelayServerStatus
// Il2CppName: UpdateRelayServerStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMasterServer::*)(uint, ::Il2CppString*, int64_t, System::Net::IPEndPoint*, ::Il2CppString*, int)>(&IMasterServer::UpdateRelayServerStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "UpdateRelayServerStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::SetDedicatedServerNoLongerOccupied
// Il2CppName: SetDedicatedServerNoLongerOccupied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMasterServer::*)(uint, ::Il2CppString*, int64_t, System::Net::IPEndPoint*, ::Il2CppString*)>(&IMasterServer::SetDedicatedServerNoLongerOccupied)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "SetDedicatedServerNoLongerOccupied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IMasterServer::RemoveDedicatedServer
// Il2CppName: RemoveDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMasterServer::*)(uint, ::Il2CppString*, int64_t, System::Net::IPEndPoint*)>(&IMasterServer::RemoveDedicatedServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServer*), "RemoveDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.IMasterServerReliableRequest.get_requestId
uint MasterServer::IMasterServerReliableRequest::get_requestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerReliableRequest::get_requestId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IMasterServerReliableRequest.WithRequestId
MasterServer::IMasterServerReliableRequest* MasterServer::IMasterServerReliableRequest::WithRequestId(uint requestId) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerReliableRequest::WithRequestId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithRequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestId)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::IMasterServerReliableRequest*, false>(this, ___internal__method, requestId);
}
// Writing MetadataGetter for method: IMasterServerReliableRequest::get_requestId
// Il2CppName: get_requestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IMasterServerReliableRequest::*)()>(&IMasterServerReliableRequest::get_requestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerReliableRequest*), "get_requestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMasterServerReliableRequest::WithRequestId
// Il2CppName: WithRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::IMasterServerReliableRequest* (IMasterServerReliableRequest::*)(uint)>(&IMasterServerReliableRequest::WithRequestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerReliableRequest*), "WithRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.IMasterServerResponse
#include "MasterServer/IMasterServerResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.IMasterServerResponse.get_responseId
uint MasterServer::IMasterServerResponse::get_responseId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerResponse::get_responseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_responseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IMasterServerResponse.get_resultCode
uint8_t MasterServer::IMasterServerResponse::get_resultCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerResponse::get_resultCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IMasterServerResponse.get_resultCodeString
::Il2CppString* MasterServer::IMasterServerResponse::get_resultCodeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerResponse::get_resultCodeString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCodeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IMasterServerResponse.WithResponseId
MasterServer::IMasterServerResponse* MasterServer::IMasterServerResponse::WithResponseId(uint responseId) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerResponse::WithResponseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithResponseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(responseId)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::IMasterServerResponse*, false>(this, ___internal__method, responseId);
}
// Writing MetadataGetter for method: IMasterServerResponse::get_responseId
// Il2CppName: get_responseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IMasterServerResponse::*)()>(&IMasterServerResponse::get_responseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerResponse*), "get_responseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMasterServerResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (IMasterServerResponse::*)()>(&IMasterServerResponse::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMasterServerResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IMasterServerResponse::*)()>(&IMasterServerResponse::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMasterServerResponse::WithResponseId
// Il2CppName: WithResponseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::IMasterServerResponse* (IMasterServerResponse::*)(uint)>(&IMasterServerResponse::WithResponseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerResponse*), "WithResponseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.IMasterServerReliableResponse
#include "MasterServer/IMasterServerReliableResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.IMasterServerReliableResponse.WithRequestAndResponseId
MasterServer::IMasterServerReliableResponse* MasterServer::IMasterServerReliableResponse::WithRequestAndResponseId(uint requestId, uint responseId) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerReliableResponse::WithRequestAndResponseId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithRequestAndResponseId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestId), ::il2cpp_utils::ExtractType(responseId)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::IMasterServerReliableResponse*, false>(this, ___internal__method, requestId, responseId);
}
// Writing MetadataGetter for method: IMasterServerReliableResponse::WithRequestAndResponseId
// Il2CppName: WithRequestAndResponseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::IMasterServerReliableResponse* (IMasterServerReliableResponse::*)(uint, uint)>(&IMasterServerReliableResponse::WithRequestAndResponseId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerReliableResponse*), "WithRequestAndResponseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.IMasterServerAcknowledgeMessage
#include "MasterServer/IMasterServerAcknowledgeMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.IMasterServerAcknowledgeMessage.get_messageHandled
bool MasterServer::IMasterServerAcknowledgeMessage::get_messageHandled() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerAcknowledgeMessage::get_messageHandled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_messageHandled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IMasterServerAcknowledgeMessage::get_messageHandled
// Il2CppName: get_messageHandled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMasterServerAcknowledgeMessage::*)()>(&IMasterServerAcknowledgeMessage::get_messageHandled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerAcknowledgeMessage*), "get_messageHandled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.IMasterServerAuthenticateResponse
#include "MasterServer/IMasterServerAuthenticateResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.IMasterServerAuthenticateResponse.get_isAuthenticated
bool MasterServer::IMasterServerAuthenticateResponse::get_isAuthenticated() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerAuthenticateResponse::get_isAuthenticated");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAuthenticated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IMasterServerAuthenticateResponse::get_isAuthenticated
// Il2CppName: get_isAuthenticated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMasterServerAuthenticateResponse::*)()>(&IMasterServerAuthenticateResponse::get_isAuthenticated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerAuthenticateResponse*), "get_isAuthenticated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.IMasterServerMultipartMessage
#include "MasterServer/IMasterServerMultipartMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.IMasterServerMultipartMessage.get_multipartMessageId
uint MasterServer::IMasterServerMultipartMessage::get_multipartMessageId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerMultipartMessage::get_multipartMessageId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multipartMessageId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IMasterServerMultipartMessage.get_offset
int MasterServer::IMasterServerMultipartMessage::get_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerMultipartMessage::get_offset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IMasterServerMultipartMessage.get_length
int MasterServer::IMasterServerMultipartMessage::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerMultipartMessage::get_length");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IMasterServerMultipartMessage.get_totalLength
int MasterServer::IMasterServerMultipartMessage::get_totalLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerMultipartMessage::get_totalLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_totalLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IMasterServerMultipartMessage.get_data
::Array<uint8_t>* MasterServer::IMasterServerMultipartMessage::get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IMasterServerMultipartMessage::get_data");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IMasterServerMultipartMessage::get_multipartMessageId
// Il2CppName: get_multipartMessageId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IMasterServerMultipartMessage::*)()>(&IMasterServerMultipartMessage::get_multipartMessageId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerMultipartMessage*), "get_multipartMessageId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMasterServerMultipartMessage::get_offset
// Il2CppName: get_offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IMasterServerMultipartMessage::*)()>(&IMasterServerMultipartMessage::get_offset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerMultipartMessage*), "get_offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMasterServerMultipartMessage::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IMasterServerMultipartMessage::*)()>(&IMasterServerMultipartMessage::get_length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerMultipartMessage*), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMasterServerMultipartMessage::get_totalLength
// Il2CppName: get_totalLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IMasterServerMultipartMessage::*)()>(&IMasterServerMultipartMessage::get_totalLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerMultipartMessage*), "get_totalLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMasterServerMultipartMessage::get_data
// Il2CppName: get_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (IMasterServerMultipartMessage::*)()>(&IMasterServerMultipartMessage::get_data)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerMultipartMessage*), "get_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.MessageHandler
#include "MasterServer/MessageHandler.hpp"
// Including type: MasterServer.MessageHandler/ConnectionState
#include "MasterServer/MessageHandler_ConnectionState.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: MasterServer.MessageHandler/RequestWaiter
#include "MasterServer/MessageHandler_RequestWaiter.hpp"
// Including type: MasterServer.MessageHandler/SentRequestWaiter
#include "MasterServer/MessageHandler_SentRequestWaiter.hpp"
// Including type: MasterServer.MessageHandler/RequestResponseWaiter
#include "MasterServer/MessageHandler_RequestResponseWaiter.hpp"
// Including type: MasterServer.MessageHandler/MultipartMessageWaiter
#include "MasterServer/MessageHandler_MultipartMessageWaiter.hpp"
// Including type: IUnconnectedSenderReceiver
#include "GlobalNamespace/IUnconnectedSenderReceiver.hpp"
// Including type: MasterServer.IAnalyticsManager
#include "MasterServer/IAnalyticsManager.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: MasterServer.MessageHandler/<>c__DisplayClass73_0`1
#include "MasterServer/MessageHandler_--c__DisplayClass73_0_1.hpp"
// Including type: MasterServer.MessageHandler/<>c__DisplayClass77_0`1
#include "MasterServer/MessageHandler_--c__DisplayClass77_0_1.hpp"
// Including type: MasterServer.MessageHandler/<>c__DisplayClass78_0`1
#include "MasterServer/MessageHandler_--c__DisplayClass78_0_1.hpp"
// Including type: MasterServer.MessageHandler/<GetAndSendResponse>d__83`2
#include "MasterServer/MessageHandler_-GetAndSendResponse-d__83_2.hpp"
// Including type: MasterServer.MessageHandler/<GetAndSendResponseAsync>d__84`2
#include "MasterServer/MessageHandler_-GetAndSendResponseAsync-d__84_2.hpp"
// Including type: MasterServer.MessageHandler/<GetAndSendUnreilableResponse>d__85`2
#include "MasterServer/MessageHandler_-GetAndSendUnreilableResponse-d__85_2.hpp"
// Including type: MasterServer.MessageHandler/<SendMessageWithRetry>d__98
#include "MasterServer/MessageHandler_-SendMessageWithRetry-d__98.hpp"
// Including type: MasterServer.MessageHandler/<>c__DisplayClass100_0
#include "MasterServer/MessageHandler_--c__DisplayClass100_0.hpp"
// Including type: MasterServer.MessageHandler/<SendMultipartMessageWithRetryAsync>d__100
#include "MasterServer/MessageHandler_-SendMultipartMessageWithRetryAsync-d__100.hpp"
// Including type: MasterServer.MessageHandler/<SendMessageWithRetryAsyncInternal>d__101
#include "MasterServer/MessageHandler_-SendMessageWithRetryAsyncInternal-d__101.hpp"
// Including type: MasterServer.MessageHandler/<SendMessageWithRetryAwaitResponseAsync>d__102`1
#include "MasterServer/MessageHandler_-SendMessageWithRetryAwaitResponseAsync-d__102_1.hpp"
// Including type: MasterServer.MessageHandler/<>c__DisplayClass103_0`1
#include "MasterServer/MessageHandler_--c__DisplayClass103_0_1.hpp"
// Including type: MasterServer.MessageHandler/<AwaitResponseAsync>d__104`1
#include "MasterServer/MessageHandler_-AwaitResponseAsync-d__104_1.hpp"
// Including type: NetworkPacketSerializer`2
#include "GlobalNamespace/NetworkPacketSerializer_2.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: ExpiringDictionary`2
#include "GlobalNamespace/ExpiringDictionary_2.hpp"
// Including type: SmallBufferPool
#include "GlobalNamespace/SmallBufferPool.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: PacketEncryptionLayer
#include "GlobalNamespace/PacketEncryptionLayer.hpp"
// Including type: MasterServer.IHandshakeMessage
#include "MasterServer/IHandshakeMessage.hpp"
// Including type: MasterServer.ClientHelloRequest
#include "MasterServer/ClientHelloRequest.hpp"
// Including type: MasterServer.HelloVerifyRequest
#include "MasterServer/HelloVerifyRequest.hpp"
// Including type: MasterServer.ClientHelloWithCookieRequest
#include "MasterServer/ClientHelloWithCookieRequest.hpp"
// Including type: MasterServer.IUserMessage
#include "MasterServer/IUserMessage.hpp"
// Including type: MasterServer.UserServerStatusUpdateRequest
#include "MasterServer/UserServerStatusUpdateRequest.hpp"
// Including type: MasterServer.UserServerHeartbeatRequest
#include "MasterServer/UserServerHeartbeatRequest.hpp"
// Including type: MasterServer.UserServerHeartbeatResponse
#include "MasterServer/UserServerHeartbeatResponse.hpp"
// Including type: MasterServer.UserServerRemoveRequest
#include "MasterServer/UserServerRemoveRequest.hpp"
// Including type: MasterServer.ConnectToUserServerRequest
#include "MasterServer/ConnectToUserServerRequest.hpp"
// Including type: MasterServer.ConnectToMatchmakingServerRequest
#include "MasterServer/ConnectToMatchmakingServerRequest.hpp"
// Including type: MasterServer.PrepareForConnectionRequest
#include "MasterServer/PrepareForConnectionRequest.hpp"
// Including type: MasterServer.GetPublicUserServersRequest
#include "MasterServer/GetPublicUserServersRequest.hpp"
// Including type: MasterServer.SessionKeepaliveMessage
#include "MasterServer/SessionKeepaliveMessage.hpp"
// Including type: MasterServer.IDedicatedServerMessage
#include "MasterServer/IDedicatedServerMessage.hpp"
// Including type: MasterServer.CreateRelayServerRequest
#include "MasterServer/CreateRelayServerRequest.hpp"
// Including type: MasterServer.CreateMatchmakingServerRequest
#include "MasterServer/CreateMatchmakingServerRequest.hpp"
// Including type: MasterServer.DedicatedServerNoLongerOccupiedRequest
#include "MasterServer/DedicatedServerNoLongerOccupiedRequest.hpp"
// Including type: MasterServer.DedicatedServerHeartbeatRequest
#include "MasterServer/DedicatedServerHeartbeatRequest.hpp"
// Including type: MasterServer.DedicatedServerHeartbeatResponse
#include "MasterServer/DedicatedServerHeartbeatResponse.hpp"
// Including type: MasterServer.RelayServerStatusUpdateRequest
#include "MasterServer/RelayServerStatusUpdateRequest.hpp"
// Including type: MasterServer.MatchmakingServerStatusUpdateRequest
#include "MasterServer/MatchmakingServerStatusUpdateRequest.hpp"
// Including type: MasterServer.DedicatedServerShutDownRequest
#include "MasterServer/DedicatedServerShutDownRequest.hpp"
// Including type: MasterServer.DedicatedServerPrepareForConnectionRequest
#include "MasterServer/DedicatedServerPrepareForConnectionRequest.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MasterServer.IMasterServerMessage
#include "MasterServer/IMasterServerMessage.hpp"
// Including type: MasterServer.IMasterServerAcknowledgeMessage
#include "MasterServer/IMasterServerAcknowledgeMessage.hpp"
// Including type: MasterServer.IMasterServerReliableResponse
#include "MasterServer/IMasterServerReliableResponse.hpp"
// Including type: MasterServer.IMasterServerMultipartMessage
#include "MasterServer/IMasterServerMultipartMessage.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: MasterServer.IMasterServerUnreliableMessage
#include "MasterServer/IMasterServerUnreliableMessage.hpp"
// Including type: MasterServer.IMasterServerResponse
#include "MasterServer/IMasterServerResponse.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: System.Func`5
#include "System/Func_5.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: INetworkPacketSerializer`1
#include "GlobalNamespace/INetworkPacketSerializer_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.UInt32 kHandshakeMessageType
uint MasterServer::MessageHandler::_get_kHandshakeMessageType() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kHandshakeMessageType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("MasterServer", "MessageHandler", "kHandshakeMessageType"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 kHandshakeMessageType
void MasterServer::MessageHandler::_set_kHandshakeMessageType(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kHandshakeMessageType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kHandshakeMessageType", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 kUserMessageType
uint MasterServer::MessageHandler::_get_kUserMessageType() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kUserMessageType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("MasterServer", "MessageHandler", "kUserMessageType"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 kUserMessageType
void MasterServer::MessageHandler::_set_kUserMessageType(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kUserMessageType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kUserMessageType", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 kDedicatedServerMessageType
uint MasterServer::MessageHandler::_get_kDedicatedServerMessageType() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kDedicatedServerMessageType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("MasterServer", "MessageHandler", "kDedicatedServerMessageType"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 kDedicatedServerMessageType
void MasterServer::MessageHandler::_set_kDedicatedServerMessageType(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kDedicatedServerMessageType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kDedicatedServerMessageType", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 kProtocolVersion
uint MasterServer::MessageHandler::_get_kProtocolVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kProtocolVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("MasterServer", "MessageHandler", "kProtocolVersion"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 kProtocolVersion
void MasterServer::MessageHandler::_set_kProtocolVersion(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kProtocolVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kProtocolVersion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMinSignatureLength
int MasterServer::MessageHandler::_get_kMinSignatureLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kMinSignatureLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler", "kMinSignatureLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMinSignatureLength
void MasterServer::MessageHandler::_set_kMinSignatureLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kMinSignatureLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kMinSignatureLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxSignatureLength
int MasterServer::MessageHandler::_get_kMaxSignatureLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kMaxSignatureLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler", "kMaxSignatureLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxSignatureLength
void MasterServer::MessageHandler::_set_kMaxSignatureLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kMaxSignatureLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kMaxSignatureLength", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxPacketSize
int MasterServer::MessageHandler::_get_kMaxPacketSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kMaxPacketSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler", "kMaxPacketSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxPacketSize
void MasterServer::MessageHandler::_set_kMaxPacketSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kMaxPacketSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kMaxPacketSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kRetryCount
int MasterServer::MessageHandler::_get_kRetryCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kRetryCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler", "kRetryCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kRetryCount
void MasterServer::MessageHandler::_set_kRetryCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kRetryCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kRetryCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kRetryDelay0Ms
int MasterServer::MessageHandler::_get_kRetryDelay0Ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kRetryDelay0Ms");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler", "kRetryDelay0Ms"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kRetryDelay0Ms
void MasterServer::MessageHandler::_set_kRetryDelay0Ms(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kRetryDelay0Ms");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kRetryDelay0Ms", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kRetryDelay1Ms
int MasterServer::MessageHandler::_get_kRetryDelay1Ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kRetryDelay1Ms");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler", "kRetryDelay1Ms"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kRetryDelay1Ms
void MasterServer::MessageHandler::_set_kRetryDelay1Ms(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kRetryDelay1Ms");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kRetryDelay1Ms", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kRetryDelay2Ms
int MasterServer::MessageHandler::_get_kRetryDelay2Ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kRetryDelay2Ms");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler", "kRetryDelay2Ms"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kRetryDelay2Ms
void MasterServer::MessageHandler::_set_kRetryDelay2Ms(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kRetryDelay2Ms");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kRetryDelay2Ms", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kRetryDelay3Ms
int MasterServer::MessageHandler::_get_kRetryDelay3Ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kRetryDelay3Ms");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler", "kRetryDelay3Ms"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kRetryDelay3Ms
void MasterServer::MessageHandler::_set_kRetryDelay3Ms(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kRetryDelay3Ms");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kRetryDelay3Ms", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kRetryDelay4Ms
int MasterServer::MessageHandler::_get_kRetryDelay4Ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kRetryDelay4Ms");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler", "kRetryDelay4Ms"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kRetryDelay4Ms
void MasterServer::MessageHandler::_set_kRetryDelay4Ms(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kRetryDelay4Ms");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kRetryDelay4Ms", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kConnectionStateTimeoutMs
int64_t MasterServer::MessageHandler::_get_kConnectionStateTimeoutMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kConnectionStateTimeoutMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("MasterServer", "MessageHandler", "kConnectionStateTimeoutMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kConnectionStateTimeoutMs
void MasterServer::MessageHandler::_set_kConnectionStateTimeoutMs(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kConnectionStateTimeoutMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kConnectionStateTimeoutMs", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kSentRequestTimeoutMs
int64_t MasterServer::MessageHandler::_get_kSentRequestTimeoutMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kSentRequestTimeoutMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("MasterServer", "MessageHandler", "kSentRequestTimeoutMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kSentRequestTimeoutMs
void MasterServer::MessageHandler::_set_kSentRequestTimeoutMs(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kSentRequestTimeoutMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kSentRequestTimeoutMs", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kSentRequestWithResponseTimeoutMs
int64_t MasterServer::MessageHandler::_get_kSentRequestWithResponseTimeoutMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kSentRequestWithResponseTimeoutMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("MasterServer", "MessageHandler", "kSentRequestWithResponseTimeoutMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kSentRequestWithResponseTimeoutMs
void MasterServer::MessageHandler::_set_kSentRequestWithResponseTimeoutMs(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kSentRequestWithResponseTimeoutMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kSentRequestWithResponseTimeoutMs", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kMultipartMessageTimeoutMs
int64_t MasterServer::MessageHandler::_get_kMultipartMessageTimeoutMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_get_kMultipartMessageTimeoutMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("MasterServer", "MessageHandler", "kMultipartMessageTimeoutMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kMultipartMessageTimeoutMs
void MasterServer::MessageHandler::_set_kMultipartMessageTimeoutMs(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::_set_kMultipartMessageTimeoutMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler", "kMultipartMessageTimeoutMs", value));
}
// Autogenerated method: MasterServer.MessageHandler.get_encryptionLayer
GlobalNamespace::PacketEncryptionLayer* MasterServer::MessageHandler::get_encryptionLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::get_encryptionLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_encryptionLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketEncryptionLayer*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler.get_timeProvider
MasterServer::ITimeProvider* MasterServer::MessageHandler::get_timeProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::get_timeProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::ITimeProvider*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler.RegisterHandshakeMessageHandlers
void MasterServer::MessageHandler::RegisterHandshakeMessageHandlers() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RegisterHandshakeMessageHandlers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterHandshakeMessageHandlers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler.ShouldHandleHandshakeMessage
bool MasterServer::MessageHandler::ShouldHandleHandshakeMessage(MasterServer::IHandshakeMessage* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ShouldHandleHandshakeMessage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldHandleHandshakeMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleClientHelloRequest
void MasterServer::MessageHandler::HandleClientHelloRequest(MasterServer::ClientHelloRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleClientHelloRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleClientHelloRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleHelloVerifyRequest
void MasterServer::MessageHandler::HandleHelloVerifyRequest(MasterServer::HelloVerifyRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleHelloVerifyRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHelloVerifyRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleClientHelloWithCookieRequest
void MasterServer::MessageHandler::HandleClientHelloWithCookieRequest(MasterServer::ClientHelloWithCookieRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleClientHelloWithCookieRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleClientHelloWithCookieRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.RegisterUserMessageHandlers
void MasterServer::MessageHandler::RegisterUserMessageHandlers() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RegisterUserMessageHandlers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterUserMessageHandlers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler.ShouldHandleUserMessage
bool MasterServer::MessageHandler::ShouldHandleUserMessage(MasterServer::IUserMessage* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ShouldHandleUserMessage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldHandleUserMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleUserServerStatusUpdateRequest
void MasterServer::MessageHandler::HandleUserServerStatusUpdateRequest(MasterServer::UserServerStatusUpdateRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleUserServerStatusUpdateRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleUserServerStatusUpdateRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleUserServerHeartbeatRequest
void MasterServer::MessageHandler::HandleUserServerHeartbeatRequest(MasterServer::UserServerHeartbeatRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleUserServerHeartbeatRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleUserServerHeartbeatRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleUserServerHeartbeatResponse
void MasterServer::MessageHandler::HandleUserServerHeartbeatResponse(MasterServer::UserServerHeartbeatResponse* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleUserServerHeartbeatResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleUserServerHeartbeatResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleUserServerRemoveRequest
void MasterServer::MessageHandler::HandleUserServerRemoveRequest(MasterServer::UserServerRemoveRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleUserServerRemoveRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleUserServerRemoveRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleConnectToUserServerRequest
void MasterServer::MessageHandler::HandleConnectToUserServerRequest(MasterServer::ConnectToUserServerRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleConnectToUserServerRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectToUserServerRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleConnectToMatchmakingServerRequest
void MasterServer::MessageHandler::HandleConnectToMatchmakingServerRequest(MasterServer::ConnectToMatchmakingServerRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleConnectToMatchmakingServerRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectToMatchmakingServerRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandlePrepareForConnectionRequest
void MasterServer::MessageHandler::HandlePrepareForConnectionRequest(MasterServer::PrepareForConnectionRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandlePrepareForConnectionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePrepareForConnectionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleGetPublicUserServersRequest
void MasterServer::MessageHandler::HandleGetPublicUserServersRequest(MasterServer::GetPublicUserServersRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleGetPublicUserServersRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGetPublicUserServersRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleSessionKeepaliveMessage
void MasterServer::MessageHandler::HandleSessionKeepaliveMessage(MasterServer::SessionKeepaliveMessage* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleSessionKeepaliveMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSessionKeepaliveMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.RegisterDedicatedServerHandlers
void MasterServer::MessageHandler::RegisterDedicatedServerHandlers() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RegisterDedicatedServerHandlers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterDedicatedServerHandlers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler.ShouldHandleDedicatedServerMessage
bool MasterServer::MessageHandler::ShouldHandleDedicatedServerMessage(MasterServer::IDedicatedServerMessage* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ShouldHandleDedicatedServerMessage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldHandleDedicatedServerMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleGetAvailableRelayServerRequest
void MasterServer::MessageHandler::HandleGetAvailableRelayServerRequest(MasterServer::CreateRelayServerRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleGetAvailableRelayServerRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGetAvailableRelayServerRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleGetAvailableMatchmakingServerRequest
void MasterServer::MessageHandler::HandleGetAvailableMatchmakingServerRequest(MasterServer::CreateMatchmakingServerRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleGetAvailableMatchmakingServerRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGetAvailableMatchmakingServerRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleDedicatedServerNoLongerAvailableRequest
void MasterServer::MessageHandler::HandleDedicatedServerNoLongerAvailableRequest(MasterServer::DedicatedServerNoLongerOccupiedRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleDedicatedServerNoLongerAvailableRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDedicatedServerNoLongerAvailableRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleDedicatedServerHeartbeatRequest
void MasterServer::MessageHandler::HandleDedicatedServerHeartbeatRequest(MasterServer::DedicatedServerHeartbeatRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleDedicatedServerHeartbeatRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDedicatedServerHeartbeatRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleDedicatedServerHeartbeatResponse
void MasterServer::MessageHandler::HandleDedicatedServerHeartbeatResponse(MasterServer::DedicatedServerHeartbeatResponse* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleDedicatedServerHeartbeatResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDedicatedServerHeartbeatResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleRelayServerStatusUpdateRequest
void MasterServer::MessageHandler::HandleRelayServerStatusUpdateRequest(MasterServer::RelayServerStatusUpdateRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleRelayServerStatusUpdateRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRelayServerStatusUpdateRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleMatchmakingServerStatusUpdateRequest
void MasterServer::MessageHandler::HandleMatchmakingServerStatusUpdateRequest(MasterServer::MatchmakingServerStatusUpdateRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleMatchmakingServerStatusUpdateRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMatchmakingServerStatusUpdateRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleDedicatedServerShutDownRequest
void MasterServer::MessageHandler::HandleDedicatedServerShutDownRequest(MasterServer::DedicatedServerShutDownRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleDedicatedServerShutDownRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDedicatedServerShutDownRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.HandleDedicatedServerPrepareForConnectionRequest
void MasterServer::MessageHandler::HandleDedicatedServerPrepareForConnectionRequest(MasterServer::DedicatedServerPrepareForConnectionRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandleDedicatedServerPrepareForConnectionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDedicatedServerPrepareForConnectionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.IsUnhandledMessage
bool MasterServer::MessageHandler::IsUnhandledMessage(MasterServer::IMasterServerReliableRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::IsUnhandledMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsUnhandledMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.CompleteSend
void MasterServer::MessageHandler::CompleteSend(MasterServer::IMasterServerResponse* packet, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::CompleteSend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompleteSend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, remoteEndPoint);
}
// Autogenerated method: MasterServer.MessageHandler.CompleteRequest
bool MasterServer::MessageHandler::CompleteRequest(MasterServer::IMasterServerReliableResponse* packet, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::CompleteRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompleteRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet, remoteEndPoint);
}
// Autogenerated method: MasterServer.MessageHandler.ShouldHandleMessage
bool MasterServer::MessageHandler::ShouldHandleMessage(MasterServer::IMasterServerMessage* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ShouldHandleMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldHandleMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.MessageHandler.SendUnreliableMessage
void MasterServer::MessageHandler::SendUnreliableMessage(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerUnreliableMessage* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendUnreliableMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnreliableMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, remoteEndPoint, message);
}
// Autogenerated method: MasterServer.MessageHandler.SendUnreliableResponse
void MasterServer::MessageHandler::SendUnreliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerResponse* response) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendUnreliableResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnreliableResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(response)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, remoteEndPoint, request, response);
}
// Autogenerated method: MasterServer.MessageHandler.SendUnreliableResponse
void MasterServer::MessageHandler::SendUnreliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, uint responseId, MasterServer::IMasterServerResponse* response) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendUnreliableResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnreliableResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(responseId), ::il2cpp_utils::ExtractType(response)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, remoteEndPoint, responseId, response);
}
// Autogenerated method: MasterServer.MessageHandler.SendReliableRequest
void MasterServer::MessageHandler::SendReliableRequest(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendReliableRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, remoteEndPoint, request, cancellationToken);
}
// Autogenerated method: MasterServer.MessageHandler.SendReliableRequestAsync
System::Threading::Tasks::Task* MasterServer::MessageHandler::SendReliableRequestAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendReliableRequestAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableRequestAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(onSendFailed), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, protocolVersion, remoteEndPoint, request, onSendFailed, cancellationToken);
}
// Autogenerated method: MasterServer.MessageHandler.SendReliableResponse
void MasterServer::MessageHandler::SendReliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendReliableResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(response), ::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, remoteEndPoint, request, response, cancellationToken);
}
// Autogenerated method: MasterServer.MessageHandler.SendReliableResponse
void MasterServer::MessageHandler::SendReliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, uint responseId, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendReliableResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(responseId), ::il2cpp_utils::ExtractType(response), ::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, remoteEndPoint, responseId, response, cancellationToken);
}
// Autogenerated method: MasterServer.MessageHandler.SendReliableResponseAsync
System::Threading::Tasks::Task* MasterServer::MessageHandler::SendReliableResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendReliableResponseAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableResponseAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(response), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, protocolVersion, remoteEndPoint, request, response, cancellationToken);
}
// Autogenerated method: MasterServer.MessageHandler.SendMessage
void MasterServer::MessageHandler::SendMessage(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerMessage* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, remoteEndPoint, message);
}
// Autogenerated method: MasterServer.MessageHandler.SendMessageWithRetry
void MasterServer::MessageHandler::SendMessageWithRetry(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendMessageWithRetry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageWithRetry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, remoteEndPoint, message, cancellationToken);
}
// Autogenerated method: MasterServer.MessageHandler.SendMessageWithRetryAsync
System::Threading::Tasks::Task* MasterServer::MessageHandler::SendMessageWithRetryAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendMessageWithRetryAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageWithRetryAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(onSendFailed), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, protocolVersion, remoteEndPoint, message, onSendFailed, cancellationToken);
}
// Autogenerated method: MasterServer.MessageHandler.SendMultipartMessageWithRetryAsync
System::Threading::Tasks::Task* MasterServer::MessageHandler::SendMultipartMessageWithRetryAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, LiteNetLib::Utils::NetDataWriter* data, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendMultipartMessageWithRetryAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMultipartMessageWithRetryAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(onSendFailed), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, protocolVersion, remoteEndPoint, message, data, onSendFailed, cancellationToken);
}
// Autogenerated method: MasterServer.MessageHandler.SendMessageWithRetryAsyncInternal
System::Threading::Tasks::Task* MasterServer::MessageHandler::SendMessageWithRetryAsyncInternal(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendMessageWithRetryAsyncInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageWithRetryAsyncInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(onSendFailed), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, protocolVersion, remoteEndPoint, message, onSendFailed, cancellationToken);
}
// Autogenerated method: MasterServer.MessageHandler.WaitForRetry
System::Threading::Tasks::Task* MasterServer::MessageHandler::WaitForRetry(int retryAttempt, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::WaitForRetry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitForRetry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(retryAttempt), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, retryAttempt, cancellationToken);
}
// Autogenerated method: MasterServer.MessageHandler.Write
LiteNetLib::Utils::NetDataWriter* MasterServer::MessageHandler::Write(uint protocolVersion, LiteNetLib::Utils::INetSerializable* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetDataWriter*, false>(this, ___internal__method, protocolVersion, message);
}
// Autogenerated method: MasterServer.MessageHandler.PollUpdate
void MasterServer::MessageHandler::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler.ReceiveMessage
void MasterServer::MessageHandler::ReceiveMessage(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ReceiveMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceiveMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, reader);
}
// Autogenerated method: MasterServer.MessageHandler.ShouldHandleMessageFromEndPoint
bool MasterServer::MessageHandler::ShouldHandleMessageFromEndPoint(System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ShouldHandleMessageFromEndPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldHandleMessageFromEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: MasterServer.MessageHandler.ReceivedMessageException
void MasterServer::MessageHandler::ReceivedMessageException(System::Net::IPEndPoint* endPoint, System::Exception* exception) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ReceivedMessageException");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceivedMessageException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(exception)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, exception);
}
// Autogenerated method: MasterServer.MessageHandler.BeginSession
void MasterServer::MessageHandler::BeginSession(System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::BeginSession");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: MasterServer.MessageHandler.BeginSession
void MasterServer::MessageHandler::BeginSession(System::Net::IPEndPoint* endPoint, uint requestId) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::BeginSession");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(requestId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, requestId);
}
// Autogenerated method: MasterServer.MessageHandler.GetNextRequestId
uint MasterServer::MessageHandler::GetNextRequestId(System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::GetNextRequestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextRequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: MasterServer.MessageHandler.GetConnectionState
MasterServer::MessageHandler::ConnectionState* MasterServer::MessageHandler::GetConnectionState(System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::GetConnectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::MessageHandler::ConnectionState*, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: MasterServer.MessageHandler.IsValidSessionStartRequestId
bool MasterServer::MessageHandler::IsValidSessionStartRequestId(System::Net::IPEndPoint* endPoint, uint requestId) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::IsValidSessionStartRequestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValidSessionStartRequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(requestId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint, requestId);
}
// Autogenerated method: MasterServer.MessageHandler.IsConnectionStateEncrypted
bool MasterServer::MessageHandler::IsConnectionStateEncrypted(System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::IsConnectionStateEncrypted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsConnectionStateEncrypted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: MasterServer.MessageHandler.GetSerializer
GlobalNamespace::INetworkPacketSerializer_1<MasterServer::MessageHandler::MessageOrigin>* MasterServer::MessageHandler::GetSerializer(uint protocolVersion, uint messageType) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::GetSerializer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(messageType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPacketSerializer_1<MasterServer::MessageHandler::MessageOrigin>*, false>(this, ___internal__method, protocolVersion, messageType);
}
// Autogenerated method: MasterServer.MessageHandler.Dispose
void MasterServer::MessageHandler::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler.CreateHandshakeHeader
::Array<uint8_t>* MasterServer::MessageHandler::CreateHandshakeHeader(::Array<uint8_t>* packetHeader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::CreateHandshakeHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "MessageHandler", "CreateHandshakeHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packetHeader)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, packetHeader);
}
// Writing MetadataGetter for method: MessageHandler::get_encryptionLayer
// Il2CppName: get_encryptionLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketEncryptionLayer* (MessageHandler::*)()>(&MessageHandler::get_encryptionLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "get_encryptionLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::get_timeProvider
// Il2CppName: get_timeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::ITimeProvider* (MessageHandler::*)()>(&MessageHandler::get_timeProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "get_timeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(GlobalNamespace::IUnconnectedSenderReceiver*, MasterServer::ITimeProvider*, MasterServer::IAnalyticsManager*)>(&MessageHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IUnconnectedSenderReceiver*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IAnalyticsManager*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(GlobalNamespace::IUnconnectedSenderReceiver*, MasterServer::ITimeProvider*, MasterServer::IAnalyticsManager*)>(&MessageHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IUnconnectedSenderReceiver*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IAnalyticsManager*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::RegisterHandshakeMessageHandlers
// Il2CppName: RegisterHandshakeMessageHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)()>(&MessageHandler::RegisterHandshakeMessageHandlers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "RegisterHandshakeMessageHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::ShouldHandleHandshakeMessage
// Il2CppName: ShouldHandleHandshakeMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::*)(MasterServer::IHandshakeMessage*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::ShouldHandleHandshakeMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "ShouldHandleHandshakeMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IHandshakeMessage*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleClientHelloRequest
// Il2CppName: HandleClientHelloRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::ClientHelloRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleClientHelloRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleClientHelloRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ClientHelloRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleHelloVerifyRequest
// Il2CppName: HandleHelloVerifyRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::HelloVerifyRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleHelloVerifyRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleHelloVerifyRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::HelloVerifyRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleClientHelloWithCookieRequest
// Il2CppName: HandleClientHelloWithCookieRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::ClientHelloWithCookieRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleClientHelloWithCookieRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleClientHelloWithCookieRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ClientHelloWithCookieRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::RegisterUserMessageHandlers
// Il2CppName: RegisterUserMessageHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)()>(&MessageHandler::RegisterUserMessageHandlers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "RegisterUserMessageHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::ShouldHandleUserMessage
// Il2CppName: ShouldHandleUserMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::*)(MasterServer::IUserMessage*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::ShouldHandleUserMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "ShouldHandleUserMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IUserMessage*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleUserServerStatusUpdateRequest
// Il2CppName: HandleUserServerStatusUpdateRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::UserServerStatusUpdateRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleUserServerStatusUpdateRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleUserServerStatusUpdateRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::UserServerStatusUpdateRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleUserServerHeartbeatRequest
// Il2CppName: HandleUserServerHeartbeatRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::UserServerHeartbeatRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleUserServerHeartbeatRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleUserServerHeartbeatRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::UserServerHeartbeatRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleUserServerHeartbeatResponse
// Il2CppName: HandleUserServerHeartbeatResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::UserServerHeartbeatResponse*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleUserServerHeartbeatResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleUserServerHeartbeatResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::UserServerHeartbeatResponse*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleUserServerRemoveRequest
// Il2CppName: HandleUserServerRemoveRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::UserServerRemoveRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleUserServerRemoveRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleUserServerRemoveRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::UserServerRemoveRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleConnectToUserServerRequest
// Il2CppName: HandleConnectToUserServerRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::ConnectToUserServerRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleConnectToUserServerRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleConnectToUserServerRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ConnectToUserServerRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleConnectToMatchmakingServerRequest
// Il2CppName: HandleConnectToMatchmakingServerRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::ConnectToMatchmakingServerRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleConnectToMatchmakingServerRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleConnectToMatchmakingServerRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ConnectToMatchmakingServerRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandlePrepareForConnectionRequest
// Il2CppName: HandlePrepareForConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::PrepareForConnectionRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandlePrepareForConnectionRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandlePrepareForConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::PrepareForConnectionRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleGetPublicUserServersRequest
// Il2CppName: HandleGetPublicUserServersRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::GetPublicUserServersRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleGetPublicUserServersRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleGetPublicUserServersRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::GetPublicUserServersRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleSessionKeepaliveMessage
// Il2CppName: HandleSessionKeepaliveMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::SessionKeepaliveMessage*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleSessionKeepaliveMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleSessionKeepaliveMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::SessionKeepaliveMessage*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::RegisterDedicatedServerHandlers
// Il2CppName: RegisterDedicatedServerHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)()>(&MessageHandler::RegisterDedicatedServerHandlers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "RegisterDedicatedServerHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::ShouldHandleDedicatedServerMessage
// Il2CppName: ShouldHandleDedicatedServerMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::*)(MasterServer::IDedicatedServerMessage*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::ShouldHandleDedicatedServerMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "ShouldHandleDedicatedServerMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IDedicatedServerMessage*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleGetAvailableRelayServerRequest
// Il2CppName: HandleGetAvailableRelayServerRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::CreateRelayServerRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleGetAvailableRelayServerRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleGetAvailableRelayServerRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::CreateRelayServerRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleGetAvailableMatchmakingServerRequest
// Il2CppName: HandleGetAvailableMatchmakingServerRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::CreateMatchmakingServerRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleGetAvailableMatchmakingServerRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleGetAvailableMatchmakingServerRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::CreateMatchmakingServerRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleDedicatedServerNoLongerAvailableRequest
// Il2CppName: HandleDedicatedServerNoLongerAvailableRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::DedicatedServerNoLongerOccupiedRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleDedicatedServerNoLongerAvailableRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleDedicatedServerNoLongerAvailableRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::DedicatedServerNoLongerOccupiedRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleDedicatedServerHeartbeatRequest
// Il2CppName: HandleDedicatedServerHeartbeatRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::DedicatedServerHeartbeatRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleDedicatedServerHeartbeatRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleDedicatedServerHeartbeatRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::DedicatedServerHeartbeatRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleDedicatedServerHeartbeatResponse
// Il2CppName: HandleDedicatedServerHeartbeatResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::DedicatedServerHeartbeatResponse*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleDedicatedServerHeartbeatResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleDedicatedServerHeartbeatResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::DedicatedServerHeartbeatResponse*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleRelayServerStatusUpdateRequest
// Il2CppName: HandleRelayServerStatusUpdateRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::RelayServerStatusUpdateRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleRelayServerStatusUpdateRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleRelayServerStatusUpdateRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::RelayServerStatusUpdateRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleMatchmakingServerStatusUpdateRequest
// Il2CppName: HandleMatchmakingServerStatusUpdateRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::MatchmakingServerStatusUpdateRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleMatchmakingServerStatusUpdateRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleMatchmakingServerStatusUpdateRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::MatchmakingServerStatusUpdateRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleDedicatedServerShutDownRequest
// Il2CppName: HandleDedicatedServerShutDownRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::DedicatedServerShutDownRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleDedicatedServerShutDownRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleDedicatedServerShutDownRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::DedicatedServerShutDownRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::HandleDedicatedServerPrepareForConnectionRequest
// Il2CppName: HandleDedicatedServerPrepareForConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::DedicatedServerPrepareForConnectionRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::HandleDedicatedServerPrepareForConnectionRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "HandleDedicatedServerPrepareForConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::DedicatedServerPrepareForConnectionRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ObtainVersioned
// Il2CppName: ObtainVersioned
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::DefaultAcknowledgeHandler
// Il2CppName: DefaultAcknowledgeHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::DefaultResponseHandler
// Il2CppName: DefaultResponseHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::DefaultMultipartMessageHandler
// Il2CppName: DefaultMultipartMessageHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::CustomResponseHandler
// Il2CppName: CustomResponseHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::CustomUnreliableResponseHandler
// Il2CppName: CustomUnreliableResponseHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::IsUnhandledMessage
// Il2CppName: IsUnhandledMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::*)(MasterServer::IMasterServerReliableRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::IsUnhandledMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "IsUnhandledMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::CompleteSend
// Il2CppName: CompleteSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(MasterServer::IMasterServerResponse*, System::Net::IPEndPoint*)>(&MessageHandler::CompleteSend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "CompleteSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerResponse*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::CompleteRequest
// Il2CppName: CompleteRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::*)(MasterServer::IMasterServerReliableResponse*, System::Net::IPEndPoint*)>(&MessageHandler::CompleteRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "CompleteRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableResponse*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ShouldHandleMessage
// Il2CppName: ShouldHandleMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::*)(MasterServer::IMasterServerMessage*, MasterServer::MessageHandler::MessageOrigin)>(&MessageHandler::ShouldHandleMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "ShouldHandleMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerMessage*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::GetAndSendResponse
// Il2CppName: GetAndSendResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::GetAndSendResponseAsync
// Il2CppName: GetAndSendResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::GetAndSendUnreilableResponse
// Il2CppName: GetAndSendUnreilableResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::SendUnreliableMessage
// Il2CppName: SendUnreliableMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerUnreliableMessage*)>(&MessageHandler::SendUnreliableMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendUnreliableMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerUnreliableMessage*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendUnreliableResponse
// Il2CppName: SendUnreliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, MasterServer::IMasterServerResponse*)>(&MessageHandler::SendUnreliableResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendUnreliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerResponse*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendUnreliableResponse
// Il2CppName: SendUnreliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(uint, System::Net::IPEndPoint*, uint, MasterServer::IMasterServerResponse*)>(&MessageHandler::SendUnreliableResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendUnreliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerResponse*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendReliableRequest
// Il2CppName: SendReliableRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken)>(&MessageHandler::SendReliableRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendReliableRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendReliableRequestAsync
// Il2CppName: SendReliableRequestAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*, System::Threading::CancellationToken)>(&MessageHandler::SendReliableRequestAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendReliableRequestAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendReliableResponse
// Il2CppName: SendReliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, MasterServer::IMasterServerReliableResponse*, System::Threading::CancellationToken)>(&MessageHandler::SendReliableResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendReliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableResponse*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendReliableResponse
// Il2CppName: SendReliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(uint, System::Net::IPEndPoint*, uint, MasterServer::IMasterServerReliableResponse*, System::Threading::CancellationToken)>(&MessageHandler::SendReliableResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendReliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableResponse*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendReliableResponseAsync
// Il2CppName: SendReliableResponseAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, MasterServer::IMasterServerReliableResponse*, System::Threading::CancellationToken)>(&MessageHandler::SendReliableResponseAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendReliableResponseAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableResponse*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendReliableRequestAndAwaitResponseAsync
// Il2CppName: SendReliableRequestAndAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::SendReliableResponseAndAwaitResponseAsync
// Il2CppName: SendReliableResponseAndAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::SendReliableResponseAndAwaitResponseAsync
// Il2CppName: SendReliableResponseAndAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerMessage*)>(&MessageHandler::SendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerMessage*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendMessageWithRetry
// Il2CppName: SendMessageWithRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken)>(&MessageHandler::SendMessageWithRetry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendMessageWithRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendMessageWithRetryAsync
// Il2CppName: SendMessageWithRetryAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*, System::Threading::CancellationToken)>(&MessageHandler::SendMessageWithRetryAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendMessageWithRetryAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendMultipartMessageWithRetryAsync
// Il2CppName: SendMultipartMessageWithRetryAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, LiteNetLib::Utils::NetDataWriter*, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*, System::Threading::CancellationToken)>(&MessageHandler::SendMultipartMessageWithRetryAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendMultipartMessageWithRetryAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendMessageWithRetryAsyncInternal
// Il2CppName: SendMessageWithRetryAsyncInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*, System::Threading::CancellationToken)>(&MessageHandler::SendMessageWithRetryAsyncInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "SendMessageWithRetryAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SendMessageWithRetryAwaitResponseAsync
// Il2CppName: SendMessageWithRetryAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::WrapOnSendFailedAwaitResponse
// Il2CppName: WrapOnSendFailedAwaitResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::AwaitResponseAsync
// Il2CppName: AwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MessageHandler::WaitForRetry
// Il2CppName: WaitForRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MessageHandler::*)(int, System::Threading::CancellationToken)>(&MessageHandler::WaitForRetry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "WaitForRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::Utils::NetDataWriter* (MessageHandler::*)(uint, LiteNetLib::Utils::INetSerializable*)>(&MessageHandler::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::INetSerializable*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)()>(&MessageHandler::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::ReceiveMessage
// Il2CppName: ReceiveMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*)>(&MessageHandler::ReceiveMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "ReceiveMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ShouldHandleMessageFromEndPoint
// Il2CppName: ShouldHandleMessageFromEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::*)(System::Net::IPEndPoint*)>(&MessageHandler::ShouldHandleMessageFromEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "ShouldHandleMessageFromEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ReceivedMessageException
// Il2CppName: ReceivedMessageException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(System::Net::IPEndPoint*, System::Exception*)>(&MessageHandler::ReceivedMessageException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "ReceivedMessageException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::BeginSession
// Il2CppName: BeginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(System::Net::IPEndPoint*)>(&MessageHandler::BeginSession)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "BeginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::BeginSession
// Il2CppName: BeginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)(System::Net::IPEndPoint*, uint)>(&MessageHandler::BeginSession)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "BeginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::GetNextRequestId
// Il2CppName: GetNextRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (MessageHandler::*)(System::Net::IPEndPoint*)>(&MessageHandler::GetNextRequestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "GetNextRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::GetConnectionState
// Il2CppName: GetConnectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::MessageHandler::ConnectionState* (MessageHandler::*)(System::Net::IPEndPoint*)>(&MessageHandler::GetConnectionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "GetConnectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::IsValidSessionStartRequestId
// Il2CppName: IsValidSessionStartRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::*)(System::Net::IPEndPoint*, uint)>(&MessageHandler::IsValidSessionStartRequestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "IsValidSessionStartRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::IsConnectionStateEncrypted
// Il2CppName: IsConnectionStateEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::*)(System::Net::IPEndPoint*)>(&MessageHandler::IsConnectionStateEncrypted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "IsConnectionStateEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::GetSerializer
// Il2CppName: GetSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPacketSerializer_1<MasterServer::MessageHandler::MessageOrigin>* (MessageHandler::*)(uint, uint)>(&MessageHandler::GetSerializer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "GetSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::*)()>(&MessageHandler::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::CreateHandshakeHeader
// Il2CppName: CreateHandshakeHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*)>(&MessageHandler::CreateHandshakeHeader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler*), "CreateHandshakeHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.MessageHandler/ConnectionState
#include "MasterServer/MessageHandler_ConnectionState.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kEpochBitOffset
int MasterServer::MessageHandler::ConnectionState::_get_kEpochBitOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::_get_kEpochBitOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler/ConnectionState", "kEpochBitOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kEpochBitOffset
void MasterServer::MessageHandler::ConnectionState::_set_kEpochBitOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::_set_kEpochBitOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/ConnectionState", "kEpochBitOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 kRequestIdRange
uint MasterServer::MessageHandler::ConnectionState::_get_kRequestIdRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::_get_kRequestIdRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("MasterServer", "MessageHandler/ConnectionState", "kRequestIdRange"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 kRequestIdRange
void MasterServer::MessageHandler::ConnectionState::_set_kRequestIdRange(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::_set_kRequestIdRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/ConnectionState", "kRequestIdRange", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 kRangeMask
uint MasterServer::MessageHandler::ConnectionState::_get_kRangeMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::_get_kRangeMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("MasterServer", "MessageHandler/ConnectionState", "kRangeMask"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 kRangeMask
void MasterServer::MessageHandler::ConnectionState::_set_kRangeMask(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::_set_kRangeMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/ConnectionState", "kRangeMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 kEpochMask
uint MasterServer::MessageHandler::ConnectionState::_get_kEpochMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::_get_kEpochMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("MasterServer", "MessageHandler/ConnectionState", "kEpochMask"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 kEpochMask
void MasterServer::MessageHandler::ConnectionState::_set_kEpochMask(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::_set_kEpochMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/ConnectionState", "kEpochMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kRequestBufferLength
int MasterServer::MessageHandler::ConnectionState::_get_kRequestBufferLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::_get_kRequestBufferLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("MasterServer", "MessageHandler/ConnectionState", "kRequestBufferLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kRequestBufferLength
void MasterServer::MessageHandler::ConnectionState::_set_kRequestBufferLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::_set_kRequestBufferLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/ConnectionState", "kRequestBufferLength", value));
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.get_isEncrypted
bool MasterServer::MessageHandler::ConnectionState::get_isEncrypted() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::get_isEncrypted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEncrypted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.GetNextRequestId
uint MasterServer::MessageHandler::ConnectionState::GetNextRequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::GetNextRequestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextRequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.BeginSession
void MasterServer::MessageHandler::ConnectionState::BeginSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::BeginSession");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.IsValidSessionStartRequestId
bool MasterServer::MessageHandler::ConnectionState::IsValidSessionStartRequestId(uint requestId) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::IsValidSessionStartRequestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValidSessionStartRequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, requestId);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.BeginSession
void MasterServer::MessageHandler::ConnectionState::BeginSession(uint requestId) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::BeginSession");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, requestId);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.SetEpoch
void MasterServer::MessageHandler::ConnectionState::SetEpoch(uint epoch) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::SetEpoch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEpoch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(epoch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, epoch);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.CanAcceptRequest
bool MasterServer::MessageHandler::ConnectionState::CanAcceptRequest(uint requestId) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::CanAcceptRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanAcceptRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, requestId);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.SetEncryptionState
void MasterServer::MessageHandler::ConnectionState::SetEncryptionState(GlobalNamespace::EncryptionUtility::IEncryptionState* encryptionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::SetEncryptionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEncryptionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(encryptionState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, encryptionState);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.SetIdentity
void MasterServer::MessageHandler::ConnectionState::SetIdentity(uint protocolVersion, ::Il2CppString* userId, ::Il2CppString* userName) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::SetIdentity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIdentity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, protocolVersion, userId, userName);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.VerifyIdentity
bool MasterServer::MessageHandler::ConnectionState::VerifyIdentity(uint protocolVersion, ::Il2CppString* userId, ::Il2CppString* userName) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::VerifyIdentity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerifyIdentity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, protocolVersion, userId, userName);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.Dispose
void MasterServer::MessageHandler::ConnectionState::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/ConnectionState.LogD
void MasterServer::MessageHandler::ConnectionState::LogD(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ConnectionState::LogD");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "MessageHandler/ConnectionState", "LogD", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Writing MetadataGetter for method: MessageHandler::ConnectionState::get_isEncrypted
// Il2CppName: get_isEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::ConnectionState::*)()>(&MessageHandler::ConnectionState::get_isEncrypted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "get_isEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::GetNextRequestId
// Il2CppName: GetNextRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (MessageHandler::ConnectionState::*)()>(&MessageHandler::ConnectionState::GetNextRequestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "GetNextRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::BeginSession
// Il2CppName: BeginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::ConnectionState::*)()>(&MessageHandler::ConnectionState::BeginSession)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "BeginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::IsValidSessionStartRequestId
// Il2CppName: IsValidSessionStartRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::ConnectionState::*)(uint)>(&MessageHandler::ConnectionState::IsValidSessionStartRequestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "IsValidSessionStartRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::BeginSession
// Il2CppName: BeginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::ConnectionState::*)(uint)>(&MessageHandler::ConnectionState::BeginSession)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "BeginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::SetEpoch
// Il2CppName: SetEpoch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::ConnectionState::*)(uint)>(&MessageHandler::ConnectionState::SetEpoch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "SetEpoch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::CanAcceptRequest
// Il2CppName: CanAcceptRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::ConnectionState::*)(uint)>(&MessageHandler::ConnectionState::CanAcceptRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "CanAcceptRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::SetEncryptionState
// Il2CppName: SetEncryptionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::ConnectionState::*)(GlobalNamespace::EncryptionUtility::IEncryptionState*)>(&MessageHandler::ConnectionState::SetEncryptionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "SetEncryptionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::IEncryptionState*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::SetIdentity
// Il2CppName: SetIdentity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::ConnectionState::*)(uint, ::Il2CppString*, ::Il2CppString*)>(&MessageHandler::ConnectionState::SetIdentity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "SetIdentity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::VerifyIdentity
// Il2CppName: VerifyIdentity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::ConnectionState::*)(uint, ::Il2CppString*, ::Il2CppString*)>(&MessageHandler::ConnectionState::VerifyIdentity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "VerifyIdentity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::ConnectionState::*)()>(&MessageHandler::ConnectionState::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::LogD
// Il2CppName: LogD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&MessageHandler::ConnectionState::LogD)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), "LogD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::ConnectionState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::ConnectionState::*)()>(&MessageHandler::ConnectionState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::ConnectionState::*)()>(&MessageHandler::ConnectionState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::ConnectionState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.MessageHandler/RequestWaiterId
#include "MasterServer/MessageHandler.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.MessageHandler/RequestWaiterId.Equals
bool MasterServer::MessageHandler::RequestWaiterId::Equals(MasterServer::MessageHandler::RequestWaiterId other) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RequestWaiterId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: MasterServer.MessageHandler/RequestWaiterId.Equals
bool MasterServer::MessageHandler::RequestWaiterId::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RequestWaiterId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: MasterServer.MessageHandler/RequestWaiterId.GetHashCode
int MasterServer::MessageHandler::RequestWaiterId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RequestWaiterId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: MessageHandler::RequestWaiterId::RequestWaiterId
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestWaiterId::*)(System::Net::IPEndPoint*, uint)>(&MessageHandler::RequestWaiterId::RequestWaiterId<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestWaiterId), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestWaiterId::*)(System::Net::IPEndPoint*, uint)>(&MessageHandler::RequestWaiterId::RequestWaiterId<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestWaiterId), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::RequestWaiterId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::RequestWaiterId::*)(MasterServer::MessageHandler::RequestWaiterId)>(&MessageHandler::RequestWaiterId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestWaiterId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::RequestWaiterId>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::RequestWaiterId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::RequestWaiterId::*)(::Il2CppObject*)>(&MessageHandler::RequestWaiterId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestWaiterId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::RequestWaiterId::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MessageHandler::RequestWaiterId::*)()>(&MessageHandler::RequestWaiterId::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestWaiterId), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.MessageHandler/RequestWaiter
#include "MasterServer/MessageHandler_RequestWaiter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.MessageHandler/RequestWaiter.Dispose
void MasterServer::MessageHandler::RequestWaiter::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RequestWaiter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MessageHandler::RequestWaiter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestWaiter::*)()>(&MessageHandler::RequestWaiter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestWaiter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::RequestWaiter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestWaiter::*)()>(&MessageHandler::RequestWaiter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestWaiter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestWaiter::*)()>(&MessageHandler::RequestWaiter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestWaiter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.MessageHandler/SentRequestWaiter
#include "MasterServer/MessageHandler_SentRequestWaiter.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.MessageHandler/SentRequestWaiter.Complete
void MasterServer::MessageHandler::SentRequestWaiter::Complete(bool handled) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SentRequestWaiter::Complete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Complete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handled)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, handled);
}
// Autogenerated method: MasterServer.MessageHandler/SentRequestWaiter.Cancel
void MasterServer::MessageHandler::SentRequestWaiter::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SentRequestWaiter::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/SentRequestWaiter.get_task
System::Threading::Tasks::Task* MasterServer::MessageHandler::SentRequestWaiter::get_task() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SentRequestWaiter::get_task");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_task", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/SentRequestWaiter.get_isWaiting
bool MasterServer::MessageHandler::SentRequestWaiter::get_isWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SentRequestWaiter::get_isWaiting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/SentRequestWaiter.Dispose
void MasterServer::MessageHandler::SentRequestWaiter::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SentRequestWaiter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MessageHandler::SentRequestWaiter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::SentRequestWaiter::*)(System::Threading::CancellationToken, System::Threading::CancellationToken)>(&MessageHandler::SentRequestWaiter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::SentRequestWaiter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::SentRequestWaiter::*)(System::Threading::CancellationToken, System::Threading::CancellationToken)>(&MessageHandler::SentRequestWaiter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::SentRequestWaiter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SentRequestWaiter::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::SentRequestWaiter::*)(bool)>(&MessageHandler::SentRequestWaiter::Complete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::SentRequestWaiter*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::SentRequestWaiter::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::SentRequestWaiter::*)()>(&MessageHandler::SentRequestWaiter::Cancel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::SentRequestWaiter*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::SentRequestWaiter::get_task
// Il2CppName: get_task
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MessageHandler::SentRequestWaiter::*)()>(&MessageHandler::SentRequestWaiter::get_task)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::SentRequestWaiter*), "get_task", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::SentRequestWaiter::get_isWaiting
// Il2CppName: get_isWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::SentRequestWaiter::*)()>(&MessageHandler::SentRequestWaiter::get_isWaiting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::SentRequestWaiter*), "get_isWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::SentRequestWaiter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::SentRequestWaiter::*)()>(&MessageHandler::SentRequestWaiter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::SentRequestWaiter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.MessageHandler/RequestResponseWaiter
#include "MasterServer/MessageHandler_RequestResponseWaiter.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
// Including type: MasterServer.IMasterServerMessage
#include "MasterServer/IMasterServerMessage.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.MessageHandler/RequestResponseWaiter.Complete
void MasterServer::MessageHandler::RequestResponseWaiter::Complete(MasterServer::IMasterServerMessage* response) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RequestResponseWaiter::Complete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Complete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(response)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, response);
}
// Autogenerated method: MasterServer.MessageHandler/RequestResponseWaiter.Fail
void MasterServer::MessageHandler::RequestResponseWaiter::Fail(System::Exception* ex) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RequestResponseWaiter::Fail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ex);
}
// Autogenerated method: MasterServer.MessageHandler/RequestResponseWaiter.Cancel
void MasterServer::MessageHandler::RequestResponseWaiter::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RequestResponseWaiter::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/RequestResponseWaiter.get_task
System::Threading::Tasks::Task_1<MasterServer::IMasterServerMessage*>* MasterServer::MessageHandler::RequestResponseWaiter::get_task() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RequestResponseWaiter::get_task");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_task", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<MasterServer::IMasterServerMessage*>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/RequestResponseWaiter.get_isWaiting
bool MasterServer::MessageHandler::RequestResponseWaiter::get_isWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RequestResponseWaiter::get_isWaiting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/RequestResponseWaiter.Dispose
void MasterServer::MessageHandler::RequestResponseWaiter::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::RequestResponseWaiter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MessageHandler::RequestResponseWaiter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestResponseWaiter::*)(System::Threading::CancellationToken, System::Threading::CancellationToken)>(&MessageHandler::RequestResponseWaiter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestResponseWaiter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestResponseWaiter::*)(System::Threading::CancellationToken, System::Threading::CancellationToken)>(&MessageHandler::RequestResponseWaiter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestResponseWaiter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::RequestResponseWaiter::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestResponseWaiter::*)(MasterServer::IMasterServerMessage*)>(&MessageHandler::RequestResponseWaiter::Complete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestResponseWaiter*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerMessage*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::RequestResponseWaiter::Fail
// Il2CppName: Fail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestResponseWaiter::*)(System::Exception*)>(&MessageHandler::RequestResponseWaiter::Fail)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestResponseWaiter*), "Fail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::RequestResponseWaiter::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestResponseWaiter::*)()>(&MessageHandler::RequestResponseWaiter::Cancel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestResponseWaiter*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::RequestResponseWaiter::get_task
// Il2CppName: get_task
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<MasterServer::IMasterServerMessage*>* (MessageHandler::RequestResponseWaiter::*)()>(&MessageHandler::RequestResponseWaiter::get_task)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestResponseWaiter*), "get_task", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::RequestResponseWaiter::get_isWaiting
// Il2CppName: get_isWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::RequestResponseWaiter::*)()>(&MessageHandler::RequestResponseWaiter::get_isWaiting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestResponseWaiter*), "get_isWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::RequestResponseWaiter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::RequestResponseWaiter::*)()>(&MessageHandler::RequestResponseWaiter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::RequestResponseWaiter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.MessageHandler/MultipartMessageWaiter
#include "MasterServer/MessageHandler_MultipartMessageWaiter.hpp"
// Including type: SmallBufferPool
#include "GlobalNamespace/SmallBufferPool.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MasterServer.IMasterServerMultipartMessage
#include "MasterServer/IMasterServerMultipartMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.MessageHandler/MultipartMessageWaiter.Append
void MasterServer::MessageHandler::MultipartMessageWaiter::Append(MasterServer::IMasterServerMultipartMessage* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::MultipartMessageWaiter::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: MasterServer.MessageHandler/MultipartMessageWaiter.get_isWaiting
bool MasterServer::MessageHandler::MultipartMessageWaiter::get_isWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::MultipartMessageWaiter::get_isWaiting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/MultipartMessageWaiter.get_data
::Array<uint8_t>* MasterServer::MessageHandler::MultipartMessageWaiter::get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::MultipartMessageWaiter::get_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/MultipartMessageWaiter.get_length
int MasterServer::MessageHandler::MultipartMessageWaiter::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::MultipartMessageWaiter::get_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/MultipartMessageWaiter.Dispose
void MasterServer::MessageHandler::MultipartMessageWaiter::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::MultipartMessageWaiter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MessageHandler::MultipartMessageWaiter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::MultipartMessageWaiter::*)(GlobalNamespace::SmallBufferPool*)>(&MessageHandler::MultipartMessageWaiter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::MultipartMessageWaiter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SmallBufferPool*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::MultipartMessageWaiter::*)(GlobalNamespace::SmallBufferPool*)>(&MessageHandler::MultipartMessageWaiter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::MultipartMessageWaiter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SmallBufferPool*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::MultipartMessageWaiter::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::MultipartMessageWaiter::*)(MasterServer::IMasterServerMultipartMessage*)>(&MessageHandler::MultipartMessageWaiter::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::MultipartMessageWaiter*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerMultipartMessage*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::MultipartMessageWaiter::get_isWaiting
// Il2CppName: get_isWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MessageHandler::MultipartMessageWaiter::*)()>(&MessageHandler::MultipartMessageWaiter::get_isWaiting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::MultipartMessageWaiter*), "get_isWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::MultipartMessageWaiter::get_data
// Il2CppName: get_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (MessageHandler::MultipartMessageWaiter::*)()>(&MessageHandler::MultipartMessageWaiter::get_data)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::MultipartMessageWaiter*), "get_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::MultipartMessageWaiter::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MessageHandler::MultipartMessageWaiter::*)()>(&MessageHandler::MultipartMessageWaiter::get_length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::MultipartMessageWaiter*), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::MultipartMessageWaiter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::MultipartMessageWaiter::*)()>(&MessageHandler::MultipartMessageWaiter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::MultipartMessageWaiter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.MessageHandler/MessageOrigin
#include "MasterServer/MessageHandler.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MessageHandler::MessageOrigin::MessageOrigin
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::MessageOrigin::*)(System::Net::IPEndPoint*, uint)>(&MessageHandler::MessageOrigin::MessageOrigin<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::MessageOrigin), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::MessageOrigin::*)(System::Net::IPEndPoint*, uint)>(&MessageHandler::MessageOrigin::MessageOrigin<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::MessageOrigin), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.MessageHandler/HandshakeMessageType
#include "MasterServer/MessageHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloRequest
MasterServer::MessageHandler::HandshakeMessageType MasterServer::MessageHandler::HandshakeMessageType::_get_ClientHelloRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_get_ClientHelloRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::HandshakeMessageType>("MasterServer", "MessageHandler/HandshakeMessageType", "ClientHelloRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloRequest
void MasterServer::MessageHandler::HandshakeMessageType::_set_ClientHelloRequest(MasterServer::MessageHandler::HandshakeMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_set_ClientHelloRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/HandshakeMessageType", "ClientHelloRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/HandshakeMessageType HelloVerifyRequest
MasterServer::MessageHandler::HandshakeMessageType MasterServer::MessageHandler::HandshakeMessageType::_get_HelloVerifyRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_get_HelloVerifyRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::HandshakeMessageType>("MasterServer", "MessageHandler/HandshakeMessageType", "HelloVerifyRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/HandshakeMessageType HelloVerifyRequest
void MasterServer::MessageHandler::HandshakeMessageType::_set_HelloVerifyRequest(MasterServer::MessageHandler::HandshakeMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_set_HelloVerifyRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/HandshakeMessageType", "HelloVerifyRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloWithCookieRequest
MasterServer::MessageHandler::HandshakeMessageType MasterServer::MessageHandler::HandshakeMessageType::_get_ClientHelloWithCookieRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_get_ClientHelloWithCookieRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::HandshakeMessageType>("MasterServer", "MessageHandler/HandshakeMessageType", "ClientHelloWithCookieRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloWithCookieRequest
void MasterServer::MessageHandler::HandshakeMessageType::_set_ClientHelloWithCookieRequest(MasterServer::MessageHandler::HandshakeMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_set_ClientHelloWithCookieRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/HandshakeMessageType", "ClientHelloWithCookieRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerHelloRequest
MasterServer::MessageHandler::HandshakeMessageType MasterServer::MessageHandler::HandshakeMessageType::_get_ServerHelloRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_get_ServerHelloRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::HandshakeMessageType>("MasterServer", "MessageHandler/HandshakeMessageType", "ServerHelloRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerHelloRequest
void MasterServer::MessageHandler::HandshakeMessageType::_set_ServerHelloRequest(MasterServer::MessageHandler::HandshakeMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_set_ServerHelloRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/HandshakeMessageType", "ServerHelloRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateRequest
MasterServer::MessageHandler::HandshakeMessageType MasterServer::MessageHandler::HandshakeMessageType::_get_ServerCertificateRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_get_ServerCertificateRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::HandshakeMessageType>("MasterServer", "MessageHandler/HandshakeMessageType", "ServerCertificateRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateRequest
void MasterServer::MessageHandler::HandshakeMessageType::_set_ServerCertificateRequest(MasterServer::MessageHandler::HandshakeMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_set_ServerCertificateRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/HandshakeMessageType", "ServerCertificateRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateResponse
MasterServer::MessageHandler::HandshakeMessageType MasterServer::MessageHandler::HandshakeMessageType::_get_ServerCertificateResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_get_ServerCertificateResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::HandshakeMessageType>("MasterServer", "MessageHandler/HandshakeMessageType", "ServerCertificateResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateResponse
void MasterServer::MessageHandler::HandshakeMessageType::_set_ServerCertificateResponse(MasterServer::MessageHandler::HandshakeMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_set_ServerCertificateResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/HandshakeMessageType", "ServerCertificateResponse", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientKeyExchangeRequest
MasterServer::MessageHandler::HandshakeMessageType MasterServer::MessageHandler::HandshakeMessageType::_get_ClientKeyExchangeRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_get_ClientKeyExchangeRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::HandshakeMessageType>("MasterServer", "MessageHandler/HandshakeMessageType", "ClientKeyExchangeRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientKeyExchangeRequest
void MasterServer::MessageHandler::HandshakeMessageType::_set_ClientKeyExchangeRequest(MasterServer::MessageHandler::HandshakeMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_set_ClientKeyExchangeRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/HandshakeMessageType", "ClientKeyExchangeRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ChangeCipherSpecRequest
MasterServer::MessageHandler::HandshakeMessageType MasterServer::MessageHandler::HandshakeMessageType::_get_ChangeCipherSpecRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_get_ChangeCipherSpecRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::HandshakeMessageType>("MasterServer", "MessageHandler/HandshakeMessageType", "ChangeCipherSpecRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ChangeCipherSpecRequest
void MasterServer::MessageHandler::HandshakeMessageType::_set_ChangeCipherSpecRequest(MasterServer::MessageHandler::HandshakeMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_set_ChangeCipherSpecRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/HandshakeMessageType", "ChangeCipherSpecRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/HandshakeMessageType MessageReceivedAcknowledge
MasterServer::MessageHandler::HandshakeMessageType MasterServer::MessageHandler::HandshakeMessageType::_get_MessageReceivedAcknowledge() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_get_MessageReceivedAcknowledge");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::HandshakeMessageType>("MasterServer", "MessageHandler/HandshakeMessageType", "MessageReceivedAcknowledge"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/HandshakeMessageType MessageReceivedAcknowledge
void MasterServer::MessageHandler::HandshakeMessageType::_set_MessageReceivedAcknowledge(MasterServer::MessageHandler::HandshakeMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_set_MessageReceivedAcknowledge");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/HandshakeMessageType", "MessageReceivedAcknowledge", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/HandshakeMessageType MultipartMessage
MasterServer::MessageHandler::HandshakeMessageType MasterServer::MessageHandler::HandshakeMessageType::_get_MultipartMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_get_MultipartMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::HandshakeMessageType>("MasterServer", "MessageHandler/HandshakeMessageType", "MultipartMessage"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/HandshakeMessageType MultipartMessage
void MasterServer::MessageHandler::HandshakeMessageType::_set_MultipartMessage(MasterServer::MessageHandler::HandshakeMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::HandshakeMessageType::_set_MultipartMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/HandshakeMessageType", "MultipartMessage", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.MessageHandler/UserMessageType
#include "MasterServer/MessageHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserRequest
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_AuthenticateUserRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_AuthenticateUserRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "AuthenticateUserRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserRequest
void MasterServer::MessageHandler::UserMessageType::_set_AuthenticateUserRequest(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_AuthenticateUserRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "AuthenticateUserRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserResponse
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_AuthenticateUserResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_AuthenticateUserResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "AuthenticateUserResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserResponse
void MasterServer::MessageHandler::UserMessageType::_set_AuthenticateUserResponse(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_AuthenticateUserResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "AuthenticateUserResponse", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType UserServerStatusUpdateRequest
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_UserServerStatusUpdateRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_UserServerStatusUpdateRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "UserServerStatusUpdateRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType UserServerStatusUpdateRequest
void MasterServer::MessageHandler::UserMessageType::_set_UserServerStatusUpdateRequest(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_UserServerStatusUpdateRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "UserServerStatusUpdateRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType UserServerStatusUpdateResponse
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_UserServerStatusUpdateResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_UserServerStatusUpdateResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "UserServerStatusUpdateResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType UserServerStatusUpdateResponse
void MasterServer::MessageHandler::UserMessageType::_set_UserServerStatusUpdateResponse(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_UserServerStatusUpdateResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "UserServerStatusUpdateResponse", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType UserServerHeartbeatRequest
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_UserServerHeartbeatRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_UserServerHeartbeatRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "UserServerHeartbeatRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType UserServerHeartbeatRequest
void MasterServer::MessageHandler::UserMessageType::_set_UserServerHeartbeatRequest(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_UserServerHeartbeatRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "UserServerHeartbeatRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType UserServerHeartbeatResponse
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_UserServerHeartbeatResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_UserServerHeartbeatResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "UserServerHeartbeatResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType UserServerHeartbeatResponse
void MasterServer::MessageHandler::UserMessageType::_set_UserServerHeartbeatResponse(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_UserServerHeartbeatResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "UserServerHeartbeatResponse", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType UserServerRemoveRequest
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_UserServerRemoveRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_UserServerRemoveRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "UserServerRemoveRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType UserServerRemoveRequest
void MasterServer::MessageHandler::UserMessageType::_set_UserServerRemoveRequest(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_UserServerRemoveRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "UserServerRemoveRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType ConnectToUserServerRequest
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_ConnectToUserServerRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_ConnectToUserServerRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "ConnectToUserServerRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType ConnectToUserServerRequest
void MasterServer::MessageHandler::UserMessageType::_set_ConnectToUserServerRequest(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_ConnectToUserServerRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "ConnectToUserServerRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType ConnectToServerResponse
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_ConnectToServerResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_ConnectToServerResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "ConnectToServerResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType ConnectToServerResponse
void MasterServer::MessageHandler::UserMessageType::_set_ConnectToServerResponse(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_ConnectToServerResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "ConnectToServerResponse", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType ConnectToMatchmakingServerRequest
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_ConnectToMatchmakingServerRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_ConnectToMatchmakingServerRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "ConnectToMatchmakingServerRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType ConnectToMatchmakingServerRequest
void MasterServer::MessageHandler::UserMessageType::_set_ConnectToMatchmakingServerRequest(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_ConnectToMatchmakingServerRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "ConnectToMatchmakingServerRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType PrepareForConnectionRequest
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_PrepareForConnectionRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_PrepareForConnectionRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "PrepareForConnectionRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType PrepareForConnectionRequest
void MasterServer::MessageHandler::UserMessageType::_set_PrepareForConnectionRequest(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_PrepareForConnectionRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "PrepareForConnectionRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType GetPublicUserServersRequest
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_GetPublicUserServersRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_GetPublicUserServersRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "GetPublicUserServersRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType GetPublicUserServersRequest
void MasterServer::MessageHandler::UserMessageType::_set_GetPublicUserServersRequest(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_GetPublicUserServersRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "GetPublicUserServersRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType GetPublicUserServersResponse
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_GetPublicUserServersResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_GetPublicUserServersResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "GetPublicUserServersResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType GetPublicUserServersResponse
void MasterServer::MessageHandler::UserMessageType::_set_GetPublicUserServersResponse(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_GetPublicUserServersResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "GetPublicUserServersResponse", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType MessageReceivedAcknowledge
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_MessageReceivedAcknowledge() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_MessageReceivedAcknowledge");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "MessageReceivedAcknowledge"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType MessageReceivedAcknowledge
void MasterServer::MessageHandler::UserMessageType::_set_MessageReceivedAcknowledge(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_MessageReceivedAcknowledge");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "MessageReceivedAcknowledge", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType MultipartMessage
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_MultipartMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_MultipartMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "MultipartMessage"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType MultipartMessage
void MasterServer::MessageHandler::UserMessageType::_set_MultipartMessage(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_MultipartMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "MultipartMessage", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/UserMessageType SessionKeepaliveMessage
MasterServer::MessageHandler::UserMessageType MasterServer::MessageHandler::UserMessageType::_get_SessionKeepaliveMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_get_SessionKeepaliveMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::UserMessageType>("MasterServer", "MessageHandler/UserMessageType", "SessionKeepaliveMessage"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/UserMessageType SessionKeepaliveMessage
void MasterServer::MessageHandler::UserMessageType::_set_SessionKeepaliveMessage(MasterServer::MessageHandler::UserMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::UserMessageType::_set_SessionKeepaliveMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/UserMessageType", "SessionKeepaliveMessage", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.MessageHandler/DedicatedServerMessageType
#include "MasterServer/MessageHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerRequest
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_AuthenticateDedicatedServerRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_AuthenticateDedicatedServerRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "AuthenticateDedicatedServerRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerRequest
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_AuthenticateDedicatedServerRequest(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_AuthenticateDedicatedServerRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "AuthenticateDedicatedServerRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerResponse
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_AuthenticateDedicatedServerResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_AuthenticateDedicatedServerResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "AuthenticateDedicatedServerResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerResponse
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_AuthenticateDedicatedServerResponse(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_AuthenticateDedicatedServerResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "AuthenticateDedicatedServerResponse", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateRelayServerRequest
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_CreateRelayServerRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_CreateRelayServerRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "CreateRelayServerRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateRelayServerRequest
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_CreateRelayServerRequest(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_CreateRelayServerRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "CreateRelayServerRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateRelayServerResponse
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_CreateRelayServerResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_CreateRelayServerResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "CreateRelayServerResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateRelayServerResponse
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_CreateRelayServerResponse(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_CreateRelayServerResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "CreateRelayServerResponse", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateMatchmakingServerRequest
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_CreateMatchmakingServerRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_CreateMatchmakingServerRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "CreateMatchmakingServerRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateMatchmakingServerRequest
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_CreateMatchmakingServerRequest(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_CreateMatchmakingServerRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "CreateMatchmakingServerRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateMatchmakingServerResponse
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_CreateMatchmakingServerResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_CreateMatchmakingServerResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "CreateMatchmakingServerResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateMatchmakingServerResponse
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_CreateMatchmakingServerResponse(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_CreateMatchmakingServerResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "CreateMatchmakingServerResponse", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerNoLongerAvailableRequest
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerNoLongerAvailableRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerNoLongerAvailableRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerNoLongerAvailableRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerNoLongerAvailableRequest
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerNoLongerAvailableRequest(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerNoLongerAvailableRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerNoLongerAvailableRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatRequest
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerHeartbeatRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerHeartbeatRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerHeartbeatRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatRequest
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerHeartbeatRequest(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerHeartbeatRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerHeartbeatRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatResponse
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerHeartbeatResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerHeartbeatResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerHeartbeatResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatResponse
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerHeartbeatResponse(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerHeartbeatResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerHeartbeatResponse", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType RelayServerStatusUpdateRequest
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_RelayServerStatusUpdateRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_RelayServerStatusUpdateRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "RelayServerStatusUpdateRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType RelayServerStatusUpdateRequest
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_RelayServerStatusUpdateRequest(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_RelayServerStatusUpdateRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "RelayServerStatusUpdateRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MatchmakingServerStatusUpdateRequest
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_MatchmakingServerStatusUpdateRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_MatchmakingServerStatusUpdateRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "MatchmakingServerStatusUpdateRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MatchmakingServerStatusUpdateRequest
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_MatchmakingServerStatusUpdateRequest(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_MatchmakingServerStatusUpdateRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "MatchmakingServerStatusUpdateRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerShutDownRequest
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerShutDownRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerShutDownRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerShutDownRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerShutDownRequest
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerShutDownRequest(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerShutDownRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerShutDownRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionRequest
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerPrepareForConnectionRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerPrepareForConnectionRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerPrepareForConnectionRequest"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionRequest
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerPrepareForConnectionRequest(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerPrepareForConnectionRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerPrepareForConnectionRequest", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MessageReceivedAcknowledge
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_MessageReceivedAcknowledge() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_MessageReceivedAcknowledge");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "MessageReceivedAcknowledge"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MessageReceivedAcknowledge
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_MessageReceivedAcknowledge(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_MessageReceivedAcknowledge");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "MessageReceivedAcknowledge", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MultipartMessage
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_MultipartMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_MultipartMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "MultipartMessage"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MultipartMessage
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_MultipartMessage(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_MultipartMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "MultipartMessage", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionResponse
MasterServer::MessageHandler::DedicatedServerMessageType MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerPrepareForConnectionResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_get_DedicatedServerPrepareForConnectionResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::MessageHandler::DedicatedServerMessageType>("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerPrepareForConnectionResponse"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionResponse
void MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerPrepareForConnectionResponse(MasterServer::MessageHandler::DedicatedServerMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DedicatedServerMessageType::_set_DedicatedServerPrepareForConnectionResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "MessageHandler/DedicatedServerMessageType", "DedicatedServerPrepareForConnectionResponse", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.MessageHandler/<SendMessageWithRetry>d__98
#include "MasterServer/MessageHandler_-SendMessageWithRetry-d__98.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.MessageHandler/<SendMessageWithRetry>d__98.MoveNext
void MasterServer::MessageHandler::$SendMessageWithRetry$d__98::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::$SendMessageWithRetry$d__98::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/<SendMessageWithRetry>d__98.SetStateMachine
void MasterServer::MessageHandler::$SendMessageWithRetry$d__98::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::$SendMessageWithRetry$d__98::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: MessageHandler::$SendMessageWithRetry$d__98::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::$SendMessageWithRetry$d__98::*)()>(&MessageHandler::$SendMessageWithRetry$d__98::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::$SendMessageWithRetry$d__98), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::$SendMessageWithRetry$d__98::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::$SendMessageWithRetry$d__98::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&MessageHandler::$SendMessageWithRetry$d__98::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::$SendMessageWithRetry$d__98), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.MessageHandler/<>c__DisplayClass100_0
#include "MasterServer/MessageHandler_--c__DisplayClass100_0.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.MessageHandler/<>c__DisplayClass100_0.<SendMultipartMessageWithRetryAsync>b__0
System::Threading::Tasks::Task* MasterServer::MessageHandler::$$c__DisplayClass100_0::$SendMultipartMessageWithRetryAsync$b__0(MasterServer::IMasterServerReliableRequest* mm) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::$$c__DisplayClass100_0::<SendMultipartMessageWithRetryAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SendMultipartMessageWithRetryAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mm)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, mm);
}
// Writing MetadataGetter for method: MessageHandler::$$c__DisplayClass100_0::$SendMultipartMessageWithRetryAsync$b__0
// Il2CppName: <SendMultipartMessageWithRetryAsync>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MessageHandler::$$c__DisplayClass100_0::*)(MasterServer::IMasterServerReliableRequest*)>(&MessageHandler::$$c__DisplayClass100_0::$SendMultipartMessageWithRetryAsync$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::$$c__DisplayClass100_0*), "<SendMultipartMessageWithRetryAsync>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IMasterServerReliableRequest*>()});
  }
};
// Writing MetadataGetter for method: MessageHandler::$$c__DisplayClass100_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::$$c__DisplayClass100_0::*)()>(&MessageHandler::$$c__DisplayClass100_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::$$c__DisplayClass100_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::$$c__DisplayClass100_0::*)()>(&MessageHandler::$$c__DisplayClass100_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::$$c__DisplayClass100_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.MessageHandler/<SendMultipartMessageWithRetryAsync>d__100
#include "MasterServer/MessageHandler_-SendMultipartMessageWithRetryAsync-d__100.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Func`5
#include "System/Func_5.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: MasterServer.MessageHandler/<>c__DisplayClass100_0
#include "MasterServer/MessageHandler_--c__DisplayClass100_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.MessageHandler/<SendMultipartMessageWithRetryAsync>d__100.MoveNext
void MasterServer::MessageHandler::$SendMultipartMessageWithRetryAsync$d__100::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::$SendMultipartMessageWithRetryAsync$d__100::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/<SendMultipartMessageWithRetryAsync>d__100.SetStateMachine
void MasterServer::MessageHandler::$SendMultipartMessageWithRetryAsync$d__100::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::$SendMultipartMessageWithRetryAsync$d__100::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: MessageHandler::$SendMultipartMessageWithRetryAsync$d__100::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::$SendMultipartMessageWithRetryAsync$d__100::*)()>(&MessageHandler::$SendMultipartMessageWithRetryAsync$d__100::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::$SendMultipartMessageWithRetryAsync$d__100), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::$SendMultipartMessageWithRetryAsync$d__100::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::$SendMultipartMessageWithRetryAsync$d__100::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&MessageHandler::$SendMultipartMessageWithRetryAsync$d__100::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::$SendMultipartMessageWithRetryAsync$d__100), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.MessageHandler/<SendMessageWithRetryAsyncInternal>d__101
#include "MasterServer/MessageHandler_-SendMessageWithRetryAsyncInternal-d__101.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: MasterServer.IMasterServerReliableRequest
#include "MasterServer/IMasterServerReliableRequest.hpp"
// Including type: System.Func`5
#include "System/Func_5.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: MasterServer.MessageHandler/SentRequestWaiter
#include "MasterServer/MessageHandler_SentRequestWaiter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.MessageHandler/<SendMessageWithRetryAsyncInternal>d__101.MoveNext
void MasterServer::MessageHandler::$SendMessageWithRetryAsyncInternal$d__101::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::$SendMessageWithRetryAsyncInternal$d__101::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.MessageHandler/<SendMessageWithRetryAsyncInternal>d__101.SetStateMachine
void MasterServer::MessageHandler::$SendMessageWithRetryAsyncInternal$d__101::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::$SendMessageWithRetryAsyncInternal$d__101::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: MessageHandler::$SendMessageWithRetryAsyncInternal$d__101::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::$SendMessageWithRetryAsyncInternal$d__101::*)()>(&MessageHandler::$SendMessageWithRetryAsyncInternal$d__101::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::$SendMessageWithRetryAsyncInternal$d__101), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageHandler::$SendMessageWithRetryAsyncInternal$d__101::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageHandler::$SendMessageWithRetryAsyncInternal$d__101::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&MessageHandler::$SendMessageWithRetryAsyncInternal$d__101::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageHandler::$SendMessageWithRetryAsyncInternal$d__101), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserMessageHandler
#include "MasterServer/UserMessageHandler.hpp"
// Including type: MasterServer.UserMessageHandler/ConnectToClientDelegate
#include "MasterServer/UserMessageHandler_ConnectToClientDelegate.hpp"
// Including type: MasterServer.UserMessageHandler/ConnectToServerDelegate
#include "MasterServer/UserMessageHandler_ConnectToServerDelegate.hpp"
// Including type: MasterServer.UserMessageHandler/<GetAuthenticationRequest>d__28
#include "MasterServer/UserMessageHandler_-GetAuthenticationRequest-d__28.hpp"
// Including type: MasterServer.UserMessageHandler/<HandlePrepareForConnectionRequest>d__30
#include "MasterServer/UserMessageHandler_-HandlePrepareForConnectionRequest-d__30.hpp"
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass34_0
#include "MasterServer/UserMessageHandler_--c__DisplayClass34_0.hpp"
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass38_0
#include "MasterServer/UserMessageHandler_--c__DisplayClass38_0.hpp"
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass39_0
#include "MasterServer/UserMessageHandler_--c__DisplayClass39_0.hpp"
// Including type: MasterServer.UserMessageHandler/<WithFailureHandler>d__40
#include "MasterServer/UserMessageHandler_-WithFailureHandler-d__40.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: IAuthenticationTokenProvider
#include "GlobalNamespace/IAuthenticationTokenProvider.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IDiffieHellmanKeyPair
#include "GlobalNamespace/IDiffieHellmanKeyPair.hpp"
// Including type: IUnconnectedSenderReceiver
#include "GlobalNamespace/IUnconnectedSenderReceiver.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: ICertificateValidator
#include "GlobalNamespace/ICertificateValidator.hpp"
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
// Including type: InvitePolicy
#include "GlobalNamespace/InvitePolicy.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: MasterServer.BaseConnectToServerRequest
#include "MasterServer/BaseConnectToServerRequest.hpp"
// Including type: GameplayServerFilter
#include "GlobalNamespace/GameplayServerFilter.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: MasterServer.IUserMessage
#include "MasterServer/IUserMessage.hpp"
// Including type: MasterServer.IMasterServerAuthenticateRequest
#include "MasterServer/IMasterServerAuthenticateRequest.hpp"
// Including type: MasterServer.UserServerHeartbeatResponse
#include "MasterServer/UserServerHeartbeatResponse.hpp"
// Including type: MasterServer.PrepareForConnectionRequest
#include "MasterServer/PrepareForConnectionRequest.hpp"
// Including type: MasterServer.MessageHandler/MessageOrigin
#include "MasterServer/MessageHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int64 kHeartbeatRequestIntervalMs
int64_t MasterServer::UserMessageHandler::_get_kHeartbeatRequestIntervalMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::_get_kHeartbeatRequestIntervalMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("MasterServer", "UserMessageHandler", "kHeartbeatRequestIntervalMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kHeartbeatRequestIntervalMs
void MasterServer::UserMessageHandler::_set_kHeartbeatRequestIntervalMs(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::_set_kHeartbeatRequestIntervalMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "UserMessageHandler", "kHeartbeatRequestIntervalMs", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kHeartbeatResponseTimeoutMs
int64_t MasterServer::UserMessageHandler::_get_kHeartbeatResponseTimeoutMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::_get_kHeartbeatResponseTimeoutMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("MasterServer", "UserMessageHandler", "kHeartbeatResponseTimeoutMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kHeartbeatResponseTimeoutMs
void MasterServer::UserMessageHandler::_set_kHeartbeatResponseTimeoutMs(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::_set_kHeartbeatResponseTimeoutMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "UserMessageHandler", "kHeartbeatResponseTimeoutMs", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 kKeepaliveRequestIntervalMs
int64_t MasterServer::UserMessageHandler::_get_kKeepaliveRequestIntervalMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::_get_kKeepaliveRequestIntervalMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("MasterServer", "UserMessageHandler", "kKeepaliveRequestIntervalMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 kKeepaliveRequestIntervalMs
void MasterServer::UserMessageHandler::_set_kKeepaliveRequestIntervalMs(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::_set_kKeepaliveRequestIntervalMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "UserMessageHandler", "kKeepaliveRequestIntervalMs", value));
}
// Autogenerated method: MasterServer.UserMessageHandler.add_connectToClientEvent
void MasterServer::UserMessageHandler::add_connectToClientEvent(MasterServer::UserMessageHandler::ConnectToClientDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::add_connectToClientEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectToClientEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.UserMessageHandler.remove_connectToClientEvent
void MasterServer::UserMessageHandler::remove_connectToClientEvent(MasterServer::UserMessageHandler::ConnectToClientDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::remove_connectToClientEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectToClientEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.UserMessageHandler.add_broadcastingStoppedEvent
void MasterServer::UserMessageHandler::add_broadcastingStoppedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::add_broadcastingStoppedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_broadcastingStoppedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.UserMessageHandler.remove_broadcastingStoppedEvent
void MasterServer::UserMessageHandler::remove_broadcastingStoppedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::remove_broadcastingStoppedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_broadcastingStoppedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.UserMessageHandler.get_authenticationTokenProvider
GlobalNamespace::IAuthenticationTokenProvider* MasterServer::UserMessageHandler::get_authenticationTokenProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::get_authenticationTokenProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_authenticationTokenProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IAuthenticationTokenProvider*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler.UpdateServerHeartbeat
void MasterServer::UserMessageHandler::UpdateServerHeartbeat() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::UpdateServerHeartbeat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateServerHeartbeat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler.UpdateKeepalive
void MasterServer::UserMessageHandler::UpdateKeepalive() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::UpdateKeepalive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateKeepalive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler.SetCurrentPlayerCount
void MasterServer::UserMessageHandler::SetCurrentPlayerCount(int currentPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::SetCurrentPlayerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCurrentPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPlayerCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentPlayerCount);
}
// Autogenerated method: MasterServer.UserMessageHandler.StartBroadcastingServer
void MasterServer::UserMessageHandler::StartBroadcastingServer(::Il2CppString* serverName, ::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, ::Il2CppString* password, int currentPlayerCount, int maxPlayerCount, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, GlobalNamespace::GameplayServerConfiguration configuration, System::Action_2<System::Net::IPEndPoint*, ::Il2CppString*>* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onBroadcastFailed, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::StartBroadcastingServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartBroadcastingServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(currentPlayerCount), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(onSuccess), ::il2cpp_utils::ExtractType(onBroadcastFailed), ::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverName, userId, userName, secret, password, currentPlayerCount, maxPlayerCount, discoveryPolicy, invitePolicy, configuration, onSuccess, onBroadcastFailed, cancellationToken);
}
// Autogenerated method: MasterServer.UserMessageHandler.StopBroadcastingServer
void MasterServer::UserMessageHandler::StopBroadcastingServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::StopBroadcastingServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopBroadcastingServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler.ConnectToServer
void MasterServer::UserMessageHandler::ConnectToServer(::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, ::Il2CppString* code, ::Il2CppString* password, bool useRelay, MasterServer::UserMessageHandler::ConnectToServerDelegate* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailed, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::ConnectToServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(useRelay), ::il2cpp_utils::ExtractType(onSuccess), ::il2cpp_utils::ExtractType(onConnectionFailed), ::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, userName, secret, code, password, useRelay, onSuccess, onConnectionFailed, cancellationToken);
}
// Autogenerated method: MasterServer.UserMessageHandler.ConnectToMatchmaking
void MasterServer::UserMessageHandler::ConnectToMatchmaking(::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::GameplayServerConfiguration configuration, GlobalNamespace::DiscoveryPolicy discoveryPolicy, ::Il2CppString* secret, ::Il2CppString* code, MasterServer::UserMessageHandler::ConnectToServerDelegate* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailed, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::ConnectToMatchmaking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToMatchmaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(onSuccess), ::il2cpp_utils::ExtractType(onConnectionFailed), ::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, userName, configuration, discoveryPolicy, secret, code, onSuccess, onConnectionFailed, cancellationToken);
}
// Autogenerated method: MasterServer.UserMessageHandler.SendConnectToServerRequest
void MasterServer::UserMessageHandler::SendConnectToServerRequest(MasterServer::BaseConnectToServerRequest* request, MasterServer::UserMessageHandler::ConnectToServerDelegate* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailed, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::SendConnectToServerRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendConnectToServerRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(onSuccess), ::il2cpp_utils::ExtractType(onConnectionFailed), ::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request, onSuccess, onConnectionFailed, cancellationToken);
}
// Autogenerated method: MasterServer.UserMessageHandler.GetPublicServers
void MasterServer::UserMessageHandler::GetPublicServers(::Il2CppString* userId, ::Il2CppString* userName, int offset, int count, GlobalNamespace::GameplayServerFilter filter, System::Action_1<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onFailure, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::GetPublicServers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPublicServers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(filter), ::il2cpp_utils::ExtractType(onSuccess), ::il2cpp_utils::ExtractType(onFailure), ::il2cpp_utils::ExtractType(cancellationToken)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, userName, offset, count, filter, onSuccess, onFailure, cancellationToken);
}
// Autogenerated method: MasterServer.UserMessageHandler.WithFailureHandler
void MasterServer::UserMessageHandler::WithFailureHandler(System::Action_1<GlobalNamespace::ConnectionFailedReason>* onFailure, System::Func_1<System::Threading::Tasks::Task*>* performTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::WithFailureHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithFailureHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onFailure), ::il2cpp_utils::ExtractType(performTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, onFailure, performTask);
}
// Autogenerated method: MasterServer.UserMessageHandler.GetServerRandom
::Array<uint8_t>* MasterServer::UserMessageHandler::GetServerRandom() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::GetServerRandom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetServerRandom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler.GetServerKeys
System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>* MasterServer::UserMessageHandler::GetServerKeys(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::GetServerKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetServerKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: MasterServer.UserMessageHandler.PollUpdate
void MasterServer::UserMessageHandler::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler.ShouldHandleUserMessage
bool MasterServer::UserMessageHandler::ShouldHandleUserMessage(MasterServer::IUserMessage* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::ShouldHandleUserMessage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldHandleUserMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.UserMessageHandler.GetAuthenticationRequest
System::Threading::Tasks::Task_1<MasterServer::IMasterServerAuthenticateRequest*>* MasterServer::UserMessageHandler::GetAuthenticationRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::GetAuthenticationRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAuthenticationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<MasterServer::IMasterServerAuthenticateRequest*>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler.HandleUserServerHeartbeatResponse
void MasterServer::UserMessageHandler::HandleUserServerHeartbeatResponse(MasterServer::UserServerHeartbeatResponse* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::HandleUserServerHeartbeatResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleUserServerHeartbeatResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.UserMessageHandler.HandlePrepareForConnectionRequest
void MasterServer::UserMessageHandler::HandlePrepareForConnectionRequest(MasterServer::PrepareForConnectionRequest* packet, MasterServer::MessageHandler::MessageOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::HandlePrepareForConnectionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePrepareForConnectionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, origin);
}
// Autogenerated method: MasterServer.UserMessageHandler.HandshakeLog
void MasterServer::UserMessageHandler::HandshakeLog(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::HandshakeLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandshakeLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Writing MetadataGetter for method: UserMessageHandler::add_connectToClientEvent
// Il2CppName: add_connectToClientEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(MasterServer::UserMessageHandler::ConnectToClientDelegate*)>(&UserMessageHandler::add_connectToClientEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "add_connectToClientEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::UserMessageHandler::ConnectToClientDelegate*>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::remove_connectToClientEvent
// Il2CppName: remove_connectToClientEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(MasterServer::UserMessageHandler::ConnectToClientDelegate*)>(&UserMessageHandler::remove_connectToClientEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "remove_connectToClientEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::UserMessageHandler::ConnectToClientDelegate*>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::add_broadcastingStoppedEvent
// Il2CppName: add_broadcastingStoppedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(System::Action*)>(&UserMessageHandler::add_broadcastingStoppedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "add_broadcastingStoppedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::remove_broadcastingStoppedEvent
// Il2CppName: remove_broadcastingStoppedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(System::Action*)>(&UserMessageHandler::remove_broadcastingStoppedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "remove_broadcastingStoppedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::get_authenticationTokenProvider
// Il2CppName: get_authenticationTokenProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IAuthenticationTokenProvider* (UserMessageHandler::*)()>(&UserMessageHandler::get_authenticationTokenProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "get_authenticationTokenProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(GlobalNamespace::IUnconnectedSenderReceiver*, GlobalNamespace::MasterServerEndPoint*, GlobalNamespace::IAuthenticationTokenProvider*, MasterServer::ITimeProvider*, GlobalNamespace::ICertificateValidator*)>(&UserMessageHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IUnconnectedSenderReceiver*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IAuthenticationTokenProvider*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ICertificateValidator*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(GlobalNamespace::IUnconnectedSenderReceiver*, GlobalNamespace::MasterServerEndPoint*, GlobalNamespace::IAuthenticationTokenProvider*, MasterServer::ITimeProvider*, GlobalNamespace::ICertificateValidator*)>(&UserMessageHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IUnconnectedSenderReceiver*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IAuthenticationTokenProvider*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ICertificateValidator*>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::UpdateServerHeartbeat
// Il2CppName: UpdateServerHeartbeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)()>(&UserMessageHandler::UpdateServerHeartbeat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "UpdateServerHeartbeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::UpdateKeepalive
// Il2CppName: UpdateKeepalive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)()>(&UserMessageHandler::UpdateKeepalive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "UpdateKeepalive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::SetCurrentPlayerCount
// Il2CppName: SetCurrentPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(int)>(&UserMessageHandler::SetCurrentPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "SetCurrentPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::StartBroadcastingServer
// Il2CppName: StartBroadcastingServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, int, int, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, GlobalNamespace::GameplayServerConfiguration, System::Action_2<System::Net::IPEndPoint*, ::Il2CppString*>*, System::Action_1<GlobalNamespace::ConnectionFailedReason>*, System::Threading::CancellationToken)>(&UserMessageHandler::StartBroadcastingServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "StartBroadcastingServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<System::Action_2<System::Net::IPEndPoint*, ::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::StopBroadcastingServer
// Il2CppName: StopBroadcastingServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)()>(&UserMessageHandler::StopBroadcastingServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "StopBroadcastingServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::ConnectToServer
// Il2CppName: ConnectToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, bool, MasterServer::UserMessageHandler::ConnectToServerDelegate*, System::Action_1<GlobalNamespace::ConnectionFailedReason>*, System::Threading::CancellationToken)>(&UserMessageHandler::ConnectToServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "ConnectToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::UserMessageHandler::ConnectToServerDelegate*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::ConnectToMatchmaking
// Il2CppName: ConnectToMatchmaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::GameplayServerConfiguration, GlobalNamespace::DiscoveryPolicy, ::Il2CppString*, ::Il2CppString*, MasterServer::UserMessageHandler::ConnectToServerDelegate*, System::Action_1<GlobalNamespace::ConnectionFailedReason>*, System::Threading::CancellationToken)>(&UserMessageHandler::ConnectToMatchmaking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "ConnectToMatchmaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::UserMessageHandler::ConnectToServerDelegate*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::SendConnectToServerRequest
// Il2CppName: SendConnectToServerRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(MasterServer::BaseConnectToServerRequest*, MasterServer::UserMessageHandler::ConnectToServerDelegate*, System::Action_1<GlobalNamespace::ConnectionFailedReason>*, System::Threading::CancellationToken)>(&UserMessageHandler::SendConnectToServerRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "SendConnectToServerRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::BaseConnectToServerRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::UserMessageHandler::ConnectToServerDelegate*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::GetPublicServers
// Il2CppName: GetPublicServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(::Il2CppString*, ::Il2CppString*, int, int, GlobalNamespace::GameplayServerFilter, System::Action_1<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>*, System::Action_1<GlobalNamespace::ConnectionFailedReason>*, System::Threading::CancellationToken)>(&UserMessageHandler::GetPublicServers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "GetPublicServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerFilter>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::WithFailureHandler
// Il2CppName: WithFailureHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*, System::Func_1<System::Threading::Tasks::Task*>*)>(&UserMessageHandler::WithFailureHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "WithFailureHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_1<System::Threading::Tasks::Task*>*>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::GetServerRandom
// Il2CppName: GetServerRandom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (UserMessageHandler::*)()>(&UserMessageHandler::GetServerRandom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "GetServerRandom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::GetServerKeys
// Il2CppName: GetServerKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>* (UserMessageHandler::*)(System::Threading::CancellationToken)>(&UserMessageHandler::GetServerKeys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "GetServerKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)()>(&UserMessageHandler::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::ShouldHandleUserMessage
// Il2CppName: ShouldHandleUserMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UserMessageHandler::*)(MasterServer::IUserMessage*, MasterServer::MessageHandler::MessageOrigin)>(&UserMessageHandler::ShouldHandleUserMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "ShouldHandleUserMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::IUserMessage*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::GetAuthenticationRequest
// Il2CppName: GetAuthenticationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<MasterServer::IMasterServerAuthenticateRequest*>* (UserMessageHandler::*)()>(&UserMessageHandler::GetAuthenticationRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "GetAuthenticationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::HandleUserServerHeartbeatResponse
// Il2CppName: HandleUserServerHeartbeatResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(MasterServer::UserServerHeartbeatResponse*, MasterServer::MessageHandler::MessageOrigin)>(&UserMessageHandler::HandleUserServerHeartbeatResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "HandleUserServerHeartbeatResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::UserServerHeartbeatResponse*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::HandlePrepareForConnectionRequest
// Il2CppName: HandlePrepareForConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(MasterServer::PrepareForConnectionRequest*, MasterServer::MessageHandler::MessageOrigin)>(&UserMessageHandler::HandlePrepareForConnectionRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "HandlePrepareForConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::PrepareForConnectionRequest*>(), ::il2cpp_utils::ExtractIndependentType<MasterServer::MessageHandler::MessageOrigin>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::HandshakeLog
// Il2CppName: HandshakeLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::*)(::Il2CppString*)>(&UserMessageHandler::HandshakeLog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler*), "HandshakeLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserMessageHandler/ConnectToClientDelegate
#include "MasterServer/UserMessageHandler_ConnectToClientDelegate.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/ConnectToClientDelegate.Invoke
void MasterServer::UserMessageHandler::ConnectToClientDelegate::Invoke(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool isConnectionOwner, bool isDedicatedServer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::ConnectToClientDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(myRandom), ::il2cpp_utils::ExtractType(remoteRandom), ::il2cpp_utils::ExtractType(isConnectionOwner), ::il2cpp_utils::ExtractType(isDedicatedServer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, userName, remoteEndPoint, preMasterSecret, myRandom, remoteRandom, isConnectionOwner, isDedicatedServer);
}
// Autogenerated method: MasterServer.UserMessageHandler/ConnectToClientDelegate.BeginInvoke
System::IAsyncResult* MasterServer::UserMessageHandler::ConnectToClientDelegate::BeginInvoke(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool isConnectionOwner, bool isDedicatedServer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::ConnectToClientDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(myRandom), ::il2cpp_utils::ExtractType(remoteRandom), ::il2cpp_utils::ExtractType(isConnectionOwner), ::il2cpp_utils::ExtractType(isDedicatedServer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userId, userName, remoteEndPoint, preMasterSecret, myRandom, remoteRandom, isConnectionOwner, isDedicatedServer, callback, object);
}
// Autogenerated method: MasterServer.UserMessageHandler/ConnectToClientDelegate.EndInvoke
void MasterServer::UserMessageHandler::ConnectToClientDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::ConnectToClientDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: UserMessageHandler::ConnectToClientDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::ConnectToClientDelegate::*)(::Il2CppObject*, System::IntPtr)>(&UserMessageHandler::ConnectToClientDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::ConnectToClientDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::ConnectToClientDelegate::*)(::Il2CppObject*, System::IntPtr)>(&UserMessageHandler::ConnectToClientDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::ConnectToClientDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::ConnectToClientDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::ConnectToClientDelegate::*)(::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool, bool)>(&UserMessageHandler::ConnectToClientDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::ConnectToClientDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::ConnectToClientDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (UserMessageHandler::ConnectToClientDelegate::*)(::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool, bool, System::AsyncCallback*, ::Il2CppObject*)>(&UserMessageHandler::ConnectToClientDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::ConnectToClientDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::ConnectToClientDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::ConnectToClientDelegate::*)(System::IAsyncResult*)>(&UserMessageHandler::ConnectToClientDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::ConnectToClientDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserMessageHandler/ConnectToServerDelegate
#include "MasterServer/UserMessageHandler_ConnectToServerDelegate.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
// Including type: InvitePolicy
#include "GlobalNamespace/InvitePolicy.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/ConnectToServerDelegate.Invoke
void MasterServer::UserMessageHandler::ConnectToServerDelegate::Invoke(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* secret, ::Il2CppString* code, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool isConnectionOwner, bool isDedicatedServer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::ConnectToServerDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(myRandom), ::il2cpp_utils::ExtractType(remoteRandom), ::il2cpp_utils::ExtractType(isConnectionOwner), ::il2cpp_utils::ExtractType(isDedicatedServer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, userName, remoteEndPoint, secret, code, discoveryPolicy, invitePolicy, maxPlayerCount, configuration, preMasterSecret, myRandom, remoteRandom, isConnectionOwner, isDedicatedServer);
}
// Autogenerated method: MasterServer.UserMessageHandler/ConnectToServerDelegate.BeginInvoke
System::IAsyncResult* MasterServer::UserMessageHandler::ConnectToServerDelegate::BeginInvoke(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* secret, ::Il2CppString* code, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool isConnectionOwner, bool isDedicatedServer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::ConnectToServerDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(myRandom), ::il2cpp_utils::ExtractType(remoteRandom), ::il2cpp_utils::ExtractType(isConnectionOwner), ::il2cpp_utils::ExtractType(isDedicatedServer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userId, userName, remoteEndPoint, secret, code, discoveryPolicy, invitePolicy, maxPlayerCount, configuration, preMasterSecret, myRandom, remoteRandom, isConnectionOwner, isDedicatedServer, callback, object);
}
// Autogenerated method: MasterServer.UserMessageHandler/ConnectToServerDelegate.EndInvoke
void MasterServer::UserMessageHandler::ConnectToServerDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::ConnectToServerDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: UserMessageHandler::ConnectToServerDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::ConnectToServerDelegate::*)(::Il2CppObject*, System::IntPtr)>(&UserMessageHandler::ConnectToServerDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::ConnectToServerDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::ConnectToServerDelegate::*)(::Il2CppObject*, System::IntPtr)>(&UserMessageHandler::ConnectToServerDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::ConnectToServerDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::ConnectToServerDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::ConnectToServerDelegate::*)(::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool, bool)>(&UserMessageHandler::ConnectToServerDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::ConnectToServerDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::ConnectToServerDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (UserMessageHandler::ConnectToServerDelegate::*)(::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool, bool, System::AsyncCallback*, ::Il2CppObject*)>(&UserMessageHandler::ConnectToServerDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::ConnectToServerDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::ConnectToServerDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::ConnectToServerDelegate::*)(System::IAsyncResult*)>(&UserMessageHandler::ConnectToServerDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::ConnectToServerDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.UserMessageHandler/<GetAuthenticationRequest>d__28
#include "MasterServer/UserMessageHandler_-GetAuthenticationRequest-d__28.hpp"
// Including type: MasterServer.IMasterServerAuthenticateRequest
#include "MasterServer/IMasterServerAuthenticateRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/<GetAuthenticationRequest>d__28.MoveNext
void MasterServer::UserMessageHandler::$GetAuthenticationRequest$d__28::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$GetAuthenticationRequest$d__28::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler/<GetAuthenticationRequest>d__28.SetStateMachine
void MasterServer::UserMessageHandler::$GetAuthenticationRequest$d__28::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$GetAuthenticationRequest$d__28::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: UserMessageHandler::$GetAuthenticationRequest$d__28::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$GetAuthenticationRequest$d__28::*)()>(&UserMessageHandler::$GetAuthenticationRequest$d__28::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$GetAuthenticationRequest$d__28), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::$GetAuthenticationRequest$d__28::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$GetAuthenticationRequest$d__28::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&UserMessageHandler::$GetAuthenticationRequest$d__28::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$GetAuthenticationRequest$d__28), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserMessageHandler/<HandlePrepareForConnectionRequest>d__30
#include "MasterServer/UserMessageHandler_-HandlePrepareForConnectionRequest-d__30.hpp"
// Including type: MasterServer.PrepareForConnectionRequest
#include "MasterServer/PrepareForConnectionRequest.hpp"
// Including type: IDiffieHellmanKeyPair
#include "GlobalNamespace/IDiffieHellmanKeyPair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/<HandlePrepareForConnectionRequest>d__30.MoveNext
void MasterServer::UserMessageHandler::$HandlePrepareForConnectionRequest$d__30::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$HandlePrepareForConnectionRequest$d__30::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler/<HandlePrepareForConnectionRequest>d__30.SetStateMachine
void MasterServer::UserMessageHandler::$HandlePrepareForConnectionRequest$d__30::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$HandlePrepareForConnectionRequest$d__30::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: UserMessageHandler::$HandlePrepareForConnectionRequest$d__30::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$HandlePrepareForConnectionRequest$d__30::*)()>(&UserMessageHandler::$HandlePrepareForConnectionRequest$d__30::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$HandlePrepareForConnectionRequest$d__30), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::$HandlePrepareForConnectionRequest$d__30::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$HandlePrepareForConnectionRequest$d__30::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&UserMessageHandler::$HandlePrepareForConnectionRequest$d__30::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$HandlePrepareForConnectionRequest$d__30), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass34_0
#include "MasterServer/UserMessageHandler_--c__DisplayClass34_0.hpp"
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass34_0/<<StartBroadcastingServer>b__1>d
#include "MasterServer/UserMessageHandler_--c__DisplayClass34_0_--StartBroadcastingServer-b__1-d.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/<>c__DisplayClass34_0.<StartBroadcastingServer>b__0
void MasterServer::UserMessageHandler::$$c__DisplayClass34_0::$StartBroadcastingServer$b__0(GlobalNamespace::ConnectionFailedReason result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$$c__DisplayClass34_0::<StartBroadcastingServer>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartBroadcastingServer>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: MasterServer.UserMessageHandler/<>c__DisplayClass34_0.<StartBroadcastingServer>b__1
System::Threading::Tasks::Task* MasterServer::UserMessageHandler::$$c__DisplayClass34_0::$StartBroadcastingServer$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$$c__DisplayClass34_0::<StartBroadcastingServer>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartBroadcastingServer>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass34_0::$StartBroadcastingServer$b__0
// Il2CppName: <StartBroadcastingServer>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass34_0::*)(GlobalNamespace::ConnectionFailedReason)>(&UserMessageHandler::$$c__DisplayClass34_0::$StartBroadcastingServer$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass34_0*), "<StartBroadcastingServer>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass34_0::$StartBroadcastingServer$b__1
// Il2CppName: <StartBroadcastingServer>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (UserMessageHandler::$$c__DisplayClass34_0::*)()>(&UserMessageHandler::$$c__DisplayClass34_0::$StartBroadcastingServer$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass34_0*), "<StartBroadcastingServer>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass34_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass34_0::*)()>(&UserMessageHandler::$$c__DisplayClass34_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass34_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass34_0::*)()>(&UserMessageHandler::$$c__DisplayClass34_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass34_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass34_0/<<StartBroadcastingServer>b__1>d
#include "MasterServer/UserMessageHandler_--c__DisplayClass34_0_--StartBroadcastingServer-b__1-d.hpp"
// Including type: IDiffieHellmanKeyPair
#include "GlobalNamespace/IDiffieHellmanKeyPair.hpp"
// Including type: MasterServer.UserServerStatusUpdateResponse
#include "MasterServer/UserServerStatusUpdateResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/<>c__DisplayClass34_0/<<StartBroadcastingServer>b__1>d.MoveNext
void MasterServer::UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler/<>c__DisplayClass34_0/<<StartBroadcastingServer>b__1>d.SetStateMachine
void MasterServer::UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d::*)()>(&UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass34_0::$$StartBroadcastingServer$b__1$d), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass38_0
#include "MasterServer/UserMessageHandler_--c__DisplayClass38_0.hpp"
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass38_0/<<SendConnectToServerRequest>b__0>d
#include "MasterServer/UserMessageHandler_--c__DisplayClass38_0_--SendConnectToServerRequest-b__0-d.hpp"
// Including type: MasterServer.BaseConnectToServerRequest
#include "MasterServer/BaseConnectToServerRequest.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: MasterServer.UserMessageHandler/ConnectToServerDelegate
#include "MasterServer/UserMessageHandler_ConnectToServerDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/<>c__DisplayClass38_0.<SendConnectToServerRequest>b__0
System::Threading::Tasks::Task* MasterServer::UserMessageHandler::$$c__DisplayClass38_0::$SendConnectToServerRequest$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$$c__DisplayClass38_0::<SendConnectToServerRequest>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SendConnectToServerRequest>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass38_0::$SendConnectToServerRequest$b__0
// Il2CppName: <SendConnectToServerRequest>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (UserMessageHandler::$$c__DisplayClass38_0::*)()>(&UserMessageHandler::$$c__DisplayClass38_0::$SendConnectToServerRequest$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass38_0*), "<SendConnectToServerRequest>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass38_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass38_0::*)()>(&UserMessageHandler::$$c__DisplayClass38_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass38_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass38_0::*)()>(&UserMessageHandler::$$c__DisplayClass38_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass38_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass38_0/<<SendConnectToServerRequest>b__0>d
#include "MasterServer/UserMessageHandler_--c__DisplayClass38_0_--SendConnectToServerRequest-b__0-d.hpp"
// Including type: IDiffieHellmanKeyPair
#include "GlobalNamespace/IDiffieHellmanKeyPair.hpp"
// Including type: MasterServer.ConnectToServerResponse
#include "MasterServer/ConnectToServerResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/<>c__DisplayClass38_0/<<SendConnectToServerRequest>b__0>d.MoveNext
void MasterServer::UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler/<>c__DisplayClass38_0/<<SendConnectToServerRequest>b__0>d.SetStateMachine
void MasterServer::UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d::*)()>(&UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass38_0::$$SendConnectToServerRequest$b__0$d), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass39_0
#include "MasterServer/UserMessageHandler_--c__DisplayClass39_0.hpp"
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass39_0/<<GetPublicServers>b__0>d
#include "MasterServer/UserMessageHandler_--c__DisplayClass39_0_--GetPublicServers-b__0-d.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/<>c__DisplayClass39_0.<GetPublicServers>b__0
System::Threading::Tasks::Task* MasterServer::UserMessageHandler::$$c__DisplayClass39_0::$GetPublicServers$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$$c__DisplayClass39_0::<GetPublicServers>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetPublicServers>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass39_0::$GetPublicServers$b__0
// Il2CppName: <GetPublicServers>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (UserMessageHandler::$$c__DisplayClass39_0::*)()>(&UserMessageHandler::$$c__DisplayClass39_0::$GetPublicServers$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass39_0*), "<GetPublicServers>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass39_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass39_0::*)()>(&UserMessageHandler::$$c__DisplayClass39_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass39_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass39_0::*)()>(&UserMessageHandler::$$c__DisplayClass39_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass39_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.UserMessageHandler/<>c__DisplayClass39_0/<<GetPublicServers>b__0>d
#include "MasterServer/UserMessageHandler_--c__DisplayClass39_0_--GetPublicServers-b__0-d.hpp"
// Including type: MasterServer.GetPublicUserServersResponse
#include "MasterServer/GetPublicUserServersResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/<>c__DisplayClass39_0/<<GetPublicServers>b__0>d.MoveNext
void MasterServer::UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler/<>c__DisplayClass39_0/<<GetPublicServers>b__0>d.SetStateMachine
void MasterServer::UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d::*)()>(&UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$$c__DisplayClass39_0::$$GetPublicServers$b__0$d), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.UserMessageHandler/<WithFailureHandler>d__40
#include "MasterServer/UserMessageHandler_-WithFailureHandler-d__40.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserMessageHandler/<WithFailureHandler>d__40.MoveNext
void MasterServer::UserMessageHandler::$WithFailureHandler$d__40::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$WithFailureHandler$d__40::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServer.UserMessageHandler/<WithFailureHandler>d__40.SetStateMachine
void MasterServer::UserMessageHandler::$WithFailureHandler$d__40::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::$WithFailureHandler$d__40::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: UserMessageHandler::$WithFailureHandler$d__40::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$WithFailureHandler$d__40::*)()>(&UserMessageHandler::$WithFailureHandler$d__40::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$WithFailureHandler$d__40), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserMessageHandler::$WithFailureHandler$d__40::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserMessageHandler::$WithFailureHandler$d__40::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&UserMessageHandler::$WithFailureHandler$d__40::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserMessageHandler::$WithFailureHandler$d__40), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.IUserClientToServerMessage
#include "MasterServer/IUserClientToServerMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.IUserClientToServerMessage.get_userId
::Il2CppString* MasterServer::IUserClientToServerMessage::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IUserClientToServerMessage::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.IUserClientToServerMessage.get_userName
::Il2CppString* MasterServer::IUserClientToServerMessage::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::IUserClientToServerMessage::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IUserClientToServerMessage::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IUserClientToServerMessage::*)()>(&IUserClientToServerMessage::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUserClientToServerMessage*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUserClientToServerMessage::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IUserClientToServerMessage::*)()>(&IUserClientToServerMessage::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUserClientToServerMessage*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.AuthenticateUserRequest
#include "MasterServer/AuthenticateUserRequest.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.AuthenticateUserRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::AuthenticateUserRequest*>* MasterServer::AuthenticateUserRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "AuthenticateUserRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::AuthenticateUserRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateUserRequest.Init
MasterServer::AuthenticateUserRequest* MasterServer::AuthenticateUserRequest::Init(GlobalNamespace::AuthenticationToken authenticationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(authenticationToken)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::AuthenticateUserRequest*, false>(this, ___internal__method, authenticationToken);
}
// Autogenerated method: MasterServer.AuthenticateUserRequest.Serialize
void MasterServer::AuthenticateUserRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.AuthenticateUserRequest.Deserialize
void MasterServer::AuthenticateUserRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.AuthenticateUserRequest.Release
void MasterServer::AuthenticateUserRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AuthenticateUserRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::AuthenticateUserRequest*>* (*)()>(&AuthenticateUserRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateUserRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::AuthenticateUserRequest* (AuthenticateUserRequest::*)(GlobalNamespace::AuthenticationToken)>(&AuthenticateUserRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AuthenticationToken>()});
  }
};
// Writing MetadataGetter for method: AuthenticateUserRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateUserRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&AuthenticateUserRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: AuthenticateUserRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateUserRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&AuthenticateUserRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: AuthenticateUserRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateUserRequest::*)()>(&AuthenticateUserRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateUserRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateUserRequest::*)()>(&AuthenticateUserRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateUserRequest::*)()>(&AuthenticateUserRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.AuthenticateUserResponse
#include "MasterServer/AuthenticateUserResponse.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.AuthenticateUserResponse.get_pool
GlobalNamespace::PacketPool_1<MasterServer::AuthenticateUserResponse*>* MasterServer::AuthenticateUserResponse::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "AuthenticateUserResponse", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::AuthenticateUserResponse*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateUserResponse.get_isAuthenticated
bool MasterServer::AuthenticateUserResponse::get_isAuthenticated() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::get_isAuthenticated");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAuthenticated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateUserResponse.Init
MasterServer::AuthenticateUserResponse* MasterServer::AuthenticateUserResponse::Init(MasterServer::AuthenticateUserResponse::Result result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::AuthenticateUserResponse*, false>(this, ___internal__method, result);
}
// Autogenerated method: MasterServer.AuthenticateUserResponse.get_resultCode
uint8_t MasterServer::AuthenticateUserResponse::get_resultCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::get_resultCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateUserResponse.get_resultCodeString
::Il2CppString* MasterServer::AuthenticateUserResponse::get_resultCodeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::get_resultCodeString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCodeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.AuthenticateUserResponse.Serialize
void MasterServer::AuthenticateUserResponse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.AuthenticateUserResponse.Deserialize
void MasterServer::AuthenticateUserResponse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.AuthenticateUserResponse.Release
void MasterServer::AuthenticateUserResponse::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AuthenticateUserResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::AuthenticateUserResponse*>* (*)()>(&AuthenticateUserResponse::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateUserResponse::get_isAuthenticated
// Il2CppName: get_isAuthenticated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AuthenticateUserResponse::*)()>(&AuthenticateUserResponse::get_isAuthenticated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserResponse*), "get_isAuthenticated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateUserResponse::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::AuthenticateUserResponse* (AuthenticateUserResponse::*)(MasterServer::AuthenticateUserResponse::Result)>(&AuthenticateUserResponse::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserResponse*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::AuthenticateUserResponse::Result>()});
  }
};
// Writing MetadataGetter for method: AuthenticateUserResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (AuthenticateUserResponse::*)()>(&AuthenticateUserResponse::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateUserResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AuthenticateUserResponse::*)()>(&AuthenticateUserResponse::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateUserResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateUserResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&AuthenticateUserResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: AuthenticateUserResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateUserResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&AuthenticateUserResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: AuthenticateUserResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateUserResponse::*)()>(&AuthenticateUserResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AuthenticateUserResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateUserResponse::*)()>(&AuthenticateUserResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticateUserResponse::*)()>(&AuthenticateUserResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticateUserResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.AuthenticateUserResponse/Result
#include "MasterServer/AuthenticateUserResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.AuthenticateUserResponse/Result Success
MasterServer::AuthenticateUserResponse::Result MasterServer::AuthenticateUserResponse::Result::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::Result::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AuthenticateUserResponse::Result>("MasterServer", "AuthenticateUserResponse/Result", "Success"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AuthenticateUserResponse/Result Success
void MasterServer::AuthenticateUserResponse::Result::_set_Success(MasterServer::AuthenticateUserResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::Result::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AuthenticateUserResponse/Result", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.AuthenticateUserResponse/Result Failed
MasterServer::AuthenticateUserResponse::Result MasterServer::AuthenticateUserResponse::Result::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::Result::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AuthenticateUserResponse::Result>("MasterServer", "AuthenticateUserResponse/Result", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AuthenticateUserResponse/Result Failed
void MasterServer::AuthenticateUserResponse::Result::_set_Failed(MasterServer::AuthenticateUserResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::Result::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AuthenticateUserResponse/Result", "Failed", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.AuthenticateUserResponse/Result UnknownError
MasterServer::AuthenticateUserResponse::Result MasterServer::AuthenticateUserResponse::Result::_get_UnknownError() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::Result::_get_UnknownError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::AuthenticateUserResponse::Result>("MasterServer", "AuthenticateUserResponse/Result", "UnknownError"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.AuthenticateUserResponse/Result UnknownError
void MasterServer::AuthenticateUserResponse::Result::_set_UnknownError(MasterServer::AuthenticateUserResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateUserResponse::Result::_set_UnknownError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "AuthenticateUserResponse/Result", "UnknownError", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserServerStatusUpdateRequest
#include "MasterServer/UserServerStatusUpdateRequest.hpp"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserServerStatusUpdateRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::UserServerStatusUpdateRequest*>* MasterServer::UserServerStatusUpdateRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "UserServerStatusUpdateRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::UserServerStatusUpdateRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateRequest.get_userId
::Il2CppString* MasterServer::UserServerStatusUpdateRequest::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateRequest::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateRequest.set_userId
void MasterServer::UserServerStatusUpdateRequest::set_userId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateRequest::set_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateRequest.get_userName
::Il2CppString* MasterServer::UserServerStatusUpdateRequest::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateRequest::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateRequest.set_userName
void MasterServer::UserServerStatusUpdateRequest::set_userName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateRequest::set_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateRequest.Init
MasterServer::UserServerStatusUpdateRequest* MasterServer::UserServerStatusUpdateRequest::Init(::Il2CppString* serverName, ::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, ::Il2CppString* password, ::Array<uint8_t>* random, ::Array<uint8_t>* publicKey, int currentPlayerCount, int maxPlayerCount, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(random), ::il2cpp_utils::ExtractType(publicKey), ::il2cpp_utils::ExtractType(currentPlayerCount), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(configuration)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::UserServerStatusUpdateRequest*, false>(this, ___internal__method, serverName, userId, userName, secret, password, random, publicKey, currentPlayerCount, maxPlayerCount, discoveryPolicy, invitePolicy, configuration);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateRequest.Serialize
void MasterServer::UserServerStatusUpdateRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateRequest.Deserialize
void MasterServer::UserServerStatusUpdateRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateRequest.Release
void MasterServer::UserServerStatusUpdateRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UserServerStatusUpdateRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::UserServerStatusUpdateRequest*>* (*)()>(&UserServerStatusUpdateRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateRequest::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UserServerStatusUpdateRequest::*)()>(&UserServerStatusUpdateRequest::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateRequest::set_userId
// Il2CppName: set_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateRequest::*)(::Il2CppString*)>(&UserServerStatusUpdateRequest::set_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), "set_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateRequest::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UserServerStatusUpdateRequest::*)()>(&UserServerStatusUpdateRequest::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateRequest::set_userName
// Il2CppName: set_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateRequest::*)(::Il2CppString*)>(&UserServerStatusUpdateRequest::set_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), "set_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::UserServerStatusUpdateRequest* (UserServerStatusUpdateRequest::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Array<uint8_t>*, ::Array<uint8_t>*, int, int, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, GlobalNamespace::GameplayServerConfiguration)>(&UserServerStatusUpdateRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&UserServerStatusUpdateRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&UserServerStatusUpdateRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateRequest::*)()>(&UserServerStatusUpdateRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateRequest::*)()>(&UserServerStatusUpdateRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateRequest::*)()>(&UserServerStatusUpdateRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserServerStatusUpdateResponse
#include "MasterServer/UserServerStatusUpdateResponse.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserServerStatusUpdateResponse.get_pool
GlobalNamespace::PacketPool_1<MasterServer::UserServerStatusUpdateResponse*>* MasterServer::UserServerStatusUpdateResponse::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "UserServerStatusUpdateResponse", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::UserServerStatusUpdateResponse*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateResponse.InitForFailure
MasterServer::UserServerStatusUpdateResponse* MasterServer::UserServerStatusUpdateResponse::InitForFailure(MasterServer::UserServerStatusUpdateResponse::Result result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::InitForFailure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitForFailure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::UserServerStatusUpdateResponse*, false>(this, ___internal__method, result);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateResponse.InitForSuccess
MasterServer::UserServerStatusUpdateResponse* MasterServer::UserServerStatusUpdateResponse::InitForSuccess(System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* code) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::InitForSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitForSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(code)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::UserServerStatusUpdateResponse*, false>(this, ___internal__method, remoteEndPoint, code);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateResponse.get_resultCode
uint8_t MasterServer::UserServerStatusUpdateResponse::get_resultCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::get_resultCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateResponse.get_resultCodeString
::Il2CppString* MasterServer::UserServerStatusUpdateResponse::get_resultCodeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::get_resultCodeString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultCodeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateResponse.Serialize
void MasterServer::UserServerStatusUpdateResponse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateResponse.Deserialize
void MasterServer::UserServerStatusUpdateResponse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.UserServerStatusUpdateResponse.Release
void MasterServer::UserServerStatusUpdateResponse::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UserServerStatusUpdateResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::UserServerStatusUpdateResponse*>* (*)()>(&UserServerStatusUpdateResponse::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateResponse::InitForFailure
// Il2CppName: InitForFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::UserServerStatusUpdateResponse* (UserServerStatusUpdateResponse::*)(MasterServer::UserServerStatusUpdateResponse::Result)>(&UserServerStatusUpdateResponse::InitForFailure)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateResponse*), "InitForFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::UserServerStatusUpdateResponse::Result>()});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateResponse::InitForSuccess
// Il2CppName: InitForSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::UserServerStatusUpdateResponse* (UserServerStatusUpdateResponse::*)(System::Net::IPEndPoint*, ::Il2CppString*)>(&UserServerStatusUpdateResponse::InitForSuccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateResponse*), "InitForSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (UserServerStatusUpdateResponse::*)()>(&UserServerStatusUpdateResponse::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UserServerStatusUpdateResponse::*)()>(&UserServerStatusUpdateResponse::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&UserServerStatusUpdateResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&UserServerStatusUpdateResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateResponse::*)()>(&UserServerStatusUpdateResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerStatusUpdateResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateResponse::*)()>(&UserServerStatusUpdateResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerStatusUpdateResponse::*)()>(&UserServerStatusUpdateResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerStatusUpdateResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.UserServerStatusUpdateResponse/Result
#include "MasterServer/UserServerStatusUpdateResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.UserServerStatusUpdateResponse/Result Success
MasterServer::UserServerStatusUpdateResponse::Result MasterServer::UserServerStatusUpdateResponse::Result::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::Result::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::UserServerStatusUpdateResponse::Result>("MasterServer", "UserServerStatusUpdateResponse/Result", "Success"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.UserServerStatusUpdateResponse/Result Success
void MasterServer::UserServerStatusUpdateResponse::Result::_set_Success(MasterServer::UserServerStatusUpdateResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::Result::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "UserServerStatusUpdateResponse/Result", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.UserServerStatusUpdateResponse/Result SecretNotUnique
MasterServer::UserServerStatusUpdateResponse::Result MasterServer::UserServerStatusUpdateResponse::Result::_get_SecretNotUnique() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::Result::_get_SecretNotUnique");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::UserServerStatusUpdateResponse::Result>("MasterServer", "UserServerStatusUpdateResponse/Result", "SecretNotUnique"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.UserServerStatusUpdateResponse/Result SecretNotUnique
void MasterServer::UserServerStatusUpdateResponse::Result::_set_SecretNotUnique(MasterServer::UserServerStatusUpdateResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::Result::_set_SecretNotUnique");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "UserServerStatusUpdateResponse/Result", "SecretNotUnique", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.UserServerStatusUpdateResponse/Result UnknownError
MasterServer::UserServerStatusUpdateResponse::Result MasterServer::UserServerStatusUpdateResponse::Result::_get_UnknownError() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::Result::_get_UnknownError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::UserServerStatusUpdateResponse::Result>("MasterServer", "UserServerStatusUpdateResponse/Result", "UnknownError"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.UserServerStatusUpdateResponse/Result UnknownError
void MasterServer::UserServerStatusUpdateResponse::Result::_set_UnknownError(MasterServer::UserServerStatusUpdateResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerStatusUpdateResponse::Result::_set_UnknownError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "UserServerStatusUpdateResponse/Result", "UnknownError", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserServerHeartbeatRequest
#include "MasterServer/UserServerHeartbeatRequest.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserServerHeartbeatRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::UserServerHeartbeatRequest*>* MasterServer::UserServerHeartbeatRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "UserServerHeartbeatRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::UserServerHeartbeatRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.UserServerHeartbeatRequest.get_userId
::Il2CppString* MasterServer::UserServerHeartbeatRequest::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatRequest::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserServerHeartbeatRequest.set_userId
void MasterServer::UserServerHeartbeatRequest::set_userId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatRequest::set_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.UserServerHeartbeatRequest.get_userName
::Il2CppString* MasterServer::UserServerHeartbeatRequest::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatRequest::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserServerHeartbeatRequest.set_userName
void MasterServer::UserServerHeartbeatRequest::set_userName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatRequest::set_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.UserServerHeartbeatRequest.Init
MasterServer::UserServerHeartbeatRequest* MasterServer::UserServerHeartbeatRequest::Init(::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, int currentPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(currentPlayerCount)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::UserServerHeartbeatRequest*, false>(this, ___internal__method, userId, userName, secret, currentPlayerCount);
}
// Autogenerated method: MasterServer.UserServerHeartbeatRequest.Serialize
void MasterServer::UserServerHeartbeatRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.UserServerHeartbeatRequest.Deserialize
void MasterServer::UserServerHeartbeatRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.UserServerHeartbeatRequest.Release
void MasterServer::UserServerHeartbeatRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UserServerHeartbeatRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::UserServerHeartbeatRequest*>* (*)()>(&UserServerHeartbeatRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatRequest::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UserServerHeartbeatRequest::*)()>(&UserServerHeartbeatRequest::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatRequest::set_userId
// Il2CppName: set_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatRequest::*)(::Il2CppString*)>(&UserServerHeartbeatRequest::set_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), "set_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatRequest::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UserServerHeartbeatRequest::*)()>(&UserServerHeartbeatRequest::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatRequest::set_userName
// Il2CppName: set_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatRequest::*)(::Il2CppString*)>(&UserServerHeartbeatRequest::set_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), "set_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::UserServerHeartbeatRequest* (UserServerHeartbeatRequest::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, int)>(&UserServerHeartbeatRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&UserServerHeartbeatRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&UserServerHeartbeatRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatRequest::*)()>(&UserServerHeartbeatRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatRequest::*)()>(&UserServerHeartbeatRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatRequest::*)()>(&UserServerHeartbeatRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.UserServerHeartbeatResponse
#include "MasterServer/UserServerHeartbeatResponse.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserServerHeartbeatResponse.get_pool
GlobalNamespace::PacketPool_1<MasterServer::UserServerHeartbeatResponse*>* MasterServer::UserServerHeartbeatResponse::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "UserServerHeartbeatResponse", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::UserServerHeartbeatResponse*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.UserServerHeartbeatResponse.Init
MasterServer::UserServerHeartbeatResponse* MasterServer::UserServerHeartbeatResponse::Init(MasterServer::UserServerHeartbeatResponse::Result result) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::UserServerHeartbeatResponse*, false>(this, ___internal__method, result);
}
// Autogenerated method: MasterServer.UserServerHeartbeatResponse.Serialize
void MasterServer::UserServerHeartbeatResponse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.UserServerHeartbeatResponse.Deserialize
void MasterServer::UserServerHeartbeatResponse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.UserServerHeartbeatResponse.Release
void MasterServer::UserServerHeartbeatResponse::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UserServerHeartbeatResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::UserServerHeartbeatResponse*>* (*)()>(&UserServerHeartbeatResponse::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatResponse::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::UserServerHeartbeatResponse* (UserServerHeartbeatResponse::*)(MasterServer::UserServerHeartbeatResponse::Result)>(&UserServerHeartbeatResponse::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::UserServerHeartbeatResponse::Result>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&UserServerHeartbeatResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&UserServerHeartbeatResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatResponse::*)()>(&UserServerHeartbeatResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatResponse::*)()>(&UserServerHeartbeatResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatResponse::*)()>(&UserServerHeartbeatResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServer.UserServerHeartbeatResponse/Result
#include "MasterServer/UserServerHeartbeatResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServer.UserServerHeartbeatResponse/Result Success
MasterServer::UserServerHeartbeatResponse::Result MasterServer::UserServerHeartbeatResponse::Result::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::Result::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::UserServerHeartbeatResponse::Result>("MasterServer", "UserServerHeartbeatResponse/Result", "Success"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.UserServerHeartbeatResponse/Result Success
void MasterServer::UserServerHeartbeatResponse::Result::_set_Success(MasterServer::UserServerHeartbeatResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::Result::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "UserServerHeartbeatResponse/Result", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.UserServerHeartbeatResponse/Result ServerDoesNotExist
MasterServer::UserServerHeartbeatResponse::Result MasterServer::UserServerHeartbeatResponse::Result::_get_ServerDoesNotExist() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::Result::_get_ServerDoesNotExist");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::UserServerHeartbeatResponse::Result>("MasterServer", "UserServerHeartbeatResponse/Result", "ServerDoesNotExist"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.UserServerHeartbeatResponse/Result ServerDoesNotExist
void MasterServer::UserServerHeartbeatResponse::Result::_set_ServerDoesNotExist(MasterServer::UserServerHeartbeatResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::Result::_set_ServerDoesNotExist");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "UserServerHeartbeatResponse/Result", "ServerDoesNotExist", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServer.UserServerHeartbeatResponse/Result UnknownError
MasterServer::UserServerHeartbeatResponse::Result MasterServer::UserServerHeartbeatResponse::Result::_get_UnknownError() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::Result::_get_UnknownError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<MasterServer::UserServerHeartbeatResponse::Result>("MasterServer", "UserServerHeartbeatResponse/Result", "UnknownError"));
}
// Autogenerated static field setter
// Set static field: static public MasterServer.UserServerHeartbeatResponse/Result UnknownError
void MasterServer::UserServerHeartbeatResponse::Result::_set_UnknownError(MasterServer::UserServerHeartbeatResponse::Result value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::Result::_set_UnknownError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("MasterServer", "UserServerHeartbeatResponse/Result", "UnknownError", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.UserServerRemoveRequest
#include "MasterServer/UserServerRemoveRequest.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServer.UserServerRemoveRequest.get_pool
GlobalNamespace::PacketPool_1<MasterServer::UserServerRemoveRequest*>* MasterServer::UserServerRemoveRequest::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerRemoveRequest::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("MasterServer", "UserServerRemoveRequest", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<MasterServer::UserServerRemoveRequest*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MasterServer.UserServerRemoveRequest.get_userId
::Il2CppString* MasterServer::UserServerRemoveRequest::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerRemoveRequest::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserServerRemoveRequest.set_userId
void MasterServer::UserServerRemoveRequest::set_userId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerRemoveRequest::set_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.UserServerRemoveRequest.get_userName
::Il2CppString* MasterServer::UserServerRemoveRequest::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerRemoveRequest::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServer.UserServerRemoveRequest.set_userName
void MasterServer::UserServerRemoveRequest::set_userName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerRemoveRequest::set_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MasterServer.UserServerRemoveRequest.Init
MasterServer::UserServerRemoveRequest* MasterServer::UserServerRemoveRequest::Init(::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerRemoveRequest::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret)})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::UserServerRemoveRequest*, false>(this, ___internal__method, userId, userName, secret);
}
// Autogenerated method: MasterServer.UserServerRemoveRequest.Serialize
void MasterServer::UserServerRemoveRequest::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerRemoveRequest::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: MasterServer.UserServerRemoveRequest.Deserialize
void MasterServer::UserServerRemoveRequest::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerRemoveRequest::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: MasterServer.UserServerRemoveRequest.Release
void MasterServer::UserServerRemoveRequest::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerRemoveRequest::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UserServerRemoveRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::UserServerRemoveRequest*>* (*)()>(&UserServerRemoveRequest::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerRemoveRequest::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UserServerRemoveRequest::*)()>(&UserServerRemoveRequest::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerRemoveRequest::set_userId
// Il2CppName: set_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerRemoveRequest::*)(::Il2CppString*)>(&UserServerRemoveRequest::set_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), "set_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UserServerRemoveRequest::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UserServerRemoveRequest::*)()>(&UserServerRemoveRequest::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerRemoveRequest::set_userName
// Il2CppName: set_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerRemoveRequest::*)(::Il2CppString*)>(&UserServerRemoveRequest::set_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), "set_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UserServerRemoveRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::UserServerRemoveRequest* (UserServerRemoveRequest::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&UserServerRemoveRequest::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UserServerRemoveRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerRemoveRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&UserServerRemoveRequest::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: UserServerRemoveRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerRemoveRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&UserServerRemoveRequest::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: UserServerRemoveRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerRemoveRequest::*)()>(&UserServerRemoveRequest::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerRemoveRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerRemoveRequest::*)()>(&UserServerRemoveRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerRemoveRequest::*)()>(&UserServerRemoveRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerRemoveRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
